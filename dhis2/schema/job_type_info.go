/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the JobTypeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobTypeInfo{}

// JobTypeInfo struct for JobTypeInfo
type JobTypeInfo struct {
	JobParameters  []Property     `json:"jobParameters,omitempty"`
	JobType        JobType        `json:"jobType"`
	Name           *string        `json:"name,omitempty"`
	SchedulingType SchedulingType `json:"schedulingType"`
}

type _JobTypeInfo JobTypeInfo

// NewJobTypeInfo instantiates a new JobTypeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobTypeInfo(jobType JobType, schedulingType SchedulingType) *JobTypeInfo {
	this := JobTypeInfo{}
	this.JobType = jobType
	this.SchedulingType = schedulingType
	return &this
}

// NewJobTypeInfoWithDefaults instantiates a new JobTypeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobTypeInfoWithDefaults() *JobTypeInfo {
	this := JobTypeInfo{}
	return &this
}

// GetJobParameters returns the JobParameters field value if set, zero value otherwise.
func (o *JobTypeInfo) GetJobParameters() []Property {
	if o == nil || IsNil(o.JobParameters) {
		var ret []Property
		return ret
	}
	return o.JobParameters
}

// GetJobParametersOk returns a tuple with the JobParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobTypeInfo) GetJobParametersOk() ([]Property, bool) {
	if o == nil || IsNil(o.JobParameters) {
		return nil, false
	}
	return o.JobParameters, true
}

// HasJobParameters returns a boolean if a field has been set.
func (o *JobTypeInfo) HasJobParameters() bool {
	if o != nil && !IsNil(o.JobParameters) {
		return true
	}

	return false
}

// SetJobParameters gets a reference to the given []Property and assigns it to the JobParameters field.
func (o *JobTypeInfo) SetJobParameters(v []Property) {
	o.JobParameters = v
}

// GetJobType returns the JobType field value
func (o *JobTypeInfo) GetJobType() JobType {
	if o == nil {
		var ret JobType
		return ret
	}

	return o.JobType
}

// GetJobTypeOk returns a tuple with the JobType field value
// and a boolean to check if the value has been set.
func (o *JobTypeInfo) GetJobTypeOk() (*JobType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobType, true
}

// SetJobType sets field value
func (o *JobTypeInfo) SetJobType(v JobType) {
	o.JobType = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *JobTypeInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobTypeInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *JobTypeInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *JobTypeInfo) SetName(v string) {
	o.Name = &v
}

// GetSchedulingType returns the SchedulingType field value
func (o *JobTypeInfo) GetSchedulingType() SchedulingType {
	if o == nil {
		var ret SchedulingType
		return ret
	}

	return o.SchedulingType
}

// GetSchedulingTypeOk returns a tuple with the SchedulingType field value
// and a boolean to check if the value has been set.
func (o *JobTypeInfo) GetSchedulingTypeOk() (*SchedulingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchedulingType, true
}

// SetSchedulingType sets field value
func (o *JobTypeInfo) SetSchedulingType(v SchedulingType) {
	o.SchedulingType = v
}

func (o JobTypeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobTypeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JobParameters) {
		toSerialize["jobParameters"] = o.JobParameters
	}
	toSerialize["jobType"] = o.JobType
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["schedulingType"] = o.SchedulingType
	return toSerialize, nil
}

func (o *JobTypeInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jobType",
		"schedulingType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobTypeInfo := _JobTypeInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobTypeInfo)

	if err != nil {
		return err
	}

	*o = JobTypeInfo(varJobTypeInfo)

	return err
}

type NullableJobTypeInfo struct {
	value *JobTypeInfo
	isSet bool
}

func (v NullableJobTypeInfo) Get() *JobTypeInfo {
	return v.value
}

func (v *NullableJobTypeInfo) Set(val *JobTypeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJobTypeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJobTypeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobTypeInfo(val *JobTypeInfo) *NullableJobTypeInfo {
	return &NullableJobTypeInfo{value: val, isSet: true}
}

func (v NullableJobTypeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobTypeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
