/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the LeaderNodeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LeaderNodeInfo{}

// LeaderNodeInfo struct for LeaderNodeInfo
type LeaderNodeInfo struct {
	CurrentNodeId   *string `json:"currentNodeId,omitempty"`
	CurrentNodeUuid *string `json:"currentNodeUuid,omitempty"`
	Leader          *bool   `json:"leader,omitempty"`
	LeaderNodeId    *string `json:"leaderNodeId,omitempty"`
	LeaderNodeUuid  *string `json:"leaderNodeUuid,omitempty"`
}

// NewLeaderNodeInfo instantiates a new LeaderNodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeaderNodeInfo() *LeaderNodeInfo {
	this := LeaderNodeInfo{}
	return &this
}

// NewLeaderNodeInfoWithDefaults instantiates a new LeaderNodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeaderNodeInfoWithDefaults() *LeaderNodeInfo {
	this := LeaderNodeInfo{}
	return &this
}

// GetCurrentNodeId returns the CurrentNodeId field value if set, zero value otherwise.
func (o *LeaderNodeInfo) GetCurrentNodeId() string {
	if o == nil || IsNil(o.CurrentNodeId) {
		var ret string
		return ret
	}
	return *o.CurrentNodeId
}

// GetCurrentNodeIdOk returns a tuple with the CurrentNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeaderNodeInfo) GetCurrentNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentNodeId) {
		return nil, false
	}
	return o.CurrentNodeId, true
}

// HasCurrentNodeId returns a boolean if a field has been set.
func (o *LeaderNodeInfo) HasCurrentNodeId() bool {
	if o != nil && !IsNil(o.CurrentNodeId) {
		return true
	}

	return false
}

// SetCurrentNodeId gets a reference to the given string and assigns it to the CurrentNodeId field.
func (o *LeaderNodeInfo) SetCurrentNodeId(v string) {
	o.CurrentNodeId = &v
}

// GetCurrentNodeUuid returns the CurrentNodeUuid field value if set, zero value otherwise.
func (o *LeaderNodeInfo) GetCurrentNodeUuid() string {
	if o == nil || IsNil(o.CurrentNodeUuid) {
		var ret string
		return ret
	}
	return *o.CurrentNodeUuid
}

// GetCurrentNodeUuidOk returns a tuple with the CurrentNodeUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeaderNodeInfo) GetCurrentNodeUuidOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentNodeUuid) {
		return nil, false
	}
	return o.CurrentNodeUuid, true
}

// HasCurrentNodeUuid returns a boolean if a field has been set.
func (o *LeaderNodeInfo) HasCurrentNodeUuid() bool {
	if o != nil && !IsNil(o.CurrentNodeUuid) {
		return true
	}

	return false
}

// SetCurrentNodeUuid gets a reference to the given string and assigns it to the CurrentNodeUuid field.
func (o *LeaderNodeInfo) SetCurrentNodeUuid(v string) {
	o.CurrentNodeUuid = &v
}

// GetLeader returns the Leader field value if set, zero value otherwise.
func (o *LeaderNodeInfo) GetLeader() bool {
	if o == nil || IsNil(o.Leader) {
		var ret bool
		return ret
	}
	return *o.Leader
}

// GetLeaderOk returns a tuple with the Leader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeaderNodeInfo) GetLeaderOk() (*bool, bool) {
	if o == nil || IsNil(o.Leader) {
		return nil, false
	}
	return o.Leader, true
}

// HasLeader returns a boolean if a field has been set.
func (o *LeaderNodeInfo) HasLeader() bool {
	if o != nil && !IsNil(o.Leader) {
		return true
	}

	return false
}

// SetLeader gets a reference to the given bool and assigns it to the Leader field.
func (o *LeaderNodeInfo) SetLeader(v bool) {
	o.Leader = &v
}

// GetLeaderNodeId returns the LeaderNodeId field value if set, zero value otherwise.
func (o *LeaderNodeInfo) GetLeaderNodeId() string {
	if o == nil || IsNil(o.LeaderNodeId) {
		var ret string
		return ret
	}
	return *o.LeaderNodeId
}

// GetLeaderNodeIdOk returns a tuple with the LeaderNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeaderNodeInfo) GetLeaderNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.LeaderNodeId) {
		return nil, false
	}
	return o.LeaderNodeId, true
}

// HasLeaderNodeId returns a boolean if a field has been set.
func (o *LeaderNodeInfo) HasLeaderNodeId() bool {
	if o != nil && !IsNil(o.LeaderNodeId) {
		return true
	}

	return false
}

// SetLeaderNodeId gets a reference to the given string and assigns it to the LeaderNodeId field.
func (o *LeaderNodeInfo) SetLeaderNodeId(v string) {
	o.LeaderNodeId = &v
}

// GetLeaderNodeUuid returns the LeaderNodeUuid field value if set, zero value otherwise.
func (o *LeaderNodeInfo) GetLeaderNodeUuid() string {
	if o == nil || IsNil(o.LeaderNodeUuid) {
		var ret string
		return ret
	}
	return *o.LeaderNodeUuid
}

// GetLeaderNodeUuidOk returns a tuple with the LeaderNodeUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeaderNodeInfo) GetLeaderNodeUuidOk() (*string, bool) {
	if o == nil || IsNil(o.LeaderNodeUuid) {
		return nil, false
	}
	return o.LeaderNodeUuid, true
}

// HasLeaderNodeUuid returns a boolean if a field has been set.
func (o *LeaderNodeInfo) HasLeaderNodeUuid() bool {
	if o != nil && !IsNil(o.LeaderNodeUuid) {
		return true
	}

	return false
}

// SetLeaderNodeUuid gets a reference to the given string and assigns it to the LeaderNodeUuid field.
func (o *LeaderNodeInfo) SetLeaderNodeUuid(v string) {
	o.LeaderNodeUuid = &v
}

func (o LeaderNodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LeaderNodeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentNodeId) {
		toSerialize["currentNodeId"] = o.CurrentNodeId
	}
	if !IsNil(o.CurrentNodeUuid) {
		toSerialize["currentNodeUuid"] = o.CurrentNodeUuid
	}
	if !IsNil(o.Leader) {
		toSerialize["leader"] = o.Leader
	}
	if !IsNil(o.LeaderNodeId) {
		toSerialize["leaderNodeId"] = o.LeaderNodeId
	}
	if !IsNil(o.LeaderNodeUuid) {
		toSerialize["leaderNodeUuid"] = o.LeaderNodeUuid
	}
	return toSerialize, nil
}

type NullableLeaderNodeInfo struct {
	value *LeaderNodeInfo
	isSet bool
}

func (v NullableLeaderNodeInfo) Get() *LeaderNodeInfo {
	return v.value
}

func (v *NullableLeaderNodeInfo) Set(val *LeaderNodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLeaderNodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLeaderNodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeaderNodeInfo(val *LeaderNodeInfo) *NullableLeaderNodeInfo {
	return &NullableLeaderNodeInfo{value: val, isSet: true}
}

func (v NullableLeaderNodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeaderNodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
