/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesIndicatorType the model 'PropertyNamesIndicatorType'
type PropertyNamesIndicatorType string

// List of PropertyNames_IndicatorType
const (
	PROPERTYNAMESINDICATORTYPE_ACCESS              PropertyNamesIndicatorType = "access"
	PROPERTYNAMESINDICATORTYPE_ATTRIBUTE_VALUES    PropertyNamesIndicatorType = "attributeValues"
	PROPERTYNAMESINDICATORTYPE_CODE                PropertyNamesIndicatorType = "code"
	PROPERTYNAMESINDICATORTYPE_CREATED             PropertyNamesIndicatorType = "created"
	PROPERTYNAMESINDICATORTYPE_CREATED_BY          PropertyNamesIndicatorType = "createdBy"
	PROPERTYNAMESINDICATORTYPE_DISPLAY_NAME        PropertyNamesIndicatorType = "displayName"
	PROPERTYNAMESINDICATORTYPE_EXTERNAL_ACCESS     PropertyNamesIndicatorType = "externalAccess"
	PROPERTYNAMESINDICATORTYPE_FACTOR              PropertyNamesIndicatorType = "factor"
	PROPERTYNAMESINDICATORTYPE_FAVORITE            PropertyNamesIndicatorType = "favorite"
	PROPERTYNAMESINDICATORTYPE_FAVORITES           PropertyNamesIndicatorType = "favorites"
	PROPERTYNAMESINDICATORTYPE_HREF                PropertyNamesIndicatorType = "href"
	PROPERTYNAMESINDICATORTYPE_ID                  PropertyNamesIndicatorType = "id"
	PROPERTYNAMESINDICATORTYPE_LAST_UPDATED        PropertyNamesIndicatorType = "lastUpdated"
	PROPERTYNAMESINDICATORTYPE_LAST_UPDATED_BY     PropertyNamesIndicatorType = "lastUpdatedBy"
	PROPERTYNAMESINDICATORTYPE_NAME                PropertyNamesIndicatorType = "name"
	PROPERTYNAMESINDICATORTYPE_NUMBER              PropertyNamesIndicatorType = "number"
	PROPERTYNAMESINDICATORTYPE_PUBLIC_ACCESS       PropertyNamesIndicatorType = "publicAccess"
	PROPERTYNAMESINDICATORTYPE_SHARING             PropertyNamesIndicatorType = "sharing"
	PROPERTYNAMESINDICATORTYPE_TRANSLATIONS        PropertyNamesIndicatorType = "translations"
	PROPERTYNAMESINDICATORTYPE_USER                PropertyNamesIndicatorType = "user"
	PROPERTYNAMESINDICATORTYPE_USER_ACCESSES       PropertyNamesIndicatorType = "userAccesses"
	PROPERTYNAMESINDICATORTYPE_USER_GROUP_ACCESSES PropertyNamesIndicatorType = "userGroupAccesses"
)

// All allowed values of PropertyNamesIndicatorType enum
var AllowedPropertyNamesIndicatorTypeEnumValues = []PropertyNamesIndicatorType{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"displayName",
	"externalAccess",
	"factor",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"number",
	"publicAccess",
	"sharing",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesIndicatorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesIndicatorType(value)
	for _, existing := range AllowedPropertyNamesIndicatorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesIndicatorType", value)
}

// NewPropertyNamesIndicatorTypeFromValue returns a pointer to a valid PropertyNamesIndicatorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesIndicatorTypeFromValue(v string) (*PropertyNamesIndicatorType, error) {
	ev := PropertyNamesIndicatorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesIndicatorType: valid values are %v", v, AllowedPropertyNamesIndicatorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesIndicatorType) IsValid() bool {
	for _, existing := range AllowedPropertyNamesIndicatorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_IndicatorType value
func (v PropertyNamesIndicatorType) Ptr() *PropertyNamesIndicatorType {
	return &v
}

type NullablePropertyNamesIndicatorType struct {
	value *PropertyNamesIndicatorType
	isSet bool
}

func (v NullablePropertyNamesIndicatorType) Get() *PropertyNamesIndicatorType {
	return v.value
}

func (v *NullablePropertyNamesIndicatorType) Set(val *PropertyNamesIndicatorType) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesIndicatorType) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesIndicatorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesIndicatorType(val *PropertyNamesIndicatorType) *NullablePropertyNamesIndicatorType {
	return &NullablePropertyNamesIndicatorType{value: val, isSet: true}
}

func (v NullablePropertyNamesIndicatorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesIndicatorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
