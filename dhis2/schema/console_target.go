/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConsoleTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsoleTarget{}

// ConsoleTarget struct for ConsoleTarget
type ConsoleTarget struct {
	ClientId string  `json:"clientId"`
	Type     *string `json:"type,omitempty"`
}

type _ConsoleTarget ConsoleTarget

// NewConsoleTarget instantiates a new ConsoleTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsoleTarget(clientId string) *ConsoleTarget {
	this := ConsoleTarget{}
	this.ClientId = clientId
	return &this
}

// NewConsoleTargetWithDefaults instantiates a new ConsoleTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsoleTargetWithDefaults() *ConsoleTarget {
	this := ConsoleTarget{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *ConsoleTarget) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *ConsoleTarget) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *ConsoleTarget) SetClientId(v string) {
	o.ClientId = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConsoleTarget) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsoleTarget) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConsoleTarget) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConsoleTarget) SetType(v string) {
	o.Type = &v
}

func (o ConsoleTarget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsoleTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clientId"] = o.ClientId
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *ConsoleTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clientId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConsoleTarget := _ConsoleTarget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConsoleTarget)

	if err != nil {
		return err
	}

	*o = ConsoleTarget(varConsoleTarget)

	return err
}

type NullableConsoleTarget struct {
	value *ConsoleTarget
	isSet bool
}

func (v NullableConsoleTarget) Get() *ConsoleTarget {
	return v.value
}

func (v *NullableConsoleTarget) Set(val *ConsoleTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableConsoleTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableConsoleTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsoleTarget(val *ConsoleTarget) *NullableConsoleTarget {
	return &NullableConsoleTarget{value: val, isSet: true}
}

func (v NullableConsoleTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsoleTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
