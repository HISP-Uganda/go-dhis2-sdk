/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// IconTypeFilter the model 'IconTypeFilter'
type IconTypeFilter string

// List of IconTypeFilter
const (
	ICONTYPEFILTER_ALL     IconTypeFilter = "ALL"
	ICONTYPEFILTER_CUSTOM  IconTypeFilter = "CUSTOM"
	ICONTYPEFILTER_DEFAULT IconTypeFilter = "DEFAULT"
)

// All allowed values of IconTypeFilter enum
var AllowedIconTypeFilterEnumValues = []IconTypeFilter{
	"ALL",
	"CUSTOM",
	"DEFAULT",
}

func (v *IconTypeFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IconTypeFilter(value)
	for _, existing := range AllowedIconTypeFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IconTypeFilter", value)
}

// NewIconTypeFilterFromValue returns a pointer to a valid IconTypeFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIconTypeFilterFromValue(v string) (*IconTypeFilter, error) {
	ev := IconTypeFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IconTypeFilter: valid values are %v", v, AllowedIconTypeFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IconTypeFilter) IsValid() bool {
	for _, existing := range AllowedIconTypeFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IconTypeFilter value
func (v IconTypeFilter) Ptr() *IconTypeFilter {
	return &v
}

type NullableIconTypeFilter struct {
	value *IconTypeFilter
	isSet bool
}

func (v NullableIconTypeFilter) Get() *IconTypeFilter {
	return v.value
}

func (v *NullableIconTypeFilter) Set(val *IconTypeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableIconTypeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableIconTypeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIconTypeFilter(val *IconTypeFilter) *NullableIconTypeFilter {
	return &NullableIconTypeFilter{value: val, isSet: true}
}

func (v NullableIconTypeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIconTypeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
