/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ValidationStrategy the model 'ValidationStrategy'
type ValidationStrategy string

// List of ValidationStrategy
const (
	VALIDATIONSTRATEGY_COMPLETE          ValidationStrategy = "ON_COMPLETE"
	VALIDATIONSTRATEGY_UPDATE_AND_INSERT ValidationStrategy = "ON_UPDATE_AND_INSERT"
)

// All allowed values of ValidationStrategy enum
var AllowedValidationStrategyEnumValues = []ValidationStrategy{
	"ON_COMPLETE",
	"ON_UPDATE_AND_INSERT",
}

func (v *ValidationStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValidationStrategy(value)
	for _, existing := range AllowedValidationStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValidationStrategy", value)
}

// NewValidationStrategyFromValue returns a pointer to a valid ValidationStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValidationStrategyFromValue(v string) (*ValidationStrategy, error) {
	ev := ValidationStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValidationStrategy: valid values are %v", v, AllowedValidationStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValidationStrategy) IsValid() bool {
	for _, existing := range AllowedValidationStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValidationStrategy value
func (v ValidationStrategy) Ptr() *ValidationStrategy {
	return &v
}

type NullableValidationStrategy struct {
	value *ValidationStrategy
	isSet bool
}

func (v NullableValidationStrategy) Get() *ValidationStrategy {
	return v.value
}

func (v *NullableValidationStrategy) Set(val *ValidationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationStrategy(val *ValidationStrategy) *NullableValidationStrategy {
	return &NullableValidationStrategy{value: val, isSet: true}
}

func (v NullableValidationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
