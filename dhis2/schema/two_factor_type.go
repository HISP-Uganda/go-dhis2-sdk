/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// TwoFactorType the model 'TwoFactorType'
type TwoFactorType string

// List of TwoFactorType
const (
	TWOFACTORTYPE_NOT_ENABLED     TwoFactorType = "NOT_ENABLED"
	TWOFACTORTYPE_TOTP_ENABLED    TwoFactorType = "TOTP_ENABLED"
	TWOFACTORTYPE_EMAIL_ENABLED   TwoFactorType = "EMAIL_ENABLED"
	TWOFACTORTYPE_ENROLLING_TOTP  TwoFactorType = "ENROLLING_TOTP"
	TWOFACTORTYPE_ENROLLING_EMAIL TwoFactorType = "ENROLLING_EMAIL"
)

// All allowed values of TwoFactorType enum
var AllowedTwoFactorTypeEnumValues = []TwoFactorType{
	"NOT_ENABLED",
	"TOTP_ENABLED",
	"EMAIL_ENABLED",
	"ENROLLING_TOTP",
	"ENROLLING_EMAIL",
}

func (v *TwoFactorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TwoFactorType(value)
	for _, existing := range AllowedTwoFactorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TwoFactorType", value)
}

// NewTwoFactorTypeFromValue returns a pointer to a valid TwoFactorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTwoFactorTypeFromValue(v string) (*TwoFactorType, error) {
	ev := TwoFactorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TwoFactorType: valid values are %v", v, AllowedTwoFactorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TwoFactorType) IsValid() bool {
	for _, existing := range AllowedTwoFactorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TwoFactorType value
func (v TwoFactorType) Ptr() *TwoFactorType {
	return &v
}

type NullableTwoFactorType struct {
	value *TwoFactorType
	isSet bool
}

func (v NullableTwoFactorType) Get() *TwoFactorType {
	return v.value
}

func (v *NullableTwoFactorType) Set(val *TwoFactorType) {
	v.value = val
	v.isSet = true
}

func (v NullableTwoFactorType) IsSet() bool {
	return v.isSet
}

func (v *NullableTwoFactorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTwoFactorType(val *TwoFactorType) *NullableTwoFactorType {
	return &NullableTwoFactorType{value: val, isSet: true}
}

func (v NullableTwoFactorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTwoFactorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
