/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"time"
)

// checks if the ReservedValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservedValue{}

// ReservedValue struct for ReservedValue
type ReservedValue struct {
	Created     *time.Time `json:"created,omitempty"`
	ExpiryDate  *time.Time `json:"expiryDate,omitempty"`
	Key         *string    `json:"key,omitempty"`
	OwnerObject *string    `json:"ownerObject,omitempty"`
	OwnerUid    *string    `json:"ownerUid,omitempty"`
	Value       *string    `json:"value,omitempty"`
}

// NewReservedValue instantiates a new ReservedValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservedValue() *ReservedValue {
	this := ReservedValue{}
	return &this
}

// NewReservedValueWithDefaults instantiates a new ReservedValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservedValueWithDefaults() *ReservedValue {
	this := ReservedValue{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ReservedValue) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservedValue) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ReservedValue) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ReservedValue) SetCreated(v time.Time) {
	o.Created = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *ReservedValue) GetExpiryDate() time.Time {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservedValue) GetExpiryDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *ReservedValue) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given time.Time and assigns it to the ExpiryDate field.
func (o *ReservedValue) SetExpiryDate(v time.Time) {
	o.ExpiryDate = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ReservedValue) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservedValue) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ReservedValue) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ReservedValue) SetKey(v string) {
	o.Key = &v
}

// GetOwnerObject returns the OwnerObject field value if set, zero value otherwise.
func (o *ReservedValue) GetOwnerObject() string {
	if o == nil || IsNil(o.OwnerObject) {
		var ret string
		return ret
	}
	return *o.OwnerObject
}

// GetOwnerObjectOk returns a tuple with the OwnerObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservedValue) GetOwnerObjectOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerObject) {
		return nil, false
	}
	return o.OwnerObject, true
}

// HasOwnerObject returns a boolean if a field has been set.
func (o *ReservedValue) HasOwnerObject() bool {
	if o != nil && !IsNil(o.OwnerObject) {
		return true
	}

	return false
}

// SetOwnerObject gets a reference to the given string and assigns it to the OwnerObject field.
func (o *ReservedValue) SetOwnerObject(v string) {
	o.OwnerObject = &v
}

// GetOwnerUid returns the OwnerUid field value if set, zero value otherwise.
func (o *ReservedValue) GetOwnerUid() string {
	if o == nil || IsNil(o.OwnerUid) {
		var ret string
		return ret
	}
	return *o.OwnerUid
}

// GetOwnerUidOk returns a tuple with the OwnerUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservedValue) GetOwnerUidOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerUid) {
		return nil, false
	}
	return o.OwnerUid, true
}

// HasOwnerUid returns a boolean if a field has been set.
func (o *ReservedValue) HasOwnerUid() bool {
	if o != nil && !IsNil(o.OwnerUid) {
		return true
	}

	return false
}

// SetOwnerUid gets a reference to the given string and assigns it to the OwnerUid field.
func (o *ReservedValue) SetOwnerUid(v string) {
	o.OwnerUid = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ReservedValue) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservedValue) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ReservedValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ReservedValue) SetValue(v string) {
	o.Value = &v
}

func (o ReservedValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservedValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.OwnerObject) {
		toSerialize["ownerObject"] = o.OwnerObject
	}
	if !IsNil(o.OwnerUid) {
		toSerialize["ownerUid"] = o.OwnerUid
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableReservedValue struct {
	value *ReservedValue
	isSet bool
}

func (v NullableReservedValue) Get() *ReservedValue {
	return v.value
}

func (v *NullableReservedValue) Set(val *ReservedValue) {
	v.value = val
	v.isSet = true
}

func (v NullableReservedValue) IsSet() bool {
	return v.isSet
}

func (v *NullableReservedValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservedValue(val *ReservedValue) *NullableReservedValue {
	return &NullableReservedValue{value: val, isSet: true}
}

func (v NullableReservedValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservedValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
