/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesLockException the model 'PropertyNamesLockException'
type PropertyNamesLockException string

// List of PropertyNames_LockException
const (
	PROPERTYNAMESLOCKEXCEPTION_DATA_SET          PropertyNamesLockException = "dataSet"
	PROPERTYNAMESLOCKEXCEPTION_NAME              PropertyNamesLockException = "name"
	PROPERTYNAMESLOCKEXCEPTION_ORGANISATION_UNIT PropertyNamesLockException = "organisationUnit"
	PROPERTYNAMESLOCKEXCEPTION_PERIOD            PropertyNamesLockException = "period"
)

// All allowed values of PropertyNamesLockException enum
var AllowedPropertyNamesLockExceptionEnumValues = []PropertyNamesLockException{
	"dataSet",
	"name",
	"organisationUnit",
	"period",
}

func (v *PropertyNamesLockException) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesLockException(value)
	for _, existing := range AllowedPropertyNamesLockExceptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesLockException", value)
}

// NewPropertyNamesLockExceptionFromValue returns a pointer to a valid PropertyNamesLockException
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesLockExceptionFromValue(v string) (*PropertyNamesLockException, error) {
	ev := PropertyNamesLockException(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesLockException: valid values are %v", v, AllowedPropertyNamesLockExceptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesLockException) IsValid() bool {
	for _, existing := range AllowedPropertyNamesLockExceptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_LockException value
func (v PropertyNamesLockException) Ptr() *PropertyNamesLockException {
	return &v
}

type NullablePropertyNamesLockException struct {
	value *PropertyNamesLockException
	isSet bool
}

func (v NullablePropertyNamesLockException) Get() *PropertyNamesLockException {
	return v.value
}

func (v *NullablePropertyNamesLockException) Set(val *PropertyNamesLockException) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesLockException) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesLockException) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesLockException(val *PropertyNamesLockException) *NullablePropertyNamesLockException {
	return &NullablePropertyNamesLockException{value: val, isSet: true}
}

func (v NullablePropertyNamesLockException) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesLockException) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
