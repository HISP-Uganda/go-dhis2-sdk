/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DataIntegrityReportType the model 'DataIntegrityReportType'
type DataIntegrityReportType string

// List of DataIntegrityReportType
const (
	DATAINTEGRITYREPORTTYPE_REPORT  DataIntegrityReportType = "REPORT"
	DATAINTEGRITYREPORTTYPE_SUMMARY DataIntegrityReportType = "SUMMARY"
	DATAINTEGRITYREPORTTYPE_DETAILS DataIntegrityReportType = "DETAILS"
)

// All allowed values of DataIntegrityReportType enum
var AllowedDataIntegrityReportTypeEnumValues = []DataIntegrityReportType{
	"REPORT",
	"SUMMARY",
	"DETAILS",
}

func (v *DataIntegrityReportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataIntegrityReportType(value)
	for _, existing := range AllowedDataIntegrityReportTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataIntegrityReportType", value)
}

// NewDataIntegrityReportTypeFromValue returns a pointer to a valid DataIntegrityReportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataIntegrityReportTypeFromValue(v string) (*DataIntegrityReportType, error) {
	ev := DataIntegrityReportType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataIntegrityReportType: valid values are %v", v, AllowedDataIntegrityReportTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataIntegrityReportType) IsValid() bool {
	for _, existing := range AllowedDataIntegrityReportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataIntegrityReportType value
func (v DataIntegrityReportType) Ptr() *DataIntegrityReportType {
	return &v
}

type NullableDataIntegrityReportType struct {
	value *DataIntegrityReportType
	isSet bool
}

func (v NullableDataIntegrityReportType) Get() *DataIntegrityReportType {
	return v.value
}

func (v *NullableDataIntegrityReportType) Set(val *DataIntegrityReportType) {
	v.value = val
	v.isSet = true
}

func (v NullableDataIntegrityReportType) IsSet() bool {
	return v.isSet
}

func (v *NullableDataIntegrityReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataIntegrityReportType(val *DataIntegrityReportType) *NullableDataIntegrityReportType {
	return &NullableDataIntegrityReportType{value: val, isSet: true}
}

func (v NullableDataIntegrityReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataIntegrityReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
