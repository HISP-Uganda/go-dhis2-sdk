/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ValidationReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationReport{}

// ValidationReport struct for ValidationReport
type ValidationReport struct {
	ErrorReports   []TrackerImportError `json:"errorReports,omitempty"`
	WarningReports []Warning            `json:"warningReports,omitempty"`
}

// NewValidationReport instantiates a new ValidationReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationReport() *ValidationReport {
	this := ValidationReport{}
	return &this
}

// NewValidationReportWithDefaults instantiates a new ValidationReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationReportWithDefaults() *ValidationReport {
	this := ValidationReport{}
	return &this
}

// GetErrorReports returns the ErrorReports field value if set, zero value otherwise.
func (o *ValidationReport) GetErrorReports() []TrackerImportError {
	if o == nil || IsNil(o.ErrorReports) {
		var ret []TrackerImportError
		return ret
	}
	return o.ErrorReports
}

// GetErrorReportsOk returns a tuple with the ErrorReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationReport) GetErrorReportsOk() ([]TrackerImportError, bool) {
	if o == nil || IsNil(o.ErrorReports) {
		return nil, false
	}
	return o.ErrorReports, true
}

// HasErrorReports returns a boolean if a field has been set.
func (o *ValidationReport) HasErrorReports() bool {
	if o != nil && !IsNil(o.ErrorReports) {
		return true
	}

	return false
}

// SetErrorReports gets a reference to the given []TrackerImportError and assigns it to the ErrorReports field.
func (o *ValidationReport) SetErrorReports(v []TrackerImportError) {
	o.ErrorReports = v
}

// GetWarningReports returns the WarningReports field value if set, zero value otherwise.
func (o *ValidationReport) GetWarningReports() []Warning {
	if o == nil || IsNil(o.WarningReports) {
		var ret []Warning
		return ret
	}
	return o.WarningReports
}

// GetWarningReportsOk returns a tuple with the WarningReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationReport) GetWarningReportsOk() ([]Warning, bool) {
	if o == nil || IsNil(o.WarningReports) {
		return nil, false
	}
	return o.WarningReports, true
}

// HasWarningReports returns a boolean if a field has been set.
func (o *ValidationReport) HasWarningReports() bool {
	if o != nil && !IsNil(o.WarningReports) {
		return true
	}

	return false
}

// SetWarningReports gets a reference to the given []Warning and assigns it to the WarningReports field.
func (o *ValidationReport) SetWarningReports(v []Warning) {
	o.WarningReports = v
}

func (o ValidationReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorReports) {
		toSerialize["errorReports"] = o.ErrorReports
	}
	if !IsNil(o.WarningReports) {
		toSerialize["warningReports"] = o.WarningReports
	}
	return toSerialize, nil
}

type NullableValidationReport struct {
	value *ValidationReport
	isSet bool
}

func (v NullableValidationReport) Get() *ValidationReport {
	return v.value
}

func (v *NullableValidationReport) Set(val *ValidationReport) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationReport) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationReport(val *ValidationReport) *NullableValidationReport {
	return &NullableValidationReport{value: val, isSet: true}
}

func (v NullableValidationReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
