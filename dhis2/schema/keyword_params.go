/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the KeywordParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeywordParams{}

// KeywordParams struct for KeywordParams
type KeywordParams struct {
	Key          *string             `json:"key,omitempty"`
	MetadataItem *MetadataItemParams `json:"metadataItem,omitempty"`
}

// NewKeywordParams instantiates a new KeywordParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeywordParams() *KeywordParams {
	this := KeywordParams{}
	return &this
}

// NewKeywordParamsWithDefaults instantiates a new KeywordParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeywordParamsWithDefaults() *KeywordParams {
	this := KeywordParams{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *KeywordParams) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeywordParams) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *KeywordParams) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *KeywordParams) SetKey(v string) {
	o.Key = &v
}

// GetMetadataItem returns the MetadataItem field value if set, zero value otherwise.
func (o *KeywordParams) GetMetadataItem() MetadataItemParams {
	if o == nil || IsNil(o.MetadataItem) {
		var ret MetadataItemParams
		return ret
	}
	return *o.MetadataItem
}

// GetMetadataItemOk returns a tuple with the MetadataItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeywordParams) GetMetadataItemOk() (*MetadataItemParams, bool) {
	if o == nil || IsNil(o.MetadataItem) {
		return nil, false
	}
	return o.MetadataItem, true
}

// HasMetadataItem returns a boolean if a field has been set.
func (o *KeywordParams) HasMetadataItem() bool {
	if o != nil && !IsNil(o.MetadataItem) {
		return true
	}

	return false
}

// SetMetadataItem gets a reference to the given MetadataItemParams and assigns it to the MetadataItem field.
func (o *KeywordParams) SetMetadataItem(v MetadataItemParams) {
	o.MetadataItem = &v
}

func (o KeywordParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeywordParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.MetadataItem) {
		toSerialize["metadataItem"] = o.MetadataItem
	}
	return toSerialize, nil
}

type NullableKeywordParams struct {
	value *KeywordParams
	isSet bool
}

func (v NullableKeywordParams) Get() *KeywordParams {
	return v.value
}

func (v *NullableKeywordParams) Set(val *KeywordParams) {
	v.value = val
	v.isSet = true
}

func (v NullableKeywordParams) IsSet() bool {
	return v.isSet
}

func (v *NullableKeywordParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeywordParams(val *KeywordParams) *NullableKeywordParams {
	return &NullableKeywordParams{value: val, isSet: true}
}

func (v NullableKeywordParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeywordParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
