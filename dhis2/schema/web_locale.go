/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the WebLocale type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebLocale{}

// WebLocale struct for WebLocale
type WebLocale struct {
	DisplayName *string `json:"displayName,omitempty"`
	Locale      *string `json:"locale,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// NewWebLocale instantiates a new WebLocale object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebLocale() *WebLocale {
	this := WebLocale{}
	return &this
}

// NewWebLocaleWithDefaults instantiates a new WebLocale object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebLocaleWithDefaults() *WebLocale {
	this := WebLocale{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *WebLocale) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebLocale) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *WebLocale) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *WebLocale) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *WebLocale) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebLocale) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *WebLocale) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *WebLocale) SetLocale(v string) {
	o.Locale = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WebLocale) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebLocale) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WebLocale) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WebLocale) SetName(v string) {
	o.Name = &v
}

func (o WebLocale) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebLocale) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableWebLocale struct {
	value *WebLocale
	isSet bool
}

func (v NullableWebLocale) Get() *WebLocale {
	return v.value
}

func (v *NullableWebLocale) Set(val *WebLocale) {
	v.value = val
	v.isSet = true
}

func (v NullableWebLocale) IsSet() bool {
	return v.isSet
}

func (v *NullableWebLocale) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebLocale(val *WebLocale) *NullableWebLocale {
	return &NullableWebLocale{value: val, isSet: true}
}

func (v NullableWebLocale) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebLocale) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
