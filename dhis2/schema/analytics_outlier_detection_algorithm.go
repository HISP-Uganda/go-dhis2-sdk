/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// AnalyticsOutlierDetectionAlgorithm the model 'AnalyticsOutlierDetectionAlgorithm'
type AnalyticsOutlierDetectionAlgorithm string

// List of AnalyticsOutlierDetectionAlgorithm
const (
	ANALYTICSOUTLIERDETECTIONALGORITHM_Z_SCORE          AnalyticsOutlierDetectionAlgorithm = "Z_SCORE"
	ANALYTICSOUTLIERDETECTIONALGORITHM_MIN_MAX          AnalyticsOutlierDetectionAlgorithm = "MIN_MAX"
	ANALYTICSOUTLIERDETECTIONALGORITHM_MODIFIED_Z_SCORE AnalyticsOutlierDetectionAlgorithm = "MODIFIED_Z_SCORE"
)

// All allowed values of AnalyticsOutlierDetectionAlgorithm enum
var AllowedAnalyticsOutlierDetectionAlgorithmEnumValues = []AnalyticsOutlierDetectionAlgorithm{
	"Z_SCORE",
	"MIN_MAX",
	"MODIFIED_Z_SCORE",
}

func (v *AnalyticsOutlierDetectionAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsOutlierDetectionAlgorithm(value)
	for _, existing := range AllowedAnalyticsOutlierDetectionAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsOutlierDetectionAlgorithm", value)
}

// NewAnalyticsOutlierDetectionAlgorithmFromValue returns a pointer to a valid AnalyticsOutlierDetectionAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsOutlierDetectionAlgorithmFromValue(v string) (*AnalyticsOutlierDetectionAlgorithm, error) {
	ev := AnalyticsOutlierDetectionAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsOutlierDetectionAlgorithm: valid values are %v", v, AllowedAnalyticsOutlierDetectionAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsOutlierDetectionAlgorithm) IsValid() bool {
	for _, existing := range AllowedAnalyticsOutlierDetectionAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsOutlierDetectionAlgorithm value
func (v AnalyticsOutlierDetectionAlgorithm) Ptr() *AnalyticsOutlierDetectionAlgorithm {
	return &v
}

type NullableAnalyticsOutlierDetectionAlgorithm struct {
	value *AnalyticsOutlierDetectionAlgorithm
	isSet bool
}

func (v NullableAnalyticsOutlierDetectionAlgorithm) Get() *AnalyticsOutlierDetectionAlgorithm {
	return v.value
}

func (v *NullableAnalyticsOutlierDetectionAlgorithm) Set(val *AnalyticsOutlierDetectionAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsOutlierDetectionAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsOutlierDetectionAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsOutlierDetectionAlgorithm(val *AnalyticsOutlierDetectionAlgorithm) *NullableAnalyticsOutlierDetectionAlgorithm {
	return &NullableAnalyticsOutlierDetectionAlgorithm{value: val, isSet: true}
}

func (v NullableAnalyticsOutlierDetectionAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsOutlierDetectionAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
