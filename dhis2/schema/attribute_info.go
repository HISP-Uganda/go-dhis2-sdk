/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AttributeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeInfo{}

// AttributeInfo struct for AttributeInfo
type AttributeInfo struct {
	Attribute   *string                 `json:"attribute,omitempty"`
	Code        *string                 `json:"code,omitempty"`
	CreatedAt   *AttributeInfoCreatedAt `json:"createdAt,omitempty"`
	DisplayName *string                 `json:"displayName,omitempty"`
	StoredBy    *string                 `json:"storedBy,omitempty"`
	UpdatedAt   *AttributeInfoCreatedAt `json:"updatedAt,omitempty"`
	Value       *string                 `json:"value,omitempty"`
	ValueType   string                  `json:"valueType"`
}

type _AttributeInfo AttributeInfo

// NewAttributeInfo instantiates a new AttributeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeInfo(valueType string) *AttributeInfo {
	this := AttributeInfo{}
	this.ValueType = valueType
	return &this
}

// NewAttributeInfoWithDefaults instantiates a new AttributeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeInfoWithDefaults() *AttributeInfo {
	this := AttributeInfo{}
	return &this
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *AttributeInfo) GetAttribute() string {
	if o == nil || IsNil(o.Attribute) {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeInfo) GetAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *AttributeInfo) HasAttribute() bool {
	if o != nil && !IsNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *AttributeInfo) SetAttribute(v string) {
	o.Attribute = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AttributeInfo) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeInfo) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AttributeInfo) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AttributeInfo) SetCode(v string) {
	o.Code = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AttributeInfo) GetCreatedAt() AttributeInfoCreatedAt {
	if o == nil || IsNil(o.CreatedAt) {
		var ret AttributeInfoCreatedAt
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeInfo) GetCreatedAtOk() (*AttributeInfoCreatedAt, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AttributeInfo) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given AttributeInfoCreatedAt and assigns it to the CreatedAt field.
func (o *AttributeInfo) SetCreatedAt(v AttributeInfoCreatedAt) {
	o.CreatedAt = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AttributeInfo) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeInfo) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AttributeInfo) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *AttributeInfo) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *AttributeInfo) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeInfo) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *AttributeInfo) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *AttributeInfo) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AttributeInfo) GetUpdatedAt() AttributeInfoCreatedAt {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret AttributeInfoCreatedAt
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeInfo) GetUpdatedAtOk() (*AttributeInfoCreatedAt, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AttributeInfo) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given AttributeInfoCreatedAt and assigns it to the UpdatedAt field.
func (o *AttributeInfo) SetUpdatedAt(v AttributeInfoCreatedAt) {
	o.UpdatedAt = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AttributeInfo) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeInfo) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AttributeInfo) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *AttributeInfo) SetValue(v string) {
	o.Value = &v
}

// GetValueType returns the ValueType field value
func (o *AttributeInfo) GetValueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *AttributeInfo) GetValueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *AttributeInfo) SetValueType(v string) {
	o.ValueType = v
}

func (o AttributeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	toSerialize["valueType"] = o.ValueType
	return toSerialize, nil
}

func (o *AttributeInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"valueType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttributeInfo := _AttributeInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttributeInfo)

	if err != nil {
		return err
	}

	*o = AttributeInfo(varAttributeInfo)

	return err
}

type NullableAttributeInfo struct {
	value *AttributeInfo
	isSet bool
}

func (v NullableAttributeInfo) Get() *AttributeInfo {
	return v.value
}

func (v *NullableAttributeInfo) Set(val *AttributeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeInfo(val *AttributeInfo) *NullableAttributeInfo {
	return &NullableAttributeInfo{value: val, isSet: true}
}

func (v NullableAttributeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
