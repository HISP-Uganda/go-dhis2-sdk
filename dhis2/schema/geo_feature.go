/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GeoFeature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoFeature{}

// GeoFeature struct for GeoFeature
type GeoFeature struct {
	Co         *string            `json:"co,omitempty"`
	Code       *string            `json:"code,omitempty"`
	Dimensions *map[string]string `json:"dimensions,omitempty"`
	Hcd        *bool              `json:"hcd,omitempty"`
	Hcu        *bool              `json:"hcu,omitempty"`
	Id         *string            `json:"id,omitempty"`
	Le         int32              `json:"le"`
	Na         *string            `json:"na,omitempty"`
	Pg         *string            `json:"pg,omitempty"`
	Pi         *string            `json:"pi,omitempty"`
	Pn         *string            `json:"pn,omitempty"`
	Ty         int32              `json:"ty"`
}

type _GeoFeature GeoFeature

// NewGeoFeature instantiates a new GeoFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoFeature(le int32, ty int32) *GeoFeature {
	this := GeoFeature{}
	this.Le = le
	this.Ty = ty
	return &this
}

// NewGeoFeatureWithDefaults instantiates a new GeoFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoFeatureWithDefaults() *GeoFeature {
	this := GeoFeature{}
	return &this
}

// GetCo returns the Co field value if set, zero value otherwise.
func (o *GeoFeature) GetCo() string {
	if o == nil || IsNil(o.Co) {
		var ret string
		return ret
	}
	return *o.Co
}

// GetCoOk returns a tuple with the Co field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetCoOk() (*string, bool) {
	if o == nil || IsNil(o.Co) {
		return nil, false
	}
	return o.Co, true
}

// HasCo returns a boolean if a field has been set.
func (o *GeoFeature) HasCo() bool {
	if o != nil && !IsNil(o.Co) {
		return true
	}

	return false
}

// SetCo gets a reference to the given string and assigns it to the Co field.
func (o *GeoFeature) SetCo(v string) {
	o.Co = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *GeoFeature) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *GeoFeature) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *GeoFeature) SetCode(v string) {
	o.Code = &v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *GeoFeature) GetDimensions() map[string]string {
	if o == nil || IsNil(o.Dimensions) {
		var ret map[string]string
		return ret
	}
	return *o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetDimensionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Dimensions) {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *GeoFeature) HasDimensions() bool {
	if o != nil && !IsNil(o.Dimensions) {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given map[string]string and assigns it to the Dimensions field.
func (o *GeoFeature) SetDimensions(v map[string]string) {
	o.Dimensions = &v
}

// GetHcd returns the Hcd field value if set, zero value otherwise.
func (o *GeoFeature) GetHcd() bool {
	if o == nil || IsNil(o.Hcd) {
		var ret bool
		return ret
	}
	return *o.Hcd
}

// GetHcdOk returns a tuple with the Hcd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetHcdOk() (*bool, bool) {
	if o == nil || IsNil(o.Hcd) {
		return nil, false
	}
	return o.Hcd, true
}

// HasHcd returns a boolean if a field has been set.
func (o *GeoFeature) HasHcd() bool {
	if o != nil && !IsNil(o.Hcd) {
		return true
	}

	return false
}

// SetHcd gets a reference to the given bool and assigns it to the Hcd field.
func (o *GeoFeature) SetHcd(v bool) {
	o.Hcd = &v
}

// GetHcu returns the Hcu field value if set, zero value otherwise.
func (o *GeoFeature) GetHcu() bool {
	if o == nil || IsNil(o.Hcu) {
		var ret bool
		return ret
	}
	return *o.Hcu
}

// GetHcuOk returns a tuple with the Hcu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetHcuOk() (*bool, bool) {
	if o == nil || IsNil(o.Hcu) {
		return nil, false
	}
	return o.Hcu, true
}

// HasHcu returns a boolean if a field has been set.
func (o *GeoFeature) HasHcu() bool {
	if o != nil && !IsNil(o.Hcu) {
		return true
	}

	return false
}

// SetHcu gets a reference to the given bool and assigns it to the Hcu field.
func (o *GeoFeature) SetHcu(v bool) {
	o.Hcu = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GeoFeature) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GeoFeature) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GeoFeature) SetId(v string) {
	o.Id = &v
}

// GetLe returns the Le field value
func (o *GeoFeature) GetLe() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Le
}

// GetLeOk returns a tuple with the Le field value
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetLeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Le, true
}

// SetLe sets field value
func (o *GeoFeature) SetLe(v int32) {
	o.Le = v
}

// GetNa returns the Na field value if set, zero value otherwise.
func (o *GeoFeature) GetNa() string {
	if o == nil || IsNil(o.Na) {
		var ret string
		return ret
	}
	return *o.Na
}

// GetNaOk returns a tuple with the Na field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetNaOk() (*string, bool) {
	if o == nil || IsNil(o.Na) {
		return nil, false
	}
	return o.Na, true
}

// HasNa returns a boolean if a field has been set.
func (o *GeoFeature) HasNa() bool {
	if o != nil && !IsNil(o.Na) {
		return true
	}

	return false
}

// SetNa gets a reference to the given string and assigns it to the Na field.
func (o *GeoFeature) SetNa(v string) {
	o.Na = &v
}

// GetPg returns the Pg field value if set, zero value otherwise.
func (o *GeoFeature) GetPg() string {
	if o == nil || IsNil(o.Pg) {
		var ret string
		return ret
	}
	return *o.Pg
}

// GetPgOk returns a tuple with the Pg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetPgOk() (*string, bool) {
	if o == nil || IsNil(o.Pg) {
		return nil, false
	}
	return o.Pg, true
}

// HasPg returns a boolean if a field has been set.
func (o *GeoFeature) HasPg() bool {
	if o != nil && !IsNil(o.Pg) {
		return true
	}

	return false
}

// SetPg gets a reference to the given string and assigns it to the Pg field.
func (o *GeoFeature) SetPg(v string) {
	o.Pg = &v
}

// GetPi returns the Pi field value if set, zero value otherwise.
func (o *GeoFeature) GetPi() string {
	if o == nil || IsNil(o.Pi) {
		var ret string
		return ret
	}
	return *o.Pi
}

// GetPiOk returns a tuple with the Pi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetPiOk() (*string, bool) {
	if o == nil || IsNil(o.Pi) {
		return nil, false
	}
	return o.Pi, true
}

// HasPi returns a boolean if a field has been set.
func (o *GeoFeature) HasPi() bool {
	if o != nil && !IsNil(o.Pi) {
		return true
	}

	return false
}

// SetPi gets a reference to the given string and assigns it to the Pi field.
func (o *GeoFeature) SetPi(v string) {
	o.Pi = &v
}

// GetPn returns the Pn field value if set, zero value otherwise.
func (o *GeoFeature) GetPn() string {
	if o == nil || IsNil(o.Pn) {
		var ret string
		return ret
	}
	return *o.Pn
}

// GetPnOk returns a tuple with the Pn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetPnOk() (*string, bool) {
	if o == nil || IsNil(o.Pn) {
		return nil, false
	}
	return o.Pn, true
}

// HasPn returns a boolean if a field has been set.
func (o *GeoFeature) HasPn() bool {
	if o != nil && !IsNil(o.Pn) {
		return true
	}

	return false
}

// SetPn gets a reference to the given string and assigns it to the Pn field.
func (o *GeoFeature) SetPn(v string) {
	o.Pn = &v
}

// GetTy returns the Ty field value
func (o *GeoFeature) GetTy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ty
}

// GetTyOk returns a tuple with the Ty field value
// and a boolean to check if the value has been set.
func (o *GeoFeature) GetTyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ty, true
}

// SetTy sets field value
func (o *GeoFeature) SetTy(v int32) {
	o.Ty = v
}

func (o GeoFeature) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoFeature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Co) {
		toSerialize["co"] = o.Co
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Dimensions) {
		toSerialize["dimensions"] = o.Dimensions
	}
	if !IsNil(o.Hcd) {
		toSerialize["hcd"] = o.Hcd
	}
	if !IsNil(o.Hcu) {
		toSerialize["hcu"] = o.Hcu
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["le"] = o.Le
	if !IsNil(o.Na) {
		toSerialize["na"] = o.Na
	}
	if !IsNil(o.Pg) {
		toSerialize["pg"] = o.Pg
	}
	if !IsNil(o.Pi) {
		toSerialize["pi"] = o.Pi
	}
	if !IsNil(o.Pn) {
		toSerialize["pn"] = o.Pn
	}
	toSerialize["ty"] = o.Ty
	return toSerialize, nil
}

func (o *GeoFeature) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"le",
		"ty",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeoFeature := _GeoFeature{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGeoFeature)

	if err != nil {
		return err
	}

	*o = GeoFeature(varGeoFeature)

	return err
}

type NullableGeoFeature struct {
	value *GeoFeature
	isSet bool
}

func (v NullableGeoFeature) Get() *GeoFeature {
	return v.value
}

func (v *NullableGeoFeature) Set(val *GeoFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoFeature(val *GeoFeature) *NullableGeoFeature {
	return &NullableGeoFeature{value: val, isSet: true}
}

func (v NullableGeoFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
