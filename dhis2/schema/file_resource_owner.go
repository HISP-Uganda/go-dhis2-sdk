/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FileResourceOwner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileResourceOwner{}

// FileResourceOwner struct for FileResourceOwner
type FileResourceOwner struct {
	Co     *string            `json:"co,omitempty"`
	De     *string            `json:"de,omitempty"`
	Domain FileResourceDomain `json:"domain"`
	Id     *string            `json:"id,omitempty"`
	Ou     *string            `json:"ou,omitempty"`
	Pe     *string            `json:"pe,omitempty"`
}

type _FileResourceOwner FileResourceOwner

// NewFileResourceOwner instantiates a new FileResourceOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileResourceOwner(domain FileResourceDomain) *FileResourceOwner {
	this := FileResourceOwner{}
	this.Domain = domain
	return &this
}

// NewFileResourceOwnerWithDefaults instantiates a new FileResourceOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileResourceOwnerWithDefaults() *FileResourceOwner {
	this := FileResourceOwner{}
	return &this
}

// GetCo returns the Co field value if set, zero value otherwise.
func (o *FileResourceOwner) GetCo() string {
	if o == nil || IsNil(o.Co) {
		var ret string
		return ret
	}
	return *o.Co
}

// GetCoOk returns a tuple with the Co field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileResourceOwner) GetCoOk() (*string, bool) {
	if o == nil || IsNil(o.Co) {
		return nil, false
	}
	return o.Co, true
}

// HasCo returns a boolean if a field has been set.
func (o *FileResourceOwner) HasCo() bool {
	if o != nil && !IsNil(o.Co) {
		return true
	}

	return false
}

// SetCo gets a reference to the given string and assigns it to the Co field.
func (o *FileResourceOwner) SetCo(v string) {
	o.Co = &v
}

// GetDe returns the De field value if set, zero value otherwise.
func (o *FileResourceOwner) GetDe() string {
	if o == nil || IsNil(o.De) {
		var ret string
		return ret
	}
	return *o.De
}

// GetDeOk returns a tuple with the De field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileResourceOwner) GetDeOk() (*string, bool) {
	if o == nil || IsNil(o.De) {
		return nil, false
	}
	return o.De, true
}

// HasDe returns a boolean if a field has been set.
func (o *FileResourceOwner) HasDe() bool {
	if o != nil && !IsNil(o.De) {
		return true
	}

	return false
}

// SetDe gets a reference to the given string and assigns it to the De field.
func (o *FileResourceOwner) SetDe(v string) {
	o.De = &v
}

// GetDomain returns the Domain field value
func (o *FileResourceOwner) GetDomain() FileResourceDomain {
	if o == nil {
		var ret FileResourceDomain
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *FileResourceOwner) GetDomainOk() (*FileResourceDomain, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *FileResourceOwner) SetDomain(v FileResourceDomain) {
	o.Domain = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileResourceOwner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileResourceOwner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileResourceOwner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FileResourceOwner) SetId(v string) {
	o.Id = &v
}

// GetOu returns the Ou field value if set, zero value otherwise.
func (o *FileResourceOwner) GetOu() string {
	if o == nil || IsNil(o.Ou) {
		var ret string
		return ret
	}
	return *o.Ou
}

// GetOuOk returns a tuple with the Ou field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileResourceOwner) GetOuOk() (*string, bool) {
	if o == nil || IsNil(o.Ou) {
		return nil, false
	}
	return o.Ou, true
}

// HasOu returns a boolean if a field has been set.
func (o *FileResourceOwner) HasOu() bool {
	if o != nil && !IsNil(o.Ou) {
		return true
	}

	return false
}

// SetOu gets a reference to the given string and assigns it to the Ou field.
func (o *FileResourceOwner) SetOu(v string) {
	o.Ou = &v
}

// GetPe returns the Pe field value if set, zero value otherwise.
func (o *FileResourceOwner) GetPe() string {
	if o == nil || IsNil(o.Pe) {
		var ret string
		return ret
	}
	return *o.Pe
}

// GetPeOk returns a tuple with the Pe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileResourceOwner) GetPeOk() (*string, bool) {
	if o == nil || IsNil(o.Pe) {
		return nil, false
	}
	return o.Pe, true
}

// HasPe returns a boolean if a field has been set.
func (o *FileResourceOwner) HasPe() bool {
	if o != nil && !IsNil(o.Pe) {
		return true
	}

	return false
}

// SetPe gets a reference to the given string and assigns it to the Pe field.
func (o *FileResourceOwner) SetPe(v string) {
	o.Pe = &v
}

func (o FileResourceOwner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileResourceOwner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Co) {
		toSerialize["co"] = o.Co
	}
	if !IsNil(o.De) {
		toSerialize["de"] = o.De
	}
	toSerialize["domain"] = o.Domain
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ou) {
		toSerialize["ou"] = o.Ou
	}
	if !IsNil(o.Pe) {
		toSerialize["pe"] = o.Pe
	}
	return toSerialize, nil
}

func (o *FileResourceOwner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileResourceOwner := _FileResourceOwner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileResourceOwner)

	if err != nil {
		return err
	}

	*o = FileResourceOwner(varFileResourceOwner)

	return err
}

type NullableFileResourceOwner struct {
	value *FileResourceOwner
	isSet bool
}

func (v NullableFileResourceOwner) Get() *FileResourceOwner {
	return v.value
}

func (v *NullableFileResourceOwner) Set(val *FileResourceOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableFileResourceOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableFileResourceOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileResourceOwner(val *FileResourceOwner) *NullableFileResourceOwner {
	return &NullableFileResourceOwner{value: val, isSet: true}
}

func (v NullableFileResourceOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileResourceOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
