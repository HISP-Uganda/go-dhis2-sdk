/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesOutboundSms the model 'PropertyNamesOutboundSms'
type PropertyNamesOutboundSms string

// List of PropertyNames_OutboundSms
const (
	PROPERTYNAMESOUTBOUNDSMS_ACCESS              PropertyNamesOutboundSms = "access"
	PROPERTYNAMESOUTBOUNDSMS_ATTRIBUTE_VALUES    PropertyNamesOutboundSms = "attributeValues"
	PROPERTYNAMESOUTBOUNDSMS_CODE                PropertyNamesOutboundSms = "code"
	PROPERTYNAMESOUTBOUNDSMS_CREATED             PropertyNamesOutboundSms = "created"
	PROPERTYNAMESOUTBOUNDSMS_CREATED_BY          PropertyNamesOutboundSms = "createdBy"
	PROPERTYNAMESOUTBOUNDSMS_DATE                PropertyNamesOutboundSms = "date"
	PROPERTYNAMESOUTBOUNDSMS_DISPLAY_NAME        PropertyNamesOutboundSms = "displayName"
	PROPERTYNAMESOUTBOUNDSMS_EXTERNAL_ACCESS     PropertyNamesOutboundSms = "externalAccess"
	PROPERTYNAMESOUTBOUNDSMS_FAVORITE            PropertyNamesOutboundSms = "favorite"
	PROPERTYNAMESOUTBOUNDSMS_FAVORITES           PropertyNamesOutboundSms = "favorites"
	PROPERTYNAMESOUTBOUNDSMS_HREF                PropertyNamesOutboundSms = "href"
	PROPERTYNAMESOUTBOUNDSMS_ID                  PropertyNamesOutboundSms = "id"
	PROPERTYNAMESOUTBOUNDSMS_LAST_UPDATED        PropertyNamesOutboundSms = "lastUpdated"
	PROPERTYNAMESOUTBOUNDSMS_LAST_UPDATED_BY     PropertyNamesOutboundSms = "lastUpdatedBy"
	PROPERTYNAMESOUTBOUNDSMS_MESSAGE             PropertyNamesOutboundSms = "message"
	PROPERTYNAMESOUTBOUNDSMS_NAME                PropertyNamesOutboundSms = "name"
	PROPERTYNAMESOUTBOUNDSMS_PUBLIC_ACCESS       PropertyNamesOutboundSms = "publicAccess"
	PROPERTYNAMESOUTBOUNDSMS_RECIPIENTS          PropertyNamesOutboundSms = "recipients"
	PROPERTYNAMESOUTBOUNDSMS_SENDER              PropertyNamesOutboundSms = "sender"
	PROPERTYNAMESOUTBOUNDSMS_SHARING             PropertyNamesOutboundSms = "sharing"
	PROPERTYNAMESOUTBOUNDSMS_STATUS              PropertyNamesOutboundSms = "status"
	PROPERTYNAMESOUTBOUNDSMS_SUBJECT             PropertyNamesOutboundSms = "subject"
	PROPERTYNAMESOUTBOUNDSMS_TRANSLATIONS        PropertyNamesOutboundSms = "translations"
	PROPERTYNAMESOUTBOUNDSMS_USER                PropertyNamesOutboundSms = "user"
	PROPERTYNAMESOUTBOUNDSMS_USER_ACCESSES       PropertyNamesOutboundSms = "userAccesses"
	PROPERTYNAMESOUTBOUNDSMS_USER_GROUP_ACCESSES PropertyNamesOutboundSms = "userGroupAccesses"
)

// All allowed values of PropertyNamesOutboundSms enum
var AllowedPropertyNamesOutboundSmsEnumValues = []PropertyNamesOutboundSms{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"date",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"message",
	"name",
	"publicAccess",
	"recipients",
	"sender",
	"sharing",
	"status",
	"subject",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesOutboundSms) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesOutboundSms(value)
	for _, existing := range AllowedPropertyNamesOutboundSmsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesOutboundSms", value)
}

// NewPropertyNamesOutboundSmsFromValue returns a pointer to a valid PropertyNamesOutboundSms
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesOutboundSmsFromValue(v string) (*PropertyNamesOutboundSms, error) {
	ev := PropertyNamesOutboundSms(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesOutboundSms: valid values are %v", v, AllowedPropertyNamesOutboundSmsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesOutboundSms) IsValid() bool {
	for _, existing := range AllowedPropertyNamesOutboundSmsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_OutboundSms value
func (v PropertyNamesOutboundSms) Ptr() *PropertyNamesOutboundSms {
	return &v
}

type NullablePropertyNamesOutboundSms struct {
	value *PropertyNamesOutboundSms
	isSet bool
}

func (v NullablePropertyNamesOutboundSms) Get() *PropertyNamesOutboundSms {
	return v.value
}

func (v *NullablePropertyNamesOutboundSms) Set(val *PropertyNamesOutboundSms) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesOutboundSms) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesOutboundSms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesOutboundSms(val *PropertyNamesOutboundSms) *NullablePropertyNamesOutboundSms {
	return &NullablePropertyNamesOutboundSms{value: val, isSet: true}
}

func (v NullablePropertyNamesOutboundSms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesOutboundSms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
