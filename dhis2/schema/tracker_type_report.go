/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TrackerTypeReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackerTypeReport{}

// TrackerTypeReport struct for TrackerTypeReport
type TrackerTypeReport struct {
	ObjectReports []Entity      `json:"objectReports,omitempty"`
	Stats         *TrackerStats `json:"stats,omitempty"`
	TrackerType   TrackerType   `json:"trackerType"`
}

type _TrackerTypeReport TrackerTypeReport

// NewTrackerTypeReport instantiates a new TrackerTypeReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackerTypeReport(trackerType TrackerType) *TrackerTypeReport {
	this := TrackerTypeReport{}
	this.TrackerType = trackerType
	return &this
}

// NewTrackerTypeReportWithDefaults instantiates a new TrackerTypeReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackerTypeReportWithDefaults() *TrackerTypeReport {
	this := TrackerTypeReport{}
	return &this
}

// GetObjectReports returns the ObjectReports field value if set, zero value otherwise.
func (o *TrackerTypeReport) GetObjectReports() []Entity {
	if o == nil || IsNil(o.ObjectReports) {
		var ret []Entity
		return ret
	}
	return o.ObjectReports
}

// GetObjectReportsOk returns a tuple with the ObjectReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerTypeReport) GetObjectReportsOk() ([]Entity, bool) {
	if o == nil || IsNil(o.ObjectReports) {
		return nil, false
	}
	return o.ObjectReports, true
}

// HasObjectReports returns a boolean if a field has been set.
func (o *TrackerTypeReport) HasObjectReports() bool {
	if o != nil && !IsNil(o.ObjectReports) {
		return true
	}

	return false
}

// SetObjectReports gets a reference to the given []Entity and assigns it to the ObjectReports field.
func (o *TrackerTypeReport) SetObjectReports(v []Entity) {
	o.ObjectReports = v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *TrackerTypeReport) GetStats() TrackerStats {
	if o == nil || IsNil(o.Stats) {
		var ret TrackerStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerTypeReport) GetStatsOk() (*TrackerStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *TrackerTypeReport) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given TrackerStats and assigns it to the Stats field.
func (o *TrackerTypeReport) SetStats(v TrackerStats) {
	o.Stats = &v
}

// GetTrackerType returns the TrackerType field value
func (o *TrackerTypeReport) GetTrackerType() TrackerType {
	if o == nil {
		var ret TrackerType
		return ret
	}

	return o.TrackerType
}

// GetTrackerTypeOk returns a tuple with the TrackerType field value
// and a boolean to check if the value has been set.
func (o *TrackerTypeReport) GetTrackerTypeOk() (*TrackerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackerType, true
}

// SetTrackerType sets field value
func (o *TrackerTypeReport) SetTrackerType(v TrackerType) {
	o.TrackerType = v
}

func (o TrackerTypeReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackerTypeReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectReports) {
		toSerialize["objectReports"] = o.ObjectReports
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	toSerialize["trackerType"] = o.TrackerType
	return toSerialize, nil
}

func (o *TrackerTypeReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trackerType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackerTypeReport := _TrackerTypeReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackerTypeReport)

	if err != nil {
		return err
	}

	*o = TrackerTypeReport(varTrackerTypeReport)

	return err
}

type NullableTrackerTypeReport struct {
	value *TrackerTypeReport
	isSet bool
}

func (v NullableTrackerTypeReport) Get() *TrackerTypeReport {
	return v.value
}

func (v *NullableTrackerTypeReport) Set(val *TrackerTypeReport) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerTypeReport) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerTypeReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerTypeReport(val *TrackerTypeReport) *NullableTrackerTypeReport {
	return &NullableTrackerTypeReport{value: val, isSet: true}
}

func (v NullableTrackerTypeReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerTypeReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
