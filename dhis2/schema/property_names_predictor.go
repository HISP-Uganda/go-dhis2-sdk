/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesPredictor the model 'PropertyNamesPredictor'
type PropertyNamesPredictor string

// List of PropertyNames_Predictor
const (
	PROPERTYNAMESPREDICTOR_ACCESS                        PropertyNamesPredictor = "access"
	PROPERTYNAMESPREDICTOR_ANNUAL_SAMPLE_COUNT           PropertyNamesPredictor = "annualSampleCount"
	PROPERTYNAMESPREDICTOR_ATTRIBUTE_VALUES              PropertyNamesPredictor = "attributeValues"
	PROPERTYNAMESPREDICTOR_CODE                          PropertyNamesPredictor = "code"
	PROPERTYNAMESPREDICTOR_CREATED                       PropertyNamesPredictor = "created"
	PROPERTYNAMESPREDICTOR_CREATED_BY                    PropertyNamesPredictor = "createdBy"
	PROPERTYNAMESPREDICTOR_DESCRIPTION                   PropertyNamesPredictor = "description"
	PROPERTYNAMESPREDICTOR_DISPLAY_DESCRIPTION           PropertyNamesPredictor = "displayDescription"
	PROPERTYNAMESPREDICTOR_DISPLAY_FORM_NAME             PropertyNamesPredictor = "displayFormName"
	PROPERTYNAMESPREDICTOR_DISPLAY_NAME                  PropertyNamesPredictor = "displayName"
	PROPERTYNAMESPREDICTOR_DISPLAY_SHORT_NAME            PropertyNamesPredictor = "displayShortName"
	PROPERTYNAMESPREDICTOR_EXTERNAL_ACCESS               PropertyNamesPredictor = "externalAccess"
	PROPERTYNAMESPREDICTOR_FAVORITE                      PropertyNamesPredictor = "favorite"
	PROPERTYNAMESPREDICTOR_FAVORITES                     PropertyNamesPredictor = "favorites"
	PROPERTYNAMESPREDICTOR_FORM_NAME                     PropertyNamesPredictor = "formName"
	PROPERTYNAMESPREDICTOR_GENERATOR                     PropertyNamesPredictor = "generator"
	PROPERTYNAMESPREDICTOR_HREF                          PropertyNamesPredictor = "href"
	PROPERTYNAMESPREDICTOR_ID                            PropertyNamesPredictor = "id"
	PROPERTYNAMESPREDICTOR_LAST_UPDATED                  PropertyNamesPredictor = "lastUpdated"
	PROPERTYNAMESPREDICTOR_LAST_UPDATED_BY               PropertyNamesPredictor = "lastUpdatedBy"
	PROPERTYNAMESPREDICTOR_NAME                          PropertyNamesPredictor = "name"
	PROPERTYNAMESPREDICTOR_ORGANISATION_UNIT_DESCENDANTS PropertyNamesPredictor = "organisationUnitDescendants"
	PROPERTYNAMESPREDICTOR_ORGANISATION_UNIT_LEVELS      PropertyNamesPredictor = "organisationUnitLevels"
	PROPERTYNAMESPREDICTOR_OUTPUT                        PropertyNamesPredictor = "output"
	PROPERTYNAMESPREDICTOR_OUTPUT_COMBO                  PropertyNamesPredictor = "outputCombo"
	PROPERTYNAMESPREDICTOR_PERIOD_TYPE                   PropertyNamesPredictor = "periodType"
	PROPERTYNAMESPREDICTOR_PREDICTOR_GROUPS              PropertyNamesPredictor = "predictorGroups"
	PROPERTYNAMESPREDICTOR_PUBLIC_ACCESS                 PropertyNamesPredictor = "publicAccess"
	PROPERTYNAMESPREDICTOR_SAMPLE_SKIP_TEST              PropertyNamesPredictor = "sampleSkipTest"
	PROPERTYNAMESPREDICTOR_SEQUENTIAL_SAMPLE_COUNT       PropertyNamesPredictor = "sequentialSampleCount"
	PROPERTYNAMESPREDICTOR_SEQUENTIAL_SKIP_COUNT         PropertyNamesPredictor = "sequentialSkipCount"
	PROPERTYNAMESPREDICTOR_SHARING                       PropertyNamesPredictor = "sharing"
	PROPERTYNAMESPREDICTOR_SHORT_NAME                    PropertyNamesPredictor = "shortName"
	PROPERTYNAMESPREDICTOR_TRANSLATIONS                  PropertyNamesPredictor = "translations"
	PROPERTYNAMESPREDICTOR_USER                          PropertyNamesPredictor = "user"
	PROPERTYNAMESPREDICTOR_USER_ACCESSES                 PropertyNamesPredictor = "userAccesses"
	PROPERTYNAMESPREDICTOR_USER_GROUP_ACCESSES           PropertyNamesPredictor = "userGroupAccesses"
)

// All allowed values of PropertyNamesPredictor enum
var AllowedPropertyNamesPredictorEnumValues = []PropertyNamesPredictor{
	"access",
	"annualSampleCount",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"externalAccess",
	"favorite",
	"favorites",
	"formName",
	"generator",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"organisationUnitDescendants",
	"organisationUnitLevels",
	"output",
	"outputCombo",
	"periodType",
	"predictorGroups",
	"publicAccess",
	"sampleSkipTest",
	"sequentialSampleCount",
	"sequentialSkipCount",
	"sharing",
	"shortName",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesPredictor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesPredictor(value)
	for _, existing := range AllowedPropertyNamesPredictorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesPredictor", value)
}

// NewPropertyNamesPredictorFromValue returns a pointer to a valid PropertyNamesPredictor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesPredictorFromValue(v string) (*PropertyNamesPredictor, error) {
	ev := PropertyNamesPredictor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesPredictor: valid values are %v", v, AllowedPropertyNamesPredictorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesPredictor) IsValid() bool {
	for _, existing := range AllowedPropertyNamesPredictorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Predictor value
func (v PropertyNamesPredictor) Ptr() *PropertyNamesPredictor {
	return &v
}

type NullablePropertyNamesPredictor struct {
	value *PropertyNamesPredictor
	isSet bool
}

func (v NullablePropertyNamesPredictor) Get() *PropertyNamesPredictor {
	return v.value
}

func (v *NullablePropertyNamesPredictor) Set(val *PropertyNamesPredictor) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesPredictor) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesPredictor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesPredictor(val *PropertyNamesPredictor) *NullablePropertyNamesPredictor {
	return &NullablePropertyNamesPredictor{value: val, isSet: true}
}

func (v NullablePropertyNamesPredictor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesPredictor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
