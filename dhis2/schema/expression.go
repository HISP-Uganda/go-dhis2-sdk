/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Expression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Expression{}

// Expression struct for Expression
type Expression struct {
	Description          *string              `json:"description,omitempty"`
	DisplayDescription   *string              `json:"displayDescription,omitempty"`
	Expression           *string              `json:"expression,omitempty"`
	MissingValueStrategy MissingValueStrategy `json:"missingValueStrategy"`
	SlidingWindow        *bool                `json:"slidingWindow,omitempty"`
	Translations         []Translation        `json:"translations,omitempty"`
}

type _Expression Expression

// NewExpression instantiates a new Expression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpression(missingValueStrategy MissingValueStrategy) *Expression {
	this := Expression{}
	this.MissingValueStrategy = missingValueStrategy
	return &this
}

// NewExpressionWithDefaults instantiates a new Expression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpressionWithDefaults() *Expression {
	this := Expression{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Expression) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expression) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Expression) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Expression) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *Expression) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expression) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *Expression) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *Expression) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *Expression) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expression) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *Expression) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *Expression) SetExpression(v string) {
	o.Expression = &v
}

// GetMissingValueStrategy returns the MissingValueStrategy field value
func (o *Expression) GetMissingValueStrategy() MissingValueStrategy {
	if o == nil {
		var ret MissingValueStrategy
		return ret
	}

	return o.MissingValueStrategy
}

// GetMissingValueStrategyOk returns a tuple with the MissingValueStrategy field value
// and a boolean to check if the value has been set.
func (o *Expression) GetMissingValueStrategyOk() (*MissingValueStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MissingValueStrategy, true
}

// SetMissingValueStrategy sets field value
func (o *Expression) SetMissingValueStrategy(v MissingValueStrategy) {
	o.MissingValueStrategy = v
}

// GetSlidingWindow returns the SlidingWindow field value if set, zero value otherwise.
func (o *Expression) GetSlidingWindow() bool {
	if o == nil || IsNil(o.SlidingWindow) {
		var ret bool
		return ret
	}
	return *o.SlidingWindow
}

// GetSlidingWindowOk returns a tuple with the SlidingWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expression) GetSlidingWindowOk() (*bool, bool) {
	if o == nil || IsNil(o.SlidingWindow) {
		return nil, false
	}
	return o.SlidingWindow, true
}

// HasSlidingWindow returns a boolean if a field has been set.
func (o *Expression) HasSlidingWindow() bool {
	if o != nil && !IsNil(o.SlidingWindow) {
		return true
	}

	return false
}

// SetSlidingWindow gets a reference to the given bool and assigns it to the SlidingWindow field.
func (o *Expression) SetSlidingWindow(v bool) {
	o.SlidingWindow = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *Expression) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expression) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *Expression) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *Expression) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o Expression) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Expression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	toSerialize["missingValueStrategy"] = o.MissingValueStrategy
	if !IsNil(o.SlidingWindow) {
		toSerialize["slidingWindow"] = o.SlidingWindow
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

func (o *Expression) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"missingValueStrategy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExpression := _Expression{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExpression)

	if err != nil {
		return err
	}

	*o = Expression(varExpression)

	return err
}

type NullableExpression struct {
	value *Expression
	isSet bool
}

func (v NullableExpression) Get() *Expression {
	return v.value
}

func (v *NullableExpression) Set(val *Expression) {
	v.value = val
	v.isSet = true
}

func (v NullableExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpression(val *Expression) *NullableExpression {
	return &NullableExpression{value: val, isSet: true}
}

func (v NullableExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
