/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// OutlierMethod the model 'OutlierMethod'
type OutlierMethod string

// List of OutlierMethod
const (
	OUTLIERMETHOD_IQR              OutlierMethod = "IQR"
	OUTLIERMETHOD_STANDARD_Z_SCORE OutlierMethod = "STANDARD_Z_SCORE"
	OUTLIERMETHOD_MODIFIED_Z_SCORE OutlierMethod = "MODIFIED_Z_SCORE"
)

// All allowed values of OutlierMethod enum
var AllowedOutlierMethodEnumValues = []OutlierMethod{
	"IQR",
	"STANDARD_Z_SCORE",
	"MODIFIED_Z_SCORE",
}

func (v *OutlierMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OutlierMethod(value)
	for _, existing := range AllowedOutlierMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OutlierMethod", value)
}

// NewOutlierMethodFromValue returns a pointer to a valid OutlierMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOutlierMethodFromValue(v string) (*OutlierMethod, error) {
	ev := OutlierMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OutlierMethod: valid values are %v", v, AllowedOutlierMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OutlierMethod) IsValid() bool {
	for _, existing := range AllowedOutlierMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OutlierMethod value
func (v OutlierMethod) Ptr() *OutlierMethod {
	return &v
}

type NullableOutlierMethod struct {
	value *OutlierMethod
	isSet bool
}

func (v NullableOutlierMethod) Get() *OutlierMethod {
	return v.value
}

func (v *NullableOutlierMethod) Set(val *OutlierMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableOutlierMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableOutlierMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutlierMethod(val *OutlierMethod) *NullableOutlierMethod {
	return &NullableOutlierMethod{value: val, isSet: true}
}

func (v NullableOutlierMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutlierMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
