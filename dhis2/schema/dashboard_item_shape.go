/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DashboardItemShape the model 'DashboardItemShape'
type DashboardItemShape string

// List of DashboardItemShape
const (
	DASHBOARDITEMSHAPE_NORMAL       DashboardItemShape = "NORMAL"
	DASHBOARDITEMSHAPE_DOUBLE_WIDTH DashboardItemShape = "DOUBLE_WIDTH"
	DASHBOARDITEMSHAPE_FULL_WIDTH   DashboardItemShape = "FULL_WIDTH"
)

// All allowed values of DashboardItemShape enum
var AllowedDashboardItemShapeEnumValues = []DashboardItemShape{
	"NORMAL",
	"DOUBLE_WIDTH",
	"FULL_WIDTH",
}

func (v *DashboardItemShape) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DashboardItemShape(value)
	for _, existing := range AllowedDashboardItemShapeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DashboardItemShape", value)
}

// NewDashboardItemShapeFromValue returns a pointer to a valid DashboardItemShape
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDashboardItemShapeFromValue(v string) (*DashboardItemShape, error) {
	ev := DashboardItemShape(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DashboardItemShape: valid values are %v", v, AllowedDashboardItemShapeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DashboardItemShape) IsValid() bool {
	for _, existing := range AllowedDashboardItemShapeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DashboardItemShape value
func (v DashboardItemShape) Ptr() *DashboardItemShape {
	return &v
}

type NullableDashboardItemShape struct {
	value *DashboardItemShape
	isSet bool
}

func (v NullableDashboardItemShape) Get() *DashboardItemShape {
	return v.value
}

func (v *NullableDashboardItemShape) Set(val *DashboardItemShape) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardItemShape) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardItemShape) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardItemShape(val *DashboardItemShape) *NullableDashboardItemShape {
	return &NullableDashboardItemShape{value: val, isSet: true}
}

func (v NullableDashboardItemShape) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardItemShape) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
