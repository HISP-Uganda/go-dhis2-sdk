/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// NumberType the model 'NumberType'
type NumberType string

// List of NumberType
const (
	NUMBERTYPE_VALUE             NumberType = "VALUE"
	NUMBERTYPE_ROW_PERCENTAGE    NumberType = "ROW_PERCENTAGE"
	NUMBERTYPE_COLUMN_PERCENTAGE NumberType = "COLUMN_PERCENTAGE"
)

// All allowed values of NumberType enum
var AllowedNumberTypeEnumValues = []NumberType{
	"VALUE",
	"ROW_PERCENTAGE",
	"COLUMN_PERCENTAGE",
}

func (v *NumberType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NumberType(value)
	for _, existing := range AllowedNumberTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NumberType", value)
}

// NewNumberTypeFromValue returns a pointer to a valid NumberType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNumberTypeFromValue(v string) (*NumberType, error) {
	ev := NumberType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NumberType: valid values are %v", v, AllowedNumberTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NumberType) IsValid() bool {
	for _, existing := range AllowedNumberTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NumberType value
func (v NumberType) Ptr() *NumberType {
	return &v
}

type NullableNumberType struct {
	value *NumberType
	isSet bool
}

func (v NullableNumberType) Get() *NumberType {
	return v.value
}

func (v *NullableNumberType) Set(val *NumberType) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberType) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberType(val *NumberType) *NullableNumberType {
	return &NullableNumberType{value: val, isSet: true}
}

func (v NullableNumberType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
