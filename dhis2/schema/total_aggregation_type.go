/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TotalAggregationType the model 'TotalAggregationType'
type TotalAggregationType string

// List of TotalAggregationType
const (
	TOTALAGGREGATIONTYPE_NONE    TotalAggregationType = "NONE"
	TOTALAGGREGATIONTYPE_SUM     TotalAggregationType = "SUM"
	TOTALAGGREGATIONTYPE_AVERAGE TotalAggregationType = "AVERAGE"
)

// All allowed values of TotalAggregationType enum
var AllowedTotalAggregationTypeEnumValues = []TotalAggregationType{
	"NONE",
	"SUM",
	"AVERAGE",
}

func (v *TotalAggregationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TotalAggregationType(value)
	for _, existing := range AllowedTotalAggregationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TotalAggregationType", value)
}

// NewTotalAggregationTypeFromValue returns a pointer to a valid TotalAggregationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTotalAggregationTypeFromValue(v string) (*TotalAggregationType, error) {
	ev := TotalAggregationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TotalAggregationType: valid values are %v", v, AllowedTotalAggregationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TotalAggregationType) IsValid() bool {
	for _, existing := range AllowedTotalAggregationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TotalAggregationType value
func (v TotalAggregationType) Ptr() *TotalAggregationType {
	return &v
}

type NullableTotalAggregationType struct {
	value *TotalAggregationType
	isSet bool
}

func (v NullableTotalAggregationType) Get() *TotalAggregationType {
	return v.value
}

func (v *NullableTotalAggregationType) Set(val *TotalAggregationType) {
	v.value = val
	v.isSet = true
}

func (v NullableTotalAggregationType) IsSet() bool {
	return v.isSet
}

func (v *NullableTotalAggregationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotalAggregationType(val *TotalAggregationType) *NullableTotalAggregationType {
	return &NullableTotalAggregationType{value: val, isSet: true}
}

func (v NullableTotalAggregationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotalAggregationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
