/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Enrollment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Enrollment{}

// Enrollment struct for Enrollment
type Enrollment struct {
	Attributes            []TrackerAttribute     `json:"attributes,omitempty"`
	CompletedBy           *string                `json:"completedBy,omitempty"`
	CompletedDate         *time.Time             `json:"completedDate,omitempty"`
	Created               string                 `json:"created"`
	CreatedAtClient       string                 `json:"createdAtClient"`
	CreatedByUserInfo     *UserInfoSnapshot      `json:"createdByUserInfo,omitempty"`
	Deleted               *bool                  `json:"deleted,omitempty"`
	Enrollment            string                 `json:"enrollment"`
	EnrollmentDate        time.Time              `json:"enrollmentDate"`
	Events                []TrackerEvent         `json:"events,omitempty"`
	Followup              *bool                  `json:"followup,omitempty"`
	Geometry              map[string]interface{} `json:"geometry,omitempty"`
	IncidentDate          time.Time              `json:"incidentDate"`
	LastUpdated           string                 `json:"lastUpdated"`
	LastUpdatedAtClient   string                 `json:"lastUpdatedAtClient"`
	LastUpdatedByUserInfo *UserInfoSnapshot      `json:"lastUpdatedByUserInfo,omitempty"`
	Notes                 []Note                 `json:"notes,omitempty"`
	OrgUnit               *string                `json:"orgUnit,omitempty"`
	OrgUnitName           *string                `json:"orgUnitName,omitempty"`
	Program               string                 `json:"program"`
	Relationships         []Relationship         `json:"relationships,omitempty"`
	Status                string                 `json:"status"`
	StoredBy              *string                `json:"storedBy,omitempty"`
	TrackedEntityInstance string                 `json:"trackedEntityInstance"`
	TrackedEntityType     string                 `json:"trackedEntityType"`
}

type _Enrollment Enrollment

// NewEnrollment instantiates a new Enrollment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrollment(created string, createdAtClient string, enrollment string, enrollmentDate time.Time, incidentDate time.Time, lastUpdated string, lastUpdatedAtClient string, program string, status string, trackedEntityInstance string, trackedEntityType string) *Enrollment {
	this := Enrollment{}
	this.Created = created
	this.CreatedAtClient = createdAtClient
	this.Enrollment = enrollment
	this.EnrollmentDate = enrollmentDate
	this.IncidentDate = incidentDate
	this.LastUpdated = lastUpdated
	this.LastUpdatedAtClient = lastUpdatedAtClient
	this.Program = program
	this.Status = status
	this.TrackedEntityInstance = trackedEntityInstance
	this.TrackedEntityType = trackedEntityType
	return &this
}

// NewEnrollmentWithDefaults instantiates a new Enrollment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrollmentWithDefaults() *Enrollment {
	this := Enrollment{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Enrollment) GetAttributes() []TrackerAttribute {
	if o == nil || IsNil(o.Attributes) {
		var ret []TrackerAttribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetAttributesOk() ([]TrackerAttribute, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Enrollment) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []TrackerAttribute and assigns it to the Attributes field.
func (o *Enrollment) SetAttributes(v []TrackerAttribute) {
	o.Attributes = v
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *Enrollment) GetCompletedBy() string {
	if o == nil || IsNil(o.CompletedBy) {
		var ret string
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetCompletedByOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedBy) {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *Enrollment) HasCompletedBy() bool {
	if o != nil && !IsNil(o.CompletedBy) {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given string and assigns it to the CompletedBy field.
func (o *Enrollment) SetCompletedBy(v string) {
	o.CompletedBy = &v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *Enrollment) GetCompletedDate() time.Time {
	if o == nil || IsNil(o.CompletedDate) {
		var ret time.Time
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetCompletedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *Enrollment) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given time.Time and assigns it to the CompletedDate field.
func (o *Enrollment) SetCompletedDate(v time.Time) {
	o.CompletedDate = &v
}

// GetCreated returns the Created field value
func (o *Enrollment) GetCreated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Enrollment) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Enrollment) SetCreated(v string) {
	o.Created = v
}

// GetCreatedAtClient returns the CreatedAtClient field value
func (o *Enrollment) GetCreatedAtClient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAtClient
}

// GetCreatedAtClientOk returns a tuple with the CreatedAtClient field value
// and a boolean to check if the value has been set.
func (o *Enrollment) GetCreatedAtClientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAtClient, true
}

// SetCreatedAtClient sets field value
func (o *Enrollment) SetCreatedAtClient(v string) {
	o.CreatedAtClient = v
}

// GetCreatedByUserInfo returns the CreatedByUserInfo field value if set, zero value otherwise.
func (o *Enrollment) GetCreatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.CreatedByUserInfo
}

// GetCreatedByUserInfoOk returns a tuple with the CreatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetCreatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		return nil, false
	}
	return o.CreatedByUserInfo, true
}

// HasCreatedByUserInfo returns a boolean if a field has been set.
func (o *Enrollment) HasCreatedByUserInfo() bool {
	if o != nil && !IsNil(o.CreatedByUserInfo) {
		return true
	}

	return false
}

// SetCreatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the CreatedByUserInfo field.
func (o *Enrollment) SetCreatedByUserInfo(v UserInfoSnapshot) {
	o.CreatedByUserInfo = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Enrollment) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Enrollment) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Enrollment) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetEnrollment returns the Enrollment field value
func (o *Enrollment) GetEnrollment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Enrollment
}

// GetEnrollmentOk returns a tuple with the Enrollment field value
// and a boolean to check if the value has been set.
func (o *Enrollment) GetEnrollmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enrollment, true
}

// SetEnrollment sets field value
func (o *Enrollment) SetEnrollment(v string) {
	o.Enrollment = v
}

// GetEnrollmentDate returns the EnrollmentDate field value
func (o *Enrollment) GetEnrollmentDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EnrollmentDate
}

// GetEnrollmentDateOk returns a tuple with the EnrollmentDate field value
// and a boolean to check if the value has been set.
func (o *Enrollment) GetEnrollmentDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnrollmentDate, true
}

// SetEnrollmentDate sets field value
func (o *Enrollment) SetEnrollmentDate(v time.Time) {
	o.EnrollmentDate = v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *Enrollment) GetEvents() []TrackerEvent {
	if o == nil || IsNil(o.Events) {
		var ret []TrackerEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetEventsOk() ([]TrackerEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *Enrollment) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []TrackerEvent and assigns it to the Events field.
func (o *Enrollment) SetEvents(v []TrackerEvent) {
	o.Events = v
}

// GetFollowup returns the Followup field value if set, zero value otherwise.
func (o *Enrollment) GetFollowup() bool {
	if o == nil || IsNil(o.Followup) {
		var ret bool
		return ret
	}
	return *o.Followup
}

// GetFollowupOk returns a tuple with the Followup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetFollowupOk() (*bool, bool) {
	if o == nil || IsNil(o.Followup) {
		return nil, false
	}
	return o.Followup, true
}

// HasFollowup returns a boolean if a field has been set.
func (o *Enrollment) HasFollowup() bool {
	if o != nil && !IsNil(o.Followup) {
		return true
	}

	return false
}

// SetFollowup gets a reference to the given bool and assigns it to the Followup field.
func (o *Enrollment) SetFollowup(v bool) {
	o.Followup = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *Enrollment) GetGeometry() map[string]interface{} {
	if o == nil || IsNil(o.Geometry) {
		var ret map[string]interface{}
		return ret
	}
	return o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetGeometryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Geometry) {
		return map[string]interface{}{}, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *Enrollment) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given map[string]interface{} and assigns it to the Geometry field.
func (o *Enrollment) SetGeometry(v map[string]interface{}) {
	o.Geometry = v
}

// GetIncidentDate returns the IncidentDate field value
func (o *Enrollment) GetIncidentDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IncidentDate
}

// GetIncidentDateOk returns a tuple with the IncidentDate field value
// and a boolean to check if the value has been set.
func (o *Enrollment) GetIncidentDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncidentDate, true
}

// SetIncidentDate sets field value
func (o *Enrollment) SetIncidentDate(v time.Time) {
	o.IncidentDate = v
}

// GetLastUpdated returns the LastUpdated field value
func (o *Enrollment) GetLastUpdated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
func (o *Enrollment) GetLastUpdatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdated, true
}

// SetLastUpdated sets field value
func (o *Enrollment) SetLastUpdated(v string) {
	o.LastUpdated = v
}

// GetLastUpdatedAtClient returns the LastUpdatedAtClient field value
func (o *Enrollment) GetLastUpdatedAtClient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastUpdatedAtClient
}

// GetLastUpdatedAtClientOk returns a tuple with the LastUpdatedAtClient field value
// and a boolean to check if the value has been set.
func (o *Enrollment) GetLastUpdatedAtClientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedAtClient, true
}

// SetLastUpdatedAtClient sets field value
func (o *Enrollment) SetLastUpdatedAtClient(v string) {
	o.LastUpdatedAtClient = v
}

// GetLastUpdatedByUserInfo returns the LastUpdatedByUserInfo field value if set, zero value otherwise.
func (o *Enrollment) GetLastUpdatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.LastUpdatedByUserInfo
}

// GetLastUpdatedByUserInfoOk returns a tuple with the LastUpdatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetLastUpdatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		return nil, false
	}
	return o.LastUpdatedByUserInfo, true
}

// HasLastUpdatedByUserInfo returns a boolean if a field has been set.
func (o *Enrollment) HasLastUpdatedByUserInfo() bool {
	if o != nil && !IsNil(o.LastUpdatedByUserInfo) {
		return true
	}

	return false
}

// SetLastUpdatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the LastUpdatedByUserInfo field.
func (o *Enrollment) SetLastUpdatedByUserInfo(v UserInfoSnapshot) {
	o.LastUpdatedByUserInfo = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Enrollment) GetNotes() []Note {
	if o == nil || IsNil(o.Notes) {
		var ret []Note
		return ret
	}
	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetNotesOk() ([]Note, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Enrollment) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []Note and assigns it to the Notes field.
func (o *Enrollment) SetNotes(v []Note) {
	o.Notes = v
}

// GetOrgUnit returns the OrgUnit field value if set, zero value otherwise.
func (o *Enrollment) GetOrgUnit() string {
	if o == nil || IsNil(o.OrgUnit) {
		var ret string
		return ret
	}
	return *o.OrgUnit
}

// GetOrgUnitOk returns a tuple with the OrgUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetOrgUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnit) {
		return nil, false
	}
	return o.OrgUnit, true
}

// HasOrgUnit returns a boolean if a field has been set.
func (o *Enrollment) HasOrgUnit() bool {
	if o != nil && !IsNil(o.OrgUnit) {
		return true
	}

	return false
}

// SetOrgUnit gets a reference to the given string and assigns it to the OrgUnit field.
func (o *Enrollment) SetOrgUnit(v string) {
	o.OrgUnit = &v
}

// GetOrgUnitName returns the OrgUnitName field value if set, zero value otherwise.
func (o *Enrollment) GetOrgUnitName() string {
	if o == nil || IsNil(o.OrgUnitName) {
		var ret string
		return ret
	}
	return *o.OrgUnitName
}

// GetOrgUnitNameOk returns a tuple with the OrgUnitName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetOrgUnitNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnitName) {
		return nil, false
	}
	return o.OrgUnitName, true
}

// HasOrgUnitName returns a boolean if a field has been set.
func (o *Enrollment) HasOrgUnitName() bool {
	if o != nil && !IsNil(o.OrgUnitName) {
		return true
	}

	return false
}

// SetOrgUnitName gets a reference to the given string and assigns it to the OrgUnitName field.
func (o *Enrollment) SetOrgUnitName(v string) {
	o.OrgUnitName = &v
}

// GetProgram returns the Program field value
func (o *Enrollment) GetProgram() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Program
}

// GetProgramOk returns a tuple with the Program field value
// and a boolean to check if the value has been set.
func (o *Enrollment) GetProgramOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Program, true
}

// SetProgram sets field value
func (o *Enrollment) SetProgram(v string) {
	o.Program = v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *Enrollment) GetRelationships() []Relationship {
	if o == nil || IsNil(o.Relationships) {
		var ret []Relationship
		return ret
	}
	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetRelationshipsOk() ([]Relationship, bool) {
	if o == nil || IsNil(o.Relationships) {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *Enrollment) HasRelationships() bool {
	if o != nil && !IsNil(o.Relationships) {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given []Relationship and assigns it to the Relationships field.
func (o *Enrollment) SetRelationships(v []Relationship) {
	o.Relationships = v
}

// GetStatus returns the Status field value
func (o *Enrollment) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Enrollment) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Enrollment) SetStatus(v string) {
	o.Status = v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *Enrollment) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *Enrollment) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *Enrollment) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetTrackedEntityInstance returns the TrackedEntityInstance field value
func (o *Enrollment) GetTrackedEntityInstance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrackedEntityInstance
}

// GetTrackedEntityInstanceOk returns a tuple with the TrackedEntityInstance field value
// and a boolean to check if the value has been set.
func (o *Enrollment) GetTrackedEntityInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackedEntityInstance, true
}

// SetTrackedEntityInstance sets field value
func (o *Enrollment) SetTrackedEntityInstance(v string) {
	o.TrackedEntityInstance = v
}

// GetTrackedEntityType returns the TrackedEntityType field value
func (o *Enrollment) GetTrackedEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrackedEntityType
}

// GetTrackedEntityTypeOk returns a tuple with the TrackedEntityType field value
// and a boolean to check if the value has been set.
func (o *Enrollment) GetTrackedEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackedEntityType, true
}

// SetTrackedEntityType sets field value
func (o *Enrollment) SetTrackedEntityType(v string) {
	o.TrackedEntityType = v
}

func (o Enrollment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Enrollment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.CompletedBy) {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if !IsNil(o.CompletedDate) {
		toSerialize["completedDate"] = o.CompletedDate
	}
	toSerialize["created"] = o.Created
	toSerialize["createdAtClient"] = o.CreatedAtClient
	if !IsNil(o.CreatedByUserInfo) {
		toSerialize["createdByUserInfo"] = o.CreatedByUserInfo
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	toSerialize["enrollment"] = o.Enrollment
	toSerialize["enrollmentDate"] = o.EnrollmentDate
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Followup) {
		toSerialize["followup"] = o.Followup
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	toSerialize["incidentDate"] = o.IncidentDate
	toSerialize["lastUpdated"] = o.LastUpdated
	toSerialize["lastUpdatedAtClient"] = o.LastUpdatedAtClient
	if !IsNil(o.LastUpdatedByUserInfo) {
		toSerialize["lastUpdatedByUserInfo"] = o.LastUpdatedByUserInfo
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.OrgUnit) {
		toSerialize["orgUnit"] = o.OrgUnit
	}
	if !IsNil(o.OrgUnitName) {
		toSerialize["orgUnitName"] = o.OrgUnitName
	}
	toSerialize["program"] = o.Program
	if !IsNil(o.Relationships) {
		toSerialize["relationships"] = o.Relationships
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	toSerialize["trackedEntityInstance"] = o.TrackedEntityInstance
	toSerialize["trackedEntityType"] = o.TrackedEntityType
	return toSerialize, nil
}

func (o *Enrollment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"createdAtClient",
		"enrollment",
		"enrollmentDate",
		"incidentDate",
		"lastUpdated",
		"lastUpdatedAtClient",
		"program",
		"status",
		"trackedEntityInstance",
		"trackedEntityType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnrollment := _Enrollment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnrollment)

	if err != nil {
		return err
	}

	*o = Enrollment(varEnrollment)

	return err
}

type NullableEnrollment struct {
	value *Enrollment
	isSet bool
}

func (v NullableEnrollment) Get() *Enrollment {
	return v.value
}

func (v *NullableEnrollment) Set(val *Enrollment) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrollment) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrollment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrollment(val *Enrollment) *NullableEnrollment {
	return &NullableEnrollment{value: val, isSet: true}
}

func (v NullableEnrollment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrollment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
