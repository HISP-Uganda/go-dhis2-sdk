/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ProgramIndicatorGroupPropertyNames the model 'ProgramIndicatorGroupPropertyNames'
type ProgramIndicatorGroupPropertyNames string

// List of ProgramIndicatorGroupPropertyNames
const (
	PROGRAMINDICATORGROUPPROPERTYNAMES_ACCESS             ProgramIndicatorGroupPropertyNames = "access"
	PROGRAMINDICATORGROUPPROPERTYNAMES_ATTRIBUTE_VALUES   ProgramIndicatorGroupPropertyNames = "attributeValues"
	PROGRAMINDICATORGROUPPROPERTYNAMES_CODE               ProgramIndicatorGroupPropertyNames = "code"
	PROGRAMINDICATORGROUPPROPERTYNAMES_CREATED            ProgramIndicatorGroupPropertyNames = "created"
	PROGRAMINDICATORGROUPPROPERTYNAMES_CREATED_BY         ProgramIndicatorGroupPropertyNames = "createdBy"
	PROGRAMINDICATORGROUPPROPERTYNAMES_DESCRIPTION        ProgramIndicatorGroupPropertyNames = "description"
	PROGRAMINDICATORGROUPPROPERTYNAMES_DISPLAY_NAME       ProgramIndicatorGroupPropertyNames = "displayName"
	PROGRAMINDICATORGROUPPROPERTYNAMES_FAVORITE           ProgramIndicatorGroupPropertyNames = "favorite"
	PROGRAMINDICATORGROUPPROPERTYNAMES_FAVORITES          ProgramIndicatorGroupPropertyNames = "favorites"
	PROGRAMINDICATORGROUPPROPERTYNAMES_HREF               ProgramIndicatorGroupPropertyNames = "href"
	PROGRAMINDICATORGROUPPROPERTYNAMES_ID                 ProgramIndicatorGroupPropertyNames = "id"
	PROGRAMINDICATORGROUPPROPERTYNAMES_LAST_UPDATED       ProgramIndicatorGroupPropertyNames = "lastUpdated"
	PROGRAMINDICATORGROUPPROPERTYNAMES_LAST_UPDATED_BY    ProgramIndicatorGroupPropertyNames = "lastUpdatedBy"
	PROGRAMINDICATORGROUPPROPERTYNAMES_NAME               ProgramIndicatorGroupPropertyNames = "name"
	PROGRAMINDICATORGROUPPROPERTYNAMES_PROGRAM_INDICATORS ProgramIndicatorGroupPropertyNames = "programIndicators"
	PROGRAMINDICATORGROUPPROPERTYNAMES_SHARING            ProgramIndicatorGroupPropertyNames = "sharing"
	PROGRAMINDICATORGROUPPROPERTYNAMES_TRANSLATIONS       ProgramIndicatorGroupPropertyNames = "translations"
)

// All allowed values of ProgramIndicatorGroupPropertyNames enum
var AllowedProgramIndicatorGroupPropertyNamesEnumValues = []ProgramIndicatorGroupPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"programIndicators",
	"sharing",
	"translations",
}

func (v *ProgramIndicatorGroupPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProgramIndicatorGroupPropertyNames(value)
	for _, existing := range AllowedProgramIndicatorGroupPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProgramIndicatorGroupPropertyNames", value)
}

// NewProgramIndicatorGroupPropertyNamesFromValue returns a pointer to a valid ProgramIndicatorGroupPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProgramIndicatorGroupPropertyNamesFromValue(v string) (*ProgramIndicatorGroupPropertyNames, error) {
	ev := ProgramIndicatorGroupPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProgramIndicatorGroupPropertyNames: valid values are %v", v, AllowedProgramIndicatorGroupPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProgramIndicatorGroupPropertyNames) IsValid() bool {
	for _, existing := range AllowedProgramIndicatorGroupPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramIndicatorGroupPropertyNames value
func (v ProgramIndicatorGroupPropertyNames) Ptr() *ProgramIndicatorGroupPropertyNames {
	return &v
}

type NullableProgramIndicatorGroupPropertyNames struct {
	value *ProgramIndicatorGroupPropertyNames
	isSet bool
}

func (v NullableProgramIndicatorGroupPropertyNames) Get() *ProgramIndicatorGroupPropertyNames {
	return v.value
}

func (v *NullableProgramIndicatorGroupPropertyNames) Set(val *ProgramIndicatorGroupPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramIndicatorGroupPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramIndicatorGroupPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramIndicatorGroupPropertyNames(val *ProgramIndicatorGroupPropertyNames) *NullableProgramIndicatorGroupPropertyNames {
	return &NullableProgramIndicatorGroupPropertyNames{value: val, isSet: true}
}

func (v NullableProgramIndicatorGroupPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramIndicatorGroupPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
