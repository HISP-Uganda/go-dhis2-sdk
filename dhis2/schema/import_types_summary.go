/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the ImportTypesSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportTypesSummary{}

// ImportTypesSummary struct for ImportTypesSummary
type ImportTypesSummary struct {
	ImportCount         *ImportCount        `json:"importCount,omitempty"`
	ImportTypeSummaries []ImportTypeSummary `json:"importTypeSummaries,omitempty"`
}

// NewImportTypesSummary instantiates a new ImportTypesSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportTypesSummary() *ImportTypesSummary {
	this := ImportTypesSummary{}
	return &this
}

// NewImportTypesSummaryWithDefaults instantiates a new ImportTypesSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportTypesSummaryWithDefaults() *ImportTypesSummary {
	this := ImportTypesSummary{}
	return &this
}

// GetImportCount returns the ImportCount field value if set, zero value otherwise.
func (o *ImportTypesSummary) GetImportCount() ImportCount {
	if o == nil || IsNil(o.ImportCount) {
		var ret ImportCount
		return ret
	}
	return *o.ImportCount
}

// GetImportCountOk returns a tuple with the ImportCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportTypesSummary) GetImportCountOk() (*ImportCount, bool) {
	if o == nil || IsNil(o.ImportCount) {
		return nil, false
	}
	return o.ImportCount, true
}

// HasImportCount returns a boolean if a field has been set.
func (o *ImportTypesSummary) HasImportCount() bool {
	if o != nil && !IsNil(o.ImportCount) {
		return true
	}

	return false
}

// SetImportCount gets a reference to the given ImportCount and assigns it to the ImportCount field.
func (o *ImportTypesSummary) SetImportCount(v ImportCount) {
	o.ImportCount = &v
}

// GetImportTypeSummaries returns the ImportTypeSummaries field value if set, zero value otherwise.
func (o *ImportTypesSummary) GetImportTypeSummaries() []ImportTypeSummary {
	if o == nil || IsNil(o.ImportTypeSummaries) {
		var ret []ImportTypeSummary
		return ret
	}
	return o.ImportTypeSummaries
}

// GetImportTypeSummariesOk returns a tuple with the ImportTypeSummaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportTypesSummary) GetImportTypeSummariesOk() ([]ImportTypeSummary, bool) {
	if o == nil || IsNil(o.ImportTypeSummaries) {
		return nil, false
	}
	return o.ImportTypeSummaries, true
}

// HasImportTypeSummaries returns a boolean if a field has been set.
func (o *ImportTypesSummary) HasImportTypeSummaries() bool {
	if o != nil && !IsNil(o.ImportTypeSummaries) {
		return true
	}

	return false
}

// SetImportTypeSummaries gets a reference to the given []ImportTypeSummary and assigns it to the ImportTypeSummaries field.
func (o *ImportTypesSummary) SetImportTypeSummaries(v []ImportTypeSummary) {
	o.ImportTypeSummaries = v
}

func (o ImportTypesSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportTypesSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImportCount) {
		toSerialize["importCount"] = o.ImportCount
	}
	if !IsNil(o.ImportTypeSummaries) {
		toSerialize["importTypeSummaries"] = o.ImportTypeSummaries
	}
	return toSerialize, nil
}

type NullableImportTypesSummary struct {
	value *ImportTypesSummary
	isSet bool
}

func (v NullableImportTypesSummary) Get() *ImportTypesSummary {
	return v.value
}

func (v *NullableImportTypesSummary) Set(val *ImportTypesSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableImportTypesSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableImportTypesSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportTypesSummary(val *ImportTypesSummary) *NullableImportTypesSummary {
	return &NullableImportTypesSummary{value: val, isSet: true}
}

func (v NullableImportTypesSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportTypesSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
