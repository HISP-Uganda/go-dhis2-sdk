/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the IconListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IconListResponse{}

// IconListResponse struct for IconListResponse
type IconListResponse struct {
	Icons []map[string]interface{} `json:"icons,omitempty"`
	Pager *Pager                   `json:"pager,omitempty"`
}

// NewIconListResponse instantiates a new IconListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIconListResponse() *IconListResponse {
	this := IconListResponse{}
	return &this
}

// NewIconListResponseWithDefaults instantiates a new IconListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIconListResponseWithDefaults() *IconListResponse {
	this := IconListResponse{}
	return &this
}

// GetIcons returns the Icons field value if set, zero value otherwise.
func (o *IconListResponse) GetIcons() []map[string]interface{} {
	if o == nil || IsNil(o.Icons) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Icons
}

// GetIconsOk returns a tuple with the Icons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconListResponse) GetIconsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Icons) {
		return nil, false
	}
	return o.Icons, true
}

// HasIcons returns a boolean if a field has been set.
func (o *IconListResponse) HasIcons() bool {
	if o != nil && !IsNil(o.Icons) {
		return true
	}

	return false
}

// SetIcons gets a reference to the given []map[string]interface{} and assigns it to the Icons field.
func (o *IconListResponse) SetIcons(v []map[string]interface{}) {
	o.Icons = v
}

// GetPager returns the Pager field value if set, zero value otherwise.
func (o *IconListResponse) GetPager() Pager {
	if o == nil || IsNil(o.Pager) {
		var ret Pager
		return ret
	}
	return *o.Pager
}

// GetPagerOk returns a tuple with the Pager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconListResponse) GetPagerOk() (*Pager, bool) {
	if o == nil || IsNil(o.Pager) {
		return nil, false
	}
	return o.Pager, true
}

// HasPager returns a boolean if a field has been set.
func (o *IconListResponse) HasPager() bool {
	if o != nil && !IsNil(o.Pager) {
		return true
	}

	return false
}

// SetPager gets a reference to the given Pager and assigns it to the Pager field.
func (o *IconListResponse) SetPager(v Pager) {
	o.Pager = &v
}

func (o IconListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IconListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Icons) {
		toSerialize["icons"] = o.Icons
	}
	if !IsNil(o.Pager) {
		toSerialize["pager"] = o.Pager
	}
	return toSerialize, nil
}

type NullableIconListResponse struct {
	value *IconListResponse
	isSet bool
}

func (v NullableIconListResponse) Get() *IconListResponse {
	return v.value
}

func (v *NullableIconListResponse) Set(val *IconListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIconListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIconListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIconListResponse(val *IconListResponse) *NullableIconListResponse {
	return &NullableIconListResponse{value: val, isSet: true}
}

func (v NullableIconListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIconListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
