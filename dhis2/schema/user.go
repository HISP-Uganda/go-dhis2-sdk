/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	Access                           *Access                                `json:"access,omitempty"`
	AccountExpiry                    *time.Time                             `json:"accountExpiry,omitempty"`
	AttributeValues                  []AttributeValue                       `json:"attributeValues,omitempty"`
	Avatar                           *MeDtoAvatar                           `json:"avatar,omitempty"`
	Birthday                         *time.Time                             `json:"birthday,omitempty"`
	CatDimensionConstraints          []CategoryComboCategoriesInner         `json:"catDimensionConstraints,omitempty"`
	Code                             *string                                `json:"code,omitempty"`
	CogsDimensionConstraints         []CategoryOptionGroupGroupSetsInner    `json:"cogsDimensionConstraints,omitempty"`
	Created                          *time.Time                             `json:"created,omitempty"`
	CreatedBy                        *AggregateDataExchangeCreatedBy        `json:"createdBy,omitempty"`
	DataViewMaxOrganisationUnitLevel *int32                                 `json:"dataViewMaxOrganisationUnitLevel,omitempty"`
	DataViewOrganisationUnits        []CategoryOptionOrganisationUnitsInner `json:"dataViewOrganisationUnits,omitempty"`
	Disabled                         *bool                                  `json:"disabled,omitempty"`
	DisplayName                      *string                                `json:"displayName,omitempty"`
	Education                        *string                                `json:"education,omitempty"`
	Email                            *string                                `json:"email,omitempty"`
	Employer                         *string                                `json:"employer,omitempty"`
	ExternalAccess                   *bool                                  `json:"externalAccess,omitempty"`
	ExternalAuth                     *bool                                  `json:"externalAuth,omitempty"`
	FacebookMessenger                *string                                `json:"facebookMessenger,omitempty"`
	Favorite                         *bool                                  `json:"favorite,omitempty"`
	Favorites                        []string                               `json:"favorites,omitempty"`
	FirstName                        *string                                `json:"firstName,omitempty"`
	Gender                           *string                                `json:"gender,omitempty"`
	Href                             *string                                `json:"href,omitempty"`
	Id                               *string                                `json:"id,omitempty"`
	Interests                        *string                                `json:"interests,omitempty"`
	Introduction                     *string                                `json:"introduction,omitempty"`
	Invitation                       *bool                                  `json:"invitation,omitempty"`
	JobTitle                         *string                                `json:"jobTitle,omitempty"`
	Languages                        *string                                `json:"languages,omitempty"`
	LastCheckedInterpretations       *time.Time                             `json:"lastCheckedInterpretations,omitempty"`
	LastLogin                        *time.Time                             `json:"lastLogin,omitempty"`
	LastUpdated                      *time.Time                             `json:"lastUpdated,omitempty"`
	LastUpdatedBy                    *AggregateDataExchangeCreatedBy        `json:"lastUpdatedBy,omitempty"`
	LdapId                           *string                                `json:"ldapId,omitempty"`
	Nationality                      *string                                `json:"nationality,omitempty"`
	OpenId                           *string                                `json:"openId,omitempty"`
	OrganisationUnits                []CategoryOptionOrganisationUnitsInner `json:"organisationUnits,omitempty"`
	Password                         *string                                `json:"password,omitempty"`
	PasswordLastUpdated              *time.Time                             `json:"passwordLastUpdated,omitempty"`
	PhoneNumber                      *string                                `json:"phoneNumber,omitempty"`
	PublicAccess                     *string                                `json:"publicAccess,omitempty"`
	SelfRegistered                   *bool                                  `json:"selfRegistered,omitempty"`
	Settings                         *UserSettings                          `json:"settings,omitempty"`
	Sharing                          *Sharing                               `json:"sharing,omitempty"`
	Skype                            *string                                `json:"skype,omitempty"`
	Surname                          *string                                `json:"surname,omitempty"`
	TeiSearchOrganisationUnits       []CategoryOptionOrganisationUnitsInner `json:"teiSearchOrganisationUnits,omitempty"`
	Telegram                         *string                                `json:"telegram,omitempty"`
	Translations                     []Translation                          `json:"translations,omitempty"`
	Twitter                          *string                                `json:"twitter,omitempty"`
	TwoFactorEnabled                 *bool                                  `json:"twoFactorEnabled,omitempty"`
	User                             *AggregateDataExchangeCreatedBy        `json:"user,omitempty"`
	UserAccesses                     []LegacyUserAccess                     `json:"userAccesses,omitempty"`
	UserCredentials                  *UserCredentialsDto                    `json:"userCredentials,omitempty"`
	UserGroupAccesses                []LegacyUserGroupAccess                `json:"userGroupAccesses,omitempty"`
	UserGroups                       []ConfigurationFeedbackRecipients      `json:"userGroups,omitempty"`
	UserRoles                        []ConfigurationSelfRegistrationRole    `json:"userRoles,omitempty"`
	Username                         *string                                `json:"username,omitempty"`
	WelcomeMessage                   *string                                `json:"welcomeMessage,omitempty"`
	WhatsApp                         *string                                `json:"whatsApp,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *User) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *User) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *User) SetAccess(v Access) {
	o.Access = &v
}

// GetAccountExpiry returns the AccountExpiry field value if set, zero value otherwise.
func (o *User) GetAccountExpiry() time.Time {
	if o == nil || IsNil(o.AccountExpiry) {
		var ret time.Time
		return ret
	}
	return *o.AccountExpiry
}

// GetAccountExpiryOk returns a tuple with the AccountExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAccountExpiryOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AccountExpiry) {
		return nil, false
	}
	return o.AccountExpiry, true
}

// HasAccountExpiry returns a boolean if a field has been set.
func (o *User) HasAccountExpiry() bool {
	if o != nil && !IsNil(o.AccountExpiry) {
		return true
	}

	return false
}

// SetAccountExpiry gets a reference to the given time.Time and assigns it to the AccountExpiry field.
func (o *User) SetAccountExpiry(v time.Time) {
	o.AccountExpiry = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *User) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *User) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *User) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *User) GetAvatar() MeDtoAvatar {
	if o == nil || IsNil(o.Avatar) {
		var ret MeDtoAvatar
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAvatarOk() (*MeDtoAvatar, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *User) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given MeDtoAvatar and assigns it to the Avatar field.
func (o *User) SetAvatar(v MeDtoAvatar) {
	o.Avatar = &v
}

// GetBirthday returns the Birthday field value if set, zero value otherwise.
func (o *User) GetBirthday() time.Time {
	if o == nil || IsNil(o.Birthday) {
		var ret time.Time
		return ret
	}
	return *o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetBirthdayOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Birthday) {
		return nil, false
	}
	return o.Birthday, true
}

// HasBirthday returns a boolean if a field has been set.
func (o *User) HasBirthday() bool {
	if o != nil && !IsNil(o.Birthday) {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given time.Time and assigns it to the Birthday field.
func (o *User) SetBirthday(v time.Time) {
	o.Birthday = &v
}

// GetCatDimensionConstraints returns the CatDimensionConstraints field value if set, zero value otherwise.
func (o *User) GetCatDimensionConstraints() []CategoryComboCategoriesInner {
	if o == nil || IsNil(o.CatDimensionConstraints) {
		var ret []CategoryComboCategoriesInner
		return ret
	}
	return o.CatDimensionConstraints
}

// GetCatDimensionConstraintsOk returns a tuple with the CatDimensionConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCatDimensionConstraintsOk() ([]CategoryComboCategoriesInner, bool) {
	if o == nil || IsNil(o.CatDimensionConstraints) {
		return nil, false
	}
	return o.CatDimensionConstraints, true
}

// HasCatDimensionConstraints returns a boolean if a field has been set.
func (o *User) HasCatDimensionConstraints() bool {
	if o != nil && !IsNil(o.CatDimensionConstraints) {
		return true
	}

	return false
}

// SetCatDimensionConstraints gets a reference to the given []CategoryComboCategoriesInner and assigns it to the CatDimensionConstraints field.
func (o *User) SetCatDimensionConstraints(v []CategoryComboCategoriesInner) {
	o.CatDimensionConstraints = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *User) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *User) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *User) SetCode(v string) {
	o.Code = &v
}

// GetCogsDimensionConstraints returns the CogsDimensionConstraints field value if set, zero value otherwise.
func (o *User) GetCogsDimensionConstraints() []CategoryOptionGroupGroupSetsInner {
	if o == nil || IsNil(o.CogsDimensionConstraints) {
		var ret []CategoryOptionGroupGroupSetsInner
		return ret
	}
	return o.CogsDimensionConstraints
}

// GetCogsDimensionConstraintsOk returns a tuple with the CogsDimensionConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCogsDimensionConstraintsOk() ([]CategoryOptionGroupGroupSetsInner, bool) {
	if o == nil || IsNil(o.CogsDimensionConstraints) {
		return nil, false
	}
	return o.CogsDimensionConstraints, true
}

// HasCogsDimensionConstraints returns a boolean if a field has been set.
func (o *User) HasCogsDimensionConstraints() bool {
	if o != nil && !IsNil(o.CogsDimensionConstraints) {
		return true
	}

	return false
}

// SetCogsDimensionConstraints gets a reference to the given []CategoryOptionGroupGroupSetsInner and assigns it to the CogsDimensionConstraints field.
func (o *User) SetCogsDimensionConstraints(v []CategoryOptionGroupGroupSetsInner) {
	o.CogsDimensionConstraints = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *User) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *User) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *User) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *User) GetCreatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCreatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *User) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the CreatedBy field.
func (o *User) SetCreatedBy(v AggregateDataExchangeCreatedBy) {
	o.CreatedBy = &v
}

// GetDataViewMaxOrganisationUnitLevel returns the DataViewMaxOrganisationUnitLevel field value if set, zero value otherwise.
func (o *User) GetDataViewMaxOrganisationUnitLevel() int32 {
	if o == nil || IsNil(o.DataViewMaxOrganisationUnitLevel) {
		var ret int32
		return ret
	}
	return *o.DataViewMaxOrganisationUnitLevel
}

// GetDataViewMaxOrganisationUnitLevelOk returns a tuple with the DataViewMaxOrganisationUnitLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDataViewMaxOrganisationUnitLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.DataViewMaxOrganisationUnitLevel) {
		return nil, false
	}
	return o.DataViewMaxOrganisationUnitLevel, true
}

// HasDataViewMaxOrganisationUnitLevel returns a boolean if a field has been set.
func (o *User) HasDataViewMaxOrganisationUnitLevel() bool {
	if o != nil && !IsNil(o.DataViewMaxOrganisationUnitLevel) {
		return true
	}

	return false
}

// SetDataViewMaxOrganisationUnitLevel gets a reference to the given int32 and assigns it to the DataViewMaxOrganisationUnitLevel field.
func (o *User) SetDataViewMaxOrganisationUnitLevel(v int32) {
	o.DataViewMaxOrganisationUnitLevel = &v
}

// GetDataViewOrganisationUnits returns the DataViewOrganisationUnits field value if set, zero value otherwise.
func (o *User) GetDataViewOrganisationUnits() []CategoryOptionOrganisationUnitsInner {
	if o == nil || IsNil(o.DataViewOrganisationUnits) {
		var ret []CategoryOptionOrganisationUnitsInner
		return ret
	}
	return o.DataViewOrganisationUnits
}

// GetDataViewOrganisationUnitsOk returns a tuple with the DataViewOrganisationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDataViewOrganisationUnitsOk() ([]CategoryOptionOrganisationUnitsInner, bool) {
	if o == nil || IsNil(o.DataViewOrganisationUnits) {
		return nil, false
	}
	return o.DataViewOrganisationUnits, true
}

// HasDataViewOrganisationUnits returns a boolean if a field has been set.
func (o *User) HasDataViewOrganisationUnits() bool {
	if o != nil && !IsNil(o.DataViewOrganisationUnits) {
		return true
	}

	return false
}

// SetDataViewOrganisationUnits gets a reference to the given []CategoryOptionOrganisationUnitsInner and assigns it to the DataViewOrganisationUnits field.
func (o *User) SetDataViewOrganisationUnits(v []CategoryOptionOrganisationUnitsInner) {
	o.DataViewOrganisationUnits = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *User) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *User) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *User) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *User) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *User) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *User) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEducation returns the Education field value if set, zero value otherwise.
func (o *User) GetEducation() string {
	if o == nil || IsNil(o.Education) {
		var ret string
		return ret
	}
	return *o.Education
}

// GetEducationOk returns a tuple with the Education field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEducationOk() (*string, bool) {
	if o == nil || IsNil(o.Education) {
		return nil, false
	}
	return o.Education, true
}

// HasEducation returns a boolean if a field has been set.
func (o *User) HasEducation() bool {
	if o != nil && !IsNil(o.Education) {
		return true
	}

	return false
}

// SetEducation gets a reference to the given string and assigns it to the Education field.
func (o *User) SetEducation(v string) {
	o.Education = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *User) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *User) SetEmail(v string) {
	o.Email = &v
}

// GetEmployer returns the Employer field value if set, zero value otherwise.
func (o *User) GetEmployer() string {
	if o == nil || IsNil(o.Employer) {
		var ret string
		return ret
	}
	return *o.Employer
}

// GetEmployerOk returns a tuple with the Employer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEmployerOk() (*string, bool) {
	if o == nil || IsNil(o.Employer) {
		return nil, false
	}
	return o.Employer, true
}

// HasEmployer returns a boolean if a field has been set.
func (o *User) HasEmployer() bool {
	if o != nil && !IsNil(o.Employer) {
		return true
	}

	return false
}

// SetEmployer gets a reference to the given string and assigns it to the Employer field.
func (o *User) SetEmployer(v string) {
	o.Employer = &v
}

// GetExternalAccess returns the ExternalAccess field value if set, zero value otherwise.
func (o *User) GetExternalAccess() bool {
	if o == nil || IsNil(o.ExternalAccess) {
		var ret bool
		return ret
	}
	return *o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetExternalAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAccess) {
		return nil, false
	}
	return o.ExternalAccess, true
}

// HasExternalAccess returns a boolean if a field has been set.
func (o *User) HasExternalAccess() bool {
	if o != nil && !IsNil(o.ExternalAccess) {
		return true
	}

	return false
}

// SetExternalAccess gets a reference to the given bool and assigns it to the ExternalAccess field.
func (o *User) SetExternalAccess(v bool) {
	o.ExternalAccess = &v
}

// GetExternalAuth returns the ExternalAuth field value if set, zero value otherwise.
func (o *User) GetExternalAuth() bool {
	if o == nil || IsNil(o.ExternalAuth) {
		var ret bool
		return ret
	}
	return *o.ExternalAuth
}

// GetExternalAuthOk returns a tuple with the ExternalAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetExternalAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAuth) {
		return nil, false
	}
	return o.ExternalAuth, true
}

// HasExternalAuth returns a boolean if a field has been set.
func (o *User) HasExternalAuth() bool {
	if o != nil && !IsNil(o.ExternalAuth) {
		return true
	}

	return false
}

// SetExternalAuth gets a reference to the given bool and assigns it to the ExternalAuth field.
func (o *User) SetExternalAuth(v bool) {
	o.ExternalAuth = &v
}

// GetFacebookMessenger returns the FacebookMessenger field value if set, zero value otherwise.
func (o *User) GetFacebookMessenger() string {
	if o == nil || IsNil(o.FacebookMessenger) {
		var ret string
		return ret
	}
	return *o.FacebookMessenger
}

// GetFacebookMessengerOk returns a tuple with the FacebookMessenger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFacebookMessengerOk() (*string, bool) {
	if o == nil || IsNil(o.FacebookMessenger) {
		return nil, false
	}
	return o.FacebookMessenger, true
}

// HasFacebookMessenger returns a boolean if a field has been set.
func (o *User) HasFacebookMessenger() bool {
	if o != nil && !IsNil(o.FacebookMessenger) {
		return true
	}

	return false
}

// SetFacebookMessenger gets a reference to the given string and assigns it to the FacebookMessenger field.
func (o *User) SetFacebookMessenger(v string) {
	o.FacebookMessenger = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *User) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *User) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *User) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *User) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *User) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *User) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *User) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *User) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *User) SetFirstName(v string) {
	o.FirstName = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *User) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *User) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *User) SetGender(v string) {
	o.Gender = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *User) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *User) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *User) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *User) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *User) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *User) SetId(v string) {
	o.Id = &v
}

// GetInterests returns the Interests field value if set, zero value otherwise.
func (o *User) GetInterests() string {
	if o == nil || IsNil(o.Interests) {
		var ret string
		return ret
	}
	return *o.Interests
}

// GetInterestsOk returns a tuple with the Interests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetInterestsOk() (*string, bool) {
	if o == nil || IsNil(o.Interests) {
		return nil, false
	}
	return o.Interests, true
}

// HasInterests returns a boolean if a field has been set.
func (o *User) HasInterests() bool {
	if o != nil && !IsNil(o.Interests) {
		return true
	}

	return false
}

// SetInterests gets a reference to the given string and assigns it to the Interests field.
func (o *User) SetInterests(v string) {
	o.Interests = &v
}

// GetIntroduction returns the Introduction field value if set, zero value otherwise.
func (o *User) GetIntroduction() string {
	if o == nil || IsNil(o.Introduction) {
		var ret string
		return ret
	}
	return *o.Introduction
}

// GetIntroductionOk returns a tuple with the Introduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIntroductionOk() (*string, bool) {
	if o == nil || IsNil(o.Introduction) {
		return nil, false
	}
	return o.Introduction, true
}

// HasIntroduction returns a boolean if a field has been set.
func (o *User) HasIntroduction() bool {
	if o != nil && !IsNil(o.Introduction) {
		return true
	}

	return false
}

// SetIntroduction gets a reference to the given string and assigns it to the Introduction field.
func (o *User) SetIntroduction(v string) {
	o.Introduction = &v
}

// GetInvitation returns the Invitation field value if set, zero value otherwise.
func (o *User) GetInvitation() bool {
	if o == nil || IsNil(o.Invitation) {
		var ret bool
		return ret
	}
	return *o.Invitation
}

// GetInvitationOk returns a tuple with the Invitation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetInvitationOk() (*bool, bool) {
	if o == nil || IsNil(o.Invitation) {
		return nil, false
	}
	return o.Invitation, true
}

// HasInvitation returns a boolean if a field has been set.
func (o *User) HasInvitation() bool {
	if o != nil && !IsNil(o.Invitation) {
		return true
	}

	return false
}

// SetInvitation gets a reference to the given bool and assigns it to the Invitation field.
func (o *User) SetInvitation(v bool) {
	o.Invitation = &v
}

// GetJobTitle returns the JobTitle field value if set, zero value otherwise.
func (o *User) GetJobTitle() string {
	if o == nil || IsNil(o.JobTitle) {
		var ret string
		return ret
	}
	return *o.JobTitle
}

// GetJobTitleOk returns a tuple with the JobTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetJobTitleOk() (*string, bool) {
	if o == nil || IsNil(o.JobTitle) {
		return nil, false
	}
	return o.JobTitle, true
}

// HasJobTitle returns a boolean if a field has been set.
func (o *User) HasJobTitle() bool {
	if o != nil && !IsNil(o.JobTitle) {
		return true
	}

	return false
}

// SetJobTitle gets a reference to the given string and assigns it to the JobTitle field.
func (o *User) SetJobTitle(v string) {
	o.JobTitle = &v
}

// GetLanguages returns the Languages field value if set, zero value otherwise.
func (o *User) GetLanguages() string {
	if o == nil || IsNil(o.Languages) {
		var ret string
		return ret
	}
	return *o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLanguagesOk() (*string, bool) {
	if o == nil || IsNil(o.Languages) {
		return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *User) HasLanguages() bool {
	if o != nil && !IsNil(o.Languages) {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given string and assigns it to the Languages field.
func (o *User) SetLanguages(v string) {
	o.Languages = &v
}

// GetLastCheckedInterpretations returns the LastCheckedInterpretations field value if set, zero value otherwise.
func (o *User) GetLastCheckedInterpretations() time.Time {
	if o == nil || IsNil(o.LastCheckedInterpretations) {
		var ret time.Time
		return ret
	}
	return *o.LastCheckedInterpretations
}

// GetLastCheckedInterpretationsOk returns a tuple with the LastCheckedInterpretations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastCheckedInterpretationsOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastCheckedInterpretations) {
		return nil, false
	}
	return o.LastCheckedInterpretations, true
}

// HasLastCheckedInterpretations returns a boolean if a field has been set.
func (o *User) HasLastCheckedInterpretations() bool {
	if o != nil && !IsNil(o.LastCheckedInterpretations) {
		return true
	}

	return false
}

// SetLastCheckedInterpretations gets a reference to the given time.Time and assigns it to the LastCheckedInterpretations field.
func (o *User) SetLastCheckedInterpretations(v time.Time) {
	o.LastCheckedInterpretations = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *User) GetLastLogin() time.Time {
	if o == nil || IsNil(o.LastLogin) {
		var ret time.Time
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastLoginOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastLogin) {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *User) HasLastLogin() bool {
	if o != nil && !IsNil(o.LastLogin) {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given time.Time and assigns it to the LastLogin field.
func (o *User) SetLastLogin(v time.Time) {
	o.LastLogin = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *User) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *User) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *User) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *User) GetLastUpdatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastUpdatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *User) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the LastUpdatedBy field.
func (o *User) SetLastUpdatedBy(v AggregateDataExchangeCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLdapId returns the LdapId field value if set, zero value otherwise.
func (o *User) GetLdapId() string {
	if o == nil || IsNil(o.LdapId) {
		var ret string
		return ret
	}
	return *o.LdapId
}

// GetLdapIdOk returns a tuple with the LdapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLdapIdOk() (*string, bool) {
	if o == nil || IsNil(o.LdapId) {
		return nil, false
	}
	return o.LdapId, true
}

// HasLdapId returns a boolean if a field has been set.
func (o *User) HasLdapId() bool {
	if o != nil && !IsNil(o.LdapId) {
		return true
	}

	return false
}

// SetLdapId gets a reference to the given string and assigns it to the LdapId field.
func (o *User) SetLdapId(v string) {
	o.LdapId = &v
}

// GetNationality returns the Nationality field value if set, zero value otherwise.
func (o *User) GetNationality() string {
	if o == nil || IsNil(o.Nationality) {
		var ret string
		return ret
	}
	return *o.Nationality
}

// GetNationalityOk returns a tuple with the Nationality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetNationalityOk() (*string, bool) {
	if o == nil || IsNil(o.Nationality) {
		return nil, false
	}
	return o.Nationality, true
}

// HasNationality returns a boolean if a field has been set.
func (o *User) HasNationality() bool {
	if o != nil && !IsNil(o.Nationality) {
		return true
	}

	return false
}

// SetNationality gets a reference to the given string and assigns it to the Nationality field.
func (o *User) SetNationality(v string) {
	o.Nationality = &v
}

// GetOpenId returns the OpenId field value if set, zero value otherwise.
func (o *User) GetOpenId() string {
	if o == nil || IsNil(o.OpenId) {
		var ret string
		return ret
	}
	return *o.OpenId
}

// GetOpenIdOk returns a tuple with the OpenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetOpenIdOk() (*string, bool) {
	if o == nil || IsNil(o.OpenId) {
		return nil, false
	}
	return o.OpenId, true
}

// HasOpenId returns a boolean if a field has been set.
func (o *User) HasOpenId() bool {
	if o != nil && !IsNil(o.OpenId) {
		return true
	}

	return false
}

// SetOpenId gets a reference to the given string and assigns it to the OpenId field.
func (o *User) SetOpenId(v string) {
	o.OpenId = &v
}

// GetOrganisationUnits returns the OrganisationUnits field value if set, zero value otherwise.
func (o *User) GetOrganisationUnits() []CategoryOptionOrganisationUnitsInner {
	if o == nil || IsNil(o.OrganisationUnits) {
		var ret []CategoryOptionOrganisationUnitsInner
		return ret
	}
	return o.OrganisationUnits
}

// GetOrganisationUnitsOk returns a tuple with the OrganisationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetOrganisationUnitsOk() ([]CategoryOptionOrganisationUnitsInner, bool) {
	if o == nil || IsNil(o.OrganisationUnits) {
		return nil, false
	}
	return o.OrganisationUnits, true
}

// HasOrganisationUnits returns a boolean if a field has been set.
func (o *User) HasOrganisationUnits() bool {
	if o != nil && !IsNil(o.OrganisationUnits) {
		return true
	}

	return false
}

// SetOrganisationUnits gets a reference to the given []CategoryOptionOrganisationUnitsInner and assigns it to the OrganisationUnits field.
func (o *User) SetOrganisationUnits(v []CategoryOptionOrganisationUnitsInner) {
	o.OrganisationUnits = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *User) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *User) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *User) SetPassword(v string) {
	o.Password = &v
}

// GetPasswordLastUpdated returns the PasswordLastUpdated field value if set, zero value otherwise.
func (o *User) GetPasswordLastUpdated() time.Time {
	if o == nil || IsNil(o.PasswordLastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.PasswordLastUpdated
}

// GetPasswordLastUpdatedOk returns a tuple with the PasswordLastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPasswordLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PasswordLastUpdated) {
		return nil, false
	}
	return o.PasswordLastUpdated, true
}

// HasPasswordLastUpdated returns a boolean if a field has been set.
func (o *User) HasPasswordLastUpdated() bool {
	if o != nil && !IsNil(o.PasswordLastUpdated) {
		return true
	}

	return false
}

// SetPasswordLastUpdated gets a reference to the given time.Time and assigns it to the PasswordLastUpdated field.
func (o *User) SetPasswordLastUpdated(v time.Time) {
	o.PasswordLastUpdated = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *User) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *User) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *User) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *User) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *User) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *User) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetSelfRegistered returns the SelfRegistered field value if set, zero value otherwise.
func (o *User) GetSelfRegistered() bool {
	if o == nil || IsNil(o.SelfRegistered) {
		var ret bool
		return ret
	}
	return *o.SelfRegistered
}

// GetSelfRegisteredOk returns a tuple with the SelfRegistered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSelfRegisteredOk() (*bool, bool) {
	if o == nil || IsNil(o.SelfRegistered) {
		return nil, false
	}
	return o.SelfRegistered, true
}

// HasSelfRegistered returns a boolean if a field has been set.
func (o *User) HasSelfRegistered() bool {
	if o != nil && !IsNil(o.SelfRegistered) {
		return true
	}

	return false
}

// SetSelfRegistered gets a reference to the given bool and assigns it to the SelfRegistered field.
func (o *User) SetSelfRegistered(v bool) {
	o.SelfRegistered = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *User) GetSettings() UserSettings {
	if o == nil || IsNil(o.Settings) {
		var ret UserSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSettingsOk() (*UserSettings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *User) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given UserSettings and assigns it to the Settings field.
func (o *User) SetSettings(v UserSettings) {
	o.Settings = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *User) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *User) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *User) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetSkype returns the Skype field value if set, zero value otherwise.
func (o *User) GetSkype() string {
	if o == nil || IsNil(o.Skype) {
		var ret string
		return ret
	}
	return *o.Skype
}

// GetSkypeOk returns a tuple with the Skype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSkypeOk() (*string, bool) {
	if o == nil || IsNil(o.Skype) {
		return nil, false
	}
	return o.Skype, true
}

// HasSkype returns a boolean if a field has been set.
func (o *User) HasSkype() bool {
	if o != nil && !IsNil(o.Skype) {
		return true
	}

	return false
}

// SetSkype gets a reference to the given string and assigns it to the Skype field.
func (o *User) SetSkype(v string) {
	o.Skype = &v
}

// GetSurname returns the Surname field value if set, zero value otherwise.
func (o *User) GetSurname() string {
	if o == nil || IsNil(o.Surname) {
		var ret string
		return ret
	}
	return *o.Surname
}

// GetSurnameOk returns a tuple with the Surname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSurnameOk() (*string, bool) {
	if o == nil || IsNil(o.Surname) {
		return nil, false
	}
	return o.Surname, true
}

// HasSurname returns a boolean if a field has been set.
func (o *User) HasSurname() bool {
	if o != nil && !IsNil(o.Surname) {
		return true
	}

	return false
}

// SetSurname gets a reference to the given string and assigns it to the Surname field.
func (o *User) SetSurname(v string) {
	o.Surname = &v
}

// GetTeiSearchOrganisationUnits returns the TeiSearchOrganisationUnits field value if set, zero value otherwise.
func (o *User) GetTeiSearchOrganisationUnits() []CategoryOptionOrganisationUnitsInner {
	if o == nil || IsNil(o.TeiSearchOrganisationUnits) {
		var ret []CategoryOptionOrganisationUnitsInner
		return ret
	}
	return o.TeiSearchOrganisationUnits
}

// GetTeiSearchOrganisationUnitsOk returns a tuple with the TeiSearchOrganisationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTeiSearchOrganisationUnitsOk() ([]CategoryOptionOrganisationUnitsInner, bool) {
	if o == nil || IsNil(o.TeiSearchOrganisationUnits) {
		return nil, false
	}
	return o.TeiSearchOrganisationUnits, true
}

// HasTeiSearchOrganisationUnits returns a boolean if a field has been set.
func (o *User) HasTeiSearchOrganisationUnits() bool {
	if o != nil && !IsNil(o.TeiSearchOrganisationUnits) {
		return true
	}

	return false
}

// SetTeiSearchOrganisationUnits gets a reference to the given []CategoryOptionOrganisationUnitsInner and assigns it to the TeiSearchOrganisationUnits field.
func (o *User) SetTeiSearchOrganisationUnits(v []CategoryOptionOrganisationUnitsInner) {
	o.TeiSearchOrganisationUnits = v
}

// GetTelegram returns the Telegram field value if set, zero value otherwise.
func (o *User) GetTelegram() string {
	if o == nil || IsNil(o.Telegram) {
		var ret string
		return ret
	}
	return *o.Telegram
}

// GetTelegramOk returns a tuple with the Telegram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTelegramOk() (*string, bool) {
	if o == nil || IsNil(o.Telegram) {
		return nil, false
	}
	return o.Telegram, true
}

// HasTelegram returns a boolean if a field has been set.
func (o *User) HasTelegram() bool {
	if o != nil && !IsNil(o.Telegram) {
		return true
	}

	return false
}

// SetTelegram gets a reference to the given string and assigns it to the Telegram field.
func (o *User) SetTelegram(v string) {
	o.Telegram = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *User) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *User) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *User) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetTwitter returns the Twitter field value if set, zero value otherwise.
func (o *User) GetTwitter() string {
	if o == nil || IsNil(o.Twitter) {
		var ret string
		return ret
	}
	return *o.Twitter
}

// GetTwitterOk returns a tuple with the Twitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTwitterOk() (*string, bool) {
	if o == nil || IsNil(o.Twitter) {
		return nil, false
	}
	return o.Twitter, true
}

// HasTwitter returns a boolean if a field has been set.
func (o *User) HasTwitter() bool {
	if o != nil && !IsNil(o.Twitter) {
		return true
	}

	return false
}

// SetTwitter gets a reference to the given string and assigns it to the Twitter field.
func (o *User) SetTwitter(v string) {
	o.Twitter = &v
}

// GetTwoFactorEnabled returns the TwoFactorEnabled field value if set, zero value otherwise.
func (o *User) GetTwoFactorEnabled() bool {
	if o == nil || IsNil(o.TwoFactorEnabled) {
		var ret bool
		return ret
	}
	return *o.TwoFactorEnabled
}

// GetTwoFactorEnabledOk returns a tuple with the TwoFactorEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTwoFactorEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TwoFactorEnabled) {
		return nil, false
	}
	return o.TwoFactorEnabled, true
}

// HasTwoFactorEnabled returns a boolean if a field has been set.
func (o *User) HasTwoFactorEnabled() bool {
	if o != nil && !IsNil(o.TwoFactorEnabled) {
		return true
	}

	return false
}

// SetTwoFactorEnabled gets a reference to the given bool and assigns it to the TwoFactorEnabled field.
func (o *User) SetTwoFactorEnabled(v bool) {
	o.TwoFactorEnabled = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *User) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *User) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *User) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *User) GetUserAccesses() []LegacyUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []LegacyUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserAccessesOk() ([]LegacyUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *User) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []LegacyUserAccess and assigns it to the UserAccesses field.
func (o *User) SetUserAccesses(v []LegacyUserAccess) {
	o.UserAccesses = v
}

// GetUserCredentials returns the UserCredentials field value if set, zero value otherwise.
func (o *User) GetUserCredentials() UserCredentialsDto {
	if o == nil || IsNil(o.UserCredentials) {
		var ret UserCredentialsDto
		return ret
	}
	return *o.UserCredentials
}

// GetUserCredentialsOk returns a tuple with the UserCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserCredentialsOk() (*UserCredentialsDto, bool) {
	if o == nil || IsNil(o.UserCredentials) {
		return nil, false
	}
	return o.UserCredentials, true
}

// HasUserCredentials returns a boolean if a field has been set.
func (o *User) HasUserCredentials() bool {
	if o != nil && !IsNil(o.UserCredentials) {
		return true
	}

	return false
}

// SetUserCredentials gets a reference to the given UserCredentialsDto and assigns it to the UserCredentials field.
func (o *User) SetUserCredentials(v UserCredentialsDto) {
	o.UserCredentials = &v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *User) GetUserGroupAccesses() []LegacyUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []LegacyUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserGroupAccessesOk() ([]LegacyUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *User) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []LegacyUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *User) SetUserGroupAccesses(v []LegacyUserGroupAccess) {
	o.UserGroupAccesses = v
}

// GetUserGroups returns the UserGroups field value if set, zero value otherwise.
func (o *User) GetUserGroups() []ConfigurationFeedbackRecipients {
	if o == nil || IsNil(o.UserGroups) {
		var ret []ConfigurationFeedbackRecipients
		return ret
	}
	return o.UserGroups
}

// GetUserGroupsOk returns a tuple with the UserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserGroupsOk() ([]ConfigurationFeedbackRecipients, bool) {
	if o == nil || IsNil(o.UserGroups) {
		return nil, false
	}
	return o.UserGroups, true
}

// HasUserGroups returns a boolean if a field has been set.
func (o *User) HasUserGroups() bool {
	if o != nil && !IsNil(o.UserGroups) {
		return true
	}

	return false
}

// SetUserGroups gets a reference to the given []ConfigurationFeedbackRecipients and assigns it to the UserGroups field.
func (o *User) SetUserGroups(v []ConfigurationFeedbackRecipients) {
	o.UserGroups = v
}

// GetUserRoles returns the UserRoles field value if set, zero value otherwise.
func (o *User) GetUserRoles() []ConfigurationSelfRegistrationRole {
	if o == nil || IsNil(o.UserRoles) {
		var ret []ConfigurationSelfRegistrationRole
		return ret
	}
	return o.UserRoles
}

// GetUserRolesOk returns a tuple with the UserRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserRolesOk() ([]ConfigurationSelfRegistrationRole, bool) {
	if o == nil || IsNil(o.UserRoles) {
		return nil, false
	}
	return o.UserRoles, true
}

// HasUserRoles returns a boolean if a field has been set.
func (o *User) HasUserRoles() bool {
	if o != nil && !IsNil(o.UserRoles) {
		return true
	}

	return false
}

// SetUserRoles gets a reference to the given []ConfigurationSelfRegistrationRole and assigns it to the UserRoles field.
func (o *User) SetUserRoles(v []ConfigurationSelfRegistrationRole) {
	o.UserRoles = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *User) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *User) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *User) SetUsername(v string) {
	o.Username = &v
}

// GetWelcomeMessage returns the WelcomeMessage field value if set, zero value otherwise.
func (o *User) GetWelcomeMessage() string {
	if o == nil || IsNil(o.WelcomeMessage) {
		var ret string
		return ret
	}
	return *o.WelcomeMessage
}

// GetWelcomeMessageOk returns a tuple with the WelcomeMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetWelcomeMessageOk() (*string, bool) {
	if o == nil || IsNil(o.WelcomeMessage) {
		return nil, false
	}
	return o.WelcomeMessage, true
}

// HasWelcomeMessage returns a boolean if a field has been set.
func (o *User) HasWelcomeMessage() bool {
	if o != nil && !IsNil(o.WelcomeMessage) {
		return true
	}

	return false
}

// SetWelcomeMessage gets a reference to the given string and assigns it to the WelcomeMessage field.
func (o *User) SetWelcomeMessage(v string) {
	o.WelcomeMessage = &v
}

// GetWhatsApp returns the WhatsApp field value if set, zero value otherwise.
func (o *User) GetWhatsApp() string {
	if o == nil || IsNil(o.WhatsApp) {
		var ret string
		return ret
	}
	return *o.WhatsApp
}

// GetWhatsAppOk returns a tuple with the WhatsApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetWhatsAppOk() (*string, bool) {
	if o == nil || IsNil(o.WhatsApp) {
		return nil, false
	}
	return o.WhatsApp, true
}

// HasWhatsApp returns a boolean if a field has been set.
func (o *User) HasWhatsApp() bool {
	if o != nil && !IsNil(o.WhatsApp) {
		return true
	}

	return false
}

// SetWhatsApp gets a reference to the given string and assigns it to the WhatsApp field.
func (o *User) SetWhatsApp(v string) {
	o.WhatsApp = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AccountExpiry) {
		toSerialize["accountExpiry"] = o.AccountExpiry
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	if !IsNil(o.Birthday) {
		toSerialize["birthday"] = o.Birthday
	}
	if !IsNil(o.CatDimensionConstraints) {
		toSerialize["catDimensionConstraints"] = o.CatDimensionConstraints
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CogsDimensionConstraints) {
		toSerialize["cogsDimensionConstraints"] = o.CogsDimensionConstraints
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DataViewMaxOrganisationUnitLevel) {
		toSerialize["dataViewMaxOrganisationUnitLevel"] = o.DataViewMaxOrganisationUnitLevel
	}
	if !IsNil(o.DataViewOrganisationUnits) {
		toSerialize["dataViewOrganisationUnits"] = o.DataViewOrganisationUnits
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Education) {
		toSerialize["education"] = o.Education
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Employer) {
		toSerialize["employer"] = o.Employer
	}
	if !IsNil(o.ExternalAccess) {
		toSerialize["externalAccess"] = o.ExternalAccess
	}
	if !IsNil(o.ExternalAuth) {
		toSerialize["externalAuth"] = o.ExternalAuth
	}
	if !IsNil(o.FacebookMessenger) {
		toSerialize["facebookMessenger"] = o.FacebookMessenger
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Interests) {
		toSerialize["interests"] = o.Interests
	}
	if !IsNil(o.Introduction) {
		toSerialize["introduction"] = o.Introduction
	}
	if !IsNil(o.Invitation) {
		toSerialize["invitation"] = o.Invitation
	}
	if !IsNil(o.JobTitle) {
		toSerialize["jobTitle"] = o.JobTitle
	}
	if !IsNil(o.Languages) {
		toSerialize["languages"] = o.Languages
	}
	if !IsNil(o.LastCheckedInterpretations) {
		toSerialize["lastCheckedInterpretations"] = o.LastCheckedInterpretations
	}
	if !IsNil(o.LastLogin) {
		toSerialize["lastLogin"] = o.LastLogin
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LdapId) {
		toSerialize["ldapId"] = o.LdapId
	}
	if !IsNil(o.Nationality) {
		toSerialize["nationality"] = o.Nationality
	}
	if !IsNil(o.OpenId) {
		toSerialize["openId"] = o.OpenId
	}
	if !IsNil(o.OrganisationUnits) {
		toSerialize["organisationUnits"] = o.OrganisationUnits
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.PasswordLastUpdated) {
		toSerialize["passwordLastUpdated"] = o.PasswordLastUpdated
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	if !IsNil(o.SelfRegistered) {
		toSerialize["selfRegistered"] = o.SelfRegistered
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.Skype) {
		toSerialize["skype"] = o.Skype
	}
	if !IsNil(o.Surname) {
		toSerialize["surname"] = o.Surname
	}
	if !IsNil(o.TeiSearchOrganisationUnits) {
		toSerialize["teiSearchOrganisationUnits"] = o.TeiSearchOrganisationUnits
	}
	if !IsNil(o.Telegram) {
		toSerialize["telegram"] = o.Telegram
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.Twitter) {
		toSerialize["twitter"] = o.Twitter
	}
	if !IsNil(o.TwoFactorEnabled) {
		toSerialize["twoFactorEnabled"] = o.TwoFactorEnabled
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserCredentials) {
		toSerialize["userCredentials"] = o.UserCredentials
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	if !IsNil(o.UserGroups) {
		toSerialize["userGroups"] = o.UserGroups
	}
	if !IsNil(o.UserRoles) {
		toSerialize["userRoles"] = o.UserRoles
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.WelcomeMessage) {
		toSerialize["welcomeMessage"] = o.WelcomeMessage
	}
	if !IsNil(o.WhatsApp) {
		toSerialize["whatsApp"] = o.WhatsApp
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
