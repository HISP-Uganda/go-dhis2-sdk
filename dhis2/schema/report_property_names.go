/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ReportPropertyNames the model 'ReportPropertyNames'
type ReportPropertyNames string

// List of ReportPropertyNames
const (
	REPORTPROPERTYNAMES_ACCESS           ReportPropertyNames = "access"
	REPORTPROPERTYNAMES_ATTRIBUTE_VALUES ReportPropertyNames = "attributeValues"
	REPORTPROPERTYNAMES_CACHE_STRATEGY   ReportPropertyNames = "cacheStrategy"
	REPORTPROPERTYNAMES_CODE             ReportPropertyNames = "code"
	REPORTPROPERTYNAMES_CREATED          ReportPropertyNames = "created"
	REPORTPROPERTYNAMES_CREATED_BY       ReportPropertyNames = "createdBy"
	REPORTPROPERTYNAMES_DESIGN_CONTENT   ReportPropertyNames = "designContent"
	REPORTPROPERTYNAMES_DISPLAY_NAME     ReportPropertyNames = "displayName"
	REPORTPROPERTYNAMES_FAVORITE         ReportPropertyNames = "favorite"
	REPORTPROPERTYNAMES_FAVORITES        ReportPropertyNames = "favorites"
	REPORTPROPERTYNAMES_HREF             ReportPropertyNames = "href"
	REPORTPROPERTYNAMES_ID               ReportPropertyNames = "id"
	REPORTPROPERTYNAMES_LAST_UPDATED     ReportPropertyNames = "lastUpdated"
	REPORTPROPERTYNAMES_LAST_UPDATED_BY  ReportPropertyNames = "lastUpdatedBy"
	REPORTPROPERTYNAMES_NAME             ReportPropertyNames = "name"
	REPORTPROPERTYNAMES_RELATIVE_PERIODS ReportPropertyNames = "relativePeriods"
	REPORTPROPERTYNAMES_REPORT_PARAMS    ReportPropertyNames = "reportParams"
	REPORTPROPERTYNAMES_SHARING          ReportPropertyNames = "sharing"
	REPORTPROPERTYNAMES_TRANSLATIONS     ReportPropertyNames = "translations"
	REPORTPROPERTYNAMES_TYPE             ReportPropertyNames = "type"
	REPORTPROPERTYNAMES_VISUALIZATION    ReportPropertyNames = "visualization"
)

// All allowed values of ReportPropertyNames enum
var AllowedReportPropertyNamesEnumValues = []ReportPropertyNames{
	"access",
	"attributeValues",
	"cacheStrategy",
	"code",
	"created",
	"createdBy",
	"designContent",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"relativePeriods",
	"reportParams",
	"sharing",
	"translations",
	"type",
	"visualization",
}

func (v *ReportPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportPropertyNames(value)
	for _, existing := range AllowedReportPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportPropertyNames", value)
}

// NewReportPropertyNamesFromValue returns a pointer to a valid ReportPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportPropertyNamesFromValue(v string) (*ReportPropertyNames, error) {
	ev := ReportPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportPropertyNames: valid values are %v", v, AllowedReportPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportPropertyNames) IsValid() bool {
	for _, existing := range AllowedReportPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReportPropertyNames value
func (v ReportPropertyNames) Ptr() *ReportPropertyNames {
	return &v
}

type NullableReportPropertyNames struct {
	value *ReportPropertyNames
	isSet bool
}

func (v NullableReportPropertyNames) Get() *ReportPropertyNames {
	return v.value
}

func (v *NullableReportPropertyNames) Set(val *ReportPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableReportPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableReportPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportPropertyNames(val *ReportPropertyNames) *NullableReportPropertyNames {
	return &NullableReportPropertyNames{value: val, isSet: true}
}

func (v NullableReportPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
