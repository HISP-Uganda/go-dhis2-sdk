/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ProtectionType the model 'ProtectionType'
type ProtectionType string

// List of ProtectionType
const (
	PROTECTIONTYPE_NONE       ProtectionType = "NONE"
	PROTECTIONTYPE_HIDDEN     ProtectionType = "HIDDEN"
	PROTECTIONTYPE_RESTRICTED ProtectionType = "RESTRICTED"
)

// All allowed values of ProtectionType enum
var AllowedProtectionTypeEnumValues = []ProtectionType{
	"NONE",
	"HIDDEN",
	"RESTRICTED",
}

func (v *ProtectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtectionType(value)
	for _, existing := range AllowedProtectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtectionType", value)
}

// NewProtectionTypeFromValue returns a pointer to a valid ProtectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtectionTypeFromValue(v string) (*ProtectionType, error) {
	ev := ProtectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtectionType: valid values are %v", v, AllowedProtectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtectionType) IsValid() bool {
	for _, existing := range AllowedProtectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProtectionType value
func (v ProtectionType) Ptr() *ProtectionType {
	return &v
}

type NullableProtectionType struct {
	value *ProtectionType
	isSet bool
}

func (v NullableProtectionType) Get() *ProtectionType {
	return v.value
}

func (v *NullableProtectionType) Set(val *ProtectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionType(val *ProtectionType) *NullableProtectionType {
	return &NullableProtectionType{value: val, isSet: true}
}

func (v NullableProtectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
