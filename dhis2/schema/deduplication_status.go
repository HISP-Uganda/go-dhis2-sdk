/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DeduplicationStatus the model 'DeduplicationStatus'
type DeduplicationStatus string

// List of DeduplicationStatus
const (
	DEDUPLICATIONSTATUS_ALL     DeduplicationStatus = "ALL"
	DEDUPLICATIONSTATUS_OPEN    DeduplicationStatus = "OPEN"
	DEDUPLICATIONSTATUS_INVALID DeduplicationStatus = "INVALID"
	DEDUPLICATIONSTATUS_MERGED  DeduplicationStatus = "MERGED"
)

// All allowed values of DeduplicationStatus enum
var AllowedDeduplicationStatusEnumValues = []DeduplicationStatus{
	"ALL",
	"OPEN",
	"INVALID",
	"MERGED",
}

func (v *DeduplicationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeduplicationStatus(value)
	for _, existing := range AllowedDeduplicationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeduplicationStatus", value)
}

// NewDeduplicationStatusFromValue returns a pointer to a valid DeduplicationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeduplicationStatusFromValue(v string) (*DeduplicationStatus, error) {
	ev := DeduplicationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeduplicationStatus: valid values are %v", v, AllowedDeduplicationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeduplicationStatus) IsValid() bool {
	for _, existing := range AllowedDeduplicationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeduplicationStatus value
func (v DeduplicationStatus) Ptr() *DeduplicationStatus {
	return &v
}

type NullableDeduplicationStatus struct {
	value *DeduplicationStatus
	isSet bool
}

func (v NullableDeduplicationStatus) Get() *DeduplicationStatus {
	return v.value
}

func (v *NullableDeduplicationStatus) Set(val *DeduplicationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDeduplicationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDeduplicationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeduplicationStatus(val *DeduplicationStatus) *NullableDeduplicationStatus {
	return &NullableDeduplicationStatus{value: val, isSet: true}
}

func (v NullableDeduplicationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeduplicationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
