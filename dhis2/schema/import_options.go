/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImportOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportOptions{}

// ImportOptions struct for ImportOptions
type ImportOptions struct {
	Async                          *bool             `json:"async,omitempty"`
	CategoryIdScheme               *string           `json:"categoryIdScheme,omitempty"`
	CategoryOptionComboIdScheme    *string           `json:"categoryOptionComboIdScheme,omitempty"`
	CategoryOptionIdScheme         *string           `json:"categoryOptionIdScheme,omitempty"`
	DataElementIdScheme            *string           `json:"dataElementIdScheme,omitempty"`
	DataSet                        *string           `json:"dataSet,omitempty"`
	DataSetIdScheme                *string           `json:"dataSetIdScheme,omitempty"`
	DatasetAllowsPeriods           *bool             `json:"datasetAllowsPeriods,omitempty"`
	DryRun                         *bool             `json:"dryRun,omitempty"`
	Filename                       *string           `json:"filename,omitempty"`
	FirstRowIsHeader               *bool             `json:"firstRowIsHeader,omitempty"`
	Force                          *bool             `json:"force,omitempty"`
	IdScheme                       *string           `json:"idScheme,omitempty"`
	IgnoreEmptyCollection          *bool             `json:"ignoreEmptyCollection,omitempty"`
	ImportStrategy                 ImportStrategy    `json:"importStrategy"`
	MergeDataValues                *bool             `json:"mergeDataValues,omitempty"`
	MergeMode                      MergeMode         `json:"mergeMode"`
	NotificationLevel              NotificationLevel `json:"notificationLevel"`
	OrgUnitIdScheme                *string           `json:"orgUnitIdScheme,omitempty"`
	PreheatCache                   *bool             `json:"preheatCache,omitempty"`
	ProgramIdScheme                *string           `json:"programIdScheme,omitempty"`
	ProgramStageIdScheme           *string           `json:"programStageIdScheme,omitempty"`
	ReportMode                     ImportReportMode  `json:"reportMode"`
	RequireAttributeOptionCombo    *bool             `json:"requireAttributeOptionCombo,omitempty"`
	RequireCategoryOptionCombo     *bool             `json:"requireCategoryOptionCombo,omitempty"`
	Sharing                        *bool             `json:"sharing,omitempty"`
	SkipAudit                      *bool             `json:"skipAudit,omitempty"`
	SkipCache                      *bool             `json:"skipCache,omitempty"`
	SkipExistingCheck              *bool             `json:"skipExistingCheck,omitempty"`
	SkipLastUpdated                *bool             `json:"skipLastUpdated,omitempty"`
	SkipNotifications              *bool             `json:"skipNotifications,omitempty"`
	SkipPatternValidation          *bool             `json:"skipPatternValidation,omitempty"`
	StrictAttributeOptionCombos    *bool             `json:"strictAttributeOptionCombos,omitempty"`
	StrictCategoryOptionCombos     *bool             `json:"strictCategoryOptionCombos,omitempty"`
	StrictDataElements             *bool             `json:"strictDataElements,omitempty"`
	StrictDataSetApproval          *bool             `json:"strictDataSetApproval,omitempty"`
	StrictDataSetInputPeriods      *bool             `json:"strictDataSetInputPeriods,omitempty"`
	StrictDataSetLocking           *bool             `json:"strictDataSetLocking,omitempty"`
	StrictOrganisationUnits        *bool             `json:"strictOrganisationUnits,omitempty"`
	StrictPeriods                  *bool             `json:"strictPeriods,omitempty"`
	TrackedEntityAttributeIdScheme *string           `json:"trackedEntityAttributeIdScheme,omitempty"`
}

type _ImportOptions ImportOptions

// NewImportOptions instantiates a new ImportOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportOptions(importStrategy ImportStrategy, mergeMode MergeMode, notificationLevel NotificationLevel, reportMode ImportReportMode) *ImportOptions {
	this := ImportOptions{}
	this.ImportStrategy = importStrategy
	this.MergeMode = mergeMode
	this.NotificationLevel = notificationLevel
	this.ReportMode = reportMode
	return &this
}

// NewImportOptionsWithDefaults instantiates a new ImportOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportOptionsWithDefaults() *ImportOptions {
	this := ImportOptions{}
	return &this
}

// GetAsync returns the Async field value if set, zero value otherwise.
func (o *ImportOptions) GetAsync() bool {
	if o == nil || IsNil(o.Async) {
		var ret bool
		return ret
	}
	return *o.Async
}

// GetAsyncOk returns a tuple with the Async field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetAsyncOk() (*bool, bool) {
	if o == nil || IsNil(o.Async) {
		return nil, false
	}
	return o.Async, true
}

// HasAsync returns a boolean if a field has been set.
func (o *ImportOptions) HasAsync() bool {
	if o != nil && !IsNil(o.Async) {
		return true
	}

	return false
}

// SetAsync gets a reference to the given bool and assigns it to the Async field.
func (o *ImportOptions) SetAsync(v bool) {
	o.Async = &v
}

// GetCategoryIdScheme returns the CategoryIdScheme field value if set, zero value otherwise.
func (o *ImportOptions) GetCategoryIdScheme() string {
	if o == nil || IsNil(o.CategoryIdScheme) {
		var ret string
		return ret
	}
	return *o.CategoryIdScheme
}

// GetCategoryIdSchemeOk returns a tuple with the CategoryIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetCategoryIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryIdScheme) {
		return nil, false
	}
	return o.CategoryIdScheme, true
}

// HasCategoryIdScheme returns a boolean if a field has been set.
func (o *ImportOptions) HasCategoryIdScheme() bool {
	if o != nil && !IsNil(o.CategoryIdScheme) {
		return true
	}

	return false
}

// SetCategoryIdScheme gets a reference to the given string and assigns it to the CategoryIdScheme field.
func (o *ImportOptions) SetCategoryIdScheme(v string) {
	o.CategoryIdScheme = &v
}

// GetCategoryOptionComboIdScheme returns the CategoryOptionComboIdScheme field value if set, zero value otherwise.
func (o *ImportOptions) GetCategoryOptionComboIdScheme() string {
	if o == nil || IsNil(o.CategoryOptionComboIdScheme) {
		var ret string
		return ret
	}
	return *o.CategoryOptionComboIdScheme
}

// GetCategoryOptionComboIdSchemeOk returns a tuple with the CategoryOptionComboIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetCategoryOptionComboIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryOptionComboIdScheme) {
		return nil, false
	}
	return o.CategoryOptionComboIdScheme, true
}

// HasCategoryOptionComboIdScheme returns a boolean if a field has been set.
func (o *ImportOptions) HasCategoryOptionComboIdScheme() bool {
	if o != nil && !IsNil(o.CategoryOptionComboIdScheme) {
		return true
	}

	return false
}

// SetCategoryOptionComboIdScheme gets a reference to the given string and assigns it to the CategoryOptionComboIdScheme field.
func (o *ImportOptions) SetCategoryOptionComboIdScheme(v string) {
	o.CategoryOptionComboIdScheme = &v
}

// GetCategoryOptionIdScheme returns the CategoryOptionIdScheme field value if set, zero value otherwise.
func (o *ImportOptions) GetCategoryOptionIdScheme() string {
	if o == nil || IsNil(o.CategoryOptionIdScheme) {
		var ret string
		return ret
	}
	return *o.CategoryOptionIdScheme
}

// GetCategoryOptionIdSchemeOk returns a tuple with the CategoryOptionIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetCategoryOptionIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryOptionIdScheme) {
		return nil, false
	}
	return o.CategoryOptionIdScheme, true
}

// HasCategoryOptionIdScheme returns a boolean if a field has been set.
func (o *ImportOptions) HasCategoryOptionIdScheme() bool {
	if o != nil && !IsNil(o.CategoryOptionIdScheme) {
		return true
	}

	return false
}

// SetCategoryOptionIdScheme gets a reference to the given string and assigns it to the CategoryOptionIdScheme field.
func (o *ImportOptions) SetCategoryOptionIdScheme(v string) {
	o.CategoryOptionIdScheme = &v
}

// GetDataElementIdScheme returns the DataElementIdScheme field value if set, zero value otherwise.
func (o *ImportOptions) GetDataElementIdScheme() string {
	if o == nil || IsNil(o.DataElementIdScheme) {
		var ret string
		return ret
	}
	return *o.DataElementIdScheme
}

// GetDataElementIdSchemeOk returns a tuple with the DataElementIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetDataElementIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.DataElementIdScheme) {
		return nil, false
	}
	return o.DataElementIdScheme, true
}

// HasDataElementIdScheme returns a boolean if a field has been set.
func (o *ImportOptions) HasDataElementIdScheme() bool {
	if o != nil && !IsNil(o.DataElementIdScheme) {
		return true
	}

	return false
}

// SetDataElementIdScheme gets a reference to the given string and assigns it to the DataElementIdScheme field.
func (o *ImportOptions) SetDataElementIdScheme(v string) {
	o.DataElementIdScheme = &v
}

// GetDataSet returns the DataSet field value if set, zero value otherwise.
func (o *ImportOptions) GetDataSet() string {
	if o == nil || IsNil(o.DataSet) {
		var ret string
		return ret
	}
	return *o.DataSet
}

// GetDataSetOk returns a tuple with the DataSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetDataSetOk() (*string, bool) {
	if o == nil || IsNil(o.DataSet) {
		return nil, false
	}
	return o.DataSet, true
}

// HasDataSet returns a boolean if a field has been set.
func (o *ImportOptions) HasDataSet() bool {
	if o != nil && !IsNil(o.DataSet) {
		return true
	}

	return false
}

// SetDataSet gets a reference to the given string and assigns it to the DataSet field.
func (o *ImportOptions) SetDataSet(v string) {
	o.DataSet = &v
}

// GetDataSetIdScheme returns the DataSetIdScheme field value if set, zero value otherwise.
func (o *ImportOptions) GetDataSetIdScheme() string {
	if o == nil || IsNil(o.DataSetIdScheme) {
		var ret string
		return ret
	}
	return *o.DataSetIdScheme
}

// GetDataSetIdSchemeOk returns a tuple with the DataSetIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetDataSetIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.DataSetIdScheme) {
		return nil, false
	}
	return o.DataSetIdScheme, true
}

// HasDataSetIdScheme returns a boolean if a field has been set.
func (o *ImportOptions) HasDataSetIdScheme() bool {
	if o != nil && !IsNil(o.DataSetIdScheme) {
		return true
	}

	return false
}

// SetDataSetIdScheme gets a reference to the given string and assigns it to the DataSetIdScheme field.
func (o *ImportOptions) SetDataSetIdScheme(v string) {
	o.DataSetIdScheme = &v
}

// GetDatasetAllowsPeriods returns the DatasetAllowsPeriods field value if set, zero value otherwise.
func (o *ImportOptions) GetDatasetAllowsPeriods() bool {
	if o == nil || IsNil(o.DatasetAllowsPeriods) {
		var ret bool
		return ret
	}
	return *o.DatasetAllowsPeriods
}

// GetDatasetAllowsPeriodsOk returns a tuple with the DatasetAllowsPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetDatasetAllowsPeriodsOk() (*bool, bool) {
	if o == nil || IsNil(o.DatasetAllowsPeriods) {
		return nil, false
	}
	return o.DatasetAllowsPeriods, true
}

// HasDatasetAllowsPeriods returns a boolean if a field has been set.
func (o *ImportOptions) HasDatasetAllowsPeriods() bool {
	if o != nil && !IsNil(o.DatasetAllowsPeriods) {
		return true
	}

	return false
}

// SetDatasetAllowsPeriods gets a reference to the given bool and assigns it to the DatasetAllowsPeriods field.
func (o *ImportOptions) SetDatasetAllowsPeriods(v bool) {
	o.DatasetAllowsPeriods = &v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *ImportOptions) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *ImportOptions) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *ImportOptions) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *ImportOptions) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *ImportOptions) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *ImportOptions) SetFilename(v string) {
	o.Filename = &v
}

// GetFirstRowIsHeader returns the FirstRowIsHeader field value if set, zero value otherwise.
func (o *ImportOptions) GetFirstRowIsHeader() bool {
	if o == nil || IsNil(o.FirstRowIsHeader) {
		var ret bool
		return ret
	}
	return *o.FirstRowIsHeader
}

// GetFirstRowIsHeaderOk returns a tuple with the FirstRowIsHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetFirstRowIsHeaderOk() (*bool, bool) {
	if o == nil || IsNil(o.FirstRowIsHeader) {
		return nil, false
	}
	return o.FirstRowIsHeader, true
}

// HasFirstRowIsHeader returns a boolean if a field has been set.
func (o *ImportOptions) HasFirstRowIsHeader() bool {
	if o != nil && !IsNil(o.FirstRowIsHeader) {
		return true
	}

	return false
}

// SetFirstRowIsHeader gets a reference to the given bool and assigns it to the FirstRowIsHeader field.
func (o *ImportOptions) SetFirstRowIsHeader(v bool) {
	o.FirstRowIsHeader = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *ImportOptions) GetForce() bool {
	if o == nil || IsNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetForceOk() (*bool, bool) {
	if o == nil || IsNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *ImportOptions) HasForce() bool {
	if o != nil && !IsNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *ImportOptions) SetForce(v bool) {
	o.Force = &v
}

// GetIdScheme returns the IdScheme field value if set, zero value otherwise.
func (o *ImportOptions) GetIdScheme() string {
	if o == nil || IsNil(o.IdScheme) {
		var ret string
		return ret
	}
	return *o.IdScheme
}

// GetIdSchemeOk returns a tuple with the IdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.IdScheme) {
		return nil, false
	}
	return o.IdScheme, true
}

// HasIdScheme returns a boolean if a field has been set.
func (o *ImportOptions) HasIdScheme() bool {
	if o != nil && !IsNil(o.IdScheme) {
		return true
	}

	return false
}

// SetIdScheme gets a reference to the given string and assigns it to the IdScheme field.
func (o *ImportOptions) SetIdScheme(v string) {
	o.IdScheme = &v
}

// GetIgnoreEmptyCollection returns the IgnoreEmptyCollection field value if set, zero value otherwise.
func (o *ImportOptions) GetIgnoreEmptyCollection() bool {
	if o == nil || IsNil(o.IgnoreEmptyCollection) {
		var ret bool
		return ret
	}
	return *o.IgnoreEmptyCollection
}

// GetIgnoreEmptyCollectionOk returns a tuple with the IgnoreEmptyCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetIgnoreEmptyCollectionOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreEmptyCollection) {
		return nil, false
	}
	return o.IgnoreEmptyCollection, true
}

// HasIgnoreEmptyCollection returns a boolean if a field has been set.
func (o *ImportOptions) HasIgnoreEmptyCollection() bool {
	if o != nil && !IsNil(o.IgnoreEmptyCollection) {
		return true
	}

	return false
}

// SetIgnoreEmptyCollection gets a reference to the given bool and assigns it to the IgnoreEmptyCollection field.
func (o *ImportOptions) SetIgnoreEmptyCollection(v bool) {
	o.IgnoreEmptyCollection = &v
}

// GetImportStrategy returns the ImportStrategy field value
func (o *ImportOptions) GetImportStrategy() ImportStrategy {
	if o == nil {
		var ret ImportStrategy
		return ret
	}

	return o.ImportStrategy
}

// GetImportStrategyOk returns a tuple with the ImportStrategy field value
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetImportStrategyOk() (*ImportStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImportStrategy, true
}

// SetImportStrategy sets field value
func (o *ImportOptions) SetImportStrategy(v ImportStrategy) {
	o.ImportStrategy = v
}

// GetMergeDataValues returns the MergeDataValues field value if set, zero value otherwise.
func (o *ImportOptions) GetMergeDataValues() bool {
	if o == nil || IsNil(o.MergeDataValues) {
		var ret bool
		return ret
	}
	return *o.MergeDataValues
}

// GetMergeDataValuesOk returns a tuple with the MergeDataValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetMergeDataValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.MergeDataValues) {
		return nil, false
	}
	return o.MergeDataValues, true
}

// HasMergeDataValues returns a boolean if a field has been set.
func (o *ImportOptions) HasMergeDataValues() bool {
	if o != nil && !IsNil(o.MergeDataValues) {
		return true
	}

	return false
}

// SetMergeDataValues gets a reference to the given bool and assigns it to the MergeDataValues field.
func (o *ImportOptions) SetMergeDataValues(v bool) {
	o.MergeDataValues = &v
}

// GetMergeMode returns the MergeMode field value
func (o *ImportOptions) GetMergeMode() MergeMode {
	if o == nil {
		var ret MergeMode
		return ret
	}

	return o.MergeMode
}

// GetMergeModeOk returns a tuple with the MergeMode field value
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetMergeModeOk() (*MergeMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MergeMode, true
}

// SetMergeMode sets field value
func (o *ImportOptions) SetMergeMode(v MergeMode) {
	o.MergeMode = v
}

// GetNotificationLevel returns the NotificationLevel field value
func (o *ImportOptions) GetNotificationLevel() NotificationLevel {
	if o == nil {
		var ret NotificationLevel
		return ret
	}

	return o.NotificationLevel
}

// GetNotificationLevelOk returns a tuple with the NotificationLevel field value
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetNotificationLevelOk() (*NotificationLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationLevel, true
}

// SetNotificationLevel sets field value
func (o *ImportOptions) SetNotificationLevel(v NotificationLevel) {
	o.NotificationLevel = v
}

// GetOrgUnitIdScheme returns the OrgUnitIdScheme field value if set, zero value otherwise.
func (o *ImportOptions) GetOrgUnitIdScheme() string {
	if o == nil || IsNil(o.OrgUnitIdScheme) {
		var ret string
		return ret
	}
	return *o.OrgUnitIdScheme
}

// GetOrgUnitIdSchemeOk returns a tuple with the OrgUnitIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetOrgUnitIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnitIdScheme) {
		return nil, false
	}
	return o.OrgUnitIdScheme, true
}

// HasOrgUnitIdScheme returns a boolean if a field has been set.
func (o *ImportOptions) HasOrgUnitIdScheme() bool {
	if o != nil && !IsNil(o.OrgUnitIdScheme) {
		return true
	}

	return false
}

// SetOrgUnitIdScheme gets a reference to the given string and assigns it to the OrgUnitIdScheme field.
func (o *ImportOptions) SetOrgUnitIdScheme(v string) {
	o.OrgUnitIdScheme = &v
}

// GetPreheatCache returns the PreheatCache field value if set, zero value otherwise.
func (o *ImportOptions) GetPreheatCache() bool {
	if o == nil || IsNil(o.PreheatCache) {
		var ret bool
		return ret
	}
	return *o.PreheatCache
}

// GetPreheatCacheOk returns a tuple with the PreheatCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetPreheatCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.PreheatCache) {
		return nil, false
	}
	return o.PreheatCache, true
}

// HasPreheatCache returns a boolean if a field has been set.
func (o *ImportOptions) HasPreheatCache() bool {
	if o != nil && !IsNil(o.PreheatCache) {
		return true
	}

	return false
}

// SetPreheatCache gets a reference to the given bool and assigns it to the PreheatCache field.
func (o *ImportOptions) SetPreheatCache(v bool) {
	o.PreheatCache = &v
}

// GetProgramIdScheme returns the ProgramIdScheme field value if set, zero value otherwise.
func (o *ImportOptions) GetProgramIdScheme() string {
	if o == nil || IsNil(o.ProgramIdScheme) {
		var ret string
		return ret
	}
	return *o.ProgramIdScheme
}

// GetProgramIdSchemeOk returns a tuple with the ProgramIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetProgramIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.ProgramIdScheme) {
		return nil, false
	}
	return o.ProgramIdScheme, true
}

// HasProgramIdScheme returns a boolean if a field has been set.
func (o *ImportOptions) HasProgramIdScheme() bool {
	if o != nil && !IsNil(o.ProgramIdScheme) {
		return true
	}

	return false
}

// SetProgramIdScheme gets a reference to the given string and assigns it to the ProgramIdScheme field.
func (o *ImportOptions) SetProgramIdScheme(v string) {
	o.ProgramIdScheme = &v
}

// GetProgramStageIdScheme returns the ProgramStageIdScheme field value if set, zero value otherwise.
func (o *ImportOptions) GetProgramStageIdScheme() string {
	if o == nil || IsNil(o.ProgramStageIdScheme) {
		var ret string
		return ret
	}
	return *o.ProgramStageIdScheme
}

// GetProgramStageIdSchemeOk returns a tuple with the ProgramStageIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetProgramStageIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.ProgramStageIdScheme) {
		return nil, false
	}
	return o.ProgramStageIdScheme, true
}

// HasProgramStageIdScheme returns a boolean if a field has been set.
func (o *ImportOptions) HasProgramStageIdScheme() bool {
	if o != nil && !IsNil(o.ProgramStageIdScheme) {
		return true
	}

	return false
}

// SetProgramStageIdScheme gets a reference to the given string and assigns it to the ProgramStageIdScheme field.
func (o *ImportOptions) SetProgramStageIdScheme(v string) {
	o.ProgramStageIdScheme = &v
}

// GetReportMode returns the ReportMode field value
func (o *ImportOptions) GetReportMode() ImportReportMode {
	if o == nil {
		var ret ImportReportMode
		return ret
	}

	return o.ReportMode
}

// GetReportModeOk returns a tuple with the ReportMode field value
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetReportModeOk() (*ImportReportMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportMode, true
}

// SetReportMode sets field value
func (o *ImportOptions) SetReportMode(v ImportReportMode) {
	o.ReportMode = v
}

// GetRequireAttributeOptionCombo returns the RequireAttributeOptionCombo field value if set, zero value otherwise.
func (o *ImportOptions) GetRequireAttributeOptionCombo() bool {
	if o == nil || IsNil(o.RequireAttributeOptionCombo) {
		var ret bool
		return ret
	}
	return *o.RequireAttributeOptionCombo
}

// GetRequireAttributeOptionComboOk returns a tuple with the RequireAttributeOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetRequireAttributeOptionComboOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireAttributeOptionCombo) {
		return nil, false
	}
	return o.RequireAttributeOptionCombo, true
}

// HasRequireAttributeOptionCombo returns a boolean if a field has been set.
func (o *ImportOptions) HasRequireAttributeOptionCombo() bool {
	if o != nil && !IsNil(o.RequireAttributeOptionCombo) {
		return true
	}

	return false
}

// SetRequireAttributeOptionCombo gets a reference to the given bool and assigns it to the RequireAttributeOptionCombo field.
func (o *ImportOptions) SetRequireAttributeOptionCombo(v bool) {
	o.RequireAttributeOptionCombo = &v
}

// GetRequireCategoryOptionCombo returns the RequireCategoryOptionCombo field value if set, zero value otherwise.
func (o *ImportOptions) GetRequireCategoryOptionCombo() bool {
	if o == nil || IsNil(o.RequireCategoryOptionCombo) {
		var ret bool
		return ret
	}
	return *o.RequireCategoryOptionCombo
}

// GetRequireCategoryOptionComboOk returns a tuple with the RequireCategoryOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetRequireCategoryOptionComboOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireCategoryOptionCombo) {
		return nil, false
	}
	return o.RequireCategoryOptionCombo, true
}

// HasRequireCategoryOptionCombo returns a boolean if a field has been set.
func (o *ImportOptions) HasRequireCategoryOptionCombo() bool {
	if o != nil && !IsNil(o.RequireCategoryOptionCombo) {
		return true
	}

	return false
}

// SetRequireCategoryOptionCombo gets a reference to the given bool and assigns it to the RequireCategoryOptionCombo field.
func (o *ImportOptions) SetRequireCategoryOptionCombo(v bool) {
	o.RequireCategoryOptionCombo = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *ImportOptions) GetSharing() bool {
	if o == nil || IsNil(o.Sharing) {
		var ret bool
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetSharingOk() (*bool, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *ImportOptions) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given bool and assigns it to the Sharing field.
func (o *ImportOptions) SetSharing(v bool) {
	o.Sharing = &v
}

// GetSkipAudit returns the SkipAudit field value if set, zero value otherwise.
func (o *ImportOptions) GetSkipAudit() bool {
	if o == nil || IsNil(o.SkipAudit) {
		var ret bool
		return ret
	}
	return *o.SkipAudit
}

// GetSkipAuditOk returns a tuple with the SkipAudit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetSkipAuditOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipAudit) {
		return nil, false
	}
	return o.SkipAudit, true
}

// HasSkipAudit returns a boolean if a field has been set.
func (o *ImportOptions) HasSkipAudit() bool {
	if o != nil && !IsNil(o.SkipAudit) {
		return true
	}

	return false
}

// SetSkipAudit gets a reference to the given bool and assigns it to the SkipAudit field.
func (o *ImportOptions) SetSkipAudit(v bool) {
	o.SkipAudit = &v
}

// GetSkipCache returns the SkipCache field value if set, zero value otherwise.
func (o *ImportOptions) GetSkipCache() bool {
	if o == nil || IsNil(o.SkipCache) {
		var ret bool
		return ret
	}
	return *o.SkipCache
}

// GetSkipCacheOk returns a tuple with the SkipCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetSkipCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipCache) {
		return nil, false
	}
	return o.SkipCache, true
}

// HasSkipCache returns a boolean if a field has been set.
func (o *ImportOptions) HasSkipCache() bool {
	if o != nil && !IsNil(o.SkipCache) {
		return true
	}

	return false
}

// SetSkipCache gets a reference to the given bool and assigns it to the SkipCache field.
func (o *ImportOptions) SetSkipCache(v bool) {
	o.SkipCache = &v
}

// GetSkipExistingCheck returns the SkipExistingCheck field value if set, zero value otherwise.
func (o *ImportOptions) GetSkipExistingCheck() bool {
	if o == nil || IsNil(o.SkipExistingCheck) {
		var ret bool
		return ret
	}
	return *o.SkipExistingCheck
}

// GetSkipExistingCheckOk returns a tuple with the SkipExistingCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetSkipExistingCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipExistingCheck) {
		return nil, false
	}
	return o.SkipExistingCheck, true
}

// HasSkipExistingCheck returns a boolean if a field has been set.
func (o *ImportOptions) HasSkipExistingCheck() bool {
	if o != nil && !IsNil(o.SkipExistingCheck) {
		return true
	}

	return false
}

// SetSkipExistingCheck gets a reference to the given bool and assigns it to the SkipExistingCheck field.
func (o *ImportOptions) SetSkipExistingCheck(v bool) {
	o.SkipExistingCheck = &v
}

// GetSkipLastUpdated returns the SkipLastUpdated field value if set, zero value otherwise.
func (o *ImportOptions) GetSkipLastUpdated() bool {
	if o == nil || IsNil(o.SkipLastUpdated) {
		var ret bool
		return ret
	}
	return *o.SkipLastUpdated
}

// GetSkipLastUpdatedOk returns a tuple with the SkipLastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetSkipLastUpdatedOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipLastUpdated) {
		return nil, false
	}
	return o.SkipLastUpdated, true
}

// HasSkipLastUpdated returns a boolean if a field has been set.
func (o *ImportOptions) HasSkipLastUpdated() bool {
	if o != nil && !IsNil(o.SkipLastUpdated) {
		return true
	}

	return false
}

// SetSkipLastUpdated gets a reference to the given bool and assigns it to the SkipLastUpdated field.
func (o *ImportOptions) SetSkipLastUpdated(v bool) {
	o.SkipLastUpdated = &v
}

// GetSkipNotifications returns the SkipNotifications field value if set, zero value otherwise.
func (o *ImportOptions) GetSkipNotifications() bool {
	if o == nil || IsNil(o.SkipNotifications) {
		var ret bool
		return ret
	}
	return *o.SkipNotifications
}

// GetSkipNotificationsOk returns a tuple with the SkipNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetSkipNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipNotifications) {
		return nil, false
	}
	return o.SkipNotifications, true
}

// HasSkipNotifications returns a boolean if a field has been set.
func (o *ImportOptions) HasSkipNotifications() bool {
	if o != nil && !IsNil(o.SkipNotifications) {
		return true
	}

	return false
}

// SetSkipNotifications gets a reference to the given bool and assigns it to the SkipNotifications field.
func (o *ImportOptions) SetSkipNotifications(v bool) {
	o.SkipNotifications = &v
}

// GetSkipPatternValidation returns the SkipPatternValidation field value if set, zero value otherwise.
func (o *ImportOptions) GetSkipPatternValidation() bool {
	if o == nil || IsNil(o.SkipPatternValidation) {
		var ret bool
		return ret
	}
	return *o.SkipPatternValidation
}

// GetSkipPatternValidationOk returns a tuple with the SkipPatternValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetSkipPatternValidationOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipPatternValidation) {
		return nil, false
	}
	return o.SkipPatternValidation, true
}

// HasSkipPatternValidation returns a boolean if a field has been set.
func (o *ImportOptions) HasSkipPatternValidation() bool {
	if o != nil && !IsNil(o.SkipPatternValidation) {
		return true
	}

	return false
}

// SetSkipPatternValidation gets a reference to the given bool and assigns it to the SkipPatternValidation field.
func (o *ImportOptions) SetSkipPatternValidation(v bool) {
	o.SkipPatternValidation = &v
}

// GetStrictAttributeOptionCombos returns the StrictAttributeOptionCombos field value if set, zero value otherwise.
func (o *ImportOptions) GetStrictAttributeOptionCombos() bool {
	if o == nil || IsNil(o.StrictAttributeOptionCombos) {
		var ret bool
		return ret
	}
	return *o.StrictAttributeOptionCombos
}

// GetStrictAttributeOptionCombosOk returns a tuple with the StrictAttributeOptionCombos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetStrictAttributeOptionCombosOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictAttributeOptionCombos) {
		return nil, false
	}
	return o.StrictAttributeOptionCombos, true
}

// HasStrictAttributeOptionCombos returns a boolean if a field has been set.
func (o *ImportOptions) HasStrictAttributeOptionCombos() bool {
	if o != nil && !IsNil(o.StrictAttributeOptionCombos) {
		return true
	}

	return false
}

// SetStrictAttributeOptionCombos gets a reference to the given bool and assigns it to the StrictAttributeOptionCombos field.
func (o *ImportOptions) SetStrictAttributeOptionCombos(v bool) {
	o.StrictAttributeOptionCombos = &v
}

// GetStrictCategoryOptionCombos returns the StrictCategoryOptionCombos field value if set, zero value otherwise.
func (o *ImportOptions) GetStrictCategoryOptionCombos() bool {
	if o == nil || IsNil(o.StrictCategoryOptionCombos) {
		var ret bool
		return ret
	}
	return *o.StrictCategoryOptionCombos
}

// GetStrictCategoryOptionCombosOk returns a tuple with the StrictCategoryOptionCombos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetStrictCategoryOptionCombosOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictCategoryOptionCombos) {
		return nil, false
	}
	return o.StrictCategoryOptionCombos, true
}

// HasStrictCategoryOptionCombos returns a boolean if a field has been set.
func (o *ImportOptions) HasStrictCategoryOptionCombos() bool {
	if o != nil && !IsNil(o.StrictCategoryOptionCombos) {
		return true
	}

	return false
}

// SetStrictCategoryOptionCombos gets a reference to the given bool and assigns it to the StrictCategoryOptionCombos field.
func (o *ImportOptions) SetStrictCategoryOptionCombos(v bool) {
	o.StrictCategoryOptionCombos = &v
}

// GetStrictDataElements returns the StrictDataElements field value if set, zero value otherwise.
func (o *ImportOptions) GetStrictDataElements() bool {
	if o == nil || IsNil(o.StrictDataElements) {
		var ret bool
		return ret
	}
	return *o.StrictDataElements
}

// GetStrictDataElementsOk returns a tuple with the StrictDataElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetStrictDataElementsOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictDataElements) {
		return nil, false
	}
	return o.StrictDataElements, true
}

// HasStrictDataElements returns a boolean if a field has been set.
func (o *ImportOptions) HasStrictDataElements() bool {
	if o != nil && !IsNil(o.StrictDataElements) {
		return true
	}

	return false
}

// SetStrictDataElements gets a reference to the given bool and assigns it to the StrictDataElements field.
func (o *ImportOptions) SetStrictDataElements(v bool) {
	o.StrictDataElements = &v
}

// GetStrictDataSetApproval returns the StrictDataSetApproval field value if set, zero value otherwise.
func (o *ImportOptions) GetStrictDataSetApproval() bool {
	if o == nil || IsNil(o.StrictDataSetApproval) {
		var ret bool
		return ret
	}
	return *o.StrictDataSetApproval
}

// GetStrictDataSetApprovalOk returns a tuple with the StrictDataSetApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetStrictDataSetApprovalOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictDataSetApproval) {
		return nil, false
	}
	return o.StrictDataSetApproval, true
}

// HasStrictDataSetApproval returns a boolean if a field has been set.
func (o *ImportOptions) HasStrictDataSetApproval() bool {
	if o != nil && !IsNil(o.StrictDataSetApproval) {
		return true
	}

	return false
}

// SetStrictDataSetApproval gets a reference to the given bool and assigns it to the StrictDataSetApproval field.
func (o *ImportOptions) SetStrictDataSetApproval(v bool) {
	o.StrictDataSetApproval = &v
}

// GetStrictDataSetInputPeriods returns the StrictDataSetInputPeriods field value if set, zero value otherwise.
func (o *ImportOptions) GetStrictDataSetInputPeriods() bool {
	if o == nil || IsNil(o.StrictDataSetInputPeriods) {
		var ret bool
		return ret
	}
	return *o.StrictDataSetInputPeriods
}

// GetStrictDataSetInputPeriodsOk returns a tuple with the StrictDataSetInputPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetStrictDataSetInputPeriodsOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictDataSetInputPeriods) {
		return nil, false
	}
	return o.StrictDataSetInputPeriods, true
}

// HasStrictDataSetInputPeriods returns a boolean if a field has been set.
func (o *ImportOptions) HasStrictDataSetInputPeriods() bool {
	if o != nil && !IsNil(o.StrictDataSetInputPeriods) {
		return true
	}

	return false
}

// SetStrictDataSetInputPeriods gets a reference to the given bool and assigns it to the StrictDataSetInputPeriods field.
func (o *ImportOptions) SetStrictDataSetInputPeriods(v bool) {
	o.StrictDataSetInputPeriods = &v
}

// GetStrictDataSetLocking returns the StrictDataSetLocking field value if set, zero value otherwise.
func (o *ImportOptions) GetStrictDataSetLocking() bool {
	if o == nil || IsNil(o.StrictDataSetLocking) {
		var ret bool
		return ret
	}
	return *o.StrictDataSetLocking
}

// GetStrictDataSetLockingOk returns a tuple with the StrictDataSetLocking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetStrictDataSetLockingOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictDataSetLocking) {
		return nil, false
	}
	return o.StrictDataSetLocking, true
}

// HasStrictDataSetLocking returns a boolean if a field has been set.
func (o *ImportOptions) HasStrictDataSetLocking() bool {
	if o != nil && !IsNil(o.StrictDataSetLocking) {
		return true
	}

	return false
}

// SetStrictDataSetLocking gets a reference to the given bool and assigns it to the StrictDataSetLocking field.
func (o *ImportOptions) SetStrictDataSetLocking(v bool) {
	o.StrictDataSetLocking = &v
}

// GetStrictOrganisationUnits returns the StrictOrganisationUnits field value if set, zero value otherwise.
func (o *ImportOptions) GetStrictOrganisationUnits() bool {
	if o == nil || IsNil(o.StrictOrganisationUnits) {
		var ret bool
		return ret
	}
	return *o.StrictOrganisationUnits
}

// GetStrictOrganisationUnitsOk returns a tuple with the StrictOrganisationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetStrictOrganisationUnitsOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictOrganisationUnits) {
		return nil, false
	}
	return o.StrictOrganisationUnits, true
}

// HasStrictOrganisationUnits returns a boolean if a field has been set.
func (o *ImportOptions) HasStrictOrganisationUnits() bool {
	if o != nil && !IsNil(o.StrictOrganisationUnits) {
		return true
	}

	return false
}

// SetStrictOrganisationUnits gets a reference to the given bool and assigns it to the StrictOrganisationUnits field.
func (o *ImportOptions) SetStrictOrganisationUnits(v bool) {
	o.StrictOrganisationUnits = &v
}

// GetStrictPeriods returns the StrictPeriods field value if set, zero value otherwise.
func (o *ImportOptions) GetStrictPeriods() bool {
	if o == nil || IsNil(o.StrictPeriods) {
		var ret bool
		return ret
	}
	return *o.StrictPeriods
}

// GetStrictPeriodsOk returns a tuple with the StrictPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetStrictPeriodsOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictPeriods) {
		return nil, false
	}
	return o.StrictPeriods, true
}

// HasStrictPeriods returns a boolean if a field has been set.
func (o *ImportOptions) HasStrictPeriods() bool {
	if o != nil && !IsNil(o.StrictPeriods) {
		return true
	}

	return false
}

// SetStrictPeriods gets a reference to the given bool and assigns it to the StrictPeriods field.
func (o *ImportOptions) SetStrictPeriods(v bool) {
	o.StrictPeriods = &v
}

// GetTrackedEntityAttributeIdScheme returns the TrackedEntityAttributeIdScheme field value if set, zero value otherwise.
func (o *ImportOptions) GetTrackedEntityAttributeIdScheme() string {
	if o == nil || IsNil(o.TrackedEntityAttributeIdScheme) {
		var ret string
		return ret
	}
	return *o.TrackedEntityAttributeIdScheme
}

// GetTrackedEntityAttributeIdSchemeOk returns a tuple with the TrackedEntityAttributeIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetTrackedEntityAttributeIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.TrackedEntityAttributeIdScheme) {
		return nil, false
	}
	return o.TrackedEntityAttributeIdScheme, true
}

// HasTrackedEntityAttributeIdScheme returns a boolean if a field has been set.
func (o *ImportOptions) HasTrackedEntityAttributeIdScheme() bool {
	if o != nil && !IsNil(o.TrackedEntityAttributeIdScheme) {
		return true
	}

	return false
}

// SetTrackedEntityAttributeIdScheme gets a reference to the given string and assigns it to the TrackedEntityAttributeIdScheme field.
func (o *ImportOptions) SetTrackedEntityAttributeIdScheme(v string) {
	o.TrackedEntityAttributeIdScheme = &v
}

func (o ImportOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Async) {
		toSerialize["async"] = o.Async
	}
	if !IsNil(o.CategoryIdScheme) {
		toSerialize["categoryIdScheme"] = o.CategoryIdScheme
	}
	if !IsNil(o.CategoryOptionComboIdScheme) {
		toSerialize["categoryOptionComboIdScheme"] = o.CategoryOptionComboIdScheme
	}
	if !IsNil(o.CategoryOptionIdScheme) {
		toSerialize["categoryOptionIdScheme"] = o.CategoryOptionIdScheme
	}
	if !IsNil(o.DataElementIdScheme) {
		toSerialize["dataElementIdScheme"] = o.DataElementIdScheme
	}
	if !IsNil(o.DataSet) {
		toSerialize["dataSet"] = o.DataSet
	}
	if !IsNil(o.DataSetIdScheme) {
		toSerialize["dataSetIdScheme"] = o.DataSetIdScheme
	}
	if !IsNil(o.DatasetAllowsPeriods) {
		toSerialize["datasetAllowsPeriods"] = o.DatasetAllowsPeriods
	}
	if !IsNil(o.DryRun) {
		toSerialize["dryRun"] = o.DryRun
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.FirstRowIsHeader) {
		toSerialize["firstRowIsHeader"] = o.FirstRowIsHeader
	}
	if !IsNil(o.Force) {
		toSerialize["force"] = o.Force
	}
	if !IsNil(o.IdScheme) {
		toSerialize["idScheme"] = o.IdScheme
	}
	if !IsNil(o.IgnoreEmptyCollection) {
		toSerialize["ignoreEmptyCollection"] = o.IgnoreEmptyCollection
	}
	toSerialize["importStrategy"] = o.ImportStrategy
	if !IsNil(o.MergeDataValues) {
		toSerialize["mergeDataValues"] = o.MergeDataValues
	}
	toSerialize["mergeMode"] = o.MergeMode
	toSerialize["notificationLevel"] = o.NotificationLevel
	if !IsNil(o.OrgUnitIdScheme) {
		toSerialize["orgUnitIdScheme"] = o.OrgUnitIdScheme
	}
	if !IsNil(o.PreheatCache) {
		toSerialize["preheatCache"] = o.PreheatCache
	}
	if !IsNil(o.ProgramIdScheme) {
		toSerialize["programIdScheme"] = o.ProgramIdScheme
	}
	if !IsNil(o.ProgramStageIdScheme) {
		toSerialize["programStageIdScheme"] = o.ProgramStageIdScheme
	}
	toSerialize["reportMode"] = o.ReportMode
	if !IsNil(o.RequireAttributeOptionCombo) {
		toSerialize["requireAttributeOptionCombo"] = o.RequireAttributeOptionCombo
	}
	if !IsNil(o.RequireCategoryOptionCombo) {
		toSerialize["requireCategoryOptionCombo"] = o.RequireCategoryOptionCombo
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.SkipAudit) {
		toSerialize["skipAudit"] = o.SkipAudit
	}
	if !IsNil(o.SkipCache) {
		toSerialize["skipCache"] = o.SkipCache
	}
	if !IsNil(o.SkipExistingCheck) {
		toSerialize["skipExistingCheck"] = o.SkipExistingCheck
	}
	if !IsNil(o.SkipLastUpdated) {
		toSerialize["skipLastUpdated"] = o.SkipLastUpdated
	}
	if !IsNil(o.SkipNotifications) {
		toSerialize["skipNotifications"] = o.SkipNotifications
	}
	if !IsNil(o.SkipPatternValidation) {
		toSerialize["skipPatternValidation"] = o.SkipPatternValidation
	}
	if !IsNil(o.StrictAttributeOptionCombos) {
		toSerialize["strictAttributeOptionCombos"] = o.StrictAttributeOptionCombos
	}
	if !IsNil(o.StrictCategoryOptionCombos) {
		toSerialize["strictCategoryOptionCombos"] = o.StrictCategoryOptionCombos
	}
	if !IsNil(o.StrictDataElements) {
		toSerialize["strictDataElements"] = o.StrictDataElements
	}
	if !IsNil(o.StrictDataSetApproval) {
		toSerialize["strictDataSetApproval"] = o.StrictDataSetApproval
	}
	if !IsNil(o.StrictDataSetInputPeriods) {
		toSerialize["strictDataSetInputPeriods"] = o.StrictDataSetInputPeriods
	}
	if !IsNil(o.StrictDataSetLocking) {
		toSerialize["strictDataSetLocking"] = o.StrictDataSetLocking
	}
	if !IsNil(o.StrictOrganisationUnits) {
		toSerialize["strictOrganisationUnits"] = o.StrictOrganisationUnits
	}
	if !IsNil(o.StrictPeriods) {
		toSerialize["strictPeriods"] = o.StrictPeriods
	}
	if !IsNil(o.TrackedEntityAttributeIdScheme) {
		toSerialize["trackedEntityAttributeIdScheme"] = o.TrackedEntityAttributeIdScheme
	}
	return toSerialize, nil
}

func (o *ImportOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"importStrategy",
		"mergeMode",
		"notificationLevel",
		"reportMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportOptions := _ImportOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportOptions)

	if err != nil {
		return err
	}

	*o = ImportOptions(varImportOptions)

	return err
}

type NullableImportOptions struct {
	value *ImportOptions
	isSet bool
}

func (v NullableImportOptions) Get() *ImportOptions {
	return v.value
}

func (v *NullableImportOptions) Set(val *ImportOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableImportOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableImportOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportOptions(val *ImportOptions) *NullableImportOptions {
	return &NullableImportOptions{value: val, isSet: true}
}

func (v NullableImportOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
