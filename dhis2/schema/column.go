/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the Column type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Column{}

// Column struct for Column
type Column struct {
	Index *int32 `json:"index,omitempty"`
	Span  *int32 `json:"span,omitempty"`
}

// NewColumn instantiates a new Column object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColumn() *Column {
	this := Column{}
	return &this
}

// NewColumnWithDefaults instantiates a new Column object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColumnWithDefaults() *Column {
	this := Column{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *Column) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *Column) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *Column) SetIndex(v int32) {
	o.Index = &v
}

// GetSpan returns the Span field value if set, zero value otherwise.
func (o *Column) GetSpan() int32 {
	if o == nil || IsNil(o.Span) {
		var ret int32
		return ret
	}
	return *o.Span
}

// GetSpanOk returns a tuple with the Span field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Column) GetSpanOk() (*int32, bool) {
	if o == nil || IsNil(o.Span) {
		return nil, false
	}
	return o.Span, true
}

// HasSpan returns a boolean if a field has been set.
func (o *Column) HasSpan() bool {
	if o != nil && !IsNil(o.Span) {
		return true
	}

	return false
}

// SetSpan gets a reference to the given int32 and assigns it to the Span field.
func (o *Column) SetSpan(v int32) {
	o.Span = &v
}

func (o Column) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Column) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.Span) {
		toSerialize["span"] = o.Span
	}
	return toSerialize, nil
}

type NullableColumn struct {
	value *Column
	isSet bool
}

func (v NullableColumn) Get() *Column {
	return v.value
}

func (v *NullableColumn) Set(val *Column) {
	v.value = val
	v.isSet = true
}

func (v NullableColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumn(val *Column) *NullableColumn {
	return &NullableColumn{value: val, isSet: true}
}

func (v NullableColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
