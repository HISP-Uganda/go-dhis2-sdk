/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// SectionPropertyNames the model 'SectionPropertyNames'
type SectionPropertyNames string

// List of SectionPropertyNames
const (
	SECTIONPROPERTYNAMES_ACCESS                          SectionPropertyNames = "access"
	SECTIONPROPERTYNAMES_ATTRIBUTE_VALUES                SectionPropertyNames = "attributeValues"
	SECTIONPROPERTYNAMES_CATEGORY_COMBOS                 SectionPropertyNames = "categoryCombos"
	SECTIONPROPERTYNAMES_CODE                            SectionPropertyNames = "code"
	SECTIONPROPERTYNAMES_CREATED                         SectionPropertyNames = "created"
	SECTIONPROPERTYNAMES_CREATED_BY                      SectionPropertyNames = "createdBy"
	SECTIONPROPERTYNAMES_DATA_ELEMENTS                   SectionPropertyNames = "dataElements"
	SECTIONPROPERTYNAMES_DATA_SET                        SectionPropertyNames = "dataSet"
	SECTIONPROPERTYNAMES_DESCRIPTION                     SectionPropertyNames = "description"
	SECTIONPROPERTYNAMES_DISABLE_DATA_ELEMENT_AUTO_GROUP SectionPropertyNames = "disableDataElementAutoGroup"
	SECTIONPROPERTYNAMES_DISPLAY_NAME                    SectionPropertyNames = "displayName"
	SECTIONPROPERTYNAMES_DISPLAY_OPTIONS                 SectionPropertyNames = "displayOptions"
	SECTIONPROPERTYNAMES_FAVORITE                        SectionPropertyNames = "favorite"
	SECTIONPROPERTYNAMES_FAVORITES                       SectionPropertyNames = "favorites"
	SECTIONPROPERTYNAMES_GREYED_FIELDS                   SectionPropertyNames = "greyedFields"
	SECTIONPROPERTYNAMES_HREF                            SectionPropertyNames = "href"
	SECTIONPROPERTYNAMES_ID                              SectionPropertyNames = "id"
	SECTIONPROPERTYNAMES_INDICATORS                      SectionPropertyNames = "indicators"
	SECTIONPROPERTYNAMES_LAST_UPDATED                    SectionPropertyNames = "lastUpdated"
	SECTIONPROPERTYNAMES_LAST_UPDATED_BY                 SectionPropertyNames = "lastUpdatedBy"
	SECTIONPROPERTYNAMES_NAME                            SectionPropertyNames = "name"
	SECTIONPROPERTYNAMES_SHARING                         SectionPropertyNames = "sharing"
	SECTIONPROPERTYNAMES_SHOW_COLUMN_TOTALS              SectionPropertyNames = "showColumnTotals"
	SECTIONPROPERTYNAMES_SHOW_ROW_TOTALS                 SectionPropertyNames = "showRowTotals"
	SECTIONPROPERTYNAMES_SORT_ORDER                      SectionPropertyNames = "sortOrder"
	SECTIONPROPERTYNAMES_TRANSLATIONS                    SectionPropertyNames = "translations"
)

// All allowed values of SectionPropertyNames enum
var AllowedSectionPropertyNamesEnumValues = []SectionPropertyNames{
	"access",
	"attributeValues",
	"categoryCombos",
	"code",
	"created",
	"createdBy",
	"dataElements",
	"dataSet",
	"description",
	"disableDataElementAutoGroup",
	"displayName",
	"displayOptions",
	"favorite",
	"favorites",
	"greyedFields",
	"href",
	"id",
	"indicators",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"sharing",
	"showColumnTotals",
	"showRowTotals",
	"sortOrder",
	"translations",
}

func (v *SectionPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SectionPropertyNames(value)
	for _, existing := range AllowedSectionPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SectionPropertyNames", value)
}

// NewSectionPropertyNamesFromValue returns a pointer to a valid SectionPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSectionPropertyNamesFromValue(v string) (*SectionPropertyNames, error) {
	ev := SectionPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SectionPropertyNames: valid values are %v", v, AllowedSectionPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SectionPropertyNames) IsValid() bool {
	for _, existing := range AllowedSectionPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SectionPropertyNames value
func (v SectionPropertyNames) Ptr() *SectionPropertyNames {
	return &v
}

type NullableSectionPropertyNames struct {
	value *SectionPropertyNames
	isSet bool
}

func (v NullableSectionPropertyNames) Get() *SectionPropertyNames {
	return v.value
}

func (v *NullableSectionPropertyNames) Set(val *SectionPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionPropertyNames(val *SectionPropertyNames) *NullableSectionPropertyNames {
	return &NullableSectionPropertyNames{value: val, isSet: true}
}

func (v NullableSectionPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
