/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the JobRunErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobRunErrors{}

// JobRunErrors struct for JobRunErrors
type JobRunErrors struct {
	Codes    string  `json:"codes"`
	Filetype *string `json:"filetype,omitempty"`
	// A UID for an FileResource object   (Java name `org.hisp.dhis.fileresource.FileResource`)
	File     *string   `json:"file,omitempty"`
	Created  time.Time `json:"created"`
	Finished time.Time `json:"finished"`
	Executed time.Time `json:"executed"`
	// A UID for an JobConfiguration object   (Java name `org.hisp.dhis.scheduling.JobConfiguration`)
	Id       string  `json:"id"`
	Filesize *int64  `json:"filesize,omitempty"`
	Type     JobType `json:"type"`
	// A UID for an User object   (Java name `org.hisp.dhis.user.User`)
	User   string        `json:"user"`
	Errors []JobRunError `json:"errors"`
}

type _JobRunErrors JobRunErrors

// NewJobRunErrors instantiates a new JobRunErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobRunErrors(codes string, created time.Time, finished time.Time, executed time.Time, id string, type_ JobType, user string, errors []JobRunError) *JobRunErrors {
	this := JobRunErrors{}
	this.Codes = codes
	this.Created = created
	this.Finished = finished
	this.Executed = executed
	this.Id = id
	this.Type = type_
	this.User = user
	this.Errors = errors
	return &this
}

// NewJobRunErrorsWithDefaults instantiates a new JobRunErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobRunErrorsWithDefaults() *JobRunErrors {
	this := JobRunErrors{}
	return &this
}

// GetCodes returns the Codes field value
func (o *JobRunErrors) GetCodes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Codes
}

// GetCodesOk returns a tuple with the Codes field value
// and a boolean to check if the value has been set.
func (o *JobRunErrors) GetCodesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Codes, true
}

// SetCodes sets field value
func (o *JobRunErrors) SetCodes(v string) {
	o.Codes = v
}

// GetFiletype returns the Filetype field value if set, zero value otherwise.
func (o *JobRunErrors) GetFiletype() string {
	if o == nil || IsNil(o.Filetype) {
		var ret string
		return ret
	}
	return *o.Filetype
}

// GetFiletypeOk returns a tuple with the Filetype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobRunErrors) GetFiletypeOk() (*string, bool) {
	if o == nil || IsNil(o.Filetype) {
		return nil, false
	}
	return o.Filetype, true
}

// HasFiletype returns a boolean if a field has been set.
func (o *JobRunErrors) HasFiletype() bool {
	if o != nil && !IsNil(o.Filetype) {
		return true
	}

	return false
}

// SetFiletype gets a reference to the given string and assigns it to the Filetype field.
func (o *JobRunErrors) SetFiletype(v string) {
	o.Filetype = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *JobRunErrors) GetFile() string {
	if o == nil || IsNil(o.File) {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobRunErrors) GetFileOk() (*string, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *JobRunErrors) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *JobRunErrors) SetFile(v string) {
	o.File = &v
}

// GetCreated returns the Created field value
func (o *JobRunErrors) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *JobRunErrors) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *JobRunErrors) SetCreated(v time.Time) {
	o.Created = v
}

// GetFinished returns the Finished field value
func (o *JobRunErrors) GetFinished() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Finished
}

// GetFinishedOk returns a tuple with the Finished field value
// and a boolean to check if the value has been set.
func (o *JobRunErrors) GetFinishedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Finished, true
}

// SetFinished sets field value
func (o *JobRunErrors) SetFinished(v time.Time) {
	o.Finished = v
}

// GetExecuted returns the Executed field value
func (o *JobRunErrors) GetExecuted() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Executed
}

// GetExecutedOk returns a tuple with the Executed field value
// and a boolean to check if the value has been set.
func (o *JobRunErrors) GetExecutedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Executed, true
}

// SetExecuted sets field value
func (o *JobRunErrors) SetExecuted(v time.Time) {
	o.Executed = v
}

// GetId returns the Id field value
func (o *JobRunErrors) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JobRunErrors) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JobRunErrors) SetId(v string) {
	o.Id = v
}

// GetFilesize returns the Filesize field value if set, zero value otherwise.
func (o *JobRunErrors) GetFilesize() int64 {
	if o == nil || IsNil(o.Filesize) {
		var ret int64
		return ret
	}
	return *o.Filesize
}

// GetFilesizeOk returns a tuple with the Filesize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobRunErrors) GetFilesizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Filesize) {
		return nil, false
	}
	return o.Filesize, true
}

// HasFilesize returns a boolean if a field has been set.
func (o *JobRunErrors) HasFilesize() bool {
	if o != nil && !IsNil(o.Filesize) {
		return true
	}

	return false
}

// SetFilesize gets a reference to the given int64 and assigns it to the Filesize field.
func (o *JobRunErrors) SetFilesize(v int64) {
	o.Filesize = &v
}

// GetType returns the Type field value
func (o *JobRunErrors) GetType() JobType {
	if o == nil {
		var ret JobType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *JobRunErrors) GetTypeOk() (*JobType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *JobRunErrors) SetType(v JobType) {
	o.Type = v
}

// GetUser returns the User field value
func (o *JobRunErrors) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *JobRunErrors) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *JobRunErrors) SetUser(v string) {
	o.User = v
}

// GetErrors returns the Errors field value
func (o *JobRunErrors) GetErrors() []JobRunError {
	if o == nil {
		var ret []JobRunError
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *JobRunErrors) GetErrorsOk() ([]JobRunError, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *JobRunErrors) SetErrors(v []JobRunError) {
	o.Errors = v
}

func (o JobRunErrors) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobRunErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["codes"] = o.Codes
	if !IsNil(o.Filetype) {
		toSerialize["filetype"] = o.Filetype
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	toSerialize["created"] = o.Created
	toSerialize["finished"] = o.Finished
	toSerialize["executed"] = o.Executed
	toSerialize["id"] = o.Id
	if !IsNil(o.Filesize) {
		toSerialize["filesize"] = o.Filesize
	}
	toSerialize["type"] = o.Type
	toSerialize["user"] = o.User
	toSerialize["errors"] = o.Errors
	return toSerialize, nil
}

func (o *JobRunErrors) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"codes",
		"created",
		"finished",
		"executed",
		"id",
		"type",
		"user",
		"errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobRunErrors := _JobRunErrors{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobRunErrors)

	if err != nil {
		return err
	}

	*o = JobRunErrors(varJobRunErrors)

	return err
}

type NullableJobRunErrors struct {
	value *JobRunErrors
	isSet bool
}

func (v NullableJobRunErrors) Get() *JobRunErrors {
	return v.value
}

func (v *NullableJobRunErrors) Set(val *JobRunErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableJobRunErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableJobRunErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobRunErrors(val *JobRunErrors) *NullableJobRunErrors {
	return &NullableJobRunErrors{value: val, isSet: true}
}

func (v NullableJobRunErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobRunErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
