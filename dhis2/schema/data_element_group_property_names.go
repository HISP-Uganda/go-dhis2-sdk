/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DataElementGroupPropertyNames the model 'DataElementGroupPropertyNames'
type DataElementGroupPropertyNames string

// List of DataElementGroupPropertyNames
const (
	DATAELEMENTGROUPPROPERTYNAMES_ACCESS              DataElementGroupPropertyNames = "access"
	DATAELEMENTGROUPPROPERTYNAMES_ATTRIBUTE_VALUES    DataElementGroupPropertyNames = "attributeValues"
	DATAELEMENTGROUPPROPERTYNAMES_CODE                DataElementGroupPropertyNames = "code"
	DATAELEMENTGROUPPROPERTYNAMES_CREATED             DataElementGroupPropertyNames = "created"
	DATAELEMENTGROUPPROPERTYNAMES_CREATED_BY          DataElementGroupPropertyNames = "createdBy"
	DATAELEMENTGROUPPROPERTYNAMES_DATA_ELEMENTS       DataElementGroupPropertyNames = "dataElements"
	DATAELEMENTGROUPPROPERTYNAMES_DESCRIPTION         DataElementGroupPropertyNames = "description"
	DATAELEMENTGROUPPROPERTYNAMES_DIMENSION_ITEM      DataElementGroupPropertyNames = "dimensionItem"
	DATAELEMENTGROUPPROPERTYNAMES_DISPLAY_DESCRIPTION DataElementGroupPropertyNames = "displayDescription"
	DATAELEMENTGROUPPROPERTYNAMES_DISPLAY_FORM_NAME   DataElementGroupPropertyNames = "displayFormName"
	DATAELEMENTGROUPPROPERTYNAMES_DISPLAY_NAME        DataElementGroupPropertyNames = "displayName"
	DATAELEMENTGROUPPROPERTYNAMES_DISPLAY_SHORT_NAME  DataElementGroupPropertyNames = "displayShortName"
	DATAELEMENTGROUPPROPERTYNAMES_FAVORITE            DataElementGroupPropertyNames = "favorite"
	DATAELEMENTGROUPPROPERTYNAMES_FAVORITES           DataElementGroupPropertyNames = "favorites"
	DATAELEMENTGROUPPROPERTYNAMES_FORM_NAME           DataElementGroupPropertyNames = "formName"
	DATAELEMENTGROUPPROPERTYNAMES_GROUP_SETS          DataElementGroupPropertyNames = "groupSets"
	DATAELEMENTGROUPPROPERTYNAMES_HREF                DataElementGroupPropertyNames = "href"
	DATAELEMENTGROUPPROPERTYNAMES_ID                  DataElementGroupPropertyNames = "id"
	DATAELEMENTGROUPPROPERTYNAMES_LAST_UPDATED        DataElementGroupPropertyNames = "lastUpdated"
	DATAELEMENTGROUPPROPERTYNAMES_LAST_UPDATED_BY     DataElementGroupPropertyNames = "lastUpdatedBy"
	DATAELEMENTGROUPPROPERTYNAMES_LEGEND_SET          DataElementGroupPropertyNames = "legendSet"
	DATAELEMENTGROUPPROPERTYNAMES_LEGEND_SETS         DataElementGroupPropertyNames = "legendSets"
	DATAELEMENTGROUPPROPERTYNAMES_NAME                DataElementGroupPropertyNames = "name"
	DATAELEMENTGROUPPROPERTYNAMES_QUERY_MODS          DataElementGroupPropertyNames = "queryMods"
	DATAELEMENTGROUPPROPERTYNAMES_SHARING             DataElementGroupPropertyNames = "sharing"
	DATAELEMENTGROUPPROPERTYNAMES_SHORT_NAME          DataElementGroupPropertyNames = "shortName"
	DATAELEMENTGROUPPROPERTYNAMES_TRANSLATIONS        DataElementGroupPropertyNames = "translations"
)

// All allowed values of DataElementGroupPropertyNames enum
var AllowedDataElementGroupPropertyNamesEnumValues = []DataElementGroupPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"dataElements",
	"description",
	"dimensionItem",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"favorite",
	"favorites",
	"formName",
	"groupSets",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"legendSet",
	"legendSets",
	"name",
	"queryMods",
	"sharing",
	"shortName",
	"translations",
}

func (v *DataElementGroupPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataElementGroupPropertyNames(value)
	for _, existing := range AllowedDataElementGroupPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataElementGroupPropertyNames", value)
}

// NewDataElementGroupPropertyNamesFromValue returns a pointer to a valid DataElementGroupPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataElementGroupPropertyNamesFromValue(v string) (*DataElementGroupPropertyNames, error) {
	ev := DataElementGroupPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataElementGroupPropertyNames: valid values are %v", v, AllowedDataElementGroupPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataElementGroupPropertyNames) IsValid() bool {
	for _, existing := range AllowedDataElementGroupPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataElementGroupPropertyNames value
func (v DataElementGroupPropertyNames) Ptr() *DataElementGroupPropertyNames {
	return &v
}

type NullableDataElementGroupPropertyNames struct {
	value *DataElementGroupPropertyNames
	isSet bool
}

func (v NullableDataElementGroupPropertyNames) Get() *DataElementGroupPropertyNames {
	return v.value
}

func (v *NullableDataElementGroupPropertyNames) Set(val *DataElementGroupPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableDataElementGroupPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableDataElementGroupPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataElementGroupPropertyNames(val *DataElementGroupPropertyNames) *NullableDataElementGroupPropertyNames {
	return &NullableDataElementGroupPropertyNames{value: val, isSet: true}
}

func (v NullableDataElementGroupPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataElementGroupPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
