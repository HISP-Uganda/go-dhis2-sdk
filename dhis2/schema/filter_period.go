/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FilterPeriod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterPeriod{}

// FilterPeriod struct for FilterPeriod
type FilterPeriod struct {
	PeriodFrom int32 `json:"periodFrom"`
	PeriodTo   int32 `json:"periodTo"`
}

type _FilterPeriod FilterPeriod

// NewFilterPeriod instantiates a new FilterPeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterPeriod(periodFrom int32, periodTo int32) *FilterPeriod {
	this := FilterPeriod{}
	this.PeriodFrom = periodFrom
	this.PeriodTo = periodTo
	return &this
}

// NewFilterPeriodWithDefaults instantiates a new FilterPeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterPeriodWithDefaults() *FilterPeriod {
	this := FilterPeriod{}
	return &this
}

// GetPeriodFrom returns the PeriodFrom field value
func (o *FilterPeriod) GetPeriodFrom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PeriodFrom
}

// GetPeriodFromOk returns a tuple with the PeriodFrom field value
// and a boolean to check if the value has been set.
func (o *FilterPeriod) GetPeriodFromOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeriodFrom, true
}

// SetPeriodFrom sets field value
func (o *FilterPeriod) SetPeriodFrom(v int32) {
	o.PeriodFrom = v
}

// GetPeriodTo returns the PeriodTo field value
func (o *FilterPeriod) GetPeriodTo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PeriodTo
}

// GetPeriodToOk returns a tuple with the PeriodTo field value
// and a boolean to check if the value has been set.
func (o *FilterPeriod) GetPeriodToOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeriodTo, true
}

// SetPeriodTo sets field value
func (o *FilterPeriod) SetPeriodTo(v int32) {
	o.PeriodTo = v
}

func (o FilterPeriod) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterPeriod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["periodFrom"] = o.PeriodFrom
	toSerialize["periodTo"] = o.PeriodTo
	return toSerialize, nil
}

func (o *FilterPeriod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"periodFrom",
		"periodTo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFilterPeriod := _FilterPeriod{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFilterPeriod)

	if err != nil {
		return err
	}

	*o = FilterPeriod(varFilterPeriod)

	return err
}

type NullableFilterPeriod struct {
	value *FilterPeriod
	isSet bool
}

func (v NullableFilterPeriod) Get() *FilterPeriod {
	return v.value
}

func (v *NullableFilterPeriod) Set(val *FilterPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterPeriod(val *FilterPeriod) *NullableFilterPeriod {
	return &NullableFilterPeriod{value: val, isSet: true}
}

func (v NullableFilterPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
