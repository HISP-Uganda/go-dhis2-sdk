/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TrackedEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackedEntity{}

// TrackedEntity struct for TrackedEntity
type TrackedEntity struct {
	Attributes            []TrackerAttribute     `json:"attributes,omitempty"`
	Coordinates           *string                `json:"coordinates,omitempty"`
	Created               string                 `json:"created"`
	CreatedAtClient       string                 `json:"createdAtClient"`
	CreatedByUserInfo     *UserInfoSnapshot      `json:"createdByUserInfo,omitempty"`
	Deleted               *bool                  `json:"deleted,omitempty"`
	Enrollments           []Enrollment           `json:"enrollments,omitempty"`
	FeatureType           string                 `json:"featureType"`
	Geometry              map[string]interface{} `json:"geometry,omitempty"`
	Inactive              *bool                  `json:"inactive,omitempty"`
	LastUpdated           string                 `json:"lastUpdated"`
	LastUpdatedAtClient   string                 `json:"lastUpdatedAtClient"`
	LastUpdatedByUserInfo *UserInfoSnapshot      `json:"lastUpdatedByUserInfo,omitempty"`
	OrgUnit               string                 `json:"orgUnit"`
	PotentialDuplicate    *bool                  `json:"potentialDuplicate,omitempty"`
	ProgramOwners         []ProgramOwner         `json:"programOwners,omitempty"`
	Relationships         []Relationship         `json:"relationships,omitempty"`
	StoredBy              *string                `json:"storedBy,omitempty"`
	TrackedEntityInstance string                 `json:"trackedEntityInstance"`
	TrackedEntityType     string                 `json:"trackedEntityType"`
}

type _TrackedEntity TrackedEntity

// NewTrackedEntity instantiates a new TrackedEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackedEntity(created string, createdAtClient string, featureType string, lastUpdated string, lastUpdatedAtClient string, orgUnit string, trackedEntityInstance string, trackedEntityType string) *TrackedEntity {
	this := TrackedEntity{}
	this.Created = created
	this.CreatedAtClient = createdAtClient
	this.FeatureType = featureType
	this.LastUpdated = lastUpdated
	this.LastUpdatedAtClient = lastUpdatedAtClient
	this.OrgUnit = orgUnit
	this.TrackedEntityInstance = trackedEntityInstance
	this.TrackedEntityType = trackedEntityType
	return &this
}

// NewTrackedEntityWithDefaults instantiates a new TrackedEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackedEntityWithDefaults() *TrackedEntity {
	this := TrackedEntity{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *TrackedEntity) GetAttributes() []TrackerAttribute {
	if o == nil || IsNil(o.Attributes) {
		var ret []TrackerAttribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetAttributesOk() ([]TrackerAttribute, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *TrackedEntity) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []TrackerAttribute and assigns it to the Attributes field.
func (o *TrackedEntity) SetAttributes(v []TrackerAttribute) {
	o.Attributes = v
}

// GetCoordinates returns the Coordinates field value if set, zero value otherwise.
func (o *TrackedEntity) GetCoordinates() string {
	if o == nil || IsNil(o.Coordinates) {
		var ret string
		return ret
	}
	return *o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetCoordinatesOk() (*string, bool) {
	if o == nil || IsNil(o.Coordinates) {
		return nil, false
	}
	return o.Coordinates, true
}

// HasCoordinates returns a boolean if a field has been set.
func (o *TrackedEntity) HasCoordinates() bool {
	if o != nil && !IsNil(o.Coordinates) {
		return true
	}

	return false
}

// SetCoordinates gets a reference to the given string and assigns it to the Coordinates field.
func (o *TrackedEntity) SetCoordinates(v string) {
	o.Coordinates = &v
}

// GetCreated returns the Created field value
func (o *TrackedEntity) GetCreated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *TrackedEntity) SetCreated(v string) {
	o.Created = v
}

// GetCreatedAtClient returns the CreatedAtClient field value
func (o *TrackedEntity) GetCreatedAtClient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAtClient
}

// GetCreatedAtClientOk returns a tuple with the CreatedAtClient field value
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetCreatedAtClientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAtClient, true
}

// SetCreatedAtClient sets field value
func (o *TrackedEntity) SetCreatedAtClient(v string) {
	o.CreatedAtClient = v
}

// GetCreatedByUserInfo returns the CreatedByUserInfo field value if set, zero value otherwise.
func (o *TrackedEntity) GetCreatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.CreatedByUserInfo
}

// GetCreatedByUserInfoOk returns a tuple with the CreatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetCreatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		return nil, false
	}
	return o.CreatedByUserInfo, true
}

// HasCreatedByUserInfo returns a boolean if a field has been set.
func (o *TrackedEntity) HasCreatedByUserInfo() bool {
	if o != nil && !IsNil(o.CreatedByUserInfo) {
		return true
	}

	return false
}

// SetCreatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the CreatedByUserInfo field.
func (o *TrackedEntity) SetCreatedByUserInfo(v UserInfoSnapshot) {
	o.CreatedByUserInfo = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *TrackedEntity) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *TrackedEntity) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *TrackedEntity) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetEnrollments returns the Enrollments field value if set, zero value otherwise.
func (o *TrackedEntity) GetEnrollments() []Enrollment {
	if o == nil || IsNil(o.Enrollments) {
		var ret []Enrollment
		return ret
	}
	return o.Enrollments
}

// GetEnrollmentsOk returns a tuple with the Enrollments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetEnrollmentsOk() ([]Enrollment, bool) {
	if o == nil || IsNil(o.Enrollments) {
		return nil, false
	}
	return o.Enrollments, true
}

// HasEnrollments returns a boolean if a field has been set.
func (o *TrackedEntity) HasEnrollments() bool {
	if o != nil && !IsNil(o.Enrollments) {
		return true
	}

	return false
}

// SetEnrollments gets a reference to the given []Enrollment and assigns it to the Enrollments field.
func (o *TrackedEntity) SetEnrollments(v []Enrollment) {
	o.Enrollments = v
}

// GetFeatureType returns the FeatureType field value
func (o *TrackedEntity) GetFeatureType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeatureType
}

// GetFeatureTypeOk returns a tuple with the FeatureType field value
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetFeatureTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureType, true
}

// SetFeatureType sets field value
func (o *TrackedEntity) SetFeatureType(v string) {
	o.FeatureType = v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *TrackedEntity) GetGeometry() map[string]interface{} {
	if o == nil || IsNil(o.Geometry) {
		var ret map[string]interface{}
		return ret
	}
	return o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetGeometryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Geometry) {
		return map[string]interface{}{}, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *TrackedEntity) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given map[string]interface{} and assigns it to the Geometry field.
func (o *TrackedEntity) SetGeometry(v map[string]interface{}) {
	o.Geometry = v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *TrackedEntity) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *TrackedEntity) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *TrackedEntity) SetInactive(v bool) {
	o.Inactive = &v
}

// GetLastUpdated returns the LastUpdated field value
func (o *TrackedEntity) GetLastUpdated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetLastUpdatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdated, true
}

// SetLastUpdated sets field value
func (o *TrackedEntity) SetLastUpdated(v string) {
	o.LastUpdated = v
}

// GetLastUpdatedAtClient returns the LastUpdatedAtClient field value
func (o *TrackedEntity) GetLastUpdatedAtClient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastUpdatedAtClient
}

// GetLastUpdatedAtClientOk returns a tuple with the LastUpdatedAtClient field value
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetLastUpdatedAtClientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedAtClient, true
}

// SetLastUpdatedAtClient sets field value
func (o *TrackedEntity) SetLastUpdatedAtClient(v string) {
	o.LastUpdatedAtClient = v
}

// GetLastUpdatedByUserInfo returns the LastUpdatedByUserInfo field value if set, zero value otherwise.
func (o *TrackedEntity) GetLastUpdatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.LastUpdatedByUserInfo
}

// GetLastUpdatedByUserInfoOk returns a tuple with the LastUpdatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetLastUpdatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		return nil, false
	}
	return o.LastUpdatedByUserInfo, true
}

// HasLastUpdatedByUserInfo returns a boolean if a field has been set.
func (o *TrackedEntity) HasLastUpdatedByUserInfo() bool {
	if o != nil && !IsNil(o.LastUpdatedByUserInfo) {
		return true
	}

	return false
}

// SetLastUpdatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the LastUpdatedByUserInfo field.
func (o *TrackedEntity) SetLastUpdatedByUserInfo(v UserInfoSnapshot) {
	o.LastUpdatedByUserInfo = &v
}

// GetOrgUnit returns the OrgUnit field value
func (o *TrackedEntity) GetOrgUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgUnit
}

// GetOrgUnitOk returns a tuple with the OrgUnit field value
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetOrgUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgUnit, true
}

// SetOrgUnit sets field value
func (o *TrackedEntity) SetOrgUnit(v string) {
	o.OrgUnit = v
}

// GetPotentialDuplicate returns the PotentialDuplicate field value if set, zero value otherwise.
func (o *TrackedEntity) GetPotentialDuplicate() bool {
	if o == nil || IsNil(o.PotentialDuplicate) {
		var ret bool
		return ret
	}
	return *o.PotentialDuplicate
}

// GetPotentialDuplicateOk returns a tuple with the PotentialDuplicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetPotentialDuplicateOk() (*bool, bool) {
	if o == nil || IsNil(o.PotentialDuplicate) {
		return nil, false
	}
	return o.PotentialDuplicate, true
}

// HasPotentialDuplicate returns a boolean if a field has been set.
func (o *TrackedEntity) HasPotentialDuplicate() bool {
	if o != nil && !IsNil(o.PotentialDuplicate) {
		return true
	}

	return false
}

// SetPotentialDuplicate gets a reference to the given bool and assigns it to the PotentialDuplicate field.
func (o *TrackedEntity) SetPotentialDuplicate(v bool) {
	o.PotentialDuplicate = &v
}

// GetProgramOwners returns the ProgramOwners field value if set, zero value otherwise.
func (o *TrackedEntity) GetProgramOwners() []ProgramOwner {
	if o == nil || IsNil(o.ProgramOwners) {
		var ret []ProgramOwner
		return ret
	}
	return o.ProgramOwners
}

// GetProgramOwnersOk returns a tuple with the ProgramOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetProgramOwnersOk() ([]ProgramOwner, bool) {
	if o == nil || IsNil(o.ProgramOwners) {
		return nil, false
	}
	return o.ProgramOwners, true
}

// HasProgramOwners returns a boolean if a field has been set.
func (o *TrackedEntity) HasProgramOwners() bool {
	if o != nil && !IsNil(o.ProgramOwners) {
		return true
	}

	return false
}

// SetProgramOwners gets a reference to the given []ProgramOwner and assigns it to the ProgramOwners field.
func (o *TrackedEntity) SetProgramOwners(v []ProgramOwner) {
	o.ProgramOwners = v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *TrackedEntity) GetRelationships() []Relationship {
	if o == nil || IsNil(o.Relationships) {
		var ret []Relationship
		return ret
	}
	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetRelationshipsOk() ([]Relationship, bool) {
	if o == nil || IsNil(o.Relationships) {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *TrackedEntity) HasRelationships() bool {
	if o != nil && !IsNil(o.Relationships) {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given []Relationship and assigns it to the Relationships field.
func (o *TrackedEntity) SetRelationships(v []Relationship) {
	o.Relationships = v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *TrackedEntity) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *TrackedEntity) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *TrackedEntity) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetTrackedEntityInstance returns the TrackedEntityInstance field value
func (o *TrackedEntity) GetTrackedEntityInstance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrackedEntityInstance
}

// GetTrackedEntityInstanceOk returns a tuple with the TrackedEntityInstance field value
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetTrackedEntityInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackedEntityInstance, true
}

// SetTrackedEntityInstance sets field value
func (o *TrackedEntity) SetTrackedEntityInstance(v string) {
	o.TrackedEntityInstance = v
}

// GetTrackedEntityType returns the TrackedEntityType field value
func (o *TrackedEntity) GetTrackedEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrackedEntityType
}

// GetTrackedEntityTypeOk returns a tuple with the TrackedEntityType field value
// and a boolean to check if the value has been set.
func (o *TrackedEntity) GetTrackedEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackedEntityType, true
}

// SetTrackedEntityType sets field value
func (o *TrackedEntity) SetTrackedEntityType(v string) {
	o.TrackedEntityType = v
}

func (o TrackedEntity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackedEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Coordinates) {
		toSerialize["coordinates"] = o.Coordinates
	}
	toSerialize["created"] = o.Created
	toSerialize["createdAtClient"] = o.CreatedAtClient
	if !IsNil(o.CreatedByUserInfo) {
		toSerialize["createdByUserInfo"] = o.CreatedByUserInfo
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Enrollments) {
		toSerialize["enrollments"] = o.Enrollments
	}
	toSerialize["featureType"] = o.FeatureType
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	toSerialize["lastUpdated"] = o.LastUpdated
	toSerialize["lastUpdatedAtClient"] = o.LastUpdatedAtClient
	if !IsNil(o.LastUpdatedByUserInfo) {
		toSerialize["lastUpdatedByUserInfo"] = o.LastUpdatedByUserInfo
	}
	toSerialize["orgUnit"] = o.OrgUnit
	if !IsNil(o.PotentialDuplicate) {
		toSerialize["potentialDuplicate"] = o.PotentialDuplicate
	}
	if !IsNil(o.ProgramOwners) {
		toSerialize["programOwners"] = o.ProgramOwners
	}
	if !IsNil(o.Relationships) {
		toSerialize["relationships"] = o.Relationships
	}
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	toSerialize["trackedEntityInstance"] = o.TrackedEntityInstance
	toSerialize["trackedEntityType"] = o.TrackedEntityType
	return toSerialize, nil
}

func (o *TrackedEntity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"createdAtClient",
		"featureType",
		"lastUpdated",
		"lastUpdatedAtClient",
		"orgUnit",
		"trackedEntityInstance",
		"trackedEntityType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackedEntity := _TrackedEntity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackedEntity)

	if err != nil {
		return err
	}

	*o = TrackedEntity(varTrackedEntity)

	return err
}

type NullableTrackedEntity struct {
	value *TrackedEntity
	isSet bool
}

func (v NullableTrackedEntity) Get() *TrackedEntity {
	return v.value
}

func (v *NullableTrackedEntity) Set(val *TrackedEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackedEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackedEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackedEntity(val *TrackedEntity) *NullableTrackedEntity {
	return &NullableTrackedEntity{value: val, isSet: true}
}

func (v NullableTrackedEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackedEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
