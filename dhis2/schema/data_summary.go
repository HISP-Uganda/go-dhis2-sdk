/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the DataSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSummary{}

// DataSummary struct for DataSummary
type DataSummary struct {
	// keys are class java.lang.Integer
	ActiveUsers *map[string]int32 `json:"activeUsers,omitempty"`
	// keys are class java.lang.Integer
	DataValueCount *map[string]int32 `json:"dataValueCount,omitempty"`
	// keys are class java.lang.Integer
	EventCount      *map[string]int64 `json:"eventCount,omitempty"`
	ObjectCounts    *map[string]int64 `json:"objectCounts,omitempty"`
	System          *Dhis2Info        `json:"system,omitempty"`
	UserInvitations *map[string]int32 `json:"userInvitations,omitempty"`
}

// NewDataSummary instantiates a new DataSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSummary() *DataSummary {
	this := DataSummary{}
	return &this
}

// NewDataSummaryWithDefaults instantiates a new DataSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSummaryWithDefaults() *DataSummary {
	this := DataSummary{}
	return &this
}

// GetActiveUsers returns the ActiveUsers field value if set, zero value otherwise.
func (o *DataSummary) GetActiveUsers() map[string]int32 {
	if o == nil || IsNil(o.ActiveUsers) {
		var ret map[string]int32
		return ret
	}
	return *o.ActiveUsers
}

// GetActiveUsersOk returns a tuple with the ActiveUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSummary) GetActiveUsersOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.ActiveUsers) {
		return nil, false
	}
	return o.ActiveUsers, true
}

// HasActiveUsers returns a boolean if a field has been set.
func (o *DataSummary) HasActiveUsers() bool {
	if o != nil && !IsNil(o.ActiveUsers) {
		return true
	}

	return false
}

// SetActiveUsers gets a reference to the given map[string]int32 and assigns it to the ActiveUsers field.
func (o *DataSummary) SetActiveUsers(v map[string]int32) {
	o.ActiveUsers = &v
}

// GetDataValueCount returns the DataValueCount field value if set, zero value otherwise.
func (o *DataSummary) GetDataValueCount() map[string]int32 {
	if o == nil || IsNil(o.DataValueCount) {
		var ret map[string]int32
		return ret
	}
	return *o.DataValueCount
}

// GetDataValueCountOk returns a tuple with the DataValueCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSummary) GetDataValueCountOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.DataValueCount) {
		return nil, false
	}
	return o.DataValueCount, true
}

// HasDataValueCount returns a boolean if a field has been set.
func (o *DataSummary) HasDataValueCount() bool {
	if o != nil && !IsNil(o.DataValueCount) {
		return true
	}

	return false
}

// SetDataValueCount gets a reference to the given map[string]int32 and assigns it to the DataValueCount field.
func (o *DataSummary) SetDataValueCount(v map[string]int32) {
	o.DataValueCount = &v
}

// GetEventCount returns the EventCount field value if set, zero value otherwise.
func (o *DataSummary) GetEventCount() map[string]int64 {
	if o == nil || IsNil(o.EventCount) {
		var ret map[string]int64
		return ret
	}
	return *o.EventCount
}

// GetEventCountOk returns a tuple with the EventCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSummary) GetEventCountOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.EventCount) {
		return nil, false
	}
	return o.EventCount, true
}

// HasEventCount returns a boolean if a field has been set.
func (o *DataSummary) HasEventCount() bool {
	if o != nil && !IsNil(o.EventCount) {
		return true
	}

	return false
}

// SetEventCount gets a reference to the given map[string]int64 and assigns it to the EventCount field.
func (o *DataSummary) SetEventCount(v map[string]int64) {
	o.EventCount = &v
}

// GetObjectCounts returns the ObjectCounts field value if set, zero value otherwise.
func (o *DataSummary) GetObjectCounts() map[string]int64 {
	if o == nil || IsNil(o.ObjectCounts) {
		var ret map[string]int64
		return ret
	}
	return *o.ObjectCounts
}

// GetObjectCountsOk returns a tuple with the ObjectCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSummary) GetObjectCountsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.ObjectCounts) {
		return nil, false
	}
	return o.ObjectCounts, true
}

// HasObjectCounts returns a boolean if a field has been set.
func (o *DataSummary) HasObjectCounts() bool {
	if o != nil && !IsNil(o.ObjectCounts) {
		return true
	}

	return false
}

// SetObjectCounts gets a reference to the given map[string]int64 and assigns it to the ObjectCounts field.
func (o *DataSummary) SetObjectCounts(v map[string]int64) {
	o.ObjectCounts = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *DataSummary) GetSystem() Dhis2Info {
	if o == nil || IsNil(o.System) {
		var ret Dhis2Info
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSummary) GetSystemOk() (*Dhis2Info, bool) {
	if o == nil || IsNil(o.System) {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *DataSummary) HasSystem() bool {
	if o != nil && !IsNil(o.System) {
		return true
	}

	return false
}

// SetSystem gets a reference to the given Dhis2Info and assigns it to the System field.
func (o *DataSummary) SetSystem(v Dhis2Info) {
	o.System = &v
}

// GetUserInvitations returns the UserInvitations field value if set, zero value otherwise.
func (o *DataSummary) GetUserInvitations() map[string]int32 {
	if o == nil || IsNil(o.UserInvitations) {
		var ret map[string]int32
		return ret
	}
	return *o.UserInvitations
}

// GetUserInvitationsOk returns a tuple with the UserInvitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSummary) GetUserInvitationsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.UserInvitations) {
		return nil, false
	}
	return o.UserInvitations, true
}

// HasUserInvitations returns a boolean if a field has been set.
func (o *DataSummary) HasUserInvitations() bool {
	if o != nil && !IsNil(o.UserInvitations) {
		return true
	}

	return false
}

// SetUserInvitations gets a reference to the given map[string]int32 and assigns it to the UserInvitations field.
func (o *DataSummary) SetUserInvitations(v map[string]int32) {
	o.UserInvitations = &v
}

func (o DataSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActiveUsers) {
		toSerialize["activeUsers"] = o.ActiveUsers
	}
	if !IsNil(o.DataValueCount) {
		toSerialize["dataValueCount"] = o.DataValueCount
	}
	if !IsNil(o.EventCount) {
		toSerialize["eventCount"] = o.EventCount
	}
	if !IsNil(o.ObjectCounts) {
		toSerialize["objectCounts"] = o.ObjectCounts
	}
	if !IsNil(o.System) {
		toSerialize["system"] = o.System
	}
	if !IsNil(o.UserInvitations) {
		toSerialize["userInvitations"] = o.UserInvitations
	}
	return toSerialize, nil
}

type NullableDataSummary struct {
	value *DataSummary
	isSet bool
}

func (v NullableDataSummary) Get() *DataSummary {
	return v.value
}

func (v *NullableDataSummary) Set(val *DataSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSummary(val *DataSummary) *NullableDataSummary {
	return &NullableDataSummary{value: val, isSet: true}
}

func (v NullableDataSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
