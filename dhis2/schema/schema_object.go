/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the SchemaObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaObject{}

// SchemaObject struct for SchemaObject
type SchemaObject struct {
	MinLength                 *int32                   `json:"minLength,omitempty"`
	Pattern                   *string                  `json:"pattern,omitempty"`
	Format                    *string                  `json:"format,omitempty"`
	AnyOf                     []interface{}            `json:"anyOf,omitempty"`
	Description               *string                  `json:"description,omitempty"`
	ReadOnly                  *bool                    `json:"readOnly,omitempty"`
	Type                      *string                  `json:"type,omitempty"`
	Required                  []string                 `json:"required,omitempty"`
	Enum                      *any                     `json:"enum,omitempty"`
	AllOf                     []interface{}            `json:"allOf,omitempty"`
	Default                   *any                     `json:"default,omitempty"`
	OneOf                     []interface{}            `json:"oneOf,omitempty"`
	Not                       *SchemaObject            `json:"not,omitempty"`
	XKind                     *string                  `json:"x-kind,omitempty"`
	AdditionalPropertiesField *SchemaObject            `json:"additionalProperties,omitempty"`
	Items                     *SchemaObject            `json:"items,omitempty"`
	Ref                       *string                  `json:"$ref,omitempty"`
	XSince                    *string                  `json:"x-since,omitempty"`
	MaxLength                 *int32                   `json:"maxLength,omitempty"`
	Properties                *map[string]SchemaObject `json:"properties,omitempty"`
}

// NewSchemaObject instantiates a new SchemaObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaObject() *SchemaObject {
	this := SchemaObject{}
	return &this
}

// NewSchemaObjectWithDefaults instantiates a new SchemaObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaObjectWithDefaults() *SchemaObject {
	this := SchemaObject{}
	return &this
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *SchemaObject) GetMinLength() int32 {
	if o == nil || IsNil(o.MinLength) {
		var ret int32
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMinLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinLength) {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *SchemaObject) HasMinLength() bool {
	if o != nil && !IsNil(o.MinLength) {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int32 and assigns it to the MinLength field.
func (o *SchemaObject) SetMinLength(v int32) {
	o.MinLength = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *SchemaObject) GetPattern() string {
	if o == nil || IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetPatternOk() (*string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *SchemaObject) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *SchemaObject) SetPattern(v string) {
	o.Pattern = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *SchemaObject) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *SchemaObject) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *SchemaObject) SetFormat(v string) {
	o.Format = &v
}

// GetAnyOf returns the AnyOf field value if set, zero value otherwise.
func (o *SchemaObject) GetAnyOf() []interface{} {
	if o == nil || IsNil(o.AnyOf) {
		var ret []interface{}
		return ret
	}
	return o.AnyOf
}

// GetAnyOfOk returns a tuple with the AnyOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetAnyOfOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.AnyOf) {
		return nil, false
	}
	return o.AnyOf, true
}

// HasAnyOf returns a boolean if a field has been set.
func (o *SchemaObject) HasAnyOf() bool {
	if o != nil && !IsNil(o.AnyOf) {
		return true
	}

	return false
}

// SetAnyOf gets a reference to the given []interface{} and assigns it to the AnyOf field.
func (o *SchemaObject) SetAnyOf(v []interface{}) {
	o.AnyOf = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaObject) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaObject) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaObject) SetDescription(v string) {
	o.Description = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *SchemaObject) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *SchemaObject) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *SchemaObject) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SchemaObject) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SchemaObject) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SchemaObject) SetType(v string) {
	o.Type = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *SchemaObject) GetRequired() []string {
	if o == nil || IsNil(o.Required) {
		var ret []string
		return ret
	}
	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetRequiredOk() ([]string, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *SchemaObject) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given []string and assigns it to the Required field.
func (o *SchemaObject) SetRequired(v []string) {
	o.Required = v
}

// GetEnum returns the Enum field value if set, zero value otherwise.
func (o *SchemaObject) GetEnum() any {
	if o == nil || IsNil(o.Enum) {
		var ret any
		return ret
	}
	return *o.Enum
}

// GetEnumOk returns a tuple with the Enum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetEnumOk() (*any, bool) {
	if o == nil || IsNil(o.Enum) {
		return nil, false
	}
	return o.Enum, true
}

// HasEnum returns a boolean if a field has been set.
func (o *SchemaObject) HasEnum() bool {
	if o != nil && !IsNil(o.Enum) {
		return true
	}

	return false
}

// SetEnum gets a reference to the given any and assigns it to the Enum field.
func (o *SchemaObject) SetEnum(v any) {
	o.Enum = &v
}

// GetAllOf returns the AllOf field value if set, zero value otherwise.
func (o *SchemaObject) GetAllOf() []interface{} {
	if o == nil || IsNil(o.AllOf) {
		var ret []interface{}
		return ret
	}
	return o.AllOf
}

// GetAllOfOk returns a tuple with the AllOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetAllOfOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.AllOf) {
		return nil, false
	}
	return o.AllOf, true
}

// HasAllOf returns a boolean if a field has been set.
func (o *SchemaObject) HasAllOf() bool {
	if o != nil && !IsNil(o.AllOf) {
		return true
	}

	return false
}

// SetAllOf gets a reference to the given []interface{} and assigns it to the AllOf field.
func (o *SchemaObject) SetAllOf(v []interface{}) {
	o.AllOf = v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *SchemaObject) GetDefault() any {
	if o == nil || IsNil(o.Default) {
		var ret any
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetDefaultOk() (*any, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *SchemaObject) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given any and assigns it to the Default field.
func (o *SchemaObject) SetDefault(v any) {
	o.Default = &v
}

// GetOneOf returns the OneOf field value if set, zero value otherwise.
func (o *SchemaObject) GetOneOf() []interface{} {
	if o == nil || IsNil(o.OneOf) {
		var ret []interface{}
		return ret
	}
	return o.OneOf
}

// GetOneOfOk returns a tuple with the OneOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetOneOfOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.OneOf) {
		return nil, false
	}
	return o.OneOf, true
}

// HasOneOf returns a boolean if a field has been set.
func (o *SchemaObject) HasOneOf() bool {
	if o != nil && !IsNil(o.OneOf) {
		return true
	}

	return false
}

// SetOneOf gets a reference to the given []interface{} and assigns it to the OneOf field.
func (o *SchemaObject) SetOneOf(v []interface{}) {
	o.OneOf = v
}

// GetNot returns the Not field value if set, zero value otherwise.
func (o *SchemaObject) GetNot() SchemaObject {
	if o == nil || IsNil(o.Not) {
		var ret SchemaObject
		return ret
	}
	return *o.Not
}

// GetNotOk returns a tuple with the Not field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetNotOk() (*SchemaObject, bool) {
	if o == nil || IsNil(o.Not) {
		return nil, false
	}
	return o.Not, true
}

// HasNot returns a boolean if a field has been set.
func (o *SchemaObject) HasNot() bool {
	if o != nil && !IsNil(o.Not) {
		return true
	}

	return false
}

// SetNot gets a reference to the given SchemaObject and assigns it to the Not field.
func (o *SchemaObject) SetNot(v SchemaObject) {
	o.Not = &v
}

// GetXKind returns the XKind field value if set, zero value otherwise.
func (o *SchemaObject) GetXKind() string {
	if o == nil || IsNil(o.XKind) {
		var ret string
		return ret
	}
	return *o.XKind
}

// GetXKindOk returns a tuple with the XKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetXKindOk() (*string, bool) {
	if o == nil || IsNil(o.XKind) {
		return nil, false
	}
	return o.XKind, true
}

// HasXKind returns a boolean if a field has been set.
func (o *SchemaObject) HasXKind() bool {
	if o != nil && !IsNil(o.XKind) {
		return true
	}

	return false
}

// SetXKind gets a reference to the given string and assigns it to the XKind field.
func (o *SchemaObject) SetXKind(v string) {
	o.XKind = &v
}

// GetAdditionalPropertiesField returns the AdditionalPropertiesField field value if set, zero value otherwise.
func (o *SchemaObject) GetAdditionalPropertiesField() SchemaObject {
	if o == nil || IsNil(o.AdditionalPropertiesField) {
		var ret SchemaObject
		return ret
	}
	return *o.AdditionalPropertiesField
}

// GetAdditionalPropertiesFieldOk returns a tuple with the AdditionalPropertiesField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetAdditionalPropertiesFieldOk() (*SchemaObject, bool) {
	if o == nil || IsNil(o.AdditionalPropertiesField) {
		return nil, false
	}
	return o.AdditionalPropertiesField, true
}

// HasAdditionalPropertiesField returns a boolean if a field has been set.
func (o *SchemaObject) HasAdditionalPropertiesField() bool {
	if o != nil && !IsNil(o.AdditionalPropertiesField) {
		return true
	}

	return false
}

// SetAdditionalPropertiesField gets a reference to the given SchemaObject and assigns it to the AdditionalPropertiesField field.
func (o *SchemaObject) SetAdditionalPropertiesField(v SchemaObject) {
	o.AdditionalPropertiesField = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *SchemaObject) GetItems() SchemaObject {
	if o == nil || IsNil(o.Items) {
		var ret SchemaObject
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetItemsOk() (*SchemaObject, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *SchemaObject) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given SchemaObject and assigns it to the Items field.
func (o *SchemaObject) SetItems(v SchemaObject) {
	o.Items = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *SchemaObject) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *SchemaObject) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *SchemaObject) SetRef(v string) {
	o.Ref = &v
}

// GetXSince returns the XSince field value if set, zero value otherwise.
func (o *SchemaObject) GetXSince() string {
	if o == nil || IsNil(o.XSince) {
		var ret string
		return ret
	}
	return *o.XSince
}

// GetXSinceOk returns a tuple with the XSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetXSinceOk() (*string, bool) {
	if o == nil || IsNil(o.XSince) {
		return nil, false
	}
	return o.XSince, true
}

// HasXSince returns a boolean if a field has been set.
func (o *SchemaObject) HasXSince() bool {
	if o != nil && !IsNil(o.XSince) {
		return true
	}

	return false
}

// SetXSince gets a reference to the given string and assigns it to the XSince field.
func (o *SchemaObject) SetXSince(v string) {
	o.XSince = &v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *SchemaObject) GetMaxLength() int32 {
	if o == nil || IsNil(o.MaxLength) {
		var ret int32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetMaxLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *SchemaObject) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int32 and assigns it to the MaxLength field.
func (o *SchemaObject) SetMaxLength(v int32) {
	o.MaxLength = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *SchemaObject) GetProperties() map[string]SchemaObject {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]SchemaObject
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaObject) GetPropertiesOk() (*map[string]SchemaObject, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *SchemaObject) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]SchemaObject and assigns it to the Properties field.
func (o *SchemaObject) SetProperties(v map[string]SchemaObject) {
	o.Properties = &v
}

func (o SchemaObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinLength) {
		toSerialize["minLength"] = o.MinLength
	}
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.AnyOf) {
		toSerialize["anyOf"] = o.AnyOf
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Enum) {
		toSerialize["enum"] = o.Enum
	}
	if !IsNil(o.AllOf) {
		toSerialize["allOf"] = o.AllOf
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.OneOf) {
		toSerialize["oneOf"] = o.OneOf
	}
	if !IsNil(o.Not) {
		toSerialize["not"] = o.Not
	}
	if !IsNil(o.XKind) {
		toSerialize["x-kind"] = o.XKind
	}
	if !IsNil(o.AdditionalPropertiesField) {
		toSerialize["additionalProperties"] = o.AdditionalPropertiesField
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Ref) {
		toSerialize["$ref"] = o.Ref
	}
	if !IsNil(o.XSince) {
		toSerialize["x-since"] = o.XSince
	}
	if !IsNil(o.MaxLength) {
		toSerialize["maxLength"] = o.MaxLength
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableSchemaObject struct {
	value *SchemaObject
	isSet bool
}

func (v NullableSchemaObject) Get() *SchemaObject {
	return v.value
}

func (v *NullableSchemaObject) Set(val *SchemaObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaObject(val *SchemaObject) *NullableSchemaObject {
	return &NullableSchemaObject{value: val, isSet: true}
}

func (v NullableSchemaObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
