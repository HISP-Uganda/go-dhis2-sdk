/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// Cacheability the model 'Cacheability'
type Cacheability string

// List of Cacheability
const (
	CACHEABILITY_PUBLIC  Cacheability = "PUBLIC"
	CACHEABILITY_PRIVATE Cacheability = "PRIVATE"
)

// All allowed values of Cacheability enum
var AllowedCacheabilityEnumValues = []Cacheability{
	"PUBLIC",
	"PRIVATE",
}

func (v *Cacheability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Cacheability(value)
	for _, existing := range AllowedCacheabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Cacheability", value)
}

// NewCacheabilityFromValue returns a pointer to a valid Cacheability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCacheabilityFromValue(v string) (*Cacheability, error) {
	ev := Cacheability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Cacheability: valid values are %v", v, AllowedCacheabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Cacheability) IsValid() bool {
	for _, existing := range AllowedCacheabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Cacheability value
func (v Cacheability) Ptr() *Cacheability {
	return &v
}

type NullableCacheability struct {
	value *Cacheability
	isSet bool
}

func (v NullableCacheability) Get() *Cacheability {
	return v.value
}

func (v *NullableCacheability) Set(val *Cacheability) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheability) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheability(val *Cacheability) *NullableCacheability {
	return &NullableCacheability{value: val, isSet: true}
}

func (v NullableCacheability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
