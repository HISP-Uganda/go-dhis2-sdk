/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ProgramMessageStatus the model 'ProgramMessageStatus'
type ProgramMessageStatus string

// List of ProgramMessageStatus
const (
	PROGRAMMESSAGESTATUS_SENT      ProgramMessageStatus = "SENT"
	PROGRAMMESSAGESTATUS_FAILED    ProgramMessageStatus = "FAILED"
	PROGRAMMESSAGESTATUS_SCHEDULED ProgramMessageStatus = "SCHEDULED"
	PROGRAMMESSAGESTATUS_OUTBOUND  ProgramMessageStatus = "OUTBOUND"
)

// All allowed values of ProgramMessageStatus enum
var AllowedProgramMessageStatusEnumValues = []ProgramMessageStatus{
	"SENT",
	"FAILED",
	"SCHEDULED",
	"OUTBOUND",
}

func (v *ProgramMessageStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProgramMessageStatus(value)
	for _, existing := range AllowedProgramMessageStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProgramMessageStatus", value)
}

// NewProgramMessageStatusFromValue returns a pointer to a valid ProgramMessageStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProgramMessageStatusFromValue(v string) (*ProgramMessageStatus, error) {
	ev := ProgramMessageStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProgramMessageStatus: valid values are %v", v, AllowedProgramMessageStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProgramMessageStatus) IsValid() bool {
	for _, existing := range AllowedProgramMessageStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramMessageStatus value
func (v ProgramMessageStatus) Ptr() *ProgramMessageStatus {
	return &v
}

type NullableProgramMessageStatus struct {
	value *ProgramMessageStatus
	isSet bool
}

func (v NullableProgramMessageStatus) Get() *ProgramMessageStatus {
	return v.value
}

func (v *NullableProgramMessageStatus) Set(val *ProgramMessageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramMessageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramMessageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramMessageStatus(val *ProgramMessageStatus) *NullableProgramMessageStatus {
	return &NullableProgramMessageStatus{value: val, isSet: true}
}

func (v NullableProgramMessageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramMessageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
