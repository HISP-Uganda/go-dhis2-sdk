/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesDataSetNotificationTemplate the model 'PropertyNamesDataSetNotificationTemplate'
type PropertyNamesDataSetNotificationTemplate string

// List of PropertyNames_DataSetNotificationTemplate
const (
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_ACCESS                               PropertyNamesDataSetNotificationTemplate = "access"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_ATTRIBUTE_VALUES                     PropertyNamesDataSetNotificationTemplate = "attributeValues"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_CODE                                 PropertyNamesDataSetNotificationTemplate = "code"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_CREATED                              PropertyNamesDataSetNotificationTemplate = "created"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_CREATED_BY                           PropertyNamesDataSetNotificationTemplate = "createdBy"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_DATA_SET_NOTIFICATION_TRIGGER        PropertyNamesDataSetNotificationTemplate = "dataSetNotificationTrigger"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_DATA_SETS                            PropertyNamesDataSetNotificationTemplate = "dataSets"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_DELIVERY_CHANNELS                    PropertyNamesDataSetNotificationTemplate = "deliveryChannels"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_DISPLAY_MESSAGE_TEMPLATE             PropertyNamesDataSetNotificationTemplate = "displayMessageTemplate"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_DISPLAY_NAME                         PropertyNamesDataSetNotificationTemplate = "displayName"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_DISPLAY_SUBJECT_TEMPLATE             PropertyNamesDataSetNotificationTemplate = "displaySubjectTemplate"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_EXTERNAL_ACCESS                      PropertyNamesDataSetNotificationTemplate = "externalAccess"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_FAVORITE                             PropertyNamesDataSetNotificationTemplate = "favorite"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_FAVORITES                            PropertyNamesDataSetNotificationTemplate = "favorites"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_HREF                                 PropertyNamesDataSetNotificationTemplate = "href"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_ID                                   PropertyNamesDataSetNotificationTemplate = "id"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_LAST_UPDATED                         PropertyNamesDataSetNotificationTemplate = "lastUpdated"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_LAST_UPDATED_BY                      PropertyNamesDataSetNotificationTemplate = "lastUpdatedBy"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_MESSAGE_TEMPLATE                     PropertyNamesDataSetNotificationTemplate = "messageTemplate"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_NAME                                 PropertyNamesDataSetNotificationTemplate = "name"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_NOTIFICATION_RECIPIENT               PropertyNamesDataSetNotificationTemplate = "notificationRecipient"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_NOTIFY_PARENT_ORGANISATION_UNIT_ONLY PropertyNamesDataSetNotificationTemplate = "notifyParentOrganisationUnitOnly"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_NOTIFY_USERS_IN_HIERARCHY_ONLY       PropertyNamesDataSetNotificationTemplate = "notifyUsersInHierarchyOnly"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_PUBLIC_ACCESS                        PropertyNamesDataSetNotificationTemplate = "publicAccess"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_RECIPIENT_USER_GROUP                 PropertyNamesDataSetNotificationTemplate = "recipientUserGroup"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_RELATIVE_SCHEDULED_DAYS              PropertyNamesDataSetNotificationTemplate = "relativeScheduledDays"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_SEND_STRATEGY                        PropertyNamesDataSetNotificationTemplate = "sendStrategy"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_SHARING                              PropertyNamesDataSetNotificationTemplate = "sharing"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_SUBJECT_TEMPLATE                     PropertyNamesDataSetNotificationTemplate = "subjectTemplate"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_TRANSLATIONS                         PropertyNamesDataSetNotificationTemplate = "translations"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_USER                                 PropertyNamesDataSetNotificationTemplate = "user"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_USER_ACCESSES                        PropertyNamesDataSetNotificationTemplate = "userAccesses"
	PROPERTYNAMESDATASETNOTIFICATIONTEMPLATE_USER_GROUP_ACCESSES                  PropertyNamesDataSetNotificationTemplate = "userGroupAccesses"
)

// All allowed values of PropertyNamesDataSetNotificationTemplate enum
var AllowedPropertyNamesDataSetNotificationTemplateEnumValues = []PropertyNamesDataSetNotificationTemplate{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"dataSetNotificationTrigger",
	"dataSets",
	"deliveryChannels",
	"displayMessageTemplate",
	"displayName",
	"displaySubjectTemplate",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"messageTemplate",
	"name",
	"notificationRecipient",
	"notifyParentOrganisationUnitOnly",
	"notifyUsersInHierarchyOnly",
	"publicAccess",
	"recipientUserGroup",
	"relativeScheduledDays",
	"sendStrategy",
	"sharing",
	"subjectTemplate",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesDataSetNotificationTemplate) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesDataSetNotificationTemplate(value)
	for _, existing := range AllowedPropertyNamesDataSetNotificationTemplateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesDataSetNotificationTemplate", value)
}

// NewPropertyNamesDataSetNotificationTemplateFromValue returns a pointer to a valid PropertyNamesDataSetNotificationTemplate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesDataSetNotificationTemplateFromValue(v string) (*PropertyNamesDataSetNotificationTemplate, error) {
	ev := PropertyNamesDataSetNotificationTemplate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesDataSetNotificationTemplate: valid values are %v", v, AllowedPropertyNamesDataSetNotificationTemplateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesDataSetNotificationTemplate) IsValid() bool {
	for _, existing := range AllowedPropertyNamesDataSetNotificationTemplateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_DataSetNotificationTemplate value
func (v PropertyNamesDataSetNotificationTemplate) Ptr() *PropertyNamesDataSetNotificationTemplate {
	return &v
}

type NullablePropertyNamesDataSetNotificationTemplate struct {
	value *PropertyNamesDataSetNotificationTemplate
	isSet bool
}

func (v NullablePropertyNamesDataSetNotificationTemplate) Get() *PropertyNamesDataSetNotificationTemplate {
	return v.value
}

func (v *NullablePropertyNamesDataSetNotificationTemplate) Set(val *PropertyNamesDataSetNotificationTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesDataSetNotificationTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesDataSetNotificationTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesDataSetNotificationTemplate(val *PropertyNamesDataSetNotificationTemplate) *NullablePropertyNamesDataSetNotificationTemplate {
	return &NullablePropertyNamesDataSetNotificationTemplate{value: val, isSet: true}
}

func (v NullablePropertyNamesDataSetNotificationTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesDataSetNotificationTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
