/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DashboardItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardItem{}

// DashboardItem struct for DashboardItem
type DashboardItem struct {
	Access                  *Access                          `json:"access,omitempty"`
	AppKey                  *string                          `json:"appKey,omitempty"`
	AttributeValues         []AttributeValue                 `json:"attributeValues,omitempty"`
	Code                    *string                          `json:"code,omitempty"`
	ContentCount            int32                            `json:"contentCount"`
	Created                 *time.Time                       `json:"created,omitempty"`
	CreatedBy               *AggregateDataExchangeCreatedBy  `json:"createdBy,omitempty"`
	DisplayName             *string                          `json:"displayName,omitempty"`
	EventChart              *DashboardItemEventChart         `json:"eventChart,omitempty"`
	EventReport             *DashboardItemEventReport        `json:"eventReport,omitempty"`
	EventVisualization      *DashboardItemEventVisualization `json:"eventVisualization,omitempty"`
	ExternalAccess          *bool                            `json:"externalAccess,omitempty"`
	Favorite                *bool                            `json:"favorite,omitempty"`
	Favorites               []string                         `json:"favorites,omitempty"`
	Height                  *int32                           `json:"height,omitempty"`
	Href                    *string                          `json:"href,omitempty"`
	Id                      *string                          `json:"id,omitempty"`
	InterpretationCount     int32                            `json:"interpretationCount"`
	InterpretationLikeCount int32                            `json:"interpretationLikeCount"`
	LastUpdated             *time.Time                       `json:"lastUpdated,omitempty"`
	LastUpdatedBy           *AggregateDataExchangeCreatedBy  `json:"lastUpdatedBy,omitempty"`
	Map                     *DashboardItemMap                `json:"map,omitempty"`
	Messages                *bool                            `json:"messages,omitempty"`
	Name                    *string                          `json:"name,omitempty"`
	PublicAccess            *string                          `json:"publicAccess,omitempty"`
	Reports                 []DashboardItemReportsInner      `json:"reports,omitempty"`
	Resources               []DashboardItemResourcesInner    `json:"resources,omitempty"`
	Shape                   string                           `json:"shape"`
	Sharing                 *Sharing                         `json:"sharing,omitempty"`
	Text                    *string                          `json:"text,omitempty"`
	Translations            []Translation                    `json:"translations,omitempty"`
	Type                    string                           `json:"type"`
	User                    *AggregateDataExchangeCreatedBy  `json:"user,omitempty"`
	UserAccesses            []LegacyUserAccess               `json:"userAccesses,omitempty"`
	UserGroupAccesses       []LegacyUserGroupAccess          `json:"userGroupAccesses,omitempty"`
	Users                   []AggregateDataExchangeCreatedBy `json:"users,omitempty"`
	Visualization           *DashboardItemVisualization      `json:"visualization,omitempty"`
	Width                   *int32                           `json:"width,omitempty"`
	X                       *int32                           `json:"x,omitempty"`
	Y                       *int32                           `json:"y,omitempty"`
}

type _DashboardItem DashboardItem

// NewDashboardItem instantiates a new DashboardItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardItem(contentCount int32, interpretationCount int32, interpretationLikeCount int32, shape string, type_ string) *DashboardItem {
	this := DashboardItem{}
	this.ContentCount = contentCount
	this.InterpretationCount = interpretationCount
	this.InterpretationLikeCount = interpretationLikeCount
	this.Shape = shape
	this.Type = type_
	return &this
}

// NewDashboardItemWithDefaults instantiates a new DashboardItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardItemWithDefaults() *DashboardItem {
	this := DashboardItem{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *DashboardItem) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *DashboardItem) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *DashboardItem) SetAccess(v Access) {
	o.Access = &v
}

// GetAppKey returns the AppKey field value if set, zero value otherwise.
func (o *DashboardItem) GetAppKey() string {
	if o == nil || IsNil(o.AppKey) {
		var ret string
		return ret
	}
	return *o.AppKey
}

// GetAppKeyOk returns a tuple with the AppKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetAppKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AppKey) {
		return nil, false
	}
	return o.AppKey, true
}

// HasAppKey returns a boolean if a field has been set.
func (o *DashboardItem) HasAppKey() bool {
	if o != nil && !IsNil(o.AppKey) {
		return true
	}

	return false
}

// SetAppKey gets a reference to the given string and assigns it to the AppKey field.
func (o *DashboardItem) SetAppKey(v string) {
	o.AppKey = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *DashboardItem) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *DashboardItem) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *DashboardItem) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *DashboardItem) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *DashboardItem) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *DashboardItem) SetCode(v string) {
	o.Code = &v
}

// GetContentCount returns the ContentCount field value
func (o *DashboardItem) GetContentCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ContentCount
}

// GetContentCountOk returns a tuple with the ContentCount field value
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetContentCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentCount, true
}

// SetContentCount sets field value
func (o *DashboardItem) SetContentCount(v int32) {
	o.ContentCount = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DashboardItem) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DashboardItem) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *DashboardItem) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DashboardItem) GetCreatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetCreatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DashboardItem) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the CreatedBy field.
func (o *DashboardItem) SetCreatedBy(v AggregateDataExchangeCreatedBy) {
	o.CreatedBy = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DashboardItem) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DashboardItem) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DashboardItem) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEventChart returns the EventChart field value if set, zero value otherwise.
func (o *DashboardItem) GetEventChart() DashboardItemEventChart {
	if o == nil || IsNil(o.EventChart) {
		var ret DashboardItemEventChart
		return ret
	}
	return *o.EventChart
}

// GetEventChartOk returns a tuple with the EventChart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetEventChartOk() (*DashboardItemEventChart, bool) {
	if o == nil || IsNil(o.EventChart) {
		return nil, false
	}
	return o.EventChart, true
}

// HasEventChart returns a boolean if a field has been set.
func (o *DashboardItem) HasEventChart() bool {
	if o != nil && !IsNil(o.EventChart) {
		return true
	}

	return false
}

// SetEventChart gets a reference to the given DashboardItemEventChart and assigns it to the EventChart field.
func (o *DashboardItem) SetEventChart(v DashboardItemEventChart) {
	o.EventChart = &v
}

// GetEventReport returns the EventReport field value if set, zero value otherwise.
func (o *DashboardItem) GetEventReport() DashboardItemEventReport {
	if o == nil || IsNil(o.EventReport) {
		var ret DashboardItemEventReport
		return ret
	}
	return *o.EventReport
}

// GetEventReportOk returns a tuple with the EventReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetEventReportOk() (*DashboardItemEventReport, bool) {
	if o == nil || IsNil(o.EventReport) {
		return nil, false
	}
	return o.EventReport, true
}

// HasEventReport returns a boolean if a field has been set.
func (o *DashboardItem) HasEventReport() bool {
	if o != nil && !IsNil(o.EventReport) {
		return true
	}

	return false
}

// SetEventReport gets a reference to the given DashboardItemEventReport and assigns it to the EventReport field.
func (o *DashboardItem) SetEventReport(v DashboardItemEventReport) {
	o.EventReport = &v
}

// GetEventVisualization returns the EventVisualization field value if set, zero value otherwise.
func (o *DashboardItem) GetEventVisualization() DashboardItemEventVisualization {
	if o == nil || IsNil(o.EventVisualization) {
		var ret DashboardItemEventVisualization
		return ret
	}
	return *o.EventVisualization
}

// GetEventVisualizationOk returns a tuple with the EventVisualization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetEventVisualizationOk() (*DashboardItemEventVisualization, bool) {
	if o == nil || IsNil(o.EventVisualization) {
		return nil, false
	}
	return o.EventVisualization, true
}

// HasEventVisualization returns a boolean if a field has been set.
func (o *DashboardItem) HasEventVisualization() bool {
	if o != nil && !IsNil(o.EventVisualization) {
		return true
	}

	return false
}

// SetEventVisualization gets a reference to the given DashboardItemEventVisualization and assigns it to the EventVisualization field.
func (o *DashboardItem) SetEventVisualization(v DashboardItemEventVisualization) {
	o.EventVisualization = &v
}

// GetExternalAccess returns the ExternalAccess field value if set, zero value otherwise.
func (o *DashboardItem) GetExternalAccess() bool {
	if o == nil || IsNil(o.ExternalAccess) {
		var ret bool
		return ret
	}
	return *o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetExternalAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAccess) {
		return nil, false
	}
	return o.ExternalAccess, true
}

// HasExternalAccess returns a boolean if a field has been set.
func (o *DashboardItem) HasExternalAccess() bool {
	if o != nil && !IsNil(o.ExternalAccess) {
		return true
	}

	return false
}

// SetExternalAccess gets a reference to the given bool and assigns it to the ExternalAccess field.
func (o *DashboardItem) SetExternalAccess(v bool) {
	o.ExternalAccess = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *DashboardItem) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *DashboardItem) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *DashboardItem) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *DashboardItem) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *DashboardItem) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *DashboardItem) SetFavorites(v []string) {
	o.Favorites = v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *DashboardItem) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *DashboardItem) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *DashboardItem) SetHeight(v int32) {
	o.Height = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *DashboardItem) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *DashboardItem) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *DashboardItem) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DashboardItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DashboardItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DashboardItem) SetId(v string) {
	o.Id = &v
}

// GetInterpretationCount returns the InterpretationCount field value
func (o *DashboardItem) GetInterpretationCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InterpretationCount
}

// GetInterpretationCountOk returns a tuple with the InterpretationCount field value
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetInterpretationCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterpretationCount, true
}

// SetInterpretationCount sets field value
func (o *DashboardItem) SetInterpretationCount(v int32) {
	o.InterpretationCount = v
}

// GetInterpretationLikeCount returns the InterpretationLikeCount field value
func (o *DashboardItem) GetInterpretationLikeCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InterpretationLikeCount
}

// GetInterpretationLikeCountOk returns a tuple with the InterpretationLikeCount field value
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetInterpretationLikeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterpretationLikeCount, true
}

// SetInterpretationLikeCount sets field value
func (o *DashboardItem) SetInterpretationLikeCount(v int32) {
	o.InterpretationLikeCount = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *DashboardItem) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *DashboardItem) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *DashboardItem) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *DashboardItem) GetLastUpdatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetLastUpdatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *DashboardItem) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the LastUpdatedBy field.
func (o *DashboardItem) SetLastUpdatedBy(v AggregateDataExchangeCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetMap returns the Map field value if set, zero value otherwise.
func (o *DashboardItem) GetMap() DashboardItemMap {
	if o == nil || IsNil(o.Map) {
		var ret DashboardItemMap
		return ret
	}
	return *o.Map
}

// GetMapOk returns a tuple with the Map field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetMapOk() (*DashboardItemMap, bool) {
	if o == nil || IsNil(o.Map) {
		return nil, false
	}
	return o.Map, true
}

// HasMap returns a boolean if a field has been set.
func (o *DashboardItem) HasMap() bool {
	if o != nil && !IsNil(o.Map) {
		return true
	}

	return false
}

// SetMap gets a reference to the given DashboardItemMap and assigns it to the Map field.
func (o *DashboardItem) SetMap(v DashboardItemMap) {
	o.Map = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *DashboardItem) GetMessages() bool {
	if o == nil || IsNil(o.Messages) {
		var ret bool
		return ret
	}
	return *o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetMessagesOk() (*bool, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *DashboardItem) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given bool and assigns it to the Messages field.
func (o *DashboardItem) SetMessages(v bool) {
	o.Messages = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DashboardItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DashboardItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DashboardItem) SetName(v string) {
	o.Name = &v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *DashboardItem) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *DashboardItem) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *DashboardItem) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetReports returns the Reports field value if set, zero value otherwise.
func (o *DashboardItem) GetReports() []DashboardItemReportsInner {
	if o == nil || IsNil(o.Reports) {
		var ret []DashboardItemReportsInner
		return ret
	}
	return o.Reports
}

// GetReportsOk returns a tuple with the Reports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetReportsOk() ([]DashboardItemReportsInner, bool) {
	if o == nil || IsNil(o.Reports) {
		return nil, false
	}
	return o.Reports, true
}

// HasReports returns a boolean if a field has been set.
func (o *DashboardItem) HasReports() bool {
	if o != nil && !IsNil(o.Reports) {
		return true
	}

	return false
}

// SetReports gets a reference to the given []DashboardItemReportsInner and assigns it to the Reports field.
func (o *DashboardItem) SetReports(v []DashboardItemReportsInner) {
	o.Reports = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *DashboardItem) GetResources() []DashboardItemResourcesInner {
	if o == nil || IsNil(o.Resources) {
		var ret []DashboardItemResourcesInner
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetResourcesOk() ([]DashboardItemResourcesInner, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *DashboardItem) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []DashboardItemResourcesInner and assigns it to the Resources field.
func (o *DashboardItem) SetResources(v []DashboardItemResourcesInner) {
	o.Resources = v
}

// GetShape returns the Shape field value
func (o *DashboardItem) GetShape() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Shape
}

// GetShapeOk returns a tuple with the Shape field value
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetShapeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shape, true
}

// SetShape sets field value
func (o *DashboardItem) SetShape(v string) {
	o.Shape = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *DashboardItem) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *DashboardItem) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *DashboardItem) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *DashboardItem) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *DashboardItem) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *DashboardItem) SetText(v string) {
	o.Text = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *DashboardItem) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *DashboardItem) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *DashboardItem) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetType returns the Type field value
func (o *DashboardItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DashboardItem) SetType(v string) {
	o.Type = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DashboardItem) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DashboardItem) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *DashboardItem) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *DashboardItem) GetUserAccesses() []LegacyUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []LegacyUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetUserAccessesOk() ([]LegacyUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *DashboardItem) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []LegacyUserAccess and assigns it to the UserAccesses field.
func (o *DashboardItem) SetUserAccesses(v []LegacyUserAccess) {
	o.UserAccesses = v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *DashboardItem) GetUserGroupAccesses() []LegacyUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []LegacyUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetUserGroupAccessesOk() ([]LegacyUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *DashboardItem) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []LegacyUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *DashboardItem) SetUserGroupAccesses(v []LegacyUserGroupAccess) {
	o.UserGroupAccesses = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *DashboardItem) GetUsers() []AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.Users) {
		var ret []AggregateDataExchangeCreatedBy
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetUsersOk() ([]AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *DashboardItem) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []AggregateDataExchangeCreatedBy and assigns it to the Users field.
func (o *DashboardItem) SetUsers(v []AggregateDataExchangeCreatedBy) {
	o.Users = v
}

// GetVisualization returns the Visualization field value if set, zero value otherwise.
func (o *DashboardItem) GetVisualization() DashboardItemVisualization {
	if o == nil || IsNil(o.Visualization) {
		var ret DashboardItemVisualization
		return ret
	}
	return *o.Visualization
}

// GetVisualizationOk returns a tuple with the Visualization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetVisualizationOk() (*DashboardItemVisualization, bool) {
	if o == nil || IsNil(o.Visualization) {
		return nil, false
	}
	return o.Visualization, true
}

// HasVisualization returns a boolean if a field has been set.
func (o *DashboardItem) HasVisualization() bool {
	if o != nil && !IsNil(o.Visualization) {
		return true
	}

	return false
}

// SetVisualization gets a reference to the given DashboardItemVisualization and assigns it to the Visualization field.
func (o *DashboardItem) SetVisualization(v DashboardItemVisualization) {
	o.Visualization = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *DashboardItem) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *DashboardItem) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *DashboardItem) SetWidth(v int32) {
	o.Width = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *DashboardItem) GetX() int32 {
	if o == nil || IsNil(o.X) {
		var ret int32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetXOk() (*int32, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *DashboardItem) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given int32 and assigns it to the X field.
func (o *DashboardItem) SetX(v int32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *DashboardItem) GetY() int32 {
	if o == nil || IsNil(o.Y) {
		var ret int32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetYOk() (*int32, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *DashboardItem) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given int32 and assigns it to the Y field.
func (o *DashboardItem) SetY(v int32) {
	o.Y = &v
}

func (o DashboardItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AppKey) {
		toSerialize["appKey"] = o.AppKey
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["contentCount"] = o.ContentCount
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EventChart) {
		toSerialize["eventChart"] = o.EventChart
	}
	if !IsNil(o.EventReport) {
		toSerialize["eventReport"] = o.EventReport
	}
	if !IsNil(o.EventVisualization) {
		toSerialize["eventVisualization"] = o.EventVisualization
	}
	if !IsNil(o.ExternalAccess) {
		toSerialize["externalAccess"] = o.ExternalAccess
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["interpretationCount"] = o.InterpretationCount
	toSerialize["interpretationLikeCount"] = o.InterpretationLikeCount
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Map) {
		toSerialize["map"] = o.Map
	}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	if !IsNil(o.Reports) {
		toSerialize["reports"] = o.Reports
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	toSerialize["shape"] = o.Shape
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Visualization) {
		toSerialize["visualization"] = o.Visualization
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}
	return toSerialize, nil
}

func (o *DashboardItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contentCount",
		"interpretationCount",
		"interpretationLikeCount",
		"shape",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDashboardItem := _DashboardItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDashboardItem)

	if err != nil {
		return err
	}

	*o = DashboardItem(varDashboardItem)

	return err
}

type NullableDashboardItem struct {
	value *DashboardItem
	isSet bool
}

func (v NullableDashboardItem) Get() *DashboardItem {
	return v.value
}

func (v *NullableDashboardItem) Set(val *DashboardItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardItem(val *DashboardItem) *NullableDashboardItem {
	return &NullableDashboardItem{value: val, isSet: true}
}

func (v NullableDashboardItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
