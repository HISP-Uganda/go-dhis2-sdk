/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"time"
)

// checks if the DatabaseInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseInfo{}

// DatabaseInfo struct for DatabaseInfo
type DatabaseInfo struct {
	DatabaseVersion *string    `json:"databaseVersion,omitempty"`
	Name            *string    `json:"name,omitempty"`
	SpatialSupport  *bool      `json:"spatialSupport,omitempty"`
	Time            *time.Time `json:"time,omitempty"`
	Url             *string    `json:"url,omitempty"`
	User            *string    `json:"user,omitempty"`
}

// NewDatabaseInfo instantiates a new DatabaseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseInfo() *DatabaseInfo {
	this := DatabaseInfo{}
	return &this
}

// NewDatabaseInfoWithDefaults instantiates a new DatabaseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseInfoWithDefaults() *DatabaseInfo {
	this := DatabaseInfo{}
	return &this
}

// GetDatabaseVersion returns the DatabaseVersion field value if set, zero value otherwise.
func (o *DatabaseInfo) GetDatabaseVersion() string {
	if o == nil || IsNil(o.DatabaseVersion) {
		var ret string
		return ret
	}
	return *o.DatabaseVersion
}

// GetDatabaseVersionOk returns a tuple with the DatabaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseInfo) GetDatabaseVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseVersion) {
		return nil, false
	}
	return o.DatabaseVersion, true
}

// HasDatabaseVersion returns a boolean if a field has been set.
func (o *DatabaseInfo) HasDatabaseVersion() bool {
	if o != nil && !IsNil(o.DatabaseVersion) {
		return true
	}

	return false
}

// SetDatabaseVersion gets a reference to the given string and assigns it to the DatabaseVersion field.
func (o *DatabaseInfo) SetDatabaseVersion(v string) {
	o.DatabaseVersion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatabaseInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatabaseInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatabaseInfo) SetName(v string) {
	o.Name = &v
}

// GetSpatialSupport returns the SpatialSupport field value if set, zero value otherwise.
func (o *DatabaseInfo) GetSpatialSupport() bool {
	if o == nil || IsNil(o.SpatialSupport) {
		var ret bool
		return ret
	}
	return *o.SpatialSupport
}

// GetSpatialSupportOk returns a tuple with the SpatialSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseInfo) GetSpatialSupportOk() (*bool, bool) {
	if o == nil || IsNil(o.SpatialSupport) {
		return nil, false
	}
	return o.SpatialSupport, true
}

// HasSpatialSupport returns a boolean if a field has been set.
func (o *DatabaseInfo) HasSpatialSupport() bool {
	if o != nil && !IsNil(o.SpatialSupport) {
		return true
	}

	return false
}

// SetSpatialSupport gets a reference to the given bool and assigns it to the SpatialSupport field.
func (o *DatabaseInfo) SetSpatialSupport(v bool) {
	o.SpatialSupport = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *DatabaseInfo) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseInfo) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *DatabaseInfo) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *DatabaseInfo) SetTime(v time.Time) {
	o.Time = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DatabaseInfo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseInfo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DatabaseInfo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DatabaseInfo) SetUrl(v string) {
	o.Url = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DatabaseInfo) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseInfo) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DatabaseInfo) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *DatabaseInfo) SetUser(v string) {
	o.User = &v
}

func (o DatabaseInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatabaseVersion) {
		toSerialize["databaseVersion"] = o.DatabaseVersion
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SpatialSupport) {
		toSerialize["spatialSupport"] = o.SpatialSupport
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableDatabaseInfo struct {
	value *DatabaseInfo
	isSet bool
}

func (v NullableDatabaseInfo) Get() *DatabaseInfo {
	return v.value
}

func (v *NullableDatabaseInfo) Set(val *DatabaseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseInfo(val *DatabaseInfo) *NullableDatabaseInfo {
	return &NullableDatabaseInfo{value: val, isSet: true}
}

func (v NullableDatabaseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
