/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// FontSize the model 'FontSize'
type FontSize string

// List of FontSize
const (
	FONTSIZE_LARGE  FontSize = "LARGE"
	FONTSIZE_NORMAL FontSize = "NORMAL"
	FONTSIZE_SMALL  FontSize = "SMALL"
)

// All allowed values of FontSize enum
var AllowedFontSizeEnumValues = []FontSize{
	"LARGE",
	"NORMAL",
	"SMALL",
}

func (v *FontSize) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FontSize(value)
	for _, existing := range AllowedFontSizeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FontSize", value)
}

// NewFontSizeFromValue returns a pointer to a valid FontSize
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFontSizeFromValue(v string) (*FontSize, error) {
	ev := FontSize(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FontSize: valid values are %v", v, AllowedFontSizeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FontSize) IsValid() bool {
	for _, existing := range AllowedFontSizeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FontSize value
func (v FontSize) Ptr() *FontSize {
	return &v
}

type NullableFontSize struct {
	value *FontSize
	isSet bool
}

func (v NullableFontSize) Get() *FontSize {
	return v.value
}

func (v *NullableFontSize) Set(val *FontSize) {
	v.value = val
	v.isSet = true
}

func (v NullableFontSize) IsSet() bool {
	return v.isSet
}

func (v *NullableFontSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFontSize(val *FontSize) *NullableFontSize {
	return &NullableFontSize{value: val, isSet: true}
}

func (v NullableFontSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFontSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
