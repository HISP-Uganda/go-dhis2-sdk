/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ParameterObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterObject{}

// ParameterObject struct for ParameterObject
type ParameterObject struct {
	Schema        *SchemaObject    `json:"schema,omitempty"`
	In            In               `json:"in"`
	Deprecated    *bool            `json:"deprecated,omitempty"`
	Name          *string          `json:"name,omitempty"`
	Description   *string          `json:"description,omitempty"`
	SchemaDefault *any             `json:"schema.default,omitempty"`
	Ref           *ParameterObject `json:"$ref,omitempty"`
	Required      *bool            `json:"required,omitempty"`
	XSince        *string          `json:"x-since,omitempty"`
}

type _ParameterObject ParameterObject

// NewParameterObject instantiates a new ParameterObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterObject(in In) *ParameterObject {
	this := ParameterObject{}
	this.In = in
	return &this
}

// NewParameterObjectWithDefaults instantiates a new ParameterObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterObjectWithDefaults() *ParameterObject {
	this := ParameterObject{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *ParameterObject) GetSchema() SchemaObject {
	if o == nil || IsNil(o.Schema) {
		var ret SchemaObject
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterObject) GetSchemaOk() (*SchemaObject, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *ParameterObject) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given SchemaObject and assigns it to the Schema field.
func (o *ParameterObject) SetSchema(v SchemaObject) {
	o.Schema = &v
}

// GetIn returns the In field value
func (o *ParameterObject) GetIn() In {
	if o == nil {
		var ret In
		return ret
	}

	return o.In
}

// GetInOk returns a tuple with the In field value
// and a boolean to check if the value has been set.
func (o *ParameterObject) GetInOk() (*In, bool) {
	if o == nil {
		return nil, false
	}
	return &o.In, true
}

// SetIn sets field value
func (o *ParameterObject) SetIn(v In) {
	o.In = v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *ParameterObject) GetDeprecated() bool {
	if o == nil || IsNil(o.Deprecated) {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterObject) GetDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deprecated) {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *ParameterObject) HasDeprecated() bool {
	if o != nil && !IsNil(o.Deprecated) {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *ParameterObject) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ParameterObject) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterObject) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ParameterObject) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ParameterObject) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ParameterObject) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterObject) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ParameterObject) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ParameterObject) SetDescription(v string) {
	o.Description = &v
}

// GetSchemaDefault returns the SchemaDefault field value if set, zero value otherwise.
func (o *ParameterObject) GetSchemaDefault() any {
	if o == nil || IsNil(o.SchemaDefault) {
		var ret any
		return ret
	}
	return *o.SchemaDefault
}

// GetSchemaDefaultOk returns a tuple with the SchemaDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterObject) GetSchemaDefaultOk() (*any, bool) {
	if o == nil || IsNil(o.SchemaDefault) {
		return nil, false
	}
	return o.SchemaDefault, true
}

// HasSchemaDefault returns a boolean if a field has been set.
func (o *ParameterObject) HasSchemaDefault() bool {
	if o != nil && !IsNil(o.SchemaDefault) {
		return true
	}

	return false
}

// SetSchemaDefault gets a reference to the given any and assigns it to the SchemaDefault field.
func (o *ParameterObject) SetSchemaDefault(v any) {
	o.SchemaDefault = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *ParameterObject) GetRef() ParameterObject {
	if o == nil || IsNil(o.Ref) {
		var ret ParameterObject
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterObject) GetRefOk() (*ParameterObject, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *ParameterObject) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given ParameterObject and assigns it to the Ref field.
func (o *ParameterObject) SetRef(v ParameterObject) {
	o.Ref = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ParameterObject) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterObject) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ParameterObject) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ParameterObject) SetRequired(v bool) {
	o.Required = &v
}

// GetXSince returns the XSince field value if set, zero value otherwise.
func (o *ParameterObject) GetXSince() string {
	if o == nil || IsNil(o.XSince) {
		var ret string
		return ret
	}
	return *o.XSince
}

// GetXSinceOk returns a tuple with the XSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterObject) GetXSinceOk() (*string, bool) {
	if o == nil || IsNil(o.XSince) {
		return nil, false
	}
	return o.XSince, true
}

// HasXSince returns a boolean if a field has been set.
func (o *ParameterObject) HasXSince() bool {
	if o != nil && !IsNil(o.XSince) {
		return true
	}

	return false
}

// SetXSince gets a reference to the given string and assigns it to the XSince field.
func (o *ParameterObject) SetXSince(v string) {
	o.XSince = &v
}

func (o ParameterObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	toSerialize["in"] = o.In
	if !IsNil(o.Deprecated) {
		toSerialize["deprecated"] = o.Deprecated
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SchemaDefault) {
		toSerialize["schema.default"] = o.SchemaDefault
	}
	if !IsNil(o.Ref) {
		toSerialize["$ref"] = o.Ref
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.XSince) {
		toSerialize["x-since"] = o.XSince
	}
	return toSerialize, nil
}

func (o *ParameterObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"in",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameterObject := _ParameterObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParameterObject)

	if err != nil {
		return err
	}

	*o = ParameterObject(varParameterObject)

	return err
}

type NullableParameterObject struct {
	value *ParameterObject
	isSet bool
}

func (v NullableParameterObject) Get() *ParameterObject {
	return v.value
}

func (v *NullableParameterObject) Set(val *ParameterObject) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterObject) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterObject(val *ParameterObject) *NullableParameterObject {
	return &NullableParameterObject{value: val, isSet: true}
}

func (v NullableParameterObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
