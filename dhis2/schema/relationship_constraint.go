/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RelationshipConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipConstraint{}

// RelationshipConstraint struct for RelationshipConstraint
type RelationshipConstraint struct {
	Program            *EventVisualizationProgram `json:"program,omitempty"`
	ProgramStage       *CategoryProgramStage      `json:"programStage,omitempty"`
	RelationshipEntity string                     `json:"relationshipEntity"`
	TrackedEntityType  *MapViewTrackedEntityType  `json:"trackedEntityType,omitempty"`
	TrackerDataView    *TrackerDataView           `json:"trackerDataView,omitempty"`
}

type _RelationshipConstraint RelationshipConstraint

// NewRelationshipConstraint instantiates a new RelationshipConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipConstraint(relationshipEntity string) *RelationshipConstraint {
	this := RelationshipConstraint{}
	this.RelationshipEntity = relationshipEntity
	return &this
}

// NewRelationshipConstraintWithDefaults instantiates a new RelationshipConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipConstraintWithDefaults() *RelationshipConstraint {
	this := RelationshipConstraint{}
	return &this
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *RelationshipConstraint) GetProgram() EventVisualizationProgram {
	if o == nil || IsNil(o.Program) {
		var ret EventVisualizationProgram
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipConstraint) GetProgramOk() (*EventVisualizationProgram, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *RelationshipConstraint) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given EventVisualizationProgram and assigns it to the Program field.
func (o *RelationshipConstraint) SetProgram(v EventVisualizationProgram) {
	o.Program = &v
}

// GetProgramStage returns the ProgramStage field value if set, zero value otherwise.
func (o *RelationshipConstraint) GetProgramStage() CategoryProgramStage {
	if o == nil || IsNil(o.ProgramStage) {
		var ret CategoryProgramStage
		return ret
	}
	return *o.ProgramStage
}

// GetProgramStageOk returns a tuple with the ProgramStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipConstraint) GetProgramStageOk() (*CategoryProgramStage, bool) {
	if o == nil || IsNil(o.ProgramStage) {
		return nil, false
	}
	return o.ProgramStage, true
}

// HasProgramStage returns a boolean if a field has been set.
func (o *RelationshipConstraint) HasProgramStage() bool {
	if o != nil && !IsNil(o.ProgramStage) {
		return true
	}

	return false
}

// SetProgramStage gets a reference to the given CategoryProgramStage and assigns it to the ProgramStage field.
func (o *RelationshipConstraint) SetProgramStage(v CategoryProgramStage) {
	o.ProgramStage = &v
}

// GetRelationshipEntity returns the RelationshipEntity field value
func (o *RelationshipConstraint) GetRelationshipEntity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelationshipEntity
}

// GetRelationshipEntityOk returns a tuple with the RelationshipEntity field value
// and a boolean to check if the value has been set.
func (o *RelationshipConstraint) GetRelationshipEntityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelationshipEntity, true
}

// SetRelationshipEntity sets field value
func (o *RelationshipConstraint) SetRelationshipEntity(v string) {
	o.RelationshipEntity = v
}

// GetTrackedEntityType returns the TrackedEntityType field value if set, zero value otherwise.
func (o *RelationshipConstraint) GetTrackedEntityType() MapViewTrackedEntityType {
	if o == nil || IsNil(o.TrackedEntityType) {
		var ret MapViewTrackedEntityType
		return ret
	}
	return *o.TrackedEntityType
}

// GetTrackedEntityTypeOk returns a tuple with the TrackedEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipConstraint) GetTrackedEntityTypeOk() (*MapViewTrackedEntityType, bool) {
	if o == nil || IsNil(o.TrackedEntityType) {
		return nil, false
	}
	return o.TrackedEntityType, true
}

// HasTrackedEntityType returns a boolean if a field has been set.
func (o *RelationshipConstraint) HasTrackedEntityType() bool {
	if o != nil && !IsNil(o.TrackedEntityType) {
		return true
	}

	return false
}

// SetTrackedEntityType gets a reference to the given MapViewTrackedEntityType and assigns it to the TrackedEntityType field.
func (o *RelationshipConstraint) SetTrackedEntityType(v MapViewTrackedEntityType) {
	o.TrackedEntityType = &v
}

// GetTrackerDataView returns the TrackerDataView field value if set, zero value otherwise.
func (o *RelationshipConstraint) GetTrackerDataView() TrackerDataView {
	if o == nil || IsNil(o.TrackerDataView) {
		var ret TrackerDataView
		return ret
	}
	return *o.TrackerDataView
}

// GetTrackerDataViewOk returns a tuple with the TrackerDataView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipConstraint) GetTrackerDataViewOk() (*TrackerDataView, bool) {
	if o == nil || IsNil(o.TrackerDataView) {
		return nil, false
	}
	return o.TrackerDataView, true
}

// HasTrackerDataView returns a boolean if a field has been set.
func (o *RelationshipConstraint) HasTrackerDataView() bool {
	if o != nil && !IsNil(o.TrackerDataView) {
		return true
	}

	return false
}

// SetTrackerDataView gets a reference to the given TrackerDataView and assigns it to the TrackerDataView field.
func (o *RelationshipConstraint) SetTrackerDataView(v TrackerDataView) {
	o.TrackerDataView = &v
}

func (o RelationshipConstraint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.ProgramStage) {
		toSerialize["programStage"] = o.ProgramStage
	}
	toSerialize["relationshipEntity"] = o.RelationshipEntity
	if !IsNil(o.TrackedEntityType) {
		toSerialize["trackedEntityType"] = o.TrackedEntityType
	}
	if !IsNil(o.TrackerDataView) {
		toSerialize["trackerDataView"] = o.TrackerDataView
	}
	return toSerialize, nil
}

func (o *RelationshipConstraint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"relationshipEntity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRelationshipConstraint := _RelationshipConstraint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRelationshipConstraint)

	if err != nil {
		return err
	}

	*o = RelationshipConstraint(varRelationshipConstraint)

	return err
}

type NullableRelationshipConstraint struct {
	value *RelationshipConstraint
	isSet bool
}

func (v NullableRelationshipConstraint) Get() *RelationshipConstraint {
	return v.value
}

func (v *NullableRelationshipConstraint) Set(val *RelationshipConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipConstraint(val *RelationshipConstraint) *NullableRelationshipConstraint {
	return &NullableRelationshipConstraint{value: val, isSet: true}
}

func (v NullableRelationshipConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
