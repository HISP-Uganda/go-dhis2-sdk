/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Progress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Progress{}

// Progress struct for Progress
type Progress struct {
	Errors   map[string]map[string][]Error `json:"errors"`
	Sequence []Process                     `json:"sequence"`
}

type _Progress Progress

// NewProgress instantiates a new Progress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgress(errors map[string]map[string][]Error, sequence []Process) *Progress {
	this := Progress{}
	this.Errors = errors
	this.Sequence = sequence
	return &this
}

// NewProgressWithDefaults instantiates a new Progress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgressWithDefaults() *Progress {
	this := Progress{}
	return &this
}

// GetErrors returns the Errors field value
func (o *Progress) GetErrors() map[string]map[string][]Error {
	if o == nil {
		var ret map[string]map[string][]Error
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *Progress) GetErrorsOk() (*map[string]map[string][]Error, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Errors, true
}

// SetErrors sets field value
func (o *Progress) SetErrors(v map[string]map[string][]Error) {
	o.Errors = v
}

// GetSequence returns the Sequence field value
func (o *Progress) GetSequence() []Process {
	if o == nil {
		var ret []Process
		return ret
	}

	return o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value
// and a boolean to check if the value has been set.
func (o *Progress) GetSequenceOk() ([]Process, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sequence, true
}

// SetSequence sets field value
func (o *Progress) SetSequence(v []Process) {
	o.Sequence = v
}

func (o Progress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Progress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errors"] = o.Errors
	toSerialize["sequence"] = o.Sequence
	return toSerialize, nil
}

func (o *Progress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errors",
		"sequence",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProgress := _Progress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProgress)

	if err != nil {
		return err
	}

	*o = Progress(varProgress)

	return err
}

type NullableProgress struct {
	value *Progress
	isSet bool
}

func (v NullableProgress) Get() *Progress {
	return v.value
}

func (v *NullableProgress) Set(val *Progress) {
	v.value = val
	v.isSet = true
}

func (v NullableProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgress(val *Progress) *NullableProgress {
	return &NullableProgress{value: val, isSet: true}
}

func (v NullableProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
