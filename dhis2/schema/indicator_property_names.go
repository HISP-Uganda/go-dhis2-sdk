/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// IndicatorPropertyNames the model 'IndicatorPropertyNames'
type IndicatorPropertyNames string

// List of IndicatorPropertyNames
const (
	INDICATORPROPERTYNAMES_ACCESS                                  IndicatorPropertyNames = "access"
	INDICATORPROPERTYNAMES_AGGREGATE_EXPORT_ATTRIBUTE_OPTION_COMBO IndicatorPropertyNames = "aggregateExportAttributeOptionCombo"
	INDICATORPROPERTYNAMES_AGGREGATE_EXPORT_CATEGORY_OPTION_COMBO  IndicatorPropertyNames = "aggregateExportCategoryOptionCombo"
	INDICATORPROPERTYNAMES_AGGREGATION_TYPE                        IndicatorPropertyNames = "aggregationType"
	INDICATORPROPERTYNAMES_ANNUALIZED                              IndicatorPropertyNames = "annualized"
	INDICATORPROPERTYNAMES_ATTRIBUTE_VALUES                        IndicatorPropertyNames = "attributeValues"
	INDICATORPROPERTYNAMES_CODE                                    IndicatorPropertyNames = "code"
	INDICATORPROPERTYNAMES_CREATED                                 IndicatorPropertyNames = "created"
	INDICATORPROPERTYNAMES_CREATED_BY                              IndicatorPropertyNames = "createdBy"
	INDICATORPROPERTYNAMES_DATA_SETS                               IndicatorPropertyNames = "dataSets"
	INDICATORPROPERTYNAMES_DECIMALS                                IndicatorPropertyNames = "decimals"
	INDICATORPROPERTYNAMES_DENOMINATOR                             IndicatorPropertyNames = "denominator"
	INDICATORPROPERTYNAMES_DENOMINATOR_DESCRIPTION                 IndicatorPropertyNames = "denominatorDescription"
	INDICATORPROPERTYNAMES_DESCRIPTION                             IndicatorPropertyNames = "description"
	INDICATORPROPERTYNAMES_DIMENSION_ITEM                          IndicatorPropertyNames = "dimensionItem"
	INDICATORPROPERTYNAMES_DISPLAY_DENOMINATOR_DESCRIPTION         IndicatorPropertyNames = "displayDenominatorDescription"
	INDICATORPROPERTYNAMES_DISPLAY_DESCRIPTION                     IndicatorPropertyNames = "displayDescription"
	INDICATORPROPERTYNAMES_DISPLAY_FORM_NAME                       IndicatorPropertyNames = "displayFormName"
	INDICATORPROPERTYNAMES_DISPLAY_NAME                            IndicatorPropertyNames = "displayName"
	INDICATORPROPERTYNAMES_DISPLAY_NUMERATOR_DESCRIPTION           IndicatorPropertyNames = "displayNumeratorDescription"
	INDICATORPROPERTYNAMES_DISPLAY_SHORT_NAME                      IndicatorPropertyNames = "displayShortName"
	INDICATORPROPERTYNAMES_EXPLODED_DENOMINATOR                    IndicatorPropertyNames = "explodedDenominator"
	INDICATORPROPERTYNAMES_EXPLODED_NUMERATOR                      IndicatorPropertyNames = "explodedNumerator"
	INDICATORPROPERTYNAMES_FAVORITE                                IndicatorPropertyNames = "favorite"
	INDICATORPROPERTYNAMES_FAVORITES                               IndicatorPropertyNames = "favorites"
	INDICATORPROPERTYNAMES_FORM_NAME                               IndicatorPropertyNames = "formName"
	INDICATORPROPERTYNAMES_HREF                                    IndicatorPropertyNames = "href"
	INDICATORPROPERTYNAMES_ID                                      IndicatorPropertyNames = "id"
	INDICATORPROPERTYNAMES_INDICATOR_GROUPS                        IndicatorPropertyNames = "indicatorGroups"
	INDICATORPROPERTYNAMES_INDICATOR_TYPE                          IndicatorPropertyNames = "indicatorType"
	INDICATORPROPERTYNAMES_LAST_UPDATED                            IndicatorPropertyNames = "lastUpdated"
	INDICATORPROPERTYNAMES_LAST_UPDATED_BY                         IndicatorPropertyNames = "lastUpdatedBy"
	INDICATORPROPERTYNAMES_LEGEND_SET                              IndicatorPropertyNames = "legendSet"
	INDICATORPROPERTYNAMES_LEGEND_SETS                             IndicatorPropertyNames = "legendSets"
	INDICATORPROPERTYNAMES_NAME                                    IndicatorPropertyNames = "name"
	INDICATORPROPERTYNAMES_NUMERATOR                               IndicatorPropertyNames = "numerator"
	INDICATORPROPERTYNAMES_NUMERATOR_DESCRIPTION                   IndicatorPropertyNames = "numeratorDescription"
	INDICATORPROPERTYNAMES_QUERY_MODS                              IndicatorPropertyNames = "queryMods"
	INDICATORPROPERTYNAMES_SHARING                                 IndicatorPropertyNames = "sharing"
	INDICATORPROPERTYNAMES_SHORT_NAME                              IndicatorPropertyNames = "shortName"
	INDICATORPROPERTYNAMES_STYLE                                   IndicatorPropertyNames = "style"
	INDICATORPROPERTYNAMES_TRANSLATIONS                            IndicatorPropertyNames = "translations"
	INDICATORPROPERTYNAMES_URL                                     IndicatorPropertyNames = "url"
)

// All allowed values of IndicatorPropertyNames enum
var AllowedIndicatorPropertyNamesEnumValues = []IndicatorPropertyNames{
	"access",
	"aggregateExportAttributeOptionCombo",
	"aggregateExportCategoryOptionCombo",
	"aggregationType",
	"annualized",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"dataSets",
	"decimals",
	"denominator",
	"denominatorDescription",
	"description",
	"dimensionItem",
	"displayDenominatorDescription",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayNumeratorDescription",
	"displayShortName",
	"explodedDenominator",
	"explodedNumerator",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"indicatorGroups",
	"indicatorType",
	"lastUpdated",
	"lastUpdatedBy",
	"legendSet",
	"legendSets",
	"name",
	"numerator",
	"numeratorDescription",
	"queryMods",
	"sharing",
	"shortName",
	"style",
	"translations",
	"url",
}

func (v *IndicatorPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IndicatorPropertyNames(value)
	for _, existing := range AllowedIndicatorPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IndicatorPropertyNames", value)
}

// NewIndicatorPropertyNamesFromValue returns a pointer to a valid IndicatorPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIndicatorPropertyNamesFromValue(v string) (*IndicatorPropertyNames, error) {
	ev := IndicatorPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IndicatorPropertyNames: valid values are %v", v, AllowedIndicatorPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IndicatorPropertyNames) IsValid() bool {
	for _, existing := range AllowedIndicatorPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IndicatorPropertyNames value
func (v IndicatorPropertyNames) Ptr() *IndicatorPropertyNames {
	return &v
}

type NullableIndicatorPropertyNames struct {
	value *IndicatorPropertyNames
	isSet bool
}

func (v NullableIndicatorPropertyNames) Get() *IndicatorPropertyNames {
	return v.value
}

func (v *NullableIndicatorPropertyNames) Set(val *IndicatorPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorPropertyNames(val *IndicatorPropertyNames) *NullableIndicatorPropertyNames {
	return &NullableIndicatorPropertyNames{value: val, isSet: true}
}

func (v NullableIndicatorPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
