/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ProgramNotificationRecipient the model 'ProgramNotificationRecipient'
type ProgramNotificationRecipient string

// List of ProgramNotificationRecipient
const (
	PROGRAMNOTIFICATIONRECIPIENT_TRACKED_ENTITY_INSTANCE    ProgramNotificationRecipient = "TRACKED_ENTITY_INSTANCE"
	PROGRAMNOTIFICATIONRECIPIENT_ORGANISATION_UNIT_CONTACT  ProgramNotificationRecipient = "ORGANISATION_UNIT_CONTACT"
	PROGRAMNOTIFICATIONRECIPIENT_USERS_AT_ORGANISATION_UNIT ProgramNotificationRecipient = "USERS_AT_ORGANISATION_UNIT"
	PROGRAMNOTIFICATIONRECIPIENT_USER_GROUP                 ProgramNotificationRecipient = "USER_GROUP"
	PROGRAMNOTIFICATIONRECIPIENT_PROGRAM_ATTRIBUTE          ProgramNotificationRecipient = "PROGRAM_ATTRIBUTE"
	PROGRAMNOTIFICATIONRECIPIENT_DATA_ELEMENT               ProgramNotificationRecipient = "DATA_ELEMENT"
	PROGRAMNOTIFICATIONRECIPIENT_WEB_HOOK                   ProgramNotificationRecipient = "WEB_HOOK"
)

// All allowed values of ProgramNotificationRecipient enum
var AllowedProgramNotificationRecipientEnumValues = []ProgramNotificationRecipient{
	"TRACKED_ENTITY_INSTANCE",
	"ORGANISATION_UNIT_CONTACT",
	"USERS_AT_ORGANISATION_UNIT",
	"USER_GROUP",
	"PROGRAM_ATTRIBUTE",
	"DATA_ELEMENT",
	"WEB_HOOK",
}

func (v *ProgramNotificationRecipient) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProgramNotificationRecipient(value)
	for _, existing := range AllowedProgramNotificationRecipientEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProgramNotificationRecipient", value)
}

// NewProgramNotificationRecipientFromValue returns a pointer to a valid ProgramNotificationRecipient
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProgramNotificationRecipientFromValue(v string) (*ProgramNotificationRecipient, error) {
	ev := ProgramNotificationRecipient(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProgramNotificationRecipient: valid values are %v", v, AllowedProgramNotificationRecipientEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProgramNotificationRecipient) IsValid() bool {
	for _, existing := range AllowedProgramNotificationRecipientEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramNotificationRecipient value
func (v ProgramNotificationRecipient) Ptr() *ProgramNotificationRecipient {
	return &v
}

type NullableProgramNotificationRecipient struct {
	value *ProgramNotificationRecipient
	isSet bool
}

func (v NullableProgramNotificationRecipient) Get() *ProgramNotificationRecipient {
	return v.value
}

func (v *NullableProgramNotificationRecipient) Set(val *ProgramNotificationRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramNotificationRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramNotificationRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramNotificationRecipient(val *ProgramNotificationRecipient) *NullableProgramNotificationRecipient {
	return &NullableProgramNotificationRecipient{value: val, isSet: true}
}

func (v NullableProgramNotificationRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramNotificationRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
