/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the ApprovalsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalsDto{}

// ApprovalsDto struct for ApprovalsDto
type ApprovalsDto struct {
	Approvals []ApprovalDto `json:"approvals,omitempty"`
	Ds        []string      `json:"ds,omitempty"`
	Pe        []string      `json:"pe,omitempty"`
	Wf        []string      `json:"wf,omitempty"`
}

// NewApprovalsDto instantiates a new ApprovalsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalsDto() *ApprovalsDto {
	this := ApprovalsDto{}
	return &this
}

// NewApprovalsDtoWithDefaults instantiates a new ApprovalsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalsDtoWithDefaults() *ApprovalsDto {
	this := ApprovalsDto{}
	return &this
}

// GetApprovals returns the Approvals field value if set, zero value otherwise.
func (o *ApprovalsDto) GetApprovals() []ApprovalDto {
	if o == nil || IsNil(o.Approvals) {
		var ret []ApprovalDto
		return ret
	}
	return o.Approvals
}

// GetApprovalsOk returns a tuple with the Approvals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalsDto) GetApprovalsOk() ([]ApprovalDto, bool) {
	if o == nil || IsNil(o.Approvals) {
		return nil, false
	}
	return o.Approvals, true
}

// HasApprovals returns a boolean if a field has been set.
func (o *ApprovalsDto) HasApprovals() bool {
	if o != nil && !IsNil(o.Approvals) {
		return true
	}

	return false
}

// SetApprovals gets a reference to the given []ApprovalDto and assigns it to the Approvals field.
func (o *ApprovalsDto) SetApprovals(v []ApprovalDto) {
	o.Approvals = v
}

// GetDs returns the Ds field value if set, zero value otherwise.
func (o *ApprovalsDto) GetDs() []string {
	if o == nil || IsNil(o.Ds) {
		var ret []string
		return ret
	}
	return o.Ds
}

// GetDsOk returns a tuple with the Ds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalsDto) GetDsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ds) {
		return nil, false
	}
	return o.Ds, true
}

// HasDs returns a boolean if a field has been set.
func (o *ApprovalsDto) HasDs() bool {
	if o != nil && !IsNil(o.Ds) {
		return true
	}

	return false
}

// SetDs gets a reference to the given []string and assigns it to the Ds field.
func (o *ApprovalsDto) SetDs(v []string) {
	o.Ds = v
}

// GetPe returns the Pe field value if set, zero value otherwise.
func (o *ApprovalsDto) GetPe() []string {
	if o == nil || IsNil(o.Pe) {
		var ret []string
		return ret
	}
	return o.Pe
}

// GetPeOk returns a tuple with the Pe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalsDto) GetPeOk() ([]string, bool) {
	if o == nil || IsNil(o.Pe) {
		return nil, false
	}
	return o.Pe, true
}

// HasPe returns a boolean if a field has been set.
func (o *ApprovalsDto) HasPe() bool {
	if o != nil && !IsNil(o.Pe) {
		return true
	}

	return false
}

// SetPe gets a reference to the given []string and assigns it to the Pe field.
func (o *ApprovalsDto) SetPe(v []string) {
	o.Pe = v
}

// GetWf returns the Wf field value if set, zero value otherwise.
func (o *ApprovalsDto) GetWf() []string {
	if o == nil || IsNil(o.Wf) {
		var ret []string
		return ret
	}
	return o.Wf
}

// GetWfOk returns a tuple with the Wf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalsDto) GetWfOk() ([]string, bool) {
	if o == nil || IsNil(o.Wf) {
		return nil, false
	}
	return o.Wf, true
}

// HasWf returns a boolean if a field has been set.
func (o *ApprovalsDto) HasWf() bool {
	if o != nil && !IsNil(o.Wf) {
		return true
	}

	return false
}

// SetWf gets a reference to the given []string and assigns it to the Wf field.
func (o *ApprovalsDto) SetWf(v []string) {
	o.Wf = v
}

func (o ApprovalsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Approvals) {
		toSerialize["approvals"] = o.Approvals
	}
	if !IsNil(o.Ds) {
		toSerialize["ds"] = o.Ds
	}
	if !IsNil(o.Pe) {
		toSerialize["pe"] = o.Pe
	}
	if !IsNil(o.Wf) {
		toSerialize["wf"] = o.Wf
	}
	return toSerialize, nil
}

type NullableApprovalsDto struct {
	value *ApprovalsDto
	isSet bool
}

func (v NullableApprovalsDto) Get() *ApprovalsDto {
	return v.value
}

func (v *NullableApprovalsDto) Set(val *ApprovalsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalsDto(val *ApprovalsDto) *NullableApprovalsDto {
	return &NullableApprovalsDto{value: val, isSet: true}
}

func (v NullableApprovalsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
