/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// EmbeddedProvider the model 'EmbeddedProvider'
type EmbeddedProvider string

// List of EmbeddedProvider
const (
	EMBEDDEDPROVIDER_SUPERSET EmbeddedProvider = "SUPERSET"
)

// All allowed values of EmbeddedProvider enum
var AllowedEmbeddedProviderEnumValues = []EmbeddedProvider{
	"SUPERSET",
}

func (v *EmbeddedProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmbeddedProvider(value)
	for _, existing := range AllowedEmbeddedProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmbeddedProvider", value)
}

// NewEmbeddedProviderFromValue returns a pointer to a valid EmbeddedProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmbeddedProviderFromValue(v string) (*EmbeddedProvider, error) {
	ev := EmbeddedProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmbeddedProvider: valid values are %v", v, AllowedEmbeddedProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmbeddedProvider) IsValid() bool {
	for _, existing := range AllowedEmbeddedProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EmbeddedProvider value
func (v EmbeddedProvider) Ptr() *EmbeddedProvider {
	return &v
}

type NullableEmbeddedProvider struct {
	value *EmbeddedProvider
	isSet bool
}

func (v NullableEmbeddedProvider) Get() *EmbeddedProvider {
	return v.value
}

func (v *NullableEmbeddedProvider) Set(val *EmbeddedProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddedProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddedProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddedProvider(val *EmbeddedProvider) *NullableEmbeddedProvider {
	return &NullableEmbeddedProvider{value: val, isSet: true}
}

func (v NullableEmbeddedProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddedProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
