/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DataSetNotificationRecipient the model 'DataSetNotificationRecipient'
type DataSetNotificationRecipient string

// List of DataSetNotificationRecipient
const (
	DATASETNOTIFICATIONRECIPIENT_ORGANISATION_UNIT_CONTACT DataSetNotificationRecipient = "ORGANISATION_UNIT_CONTACT"
	DATASETNOTIFICATIONRECIPIENT_USER_GROUP                DataSetNotificationRecipient = "USER_GROUP"
)

// All allowed values of DataSetNotificationRecipient enum
var AllowedDataSetNotificationRecipientEnumValues = []DataSetNotificationRecipient{
	"ORGANISATION_UNIT_CONTACT",
	"USER_GROUP",
}

func (v *DataSetNotificationRecipient) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataSetNotificationRecipient(value)
	for _, existing := range AllowedDataSetNotificationRecipientEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataSetNotificationRecipient", value)
}

// NewDataSetNotificationRecipientFromValue returns a pointer to a valid DataSetNotificationRecipient
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataSetNotificationRecipientFromValue(v string) (*DataSetNotificationRecipient, error) {
	ev := DataSetNotificationRecipient(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataSetNotificationRecipient: valid values are %v", v, AllowedDataSetNotificationRecipientEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataSetNotificationRecipient) IsValid() bool {
	for _, existing := range AllowedDataSetNotificationRecipientEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataSetNotificationRecipient value
func (v DataSetNotificationRecipient) Ptr() *DataSetNotificationRecipient {
	return &v
}

type NullableDataSetNotificationRecipient struct {
	value *DataSetNotificationRecipient
	isSet bool
}

func (v NullableDataSetNotificationRecipient) Get() *DataSetNotificationRecipient {
	return v.value
}

func (v *NullableDataSetNotificationRecipient) Set(val *DataSetNotificationRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSetNotificationRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSetNotificationRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSetNotificationRecipient(val *DataSetNotificationRecipient) *NullableDataSetNotificationRecipient {
	return &NullableDataSetNotificationRecipient{value: val, isSet: true}
}

func (v NullableDataSetNotificationRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSetNotificationRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
