/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the FieldPath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldPath{}

// FieldPath struct for FieldPath
type FieldPath struct {
	Exclude      *bool                  `json:"exclude,omitempty"`
	FullPath     *string                `json:"fullPath,omitempty"`
	Name         *string                `json:"name,omitempty"`
	Path         []string               `json:"path,omitempty"`
	Preset       *bool                  `json:"preset,omitempty"`
	Property     *Property              `json:"property,omitempty"`
	Root         *bool                  `json:"root,omitempty"`
	Transformer  *bool                  `json:"transformer,omitempty"`
	Transformers []FieldPathTransformer `json:"transformers,omitempty"`
}

// NewFieldPath instantiates a new FieldPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldPath() *FieldPath {
	this := FieldPath{}
	return &this
}

// NewFieldPathWithDefaults instantiates a new FieldPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldPathWithDefaults() *FieldPath {
	this := FieldPath{}
	return &this
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *FieldPath) GetExclude() bool {
	if o == nil || IsNil(o.Exclude) {
		var ret bool
		return ret
	}
	return *o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldPath) GetExcludeOk() (*bool, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *FieldPath) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given bool and assigns it to the Exclude field.
func (o *FieldPath) SetExclude(v bool) {
	o.Exclude = &v
}

// GetFullPath returns the FullPath field value if set, zero value otherwise.
func (o *FieldPath) GetFullPath() string {
	if o == nil || IsNil(o.FullPath) {
		var ret string
		return ret
	}
	return *o.FullPath
}

// GetFullPathOk returns a tuple with the FullPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldPath) GetFullPathOk() (*string, bool) {
	if o == nil || IsNil(o.FullPath) {
		return nil, false
	}
	return o.FullPath, true
}

// HasFullPath returns a boolean if a field has been set.
func (o *FieldPath) HasFullPath() bool {
	if o != nil && !IsNil(o.FullPath) {
		return true
	}

	return false
}

// SetFullPath gets a reference to the given string and assigns it to the FullPath field.
func (o *FieldPath) SetFullPath(v string) {
	o.FullPath = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FieldPath) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldPath) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FieldPath) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FieldPath) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FieldPath) GetPath() []string {
	if o == nil || IsNil(o.Path) {
		var ret []string
		return ret
	}
	return o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldPath) GetPathOk() ([]string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FieldPath) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given []string and assigns it to the Path field.
func (o *FieldPath) SetPath(v []string) {
	o.Path = v
}

// GetPreset returns the Preset field value if set, zero value otherwise.
func (o *FieldPath) GetPreset() bool {
	if o == nil || IsNil(o.Preset) {
		var ret bool
		return ret
	}
	return *o.Preset
}

// GetPresetOk returns a tuple with the Preset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldPath) GetPresetOk() (*bool, bool) {
	if o == nil || IsNil(o.Preset) {
		return nil, false
	}
	return o.Preset, true
}

// HasPreset returns a boolean if a field has been set.
func (o *FieldPath) HasPreset() bool {
	if o != nil && !IsNil(o.Preset) {
		return true
	}

	return false
}

// SetPreset gets a reference to the given bool and assigns it to the Preset field.
func (o *FieldPath) SetPreset(v bool) {
	o.Preset = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *FieldPath) GetProperty() Property {
	if o == nil || IsNil(o.Property) {
		var ret Property
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldPath) GetPropertyOk() (*Property, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *FieldPath) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given Property and assigns it to the Property field.
func (o *FieldPath) SetProperty(v Property) {
	o.Property = &v
}

// GetRoot returns the Root field value if set, zero value otherwise.
func (o *FieldPath) GetRoot() bool {
	if o == nil || IsNil(o.Root) {
		var ret bool
		return ret
	}
	return *o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldPath) GetRootOk() (*bool, bool) {
	if o == nil || IsNil(o.Root) {
		return nil, false
	}
	return o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *FieldPath) HasRoot() bool {
	if o != nil && !IsNil(o.Root) {
		return true
	}

	return false
}

// SetRoot gets a reference to the given bool and assigns it to the Root field.
func (o *FieldPath) SetRoot(v bool) {
	o.Root = &v
}

// GetTransformer returns the Transformer field value if set, zero value otherwise.
func (o *FieldPath) GetTransformer() bool {
	if o == nil || IsNil(o.Transformer) {
		var ret bool
		return ret
	}
	return *o.Transformer
}

// GetTransformerOk returns a tuple with the Transformer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldPath) GetTransformerOk() (*bool, bool) {
	if o == nil || IsNil(o.Transformer) {
		return nil, false
	}
	return o.Transformer, true
}

// HasTransformer returns a boolean if a field has been set.
func (o *FieldPath) HasTransformer() bool {
	if o != nil && !IsNil(o.Transformer) {
		return true
	}

	return false
}

// SetTransformer gets a reference to the given bool and assigns it to the Transformer field.
func (o *FieldPath) SetTransformer(v bool) {
	o.Transformer = &v
}

// GetTransformers returns the Transformers field value if set, zero value otherwise.
func (o *FieldPath) GetTransformers() []FieldPathTransformer {
	if o == nil || IsNil(o.Transformers) {
		var ret []FieldPathTransformer
		return ret
	}
	return o.Transformers
}

// GetTransformersOk returns a tuple with the Transformers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldPath) GetTransformersOk() ([]FieldPathTransformer, bool) {
	if o == nil || IsNil(o.Transformers) {
		return nil, false
	}
	return o.Transformers, true
}

// HasTransformers returns a boolean if a field has been set.
func (o *FieldPath) HasTransformers() bool {
	if o != nil && !IsNil(o.Transformers) {
		return true
	}

	return false
}

// SetTransformers gets a reference to the given []FieldPathTransformer and assigns it to the Transformers field.
func (o *FieldPath) SetTransformers(v []FieldPathTransformer) {
	o.Transformers = v
}

func (o FieldPath) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldPath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.FullPath) {
		toSerialize["fullPath"] = o.FullPath
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Preset) {
		toSerialize["preset"] = o.Preset
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Root) {
		toSerialize["root"] = o.Root
	}
	if !IsNil(o.Transformer) {
		toSerialize["transformer"] = o.Transformer
	}
	if !IsNil(o.Transformers) {
		toSerialize["transformers"] = o.Transformers
	}
	return toSerialize, nil
}

type NullableFieldPath struct {
	value *FieldPath
	isSet bool
}

func (v NullableFieldPath) Get() *FieldPath {
	return v.value
}

func (v *NullableFieldPath) Set(val *FieldPath) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldPath) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldPath(val *FieldPath) *NullableFieldPath {
	return &NullableFieldPath{value: val, isSet: true}
}

func (v NullableFieldPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
