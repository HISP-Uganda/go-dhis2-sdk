/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DashboardPropertyNames the model 'DashboardPropertyNames'
type DashboardPropertyNames string

// List of DashboardPropertyNames
const (
	DASHBOARDPROPERTYNAMES_ACCESS              DashboardPropertyNames = "access"
	DASHBOARDPROPERTYNAMES_ALLOWED_FILTERS     DashboardPropertyNames = "allowedFilters"
	DASHBOARDPROPERTYNAMES_ATTRIBUTE_VALUES    DashboardPropertyNames = "attributeValues"
	DASHBOARDPROPERTYNAMES_CODE                DashboardPropertyNames = "code"
	DASHBOARDPROPERTYNAMES_CREATED             DashboardPropertyNames = "created"
	DASHBOARDPROPERTYNAMES_CREATED_BY          DashboardPropertyNames = "createdBy"
	DASHBOARDPROPERTYNAMES_DASHBOARD_ITEMS     DashboardPropertyNames = "dashboardItems"
	DASHBOARDPROPERTYNAMES_DESCRIPTION         DashboardPropertyNames = "description"
	DASHBOARDPROPERTYNAMES_DISPLAY_DESCRIPTION DashboardPropertyNames = "displayDescription"
	DASHBOARDPROPERTYNAMES_DISPLAY_FORM_NAME   DashboardPropertyNames = "displayFormName"
	DASHBOARDPROPERTYNAMES_DISPLAY_NAME        DashboardPropertyNames = "displayName"
	DASHBOARDPROPERTYNAMES_DISPLAY_SHORT_NAME  DashboardPropertyNames = "displayShortName"
	DASHBOARDPROPERTYNAMES_EMBEDDED            DashboardPropertyNames = "embedded"
	DASHBOARDPROPERTYNAMES_FAVORITE            DashboardPropertyNames = "favorite"
	DASHBOARDPROPERTYNAMES_FAVORITES           DashboardPropertyNames = "favorites"
	DASHBOARDPROPERTYNAMES_FORM_NAME           DashboardPropertyNames = "formName"
	DASHBOARDPROPERTYNAMES_HREF                DashboardPropertyNames = "href"
	DASHBOARDPROPERTYNAMES_ID                  DashboardPropertyNames = "id"
	DASHBOARDPROPERTYNAMES_ITEM_CONFIG         DashboardPropertyNames = "itemConfig"
	DASHBOARDPROPERTYNAMES_ITEM_COUNT          DashboardPropertyNames = "itemCount"
	DASHBOARDPROPERTYNAMES_LAST_UPDATED        DashboardPropertyNames = "lastUpdated"
	DASHBOARDPROPERTYNAMES_LAST_UPDATED_BY     DashboardPropertyNames = "lastUpdatedBy"
	DASHBOARDPROPERTYNAMES_LAYOUT              DashboardPropertyNames = "layout"
	DASHBOARDPROPERTYNAMES_NAME                DashboardPropertyNames = "name"
	DASHBOARDPROPERTYNAMES_RESTRICT_FILTERS    DashboardPropertyNames = "restrictFilters"
	DASHBOARDPROPERTYNAMES_SHARING             DashboardPropertyNames = "sharing"
	DASHBOARDPROPERTYNAMES_SHORT_NAME          DashboardPropertyNames = "shortName"
	DASHBOARDPROPERTYNAMES_TRANSLATIONS        DashboardPropertyNames = "translations"
)

// All allowed values of DashboardPropertyNames enum
var AllowedDashboardPropertyNamesEnumValues = []DashboardPropertyNames{
	"access",
	"allowedFilters",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"dashboardItems",
	"description",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"embedded",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"itemConfig",
	"itemCount",
	"lastUpdated",
	"lastUpdatedBy",
	"layout",
	"name",
	"restrictFilters",
	"sharing",
	"shortName",
	"translations",
}

func (v *DashboardPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DashboardPropertyNames(value)
	for _, existing := range AllowedDashboardPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DashboardPropertyNames", value)
}

// NewDashboardPropertyNamesFromValue returns a pointer to a valid DashboardPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDashboardPropertyNamesFromValue(v string) (*DashboardPropertyNames, error) {
	ev := DashboardPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DashboardPropertyNames: valid values are %v", v, AllowedDashboardPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DashboardPropertyNames) IsValid() bool {
	for _, existing := range AllowedDashboardPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DashboardPropertyNames value
func (v DashboardPropertyNames) Ptr() *DashboardPropertyNames {
	return &v
}

type NullableDashboardPropertyNames struct {
	value *DashboardPropertyNames
	isSet bool
}

func (v NullableDashboardPropertyNames) Get() *DashboardPropertyNames {
	return v.value
}

func (v *NullableDashboardPropertyNames) Set(val *DashboardPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardPropertyNames(val *DashboardPropertyNames) *NullableDashboardPropertyNames {
	return &NullableDashboardPropertyNames{value: val, isSet: true}
}

func (v NullableDashboardPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
