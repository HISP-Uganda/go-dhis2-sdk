/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// checks if the FollowupValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FollowupValue{}

// FollowupValue struct for FollowupValue
type FollowupValue struct {
	Aoc         *string    `json:"aoc,omitempty"`
	AocName     *string    `json:"aocName,omitempty"`
	Coc         *string    `json:"coc,omitempty"`
	CocName     *string    `json:"cocName,omitempty"`
	Comment     *string    `json:"comment,omitempty"`
	Created     *time.Time `json:"created,omitempty"`
	De          *string    `json:"de,omitempty"`
	DeName      *string    `json:"deName,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	Max         *int32     `json:"max,omitempty"`
	Min         *int32     `json:"min,omitempty"`
	Ou          *string    `json:"ou,omitempty"`
	OuName      *string    `json:"ouName,omitempty"`
	OuPath      *string    `json:"ouPath,omitempty"`
	Pe          *string    `json:"pe,omitempty"`
	PeEndDate   *time.Time `json:"peEndDate,omitempty"`
	PeName      *string    `json:"peName,omitempty"`
	PeStartDate *time.Time `json:"peStartDate,omitempty"`
	PeType      *string    `json:"peType,omitempty"`
	StoredBy    *string    `json:"storedBy,omitempty"`
	Value       *string    `json:"value,omitempty"`
}

// NewFollowupValue instantiates a new FollowupValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFollowupValue() *FollowupValue {
	this := FollowupValue{}
	return &this
}

// NewFollowupValueWithDefaults instantiates a new FollowupValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFollowupValueWithDefaults() *FollowupValue {
	this := FollowupValue{}
	return &this
}

// GetAoc returns the Aoc field value if set, zero value otherwise.
func (o *FollowupValue) GetAoc() string {
	if o == nil || IsNil(o.Aoc) {
		var ret string
		return ret
	}
	return *o.Aoc
}

// GetAocOk returns a tuple with the Aoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetAocOk() (*string, bool) {
	if o == nil || IsNil(o.Aoc) {
		return nil, false
	}
	return o.Aoc, true
}

// HasAoc returns a boolean if a field has been set.
func (o *FollowupValue) HasAoc() bool {
	if o != nil && !IsNil(o.Aoc) {
		return true
	}

	return false
}

// SetAoc gets a reference to the given string and assigns it to the Aoc field.
func (o *FollowupValue) SetAoc(v string) {
	o.Aoc = &v
}

// GetAocName returns the AocName field value if set, zero value otherwise.
func (o *FollowupValue) GetAocName() string {
	if o == nil || IsNil(o.AocName) {
		var ret string
		return ret
	}
	return *o.AocName
}

// GetAocNameOk returns a tuple with the AocName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetAocNameOk() (*string, bool) {
	if o == nil || IsNil(o.AocName) {
		return nil, false
	}
	return o.AocName, true
}

// HasAocName returns a boolean if a field has been set.
func (o *FollowupValue) HasAocName() bool {
	if o != nil && !IsNil(o.AocName) {
		return true
	}

	return false
}

// SetAocName gets a reference to the given string and assigns it to the AocName field.
func (o *FollowupValue) SetAocName(v string) {
	o.AocName = &v
}

// GetCoc returns the Coc field value if set, zero value otherwise.
func (o *FollowupValue) GetCoc() string {
	if o == nil || IsNil(o.Coc) {
		var ret string
		return ret
	}
	return *o.Coc
}

// GetCocOk returns a tuple with the Coc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetCocOk() (*string, bool) {
	if o == nil || IsNil(o.Coc) {
		return nil, false
	}
	return o.Coc, true
}

// HasCoc returns a boolean if a field has been set.
func (o *FollowupValue) HasCoc() bool {
	if o != nil && !IsNil(o.Coc) {
		return true
	}

	return false
}

// SetCoc gets a reference to the given string and assigns it to the Coc field.
func (o *FollowupValue) SetCoc(v string) {
	o.Coc = &v
}

// GetCocName returns the CocName field value if set, zero value otherwise.
func (o *FollowupValue) GetCocName() string {
	if o == nil || IsNil(o.CocName) {
		var ret string
		return ret
	}
	return *o.CocName
}

// GetCocNameOk returns a tuple with the CocName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetCocNameOk() (*string, bool) {
	if o == nil || IsNil(o.CocName) {
		return nil, false
	}
	return o.CocName, true
}

// HasCocName returns a boolean if a field has been set.
func (o *FollowupValue) HasCocName() bool {
	if o != nil && !IsNil(o.CocName) {
		return true
	}

	return false
}

// SetCocName gets a reference to the given string and assigns it to the CocName field.
func (o *FollowupValue) SetCocName(v string) {
	o.CocName = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *FollowupValue) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *FollowupValue) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *FollowupValue) SetComment(v string) {
	o.Comment = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *FollowupValue) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *FollowupValue) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *FollowupValue) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDe returns the De field value if set, zero value otherwise.
func (o *FollowupValue) GetDe() string {
	if o == nil || IsNil(o.De) {
		var ret string
		return ret
	}
	return *o.De
}

// GetDeOk returns a tuple with the De field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetDeOk() (*string, bool) {
	if o == nil || IsNil(o.De) {
		return nil, false
	}
	return o.De, true
}

// HasDe returns a boolean if a field has been set.
func (o *FollowupValue) HasDe() bool {
	if o != nil && !IsNil(o.De) {
		return true
	}

	return false
}

// SetDe gets a reference to the given string and assigns it to the De field.
func (o *FollowupValue) SetDe(v string) {
	o.De = &v
}

// GetDeName returns the DeName field value if set, zero value otherwise.
func (o *FollowupValue) GetDeName() string {
	if o == nil || IsNil(o.DeName) {
		var ret string
		return ret
	}
	return *o.DeName
}

// GetDeNameOk returns a tuple with the DeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetDeNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeName) {
		return nil, false
	}
	return o.DeName, true
}

// HasDeName returns a boolean if a field has been set.
func (o *FollowupValue) HasDeName() bool {
	if o != nil && !IsNil(o.DeName) {
		return true
	}

	return false
}

// SetDeName gets a reference to the given string and assigns it to the DeName field.
func (o *FollowupValue) SetDeName(v string) {
	o.DeName = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *FollowupValue) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *FollowupValue) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *FollowupValue) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *FollowupValue) GetMax() int32 {
	if o == nil || IsNil(o.Max) {
		var ret int32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *FollowupValue) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int32 and assigns it to the Max field.
func (o *FollowupValue) SetMax(v int32) {
	o.Max = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *FollowupValue) GetMin() int32 {
	if o == nil || IsNil(o.Min) {
		var ret int32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetMinOk() (*int32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *FollowupValue) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given int32 and assigns it to the Min field.
func (o *FollowupValue) SetMin(v int32) {
	o.Min = &v
}

// GetOu returns the Ou field value if set, zero value otherwise.
func (o *FollowupValue) GetOu() string {
	if o == nil || IsNil(o.Ou) {
		var ret string
		return ret
	}
	return *o.Ou
}

// GetOuOk returns a tuple with the Ou field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetOuOk() (*string, bool) {
	if o == nil || IsNil(o.Ou) {
		return nil, false
	}
	return o.Ou, true
}

// HasOu returns a boolean if a field has been set.
func (o *FollowupValue) HasOu() bool {
	if o != nil && !IsNil(o.Ou) {
		return true
	}

	return false
}

// SetOu gets a reference to the given string and assigns it to the Ou field.
func (o *FollowupValue) SetOu(v string) {
	o.Ou = &v
}

// GetOuName returns the OuName field value if set, zero value otherwise.
func (o *FollowupValue) GetOuName() string {
	if o == nil || IsNil(o.OuName) {
		var ret string
		return ret
	}
	return *o.OuName
}

// GetOuNameOk returns a tuple with the OuName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetOuNameOk() (*string, bool) {
	if o == nil || IsNil(o.OuName) {
		return nil, false
	}
	return o.OuName, true
}

// HasOuName returns a boolean if a field has been set.
func (o *FollowupValue) HasOuName() bool {
	if o != nil && !IsNil(o.OuName) {
		return true
	}

	return false
}

// SetOuName gets a reference to the given string and assigns it to the OuName field.
func (o *FollowupValue) SetOuName(v string) {
	o.OuName = &v
}

// GetOuPath returns the OuPath field value if set, zero value otherwise.
func (o *FollowupValue) GetOuPath() string {
	if o == nil || IsNil(o.OuPath) {
		var ret string
		return ret
	}
	return *o.OuPath
}

// GetOuPathOk returns a tuple with the OuPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetOuPathOk() (*string, bool) {
	if o == nil || IsNil(o.OuPath) {
		return nil, false
	}
	return o.OuPath, true
}

// HasOuPath returns a boolean if a field has been set.
func (o *FollowupValue) HasOuPath() bool {
	if o != nil && !IsNil(o.OuPath) {
		return true
	}

	return false
}

// SetOuPath gets a reference to the given string and assigns it to the OuPath field.
func (o *FollowupValue) SetOuPath(v string) {
	o.OuPath = &v
}

// GetPe returns the Pe field value if set, zero value otherwise.
func (o *FollowupValue) GetPe() string {
	if o == nil || IsNil(o.Pe) {
		var ret string
		return ret
	}
	return *o.Pe
}

// GetPeOk returns a tuple with the Pe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetPeOk() (*string, bool) {
	if o == nil || IsNil(o.Pe) {
		return nil, false
	}
	return o.Pe, true
}

// HasPe returns a boolean if a field has been set.
func (o *FollowupValue) HasPe() bool {
	if o != nil && !IsNil(o.Pe) {
		return true
	}

	return false
}

// SetPe gets a reference to the given string and assigns it to the Pe field.
func (o *FollowupValue) SetPe(v string) {
	o.Pe = &v
}

// GetPeEndDate returns the PeEndDate field value if set, zero value otherwise.
func (o *FollowupValue) GetPeEndDate() time.Time {
	if o == nil || IsNil(o.PeEndDate) {
		var ret time.Time
		return ret
	}
	return *o.PeEndDate
}

// GetPeEndDateOk returns a tuple with the PeEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetPeEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PeEndDate) {
		return nil, false
	}
	return o.PeEndDate, true
}

// HasPeEndDate returns a boolean if a field has been set.
func (o *FollowupValue) HasPeEndDate() bool {
	if o != nil && !IsNil(o.PeEndDate) {
		return true
	}

	return false
}

// SetPeEndDate gets a reference to the given time.Time and assigns it to the PeEndDate field.
func (o *FollowupValue) SetPeEndDate(v time.Time) {
	o.PeEndDate = &v
}

// GetPeName returns the PeName field value if set, zero value otherwise.
func (o *FollowupValue) GetPeName() string {
	if o == nil || IsNil(o.PeName) {
		var ret string
		return ret
	}
	return *o.PeName
}

// GetPeNameOk returns a tuple with the PeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetPeNameOk() (*string, bool) {
	if o == nil || IsNil(o.PeName) {
		return nil, false
	}
	return o.PeName, true
}

// HasPeName returns a boolean if a field has been set.
func (o *FollowupValue) HasPeName() bool {
	if o != nil && !IsNil(o.PeName) {
		return true
	}

	return false
}

// SetPeName gets a reference to the given string and assigns it to the PeName field.
func (o *FollowupValue) SetPeName(v string) {
	o.PeName = &v
}

// GetPeStartDate returns the PeStartDate field value if set, zero value otherwise.
func (o *FollowupValue) GetPeStartDate() time.Time {
	if o == nil || IsNil(o.PeStartDate) {
		var ret time.Time
		return ret
	}
	return *o.PeStartDate
}

// GetPeStartDateOk returns a tuple with the PeStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetPeStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PeStartDate) {
		return nil, false
	}
	return o.PeStartDate, true
}

// HasPeStartDate returns a boolean if a field has been set.
func (o *FollowupValue) HasPeStartDate() bool {
	if o != nil && !IsNil(o.PeStartDate) {
		return true
	}

	return false
}

// SetPeStartDate gets a reference to the given time.Time and assigns it to the PeStartDate field.
func (o *FollowupValue) SetPeStartDate(v time.Time) {
	o.PeStartDate = &v
}

// GetPeType returns the PeType field value if set, zero value otherwise.
func (o *FollowupValue) GetPeType() string {
	if o == nil || IsNil(o.PeType) {
		var ret string
		return ret
	}
	return *o.PeType
}

// GetPeTypeOk returns a tuple with the PeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetPeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PeType) {
		return nil, false
	}
	return o.PeType, true
}

// HasPeType returns a boolean if a field has been set.
func (o *FollowupValue) HasPeType() bool {
	if o != nil && !IsNil(o.PeType) {
		return true
	}

	return false
}

// SetPeType gets a reference to the given string and assigns it to the PeType field.
func (o *FollowupValue) SetPeType(v string) {
	o.PeType = &v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *FollowupValue) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *FollowupValue) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *FollowupValue) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FollowupValue) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowupValue) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FollowupValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *FollowupValue) SetValue(v string) {
	o.Value = &v
}

func (o FollowupValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FollowupValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aoc) {
		toSerialize["aoc"] = o.Aoc
	}
	if !IsNil(o.AocName) {
		toSerialize["aocName"] = o.AocName
	}
	if !IsNil(o.Coc) {
		toSerialize["coc"] = o.Coc
	}
	if !IsNil(o.CocName) {
		toSerialize["cocName"] = o.CocName
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.De) {
		toSerialize["de"] = o.De
	}
	if !IsNil(o.DeName) {
		toSerialize["deName"] = o.DeName
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Ou) {
		toSerialize["ou"] = o.Ou
	}
	if !IsNil(o.OuName) {
		toSerialize["ouName"] = o.OuName
	}
	if !IsNil(o.OuPath) {
		toSerialize["ouPath"] = o.OuPath
	}
	if !IsNil(o.Pe) {
		toSerialize["pe"] = o.Pe
	}
	if !IsNil(o.PeEndDate) {
		toSerialize["peEndDate"] = o.PeEndDate
	}
	if !IsNil(o.PeName) {
		toSerialize["peName"] = o.PeName
	}
	if !IsNil(o.PeStartDate) {
		toSerialize["peStartDate"] = o.PeStartDate
	}
	if !IsNil(o.PeType) {
		toSerialize["peType"] = o.PeType
	}
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableFollowupValue struct {
	value *FollowupValue
	isSet bool
}

func (v NullableFollowupValue) Get() *FollowupValue {
	return v.value
}

func (v *NullableFollowupValue) Set(val *FollowupValue) {
	v.value = val
	v.isSet = true
}

func (v NullableFollowupValue) IsSet() bool {
	return v.isSet
}

func (v *NullableFollowupValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFollowupValue(val *FollowupValue) *NullableFollowupValue {
	return &NullableFollowupValue{value: val, isSet: true}
}

func (v NullableFollowupValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFollowupValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
