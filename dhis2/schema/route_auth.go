/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// RouteAuth - struct for RouteAuth
type RouteAuth struct {
	ApiHeadersAuthScheme              *ApiHeadersAuthScheme
	ApiQueryParamsAuthScheme          *ApiQueryParamsAuthScheme
	ApiTokenAuthScheme                *ApiTokenAuthScheme
	HttpBasicAuthScheme               *HttpBasicAuthScheme
	OAuth2ClientCredentialsAuthScheme *OAuth2ClientCredentialsAuthScheme
}

// ApiHeadersAuthSchemeAsRouteAuth is a convenience function that returns ApiHeadersAuthScheme wrapped in RouteAuth
func ApiHeadersAuthSchemeAsRouteAuth(v *ApiHeadersAuthScheme) RouteAuth {
	return RouteAuth{
		ApiHeadersAuthScheme: v,
	}
}

// ApiQueryParamsAuthSchemeAsRouteAuth is a convenience function that returns ApiQueryParamsAuthScheme wrapped in RouteAuth
func ApiQueryParamsAuthSchemeAsRouteAuth(v *ApiQueryParamsAuthScheme) RouteAuth {
	return RouteAuth{
		ApiQueryParamsAuthScheme: v,
	}
}

// ApiTokenAuthSchemeAsRouteAuth is a convenience function that returns ApiTokenAuthScheme wrapped in RouteAuth
func ApiTokenAuthSchemeAsRouteAuth(v *ApiTokenAuthScheme) RouteAuth {
	return RouteAuth{
		ApiTokenAuthScheme: v,
	}
}

// HttpBasicAuthSchemeAsRouteAuth is a convenience function that returns HttpBasicAuthScheme wrapped in RouteAuth
func HttpBasicAuthSchemeAsRouteAuth(v *HttpBasicAuthScheme) RouteAuth {
	return RouteAuth{
		HttpBasicAuthScheme: v,
	}
}

// OAuth2ClientCredentialsAuthSchemeAsRouteAuth is a convenience function that returns OAuth2ClientCredentialsAuthScheme wrapped in RouteAuth
func OAuth2ClientCredentialsAuthSchemeAsRouteAuth(v *OAuth2ClientCredentialsAuthScheme) RouteAuth {
	return RouteAuth{
		OAuth2ClientCredentialsAuthScheme: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RouteAuth) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiHeadersAuthScheme
	err = newStrictDecoder(data).Decode(&dst.ApiHeadersAuthScheme)
	if err == nil {
		jsonApiHeadersAuthScheme, _ := json.Marshal(dst.ApiHeadersAuthScheme)
		if string(jsonApiHeadersAuthScheme) == "{}" { // empty struct
			dst.ApiHeadersAuthScheme = nil
		} else {
			match++
		}
	} else {
		dst.ApiHeadersAuthScheme = nil
	}

	// try to unmarshal data into ApiQueryParamsAuthScheme
	err = newStrictDecoder(data).Decode(&dst.ApiQueryParamsAuthScheme)
	if err == nil {
		jsonApiQueryParamsAuthScheme, _ := json.Marshal(dst.ApiQueryParamsAuthScheme)
		if string(jsonApiQueryParamsAuthScheme) == "{}" { // empty struct
			dst.ApiQueryParamsAuthScheme = nil
		} else {
			match++
		}
	} else {
		dst.ApiQueryParamsAuthScheme = nil
	}

	// try to unmarshal data into ApiTokenAuthScheme
	err = newStrictDecoder(data).Decode(&dst.ApiTokenAuthScheme)
	if err == nil {
		jsonApiTokenAuthScheme, _ := json.Marshal(dst.ApiTokenAuthScheme)
		if string(jsonApiTokenAuthScheme) == "{}" { // empty struct
			dst.ApiTokenAuthScheme = nil
		} else {
			match++
		}
	} else {
		dst.ApiTokenAuthScheme = nil
	}

	// try to unmarshal data into HttpBasicAuthScheme
	err = newStrictDecoder(data).Decode(&dst.HttpBasicAuthScheme)
	if err == nil {
		jsonHttpBasicAuthScheme, _ := json.Marshal(dst.HttpBasicAuthScheme)
		if string(jsonHttpBasicAuthScheme) == "{}" { // empty struct
			dst.HttpBasicAuthScheme = nil
		} else {
			match++
		}
	} else {
		dst.HttpBasicAuthScheme = nil
	}

	// try to unmarshal data into OAuth2ClientCredentialsAuthScheme
	err = newStrictDecoder(data).Decode(&dst.OAuth2ClientCredentialsAuthScheme)
	if err == nil {
		jsonOAuth2ClientCredentialsAuthScheme, _ := json.Marshal(dst.OAuth2ClientCredentialsAuthScheme)
		if string(jsonOAuth2ClientCredentialsAuthScheme) == "{}" { // empty struct
			dst.OAuth2ClientCredentialsAuthScheme = nil
		} else {
			match++
		}
	} else {
		dst.OAuth2ClientCredentialsAuthScheme = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiHeadersAuthScheme = nil
		dst.ApiQueryParamsAuthScheme = nil
		dst.ApiTokenAuthScheme = nil
		dst.HttpBasicAuthScheme = nil
		dst.OAuth2ClientCredentialsAuthScheme = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RouteAuth)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RouteAuth)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RouteAuth) MarshalJSON() ([]byte, error) {
	if src.ApiHeadersAuthScheme != nil {
		return json.Marshal(&src.ApiHeadersAuthScheme)
	}

	if src.ApiQueryParamsAuthScheme != nil {
		return json.Marshal(&src.ApiQueryParamsAuthScheme)
	}

	if src.ApiTokenAuthScheme != nil {
		return json.Marshal(&src.ApiTokenAuthScheme)
	}

	if src.HttpBasicAuthScheme != nil {
		return json.Marshal(&src.HttpBasicAuthScheme)
	}

	if src.OAuth2ClientCredentialsAuthScheme != nil {
		return json.Marshal(&src.OAuth2ClientCredentialsAuthScheme)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RouteAuth) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ApiHeadersAuthScheme != nil {
		return obj.ApiHeadersAuthScheme
	}

	if obj.ApiQueryParamsAuthScheme != nil {
		return obj.ApiQueryParamsAuthScheme
	}

	if obj.ApiTokenAuthScheme != nil {
		return obj.ApiTokenAuthScheme
	}

	if obj.HttpBasicAuthScheme != nil {
		return obj.HttpBasicAuthScheme
	}

	if obj.OAuth2ClientCredentialsAuthScheme != nil {
		return obj.OAuth2ClientCredentialsAuthScheme
	}

	// all schemas are nil
	return nil
}

type NullableRouteAuth struct {
	value *RouteAuth
	isSet bool
}

func (v NullableRouteAuth) Get() *RouteAuth {
	return v.value
}

func (v *NullableRouteAuth) Set(val *RouteAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteAuth(val *RouteAuth) *NullableRouteAuth {
	return &NullableRouteAuth{value: val, isSet: true}
}

func (v NullableRouteAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
