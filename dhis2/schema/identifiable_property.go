/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// IdentifiableProperty the model 'IdentifiableProperty'
type IdentifiableProperty string

// List of IdentifiableProperty
const (
	IDENTIFIABLEPROPERTY_ID        IdentifiableProperty = "ID"
	IDENTIFIABLEPROPERTY_UID       IdentifiableProperty = "UID"
	IDENTIFIABLEPROPERTY_UUID      IdentifiableProperty = "UUID"
	IDENTIFIABLEPROPERTY_NAME      IdentifiableProperty = "NAME"
	IDENTIFIABLEPROPERTY_CODE      IdentifiableProperty = "CODE"
	IDENTIFIABLEPROPERTY_ATTRIBUTE IdentifiableProperty = "ATTRIBUTE"
)

// All allowed values of IdentifiableProperty enum
var AllowedIdentifiablePropertyEnumValues = []IdentifiableProperty{
	"ID",
	"UID",
	"UUID",
	"NAME",
	"CODE",
	"ATTRIBUTE",
}

func (v *IdentifiableProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentifiableProperty(value)
	for _, existing := range AllowedIdentifiablePropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentifiableProperty", value)
}

// NewIdentifiablePropertyFromValue returns a pointer to a valid IdentifiableProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentifiablePropertyFromValue(v string) (*IdentifiableProperty, error) {
	ev := IdentifiableProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentifiableProperty: valid values are %v", v, AllowedIdentifiablePropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentifiableProperty) IsValid() bool {
	for _, existing := range AllowedIdentifiablePropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentifiableProperty value
func (v IdentifiableProperty) Ptr() *IdentifiableProperty {
	return &v
}

type NullableIdentifiableProperty struct {
	value *IdentifiableProperty
	isSet bool
}

func (v NullableIdentifiableProperty) Get() *IdentifiableProperty {
	return v.value
}

func (v *NullableIdentifiableProperty) Set(val *IdentifiableProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifiableProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifiableProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifiableProperty(val *IdentifiableProperty) *NullableIdentifiableProperty {
	return &NullableIdentifiableProperty{value: val, isSet: true}
}

func (v NullableIdentifiableProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifiableProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
