/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the EnrollmentParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnrollmentParams{}

// EnrollmentParams struct for EnrollmentParams
type EnrollmentParams struct {
	AttributeValues       []AttributeValueParams                       `json:"attributeValues,omitempty"`
	Code                  *string                                      `json:"code,omitempty"`
	CompletedBy           *string                                      `json:"completedBy,omitempty"`
	CompletedDate         *time.Time                                   `json:"completedDate,omitempty"`
	Created               *time.Time                                   `json:"created,omitempty"`
	CreatedAtClient       *time.Time                                   `json:"createdAtClient,omitempty"`
	CreatedBy             *AggregateDataExchangeParamsCreatedBy        `json:"createdBy,omitempty"`
	CreatedByUserInfo     *UserInfoSnapshot                            `json:"createdByUserInfo,omitempty"`
	Deleted               *bool                                        `json:"deleted,omitempty"`
	DisplayName           *string                                      `json:"displayName,omitempty"`
	EnrollmentDate        *time.Time                                   `json:"enrollmentDate,omitempty"`
	Events                []BodyParamsEventsInner                      `json:"events,omitempty"`
	Favorite              *bool                                        `json:"favorite,omitempty"`
	Favorites             []string                                     `json:"favorites,omitempty"`
	Followup              *bool                                        `json:"followup,omitempty"`
	Geometry              map[string]interface{}                       `json:"geometry,omitempty"`
	Id                    *string                                      `json:"id,omitempty"`
	LastUpdated           *time.Time                                   `json:"lastUpdated,omitempty"`
	LastUpdatedAtClient   *time.Time                                   `json:"lastUpdatedAtClient,omitempty"`
	LastUpdatedBy         *AggregateDataExchangeParamsCreatedBy        `json:"lastUpdatedBy,omitempty"`
	LastUpdatedByUserInfo *UserInfoSnapshot                            `json:"lastUpdatedByUserInfo,omitempty"`
	MessageConversations  []EnrollmentParamsMessageConversationsInner  `json:"messageConversations,omitempty"`
	Name                  *string                                      `json:"name,omitempty"`
	OccurredDate          *time.Time                                   `json:"occurredDate,omitempty"`
	OrganisationUnit      *OrganisationUnitParams                      `json:"organisationUnit,omitempty"`
	Program               *ProgramParams                               `json:"program,omitempty"`
	RelationshipItems     []RelationshipItemParams                     `json:"relationshipItems,omitempty"`
	Sharing               *Sharing                                     `json:"sharing,omitempty"`
	Status                EnrollmentStatus                             `json:"status"`
	StoredBy              *string                                      `json:"storedBy,omitempty"`
	TrackedEntityComments []EnrollmentParamsTrackedEntityCommentsInner `json:"trackedEntityComments,omitempty"`
	TrackedEntityInstance *TrackedEntityParams                         `json:"trackedEntityInstance,omitempty"`
	Translations          []Translation                                `json:"translations,omitempty"`
}

type _EnrollmentParams EnrollmentParams

// NewEnrollmentParams instantiates a new EnrollmentParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrollmentParams(status EnrollmentStatus) *EnrollmentParams {
	this := EnrollmentParams{}
	this.Status = status
	return &this
}

// NewEnrollmentParamsWithDefaults instantiates a new EnrollmentParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrollmentParamsWithDefaults() *EnrollmentParams {
	this := EnrollmentParams{}
	return &this
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *EnrollmentParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *EnrollmentParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *EnrollmentParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *EnrollmentParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *EnrollmentParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *EnrollmentParams) SetCode(v string) {
	o.Code = &v
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *EnrollmentParams) GetCompletedBy() string {
	if o == nil || IsNil(o.CompletedBy) {
		var ret string
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetCompletedByOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedBy) {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *EnrollmentParams) HasCompletedBy() bool {
	if o != nil && !IsNil(o.CompletedBy) {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given string and assigns it to the CompletedBy field.
func (o *EnrollmentParams) SetCompletedBy(v string) {
	o.CompletedBy = &v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *EnrollmentParams) GetCompletedDate() time.Time {
	if o == nil || IsNil(o.CompletedDate) {
		var ret time.Time
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetCompletedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *EnrollmentParams) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given time.Time and assigns it to the CompletedDate field.
func (o *EnrollmentParams) SetCompletedDate(v time.Time) {
	o.CompletedDate = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *EnrollmentParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *EnrollmentParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *EnrollmentParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedAtClient returns the CreatedAtClient field value if set, zero value otherwise.
func (o *EnrollmentParams) GetCreatedAtClient() time.Time {
	if o == nil || IsNil(o.CreatedAtClient) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAtClient
}

// GetCreatedAtClientOk returns a tuple with the CreatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetCreatedAtClientOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAtClient) {
		return nil, false
	}
	return o.CreatedAtClient, true
}

// HasCreatedAtClient returns a boolean if a field has been set.
func (o *EnrollmentParams) HasCreatedAtClient() bool {
	if o != nil && !IsNil(o.CreatedAtClient) {
		return true
	}

	return false
}

// SetCreatedAtClient gets a reference to the given time.Time and assigns it to the CreatedAtClient field.
func (o *EnrollmentParams) SetCreatedAtClient(v time.Time) {
	o.CreatedAtClient = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *EnrollmentParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *EnrollmentParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *EnrollmentParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetCreatedByUserInfo returns the CreatedByUserInfo field value if set, zero value otherwise.
func (o *EnrollmentParams) GetCreatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.CreatedByUserInfo
}

// GetCreatedByUserInfoOk returns a tuple with the CreatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetCreatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		return nil, false
	}
	return o.CreatedByUserInfo, true
}

// HasCreatedByUserInfo returns a boolean if a field has been set.
func (o *EnrollmentParams) HasCreatedByUserInfo() bool {
	if o != nil && !IsNil(o.CreatedByUserInfo) {
		return true
	}

	return false
}

// SetCreatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the CreatedByUserInfo field.
func (o *EnrollmentParams) SetCreatedByUserInfo(v UserInfoSnapshot) {
	o.CreatedByUserInfo = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *EnrollmentParams) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *EnrollmentParams) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *EnrollmentParams) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EnrollmentParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EnrollmentParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EnrollmentParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnrollmentDate returns the EnrollmentDate field value if set, zero value otherwise.
func (o *EnrollmentParams) GetEnrollmentDate() time.Time {
	if o == nil || IsNil(o.EnrollmentDate) {
		var ret time.Time
		return ret
	}
	return *o.EnrollmentDate
}

// GetEnrollmentDateOk returns a tuple with the EnrollmentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetEnrollmentDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EnrollmentDate) {
		return nil, false
	}
	return o.EnrollmentDate, true
}

// HasEnrollmentDate returns a boolean if a field has been set.
func (o *EnrollmentParams) HasEnrollmentDate() bool {
	if o != nil && !IsNil(o.EnrollmentDate) {
		return true
	}

	return false
}

// SetEnrollmentDate gets a reference to the given time.Time and assigns it to the EnrollmentDate field.
func (o *EnrollmentParams) SetEnrollmentDate(v time.Time) {
	o.EnrollmentDate = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *EnrollmentParams) GetEvents() []BodyParamsEventsInner {
	if o == nil || IsNil(o.Events) {
		var ret []BodyParamsEventsInner
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetEventsOk() ([]BodyParamsEventsInner, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *EnrollmentParams) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []BodyParamsEventsInner and assigns it to the Events field.
func (o *EnrollmentParams) SetEvents(v []BodyParamsEventsInner) {
	o.Events = v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *EnrollmentParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *EnrollmentParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *EnrollmentParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *EnrollmentParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *EnrollmentParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *EnrollmentParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFollowup returns the Followup field value if set, zero value otherwise.
func (o *EnrollmentParams) GetFollowup() bool {
	if o == nil || IsNil(o.Followup) {
		var ret bool
		return ret
	}
	return *o.Followup
}

// GetFollowupOk returns a tuple with the Followup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetFollowupOk() (*bool, bool) {
	if o == nil || IsNil(o.Followup) {
		return nil, false
	}
	return o.Followup, true
}

// HasFollowup returns a boolean if a field has been set.
func (o *EnrollmentParams) HasFollowup() bool {
	if o != nil && !IsNil(o.Followup) {
		return true
	}

	return false
}

// SetFollowup gets a reference to the given bool and assigns it to the Followup field.
func (o *EnrollmentParams) SetFollowup(v bool) {
	o.Followup = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *EnrollmentParams) GetGeometry() map[string]interface{} {
	if o == nil || IsNil(o.Geometry) {
		var ret map[string]interface{}
		return ret
	}
	return o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetGeometryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Geometry) {
		return map[string]interface{}{}, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *EnrollmentParams) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given map[string]interface{} and assigns it to the Geometry field.
func (o *EnrollmentParams) SetGeometry(v map[string]interface{}) {
	o.Geometry = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EnrollmentParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EnrollmentParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EnrollmentParams) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *EnrollmentParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *EnrollmentParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *EnrollmentParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedAtClient returns the LastUpdatedAtClient field value if set, zero value otherwise.
func (o *EnrollmentParams) GetLastUpdatedAtClient() time.Time {
	if o == nil || IsNil(o.LastUpdatedAtClient) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedAtClient
}

// GetLastUpdatedAtClientOk returns a tuple with the LastUpdatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetLastUpdatedAtClientOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdatedAtClient) {
		return nil, false
	}
	return o.LastUpdatedAtClient, true
}

// HasLastUpdatedAtClient returns a boolean if a field has been set.
func (o *EnrollmentParams) HasLastUpdatedAtClient() bool {
	if o != nil && !IsNil(o.LastUpdatedAtClient) {
		return true
	}

	return false
}

// SetLastUpdatedAtClient gets a reference to the given time.Time and assigns it to the LastUpdatedAtClient field.
func (o *EnrollmentParams) SetLastUpdatedAtClient(v time.Time) {
	o.LastUpdatedAtClient = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *EnrollmentParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *EnrollmentParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *EnrollmentParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLastUpdatedByUserInfo returns the LastUpdatedByUserInfo field value if set, zero value otherwise.
func (o *EnrollmentParams) GetLastUpdatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.LastUpdatedByUserInfo
}

// GetLastUpdatedByUserInfoOk returns a tuple with the LastUpdatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetLastUpdatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		return nil, false
	}
	return o.LastUpdatedByUserInfo, true
}

// HasLastUpdatedByUserInfo returns a boolean if a field has been set.
func (o *EnrollmentParams) HasLastUpdatedByUserInfo() bool {
	if o != nil && !IsNil(o.LastUpdatedByUserInfo) {
		return true
	}

	return false
}

// SetLastUpdatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the LastUpdatedByUserInfo field.
func (o *EnrollmentParams) SetLastUpdatedByUserInfo(v UserInfoSnapshot) {
	o.LastUpdatedByUserInfo = &v
}

// GetMessageConversations returns the MessageConversations field value if set, zero value otherwise.
func (o *EnrollmentParams) GetMessageConversations() []EnrollmentParamsMessageConversationsInner {
	if o == nil || IsNil(o.MessageConversations) {
		var ret []EnrollmentParamsMessageConversationsInner
		return ret
	}
	return o.MessageConversations
}

// GetMessageConversationsOk returns a tuple with the MessageConversations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetMessageConversationsOk() ([]EnrollmentParamsMessageConversationsInner, bool) {
	if o == nil || IsNil(o.MessageConversations) {
		return nil, false
	}
	return o.MessageConversations, true
}

// HasMessageConversations returns a boolean if a field has been set.
func (o *EnrollmentParams) HasMessageConversations() bool {
	if o != nil && !IsNil(o.MessageConversations) {
		return true
	}

	return false
}

// SetMessageConversations gets a reference to the given []EnrollmentParamsMessageConversationsInner and assigns it to the MessageConversations field.
func (o *EnrollmentParams) SetMessageConversations(v []EnrollmentParamsMessageConversationsInner) {
	o.MessageConversations = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnrollmentParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnrollmentParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnrollmentParams) SetName(v string) {
	o.Name = &v
}

// GetOccurredDate returns the OccurredDate field value if set, zero value otherwise.
func (o *EnrollmentParams) GetOccurredDate() time.Time {
	if o == nil || IsNil(o.OccurredDate) {
		var ret time.Time
		return ret
	}
	return *o.OccurredDate
}

// GetOccurredDateOk returns a tuple with the OccurredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetOccurredDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OccurredDate) {
		return nil, false
	}
	return o.OccurredDate, true
}

// HasOccurredDate returns a boolean if a field has been set.
func (o *EnrollmentParams) HasOccurredDate() bool {
	if o != nil && !IsNil(o.OccurredDate) {
		return true
	}

	return false
}

// SetOccurredDate gets a reference to the given time.Time and assigns it to the OccurredDate field.
func (o *EnrollmentParams) SetOccurredDate(v time.Time) {
	o.OccurredDate = &v
}

// GetOrganisationUnit returns the OrganisationUnit field value if set, zero value otherwise.
func (o *EnrollmentParams) GetOrganisationUnit() OrganisationUnitParams {
	if o == nil || IsNil(o.OrganisationUnit) {
		var ret OrganisationUnitParams
		return ret
	}
	return *o.OrganisationUnit
}

// GetOrganisationUnitOk returns a tuple with the OrganisationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetOrganisationUnitOk() (*OrganisationUnitParams, bool) {
	if o == nil || IsNil(o.OrganisationUnit) {
		return nil, false
	}
	return o.OrganisationUnit, true
}

// HasOrganisationUnit returns a boolean if a field has been set.
func (o *EnrollmentParams) HasOrganisationUnit() bool {
	if o != nil && !IsNil(o.OrganisationUnit) {
		return true
	}

	return false
}

// SetOrganisationUnit gets a reference to the given OrganisationUnitParams and assigns it to the OrganisationUnit field.
func (o *EnrollmentParams) SetOrganisationUnit(v OrganisationUnitParams) {
	o.OrganisationUnit = &v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *EnrollmentParams) GetProgram() ProgramParams {
	if o == nil || IsNil(o.Program) {
		var ret ProgramParams
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetProgramOk() (*ProgramParams, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *EnrollmentParams) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given ProgramParams and assigns it to the Program field.
func (o *EnrollmentParams) SetProgram(v ProgramParams) {
	o.Program = &v
}

// GetRelationshipItems returns the RelationshipItems field value if set, zero value otherwise.
func (o *EnrollmentParams) GetRelationshipItems() []RelationshipItemParams {
	if o == nil || IsNil(o.RelationshipItems) {
		var ret []RelationshipItemParams
		return ret
	}
	return o.RelationshipItems
}

// GetRelationshipItemsOk returns a tuple with the RelationshipItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetRelationshipItemsOk() ([]RelationshipItemParams, bool) {
	if o == nil || IsNil(o.RelationshipItems) {
		return nil, false
	}
	return o.RelationshipItems, true
}

// HasRelationshipItems returns a boolean if a field has been set.
func (o *EnrollmentParams) HasRelationshipItems() bool {
	if o != nil && !IsNil(o.RelationshipItems) {
		return true
	}

	return false
}

// SetRelationshipItems gets a reference to the given []RelationshipItemParams and assigns it to the RelationshipItems field.
func (o *EnrollmentParams) SetRelationshipItems(v []RelationshipItemParams) {
	o.RelationshipItems = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *EnrollmentParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *EnrollmentParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *EnrollmentParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetStatus returns the Status field value
func (o *EnrollmentParams) GetStatus() EnrollmentStatus {
	if o == nil {
		var ret EnrollmentStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetStatusOk() (*EnrollmentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *EnrollmentParams) SetStatus(v EnrollmentStatus) {
	o.Status = v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *EnrollmentParams) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *EnrollmentParams) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *EnrollmentParams) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetTrackedEntityComments returns the TrackedEntityComments field value if set, zero value otherwise.
func (o *EnrollmentParams) GetTrackedEntityComments() []EnrollmentParamsTrackedEntityCommentsInner {
	if o == nil || IsNil(o.TrackedEntityComments) {
		var ret []EnrollmentParamsTrackedEntityCommentsInner
		return ret
	}
	return o.TrackedEntityComments
}

// GetTrackedEntityCommentsOk returns a tuple with the TrackedEntityComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetTrackedEntityCommentsOk() ([]EnrollmentParamsTrackedEntityCommentsInner, bool) {
	if o == nil || IsNil(o.TrackedEntityComments) {
		return nil, false
	}
	return o.TrackedEntityComments, true
}

// HasTrackedEntityComments returns a boolean if a field has been set.
func (o *EnrollmentParams) HasTrackedEntityComments() bool {
	if o != nil && !IsNil(o.TrackedEntityComments) {
		return true
	}

	return false
}

// SetTrackedEntityComments gets a reference to the given []EnrollmentParamsTrackedEntityCommentsInner and assigns it to the TrackedEntityComments field.
func (o *EnrollmentParams) SetTrackedEntityComments(v []EnrollmentParamsTrackedEntityCommentsInner) {
	o.TrackedEntityComments = v
}

// GetTrackedEntityInstance returns the TrackedEntityInstance field value if set, zero value otherwise.
func (o *EnrollmentParams) GetTrackedEntityInstance() TrackedEntityParams {
	if o == nil || IsNil(o.TrackedEntityInstance) {
		var ret TrackedEntityParams
		return ret
	}
	return *o.TrackedEntityInstance
}

// GetTrackedEntityInstanceOk returns a tuple with the TrackedEntityInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetTrackedEntityInstanceOk() (*TrackedEntityParams, bool) {
	if o == nil || IsNil(o.TrackedEntityInstance) {
		return nil, false
	}
	return o.TrackedEntityInstance, true
}

// HasTrackedEntityInstance returns a boolean if a field has been set.
func (o *EnrollmentParams) HasTrackedEntityInstance() bool {
	if o != nil && !IsNil(o.TrackedEntityInstance) {
		return true
	}

	return false
}

// SetTrackedEntityInstance gets a reference to the given TrackedEntityParams and assigns it to the TrackedEntityInstance field.
func (o *EnrollmentParams) SetTrackedEntityInstance(v TrackedEntityParams) {
	o.TrackedEntityInstance = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *EnrollmentParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *EnrollmentParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *EnrollmentParams) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o EnrollmentParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnrollmentParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CompletedBy) {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if !IsNil(o.CompletedDate) {
		toSerialize["completedDate"] = o.CompletedDate
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedAtClient) {
		toSerialize["createdAtClient"] = o.CreatedAtClient
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CreatedByUserInfo) {
		toSerialize["createdByUserInfo"] = o.CreatedByUserInfo
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EnrollmentDate) {
		toSerialize["enrollmentDate"] = o.EnrollmentDate
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Followup) {
		toSerialize["followup"] = o.Followup
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedAtClient) {
		toSerialize["lastUpdatedAtClient"] = o.LastUpdatedAtClient
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LastUpdatedByUserInfo) {
		toSerialize["lastUpdatedByUserInfo"] = o.LastUpdatedByUserInfo
	}
	if !IsNil(o.MessageConversations) {
		toSerialize["messageConversations"] = o.MessageConversations
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OccurredDate) {
		toSerialize["occurredDate"] = o.OccurredDate
	}
	if !IsNil(o.OrganisationUnit) {
		toSerialize["organisationUnit"] = o.OrganisationUnit
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.RelationshipItems) {
		toSerialize["relationshipItems"] = o.RelationshipItems
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.TrackedEntityComments) {
		toSerialize["trackedEntityComments"] = o.TrackedEntityComments
	}
	if !IsNil(o.TrackedEntityInstance) {
		toSerialize["trackedEntityInstance"] = o.TrackedEntityInstance
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

func (o *EnrollmentParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnrollmentParams := _EnrollmentParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnrollmentParams)

	if err != nil {
		return err
	}

	*o = EnrollmentParams(varEnrollmentParams)

	return err
}

type NullableEnrollmentParams struct {
	value *EnrollmentParams
	isSet bool
}

func (v NullableEnrollmentParams) Get() *EnrollmentParams {
	return v.value
}

func (v *NullableEnrollmentParams) Set(val *EnrollmentParams) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrollmentParams) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrollmentParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrollmentParams(val *EnrollmentParams) *NullableEnrollmentParams {
	return &NullableEnrollmentParams{value: val, isSet: true}
}

func (v NullableEnrollmentParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrollmentParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
