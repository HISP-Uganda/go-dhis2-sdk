/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AnalyticsTablePhase the model 'AnalyticsTablePhase'
type AnalyticsTablePhase string

// List of AnalyticsTablePhase
const (
	ANALYTICSTABLEPHASE_RESOURCE_TABLE_POPULATED  AnalyticsTablePhase = "RESOURCE_TABLE_POPULATED"
	ANALYTICSTABLEPHASE_ANALYTICS_TABLE_POPULATED AnalyticsTablePhase = "ANALYTICS_TABLE_POPULATED"
)

// All allowed values of AnalyticsTablePhase enum
var AllowedAnalyticsTablePhaseEnumValues = []AnalyticsTablePhase{
	"RESOURCE_TABLE_POPULATED",
	"ANALYTICS_TABLE_POPULATED",
}

func (v *AnalyticsTablePhase) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsTablePhase(value)
	for _, existing := range AllowedAnalyticsTablePhaseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsTablePhase", value)
}

// NewAnalyticsTablePhaseFromValue returns a pointer to a valid AnalyticsTablePhase
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsTablePhaseFromValue(v string) (*AnalyticsTablePhase, error) {
	ev := AnalyticsTablePhase(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsTablePhase: valid values are %v", v, AllowedAnalyticsTablePhaseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsTablePhase) IsValid() bool {
	for _, existing := range AllowedAnalyticsTablePhaseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsTablePhase value
func (v AnalyticsTablePhase) Ptr() *AnalyticsTablePhase {
	return &v
}

type NullableAnalyticsTablePhase struct {
	value *AnalyticsTablePhase
	isSet bool
}

func (v NullableAnalyticsTablePhase) Get() *AnalyticsTablePhase {
	return v.value
}

func (v *NullableAnalyticsTablePhase) Set(val *AnalyticsTablePhase) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsTablePhase) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsTablePhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsTablePhase(val *AnalyticsTablePhase) *NullableAnalyticsTablePhase {
	return &NullableAnalyticsTablePhase{value: val, isSet: true}
}

func (v NullableAnalyticsTablePhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsTablePhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
