/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesIncomingSms the model 'PropertyNamesIncomingSms'
type PropertyNamesIncomingSms string

// List of PropertyNames_IncomingSms
const (
	PROPERTYNAMESINCOMINGSMS_ACCESS              PropertyNamesIncomingSms = "access"
	PROPERTYNAMESINCOMINGSMS_ATTRIBUTE_VALUES    PropertyNamesIncomingSms = "attributeValues"
	PROPERTYNAMESINCOMINGSMS_CODE                PropertyNamesIncomingSms = "code"
	PROPERTYNAMESINCOMINGSMS_CREATED             PropertyNamesIncomingSms = "created"
	PROPERTYNAMESINCOMINGSMS_CREATED_BY          PropertyNamesIncomingSms = "createdBy"
	PROPERTYNAMESINCOMINGSMS_DISPLAY_NAME        PropertyNamesIncomingSms = "displayName"
	PROPERTYNAMESINCOMINGSMS_EXTERNAL_ACCESS     PropertyNamesIncomingSms = "externalAccess"
	PROPERTYNAMESINCOMINGSMS_FAVORITE            PropertyNamesIncomingSms = "favorite"
	PROPERTYNAMESINCOMINGSMS_FAVORITES           PropertyNamesIncomingSms = "favorites"
	PROPERTYNAMESINCOMINGSMS_GATEWAYID           PropertyNamesIncomingSms = "gatewayid"
	PROPERTYNAMESINCOMINGSMS_HREF                PropertyNamesIncomingSms = "href"
	PROPERTYNAMESINCOMINGSMS_ID                  PropertyNamesIncomingSms = "id"
	PROPERTYNAMESINCOMINGSMS_LAST_UPDATED        PropertyNamesIncomingSms = "lastUpdated"
	PROPERTYNAMESINCOMINGSMS_LAST_UPDATED_BY     PropertyNamesIncomingSms = "lastUpdatedBy"
	PROPERTYNAMESINCOMINGSMS_NAME                PropertyNamesIncomingSms = "name"
	PROPERTYNAMESINCOMINGSMS_ORIGINATOR          PropertyNamesIncomingSms = "originator"
	PROPERTYNAMESINCOMINGSMS_PUBLIC_ACCESS       PropertyNamesIncomingSms = "publicAccess"
	PROPERTYNAMESINCOMINGSMS_RECEIVEDDATE        PropertyNamesIncomingSms = "receiveddate"
	PROPERTYNAMESINCOMINGSMS_SENTDATE            PropertyNamesIncomingSms = "sentdate"
	PROPERTYNAMESINCOMINGSMS_SHARING             PropertyNamesIncomingSms = "sharing"
	PROPERTYNAMESINCOMINGSMS_SMSENCODING         PropertyNamesIncomingSms = "smsencoding"
	PROPERTYNAMESINCOMINGSMS_SMSSTATUS           PropertyNamesIncomingSms = "smsstatus"
	PROPERTYNAMESINCOMINGSMS_TEXT                PropertyNamesIncomingSms = "text"
	PROPERTYNAMESINCOMINGSMS_TRANSLATIONS        PropertyNamesIncomingSms = "translations"
	PROPERTYNAMESINCOMINGSMS_USER                PropertyNamesIncomingSms = "user"
	PROPERTYNAMESINCOMINGSMS_USER_ACCESSES       PropertyNamesIncomingSms = "userAccesses"
	PROPERTYNAMESINCOMINGSMS_USER_GROUP_ACCESSES PropertyNamesIncomingSms = "userGroupAccesses"
)

// All allowed values of PropertyNamesIncomingSms enum
var AllowedPropertyNamesIncomingSmsEnumValues = []PropertyNamesIncomingSms{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"gatewayid",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"originator",
	"publicAccess",
	"receiveddate",
	"sentdate",
	"sharing",
	"smsencoding",
	"smsstatus",
	"text",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesIncomingSms) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesIncomingSms(value)
	for _, existing := range AllowedPropertyNamesIncomingSmsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesIncomingSms", value)
}

// NewPropertyNamesIncomingSmsFromValue returns a pointer to a valid PropertyNamesIncomingSms
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesIncomingSmsFromValue(v string) (*PropertyNamesIncomingSms, error) {
	ev := PropertyNamesIncomingSms(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesIncomingSms: valid values are %v", v, AllowedPropertyNamesIncomingSmsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesIncomingSms) IsValid() bool {
	for _, existing := range AllowedPropertyNamesIncomingSmsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_IncomingSms value
func (v PropertyNamesIncomingSms) Ptr() *PropertyNamesIncomingSms {
	return &v
}

type NullablePropertyNamesIncomingSms struct {
	value *PropertyNamesIncomingSms
	isSet bool
}

func (v NullablePropertyNamesIncomingSms) Get() *PropertyNamesIncomingSms {
	return v.value
}

func (v *NullablePropertyNamesIncomingSms) Set(val *PropertyNamesIncomingSms) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesIncomingSms) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesIncomingSms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesIncomingSms(val *PropertyNamesIncomingSms) *NullablePropertyNamesIncomingSms {
	return &NullablePropertyNamesIncomingSms{value: val, isSet: true}
}

func (v NullablePropertyNamesIncomingSms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesIncomingSms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
