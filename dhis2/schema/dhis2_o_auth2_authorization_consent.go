/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"time"
)

// checks if the Dhis2OAuth2AuthorizationConsent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dhis2OAuth2AuthorizationConsent{}

// Dhis2OAuth2AuthorizationConsent struct for Dhis2OAuth2AuthorizationConsent
type Dhis2OAuth2AuthorizationConsent struct {
	Access             *Access          `json:"access,omitempty"`
	AttributeValues    []AttributeValue `json:"attributeValues,omitempty"`
	Authorities        *string          `json:"authorities,omitempty"`
	Code               *string          `json:"code,omitempty"`
	Created            *time.Time       `json:"created,omitempty"`
	CreatedBy          *UserDto         `json:"createdBy,omitempty"`
	DisplayName        *string          `json:"displayName,omitempty"`
	Favorite           *bool            `json:"favorite,omitempty"`
	Favorites          []string         `json:"favorites,omitempty"`
	Href               *string          `json:"href,omitempty"`
	Id                 *string          `json:"id,omitempty"`
	LastUpdated        *time.Time       `json:"lastUpdated,omitempty"`
	LastUpdatedBy      *UserDto         `json:"lastUpdatedBy,omitempty"`
	Name               *string          `json:"name,omitempty"`
	PrincipalName      *string          `json:"principalName,omitempty"`
	RegisteredClientId *string          `json:"registeredClientId,omitempty"`
	Sharing            *Sharing         `json:"sharing,omitempty"`
	Translations       []Translation    `json:"translations,omitempty"`
}

// NewDhis2OAuth2AuthorizationConsent instantiates a new Dhis2OAuth2AuthorizationConsent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhis2OAuth2AuthorizationConsent() *Dhis2OAuth2AuthorizationConsent {
	this := Dhis2OAuth2AuthorizationConsent{}
	return &this
}

// NewDhis2OAuth2AuthorizationConsentWithDefaults instantiates a new Dhis2OAuth2AuthorizationConsent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhis2OAuth2AuthorizationConsentWithDefaults() *Dhis2OAuth2AuthorizationConsent {
	this := Dhis2OAuth2AuthorizationConsent{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *Dhis2OAuth2AuthorizationConsent) SetAccess(v Access) {
	o.Access = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *Dhis2OAuth2AuthorizationConsent) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetAuthorities returns the Authorities field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetAuthorities() string {
	if o == nil || IsNil(o.Authorities) {
		var ret string
		return ret
	}
	return *o.Authorities
}

// GetAuthoritiesOk returns a tuple with the Authorities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetAuthoritiesOk() (*string, bool) {
	if o == nil || IsNil(o.Authorities) {
		return nil, false
	}
	return o.Authorities, true
}

// HasAuthorities returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasAuthorities() bool {
	if o != nil && !IsNil(o.Authorities) {
		return true
	}

	return false
}

// SetAuthorities gets a reference to the given string and assigns it to the Authorities field.
func (o *Dhis2OAuth2AuthorizationConsent) SetAuthorities(v string) {
	o.Authorities = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Dhis2OAuth2AuthorizationConsent) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Dhis2OAuth2AuthorizationConsent) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetCreatedBy() UserDto {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserDto
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetCreatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserDto and assigns it to the CreatedBy field.
func (o *Dhis2OAuth2AuthorizationConsent) SetCreatedBy(v UserDto) {
	o.CreatedBy = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Dhis2OAuth2AuthorizationConsent) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *Dhis2OAuth2AuthorizationConsent) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *Dhis2OAuth2AuthorizationConsent) SetFavorites(v []string) {
	o.Favorites = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Dhis2OAuth2AuthorizationConsent) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Dhis2OAuth2AuthorizationConsent) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Dhis2OAuth2AuthorizationConsent) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetLastUpdatedBy() UserDto {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret UserDto
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetLastUpdatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given UserDto and assigns it to the LastUpdatedBy field.
func (o *Dhis2OAuth2AuthorizationConsent) SetLastUpdatedBy(v UserDto) {
	o.LastUpdatedBy = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Dhis2OAuth2AuthorizationConsent) SetName(v string) {
	o.Name = &v
}

// GetPrincipalName returns the PrincipalName field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetPrincipalName() string {
	if o == nil || IsNil(o.PrincipalName) {
		var ret string
		return ret
	}
	return *o.PrincipalName
}

// GetPrincipalNameOk returns a tuple with the PrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetPrincipalNameOk() (*string, bool) {
	if o == nil || IsNil(o.PrincipalName) {
		return nil, false
	}
	return o.PrincipalName, true
}

// HasPrincipalName returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasPrincipalName() bool {
	if o != nil && !IsNil(o.PrincipalName) {
		return true
	}

	return false
}

// SetPrincipalName gets a reference to the given string and assigns it to the PrincipalName field.
func (o *Dhis2OAuth2AuthorizationConsent) SetPrincipalName(v string) {
	o.PrincipalName = &v
}

// GetRegisteredClientId returns the RegisteredClientId field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetRegisteredClientId() string {
	if o == nil || IsNil(o.RegisteredClientId) {
		var ret string
		return ret
	}
	return *o.RegisteredClientId
}

// GetRegisteredClientIdOk returns a tuple with the RegisteredClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetRegisteredClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.RegisteredClientId) {
		return nil, false
	}
	return o.RegisteredClientId, true
}

// HasRegisteredClientId returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasRegisteredClientId() bool {
	if o != nil && !IsNil(o.RegisteredClientId) {
		return true
	}

	return false
}

// SetRegisteredClientId gets a reference to the given string and assigns it to the RegisteredClientId field.
func (o *Dhis2OAuth2AuthorizationConsent) SetRegisteredClientId(v string) {
	o.RegisteredClientId = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *Dhis2OAuth2AuthorizationConsent) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *Dhis2OAuth2AuthorizationConsent) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhis2OAuth2AuthorizationConsent) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *Dhis2OAuth2AuthorizationConsent) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *Dhis2OAuth2AuthorizationConsent) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o Dhis2OAuth2AuthorizationConsent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dhis2OAuth2AuthorizationConsent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Authorities) {
		toSerialize["authorities"] = o.Authorities
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PrincipalName) {
		toSerialize["principalName"] = o.PrincipalName
	}
	if !IsNil(o.RegisteredClientId) {
		toSerialize["registeredClientId"] = o.RegisteredClientId
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

type NullableDhis2OAuth2AuthorizationConsent struct {
	value *Dhis2OAuth2AuthorizationConsent
	isSet bool
}

func (v NullableDhis2OAuth2AuthorizationConsent) Get() *Dhis2OAuth2AuthorizationConsent {
	return v.value
}

func (v *NullableDhis2OAuth2AuthorizationConsent) Set(val *Dhis2OAuth2AuthorizationConsent) {
	v.value = val
	v.isSet = true
}

func (v NullableDhis2OAuth2AuthorizationConsent) IsSet() bool {
	return v.isSet
}

func (v *NullableDhis2OAuth2AuthorizationConsent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhis2OAuth2AuthorizationConsent(val *Dhis2OAuth2AuthorizationConsent) *NullableDhis2OAuth2AuthorizationConsent {
	return &NullableDhis2OAuth2AuthorizationConsent{value: val, isSet: true}
}

func (v NullableDhis2OAuth2AuthorizationConsent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhis2OAuth2AuthorizationConsent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
