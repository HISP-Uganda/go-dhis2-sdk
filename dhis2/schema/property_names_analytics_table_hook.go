/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesAnalyticsTableHook the model 'PropertyNamesAnalyticsTableHook'
type PropertyNamesAnalyticsTableHook string

// List of PropertyNames_AnalyticsTableHook
const (
	PROPERTYNAMESANALYTICSTABLEHOOK_ACCESS               PropertyNamesAnalyticsTableHook = "access"
	PROPERTYNAMESANALYTICSTABLEHOOK_ANALYTICS_TABLE_TYPE PropertyNamesAnalyticsTableHook = "analyticsTableType"
	PROPERTYNAMESANALYTICSTABLEHOOK_ATTRIBUTE_VALUES     PropertyNamesAnalyticsTableHook = "attributeValues"
	PROPERTYNAMESANALYTICSTABLEHOOK_CODE                 PropertyNamesAnalyticsTableHook = "code"
	PROPERTYNAMESANALYTICSTABLEHOOK_CREATED              PropertyNamesAnalyticsTableHook = "created"
	PROPERTYNAMESANALYTICSTABLEHOOK_CREATED_BY           PropertyNamesAnalyticsTableHook = "createdBy"
	PROPERTYNAMESANALYTICSTABLEHOOK_DISPLAY_NAME         PropertyNamesAnalyticsTableHook = "displayName"
	PROPERTYNAMESANALYTICSTABLEHOOK_EXTERNAL_ACCESS      PropertyNamesAnalyticsTableHook = "externalAccess"
	PROPERTYNAMESANALYTICSTABLEHOOK_FAVORITE             PropertyNamesAnalyticsTableHook = "favorite"
	PROPERTYNAMESANALYTICSTABLEHOOK_FAVORITES            PropertyNamesAnalyticsTableHook = "favorites"
	PROPERTYNAMESANALYTICSTABLEHOOK_HREF                 PropertyNamesAnalyticsTableHook = "href"
	PROPERTYNAMESANALYTICSTABLEHOOK_ID                   PropertyNamesAnalyticsTableHook = "id"
	PROPERTYNAMESANALYTICSTABLEHOOK_LAST_UPDATED         PropertyNamesAnalyticsTableHook = "lastUpdated"
	PROPERTYNAMESANALYTICSTABLEHOOK_LAST_UPDATED_BY      PropertyNamesAnalyticsTableHook = "lastUpdatedBy"
	PROPERTYNAMESANALYTICSTABLEHOOK_NAME                 PropertyNamesAnalyticsTableHook = "name"
	PROPERTYNAMESANALYTICSTABLEHOOK_PHASE                PropertyNamesAnalyticsTableHook = "phase"
	PROPERTYNAMESANALYTICSTABLEHOOK_PUBLIC_ACCESS        PropertyNamesAnalyticsTableHook = "publicAccess"
	PROPERTYNAMESANALYTICSTABLEHOOK_RESOURCE_TABLE_TYPE  PropertyNamesAnalyticsTableHook = "resourceTableType"
	PROPERTYNAMESANALYTICSTABLEHOOK_SHARING              PropertyNamesAnalyticsTableHook = "sharing"
	PROPERTYNAMESANALYTICSTABLEHOOK_SQL                  PropertyNamesAnalyticsTableHook = "sql"
	PROPERTYNAMESANALYTICSTABLEHOOK_TRANSLATIONS         PropertyNamesAnalyticsTableHook = "translations"
	PROPERTYNAMESANALYTICSTABLEHOOK_USER                 PropertyNamesAnalyticsTableHook = "user"
	PROPERTYNAMESANALYTICSTABLEHOOK_USER_ACCESSES        PropertyNamesAnalyticsTableHook = "userAccesses"
	PROPERTYNAMESANALYTICSTABLEHOOK_USER_GROUP_ACCESSES  PropertyNamesAnalyticsTableHook = "userGroupAccesses"
)

// All allowed values of PropertyNamesAnalyticsTableHook enum
var AllowedPropertyNamesAnalyticsTableHookEnumValues = []PropertyNamesAnalyticsTableHook{
	"access",
	"analyticsTableType",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"phase",
	"publicAccess",
	"resourceTableType",
	"sharing",
	"sql",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesAnalyticsTableHook) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesAnalyticsTableHook(value)
	for _, existing := range AllowedPropertyNamesAnalyticsTableHookEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesAnalyticsTableHook", value)
}

// NewPropertyNamesAnalyticsTableHookFromValue returns a pointer to a valid PropertyNamesAnalyticsTableHook
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesAnalyticsTableHookFromValue(v string) (*PropertyNamesAnalyticsTableHook, error) {
	ev := PropertyNamesAnalyticsTableHook(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesAnalyticsTableHook: valid values are %v", v, AllowedPropertyNamesAnalyticsTableHookEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesAnalyticsTableHook) IsValid() bool {
	for _, existing := range AllowedPropertyNamesAnalyticsTableHookEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_AnalyticsTableHook value
func (v PropertyNamesAnalyticsTableHook) Ptr() *PropertyNamesAnalyticsTableHook {
	return &v
}

type NullablePropertyNamesAnalyticsTableHook struct {
	value *PropertyNamesAnalyticsTableHook
	isSet bool
}

func (v NullablePropertyNamesAnalyticsTableHook) Get() *PropertyNamesAnalyticsTableHook {
	return v.value
}

func (v *NullablePropertyNamesAnalyticsTableHook) Set(val *PropertyNamesAnalyticsTableHook) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesAnalyticsTableHook) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesAnalyticsTableHook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesAnalyticsTableHook(val *PropertyNamesAnalyticsTableHook) *NullablePropertyNamesAnalyticsTableHook {
	return &NullablePropertyNamesAnalyticsTableHook{value: val, isSet: true}
}

func (v NullablePropertyNamesAnalyticsTableHook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesAnalyticsTableHook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
