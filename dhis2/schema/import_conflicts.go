/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImportConflicts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportConflicts{}

// ImportConflicts struct for ImportConflicts
type ImportConflicts struct {
	ConflictCount                int32            `json:"conflictCount"`
	Conflicts                    []ImportConflict `json:"conflicts,omitempty"`
	ConflictsDescription         *string          `json:"conflictsDescription,omitempty"`
	TotalConflictOccurrenceCount int32            `json:"totalConflictOccurrenceCount"`
}

type _ImportConflicts ImportConflicts

// NewImportConflicts instantiates a new ImportConflicts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportConflicts(conflictCount int32, totalConflictOccurrenceCount int32) *ImportConflicts {
	this := ImportConflicts{}
	this.ConflictCount = conflictCount
	this.TotalConflictOccurrenceCount = totalConflictOccurrenceCount
	return &this
}

// NewImportConflictsWithDefaults instantiates a new ImportConflicts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportConflictsWithDefaults() *ImportConflicts {
	this := ImportConflicts{}
	return &this
}

// GetConflictCount returns the ConflictCount field value
func (o *ImportConflicts) GetConflictCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConflictCount
}

// GetConflictCountOk returns a tuple with the ConflictCount field value
// and a boolean to check if the value has been set.
func (o *ImportConflicts) GetConflictCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConflictCount, true
}

// SetConflictCount sets field value
func (o *ImportConflicts) SetConflictCount(v int32) {
	o.ConflictCount = v
}

// GetConflicts returns the Conflicts field value if set, zero value otherwise.
func (o *ImportConflicts) GetConflicts() []ImportConflict {
	if o == nil || IsNil(o.Conflicts) {
		var ret []ImportConflict
		return ret
	}
	return o.Conflicts
}

// GetConflictsOk returns a tuple with the Conflicts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportConflicts) GetConflictsOk() ([]ImportConflict, bool) {
	if o == nil || IsNil(o.Conflicts) {
		return nil, false
	}
	return o.Conflicts, true
}

// HasConflicts returns a boolean if a field has been set.
func (o *ImportConflicts) HasConflicts() bool {
	if o != nil && !IsNil(o.Conflicts) {
		return true
	}

	return false
}

// SetConflicts gets a reference to the given []ImportConflict and assigns it to the Conflicts field.
func (o *ImportConflicts) SetConflicts(v []ImportConflict) {
	o.Conflicts = v
}

// GetConflictsDescription returns the ConflictsDescription field value if set, zero value otherwise.
func (o *ImportConflicts) GetConflictsDescription() string {
	if o == nil || IsNil(o.ConflictsDescription) {
		var ret string
		return ret
	}
	return *o.ConflictsDescription
}

// GetConflictsDescriptionOk returns a tuple with the ConflictsDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportConflicts) GetConflictsDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ConflictsDescription) {
		return nil, false
	}
	return o.ConflictsDescription, true
}

// HasConflictsDescription returns a boolean if a field has been set.
func (o *ImportConflicts) HasConflictsDescription() bool {
	if o != nil && !IsNil(o.ConflictsDescription) {
		return true
	}

	return false
}

// SetConflictsDescription gets a reference to the given string and assigns it to the ConflictsDescription field.
func (o *ImportConflicts) SetConflictsDescription(v string) {
	o.ConflictsDescription = &v
}

// GetTotalConflictOccurrenceCount returns the TotalConflictOccurrenceCount field value
func (o *ImportConflicts) GetTotalConflictOccurrenceCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalConflictOccurrenceCount
}

// GetTotalConflictOccurrenceCountOk returns a tuple with the TotalConflictOccurrenceCount field value
// and a boolean to check if the value has been set.
func (o *ImportConflicts) GetTotalConflictOccurrenceCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalConflictOccurrenceCount, true
}

// SetTotalConflictOccurrenceCount sets field value
func (o *ImportConflicts) SetTotalConflictOccurrenceCount(v int32) {
	o.TotalConflictOccurrenceCount = v
}

func (o ImportConflicts) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportConflicts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conflictCount"] = o.ConflictCount
	if !IsNil(o.Conflicts) {
		toSerialize["conflicts"] = o.Conflicts
	}
	if !IsNil(o.ConflictsDescription) {
		toSerialize["conflictsDescription"] = o.ConflictsDescription
	}
	toSerialize["totalConflictOccurrenceCount"] = o.TotalConflictOccurrenceCount
	return toSerialize, nil
}

func (o *ImportConflicts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conflictCount",
		"totalConflictOccurrenceCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportConflicts := _ImportConflicts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportConflicts)

	if err != nil {
		return err
	}

	*o = ImportConflicts(varImportConflicts)

	return err
}

type NullableImportConflicts struct {
	value *ImportConflicts
	isSet bool
}

func (v NullableImportConflicts) Get() *ImportConflicts {
	return v.value
}

func (v *NullableImportConflicts) Set(val *ImportConflicts) {
	v.value = val
	v.isSet = true
}

func (v NullableImportConflicts) IsSet() bool {
	return v.isSet
}

func (v *NullableImportConflicts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportConflicts(val *ImportConflicts) *NullableImportConflicts {
	return &NullableImportConflicts{value: val, isSet: true}
}

func (v NullableImportConflicts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportConflicts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
