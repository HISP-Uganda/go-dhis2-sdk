/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// UserRolePropertyNames the model 'UserRolePropertyNames'
type UserRolePropertyNames string

// List of UserRolePropertyNames
const (
	USERROLEPROPERTYNAMES_ACCESS           UserRolePropertyNames = "access"
	USERROLEPROPERTYNAMES_ATTRIBUTE_VALUES UserRolePropertyNames = "attributeValues"
	USERROLEPROPERTYNAMES_AUTHORITIES      UserRolePropertyNames = "authorities"
	USERROLEPROPERTYNAMES_CODE             UserRolePropertyNames = "code"
	USERROLEPROPERTYNAMES_CREATED          UserRolePropertyNames = "created"
	USERROLEPROPERTYNAMES_CREATED_BY       UserRolePropertyNames = "createdBy"
	USERROLEPROPERTYNAMES_DESCRIPTION      UserRolePropertyNames = "description"
	USERROLEPROPERTYNAMES_DISPLAY_NAME     UserRolePropertyNames = "displayName"
	USERROLEPROPERTYNAMES_FAVORITE         UserRolePropertyNames = "favorite"
	USERROLEPROPERTYNAMES_FAVORITES        UserRolePropertyNames = "favorites"
	USERROLEPROPERTYNAMES_HREF             UserRolePropertyNames = "href"
	USERROLEPROPERTYNAMES_ID               UserRolePropertyNames = "id"
	USERROLEPROPERTYNAMES_LAST_UPDATED     UserRolePropertyNames = "lastUpdated"
	USERROLEPROPERTYNAMES_LAST_UPDATED_BY  UserRolePropertyNames = "lastUpdatedBy"
	USERROLEPROPERTYNAMES_NAME             UserRolePropertyNames = "name"
	USERROLEPROPERTYNAMES_RESTRICTIONS     UserRolePropertyNames = "restrictions"
	USERROLEPROPERTYNAMES_SHARING          UserRolePropertyNames = "sharing"
	USERROLEPROPERTYNAMES_TRANSLATIONS     UserRolePropertyNames = "translations"
	USERROLEPROPERTYNAMES_USERS            UserRolePropertyNames = "users"
)

// All allowed values of UserRolePropertyNames enum
var AllowedUserRolePropertyNamesEnumValues = []UserRolePropertyNames{
	"access",
	"attributeValues",
	"authorities",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"restrictions",
	"sharing",
	"translations",
	"users",
}

func (v *UserRolePropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserRolePropertyNames(value)
	for _, existing := range AllowedUserRolePropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserRolePropertyNames", value)
}

// NewUserRolePropertyNamesFromValue returns a pointer to a valid UserRolePropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserRolePropertyNamesFromValue(v string) (*UserRolePropertyNames, error) {
	ev := UserRolePropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserRolePropertyNames: valid values are %v", v, AllowedUserRolePropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserRolePropertyNames) IsValid() bool {
	for _, existing := range AllowedUserRolePropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserRolePropertyNames value
func (v UserRolePropertyNames) Ptr() *UserRolePropertyNames {
	return &v
}

type NullableUserRolePropertyNames struct {
	value *UserRolePropertyNames
	isSet bool
}

func (v NullableUserRolePropertyNames) Get() *UserRolePropertyNames {
	return v.value
}

func (v *NullableUserRolePropertyNames) Set(val *UserRolePropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRolePropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRolePropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRolePropertyNames(val *UserRolePropertyNames) *NullableUserRolePropertyNames {
	return &NullableUserRolePropertyNames{value: val, isSet: true}
}

func (v NullableUserRolePropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRolePropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
