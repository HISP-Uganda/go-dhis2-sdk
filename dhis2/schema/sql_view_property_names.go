/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// SqlViewPropertyNames the model 'SqlViewPropertyNames'
type SqlViewPropertyNames string

// List of SqlViewPropertyNames
const (
	SQLVIEWPROPERTYNAMES_ACCESS           SqlViewPropertyNames = "access"
	SQLVIEWPROPERTYNAMES_ATTRIBUTE_VALUES SqlViewPropertyNames = "attributeValues"
	SQLVIEWPROPERTYNAMES_CACHE_STRATEGY   SqlViewPropertyNames = "cacheStrategy"
	SQLVIEWPROPERTYNAMES_CODE             SqlViewPropertyNames = "code"
	SQLVIEWPROPERTYNAMES_CREATED          SqlViewPropertyNames = "created"
	SQLVIEWPROPERTYNAMES_CREATED_BY       SqlViewPropertyNames = "createdBy"
	SQLVIEWPROPERTYNAMES_DESCRIPTION      SqlViewPropertyNames = "description"
	SQLVIEWPROPERTYNAMES_DISPLAY_NAME     SqlViewPropertyNames = "displayName"
	SQLVIEWPROPERTYNAMES_FAVORITE         SqlViewPropertyNames = "favorite"
	SQLVIEWPROPERTYNAMES_FAVORITES        SqlViewPropertyNames = "favorites"
	SQLVIEWPROPERTYNAMES_HREF             SqlViewPropertyNames = "href"
	SQLVIEWPROPERTYNAMES_ID               SqlViewPropertyNames = "id"
	SQLVIEWPROPERTYNAMES_LAST_UPDATED     SqlViewPropertyNames = "lastUpdated"
	SQLVIEWPROPERTYNAMES_LAST_UPDATED_BY  SqlViewPropertyNames = "lastUpdatedBy"
	SQLVIEWPROPERTYNAMES_NAME             SqlViewPropertyNames = "name"
	SQLVIEWPROPERTYNAMES_SHARING          SqlViewPropertyNames = "sharing"
	SQLVIEWPROPERTYNAMES_SQL_QUERY        SqlViewPropertyNames = "sqlQuery"
	SQLVIEWPROPERTYNAMES_TRANSLATIONS     SqlViewPropertyNames = "translations"
	SQLVIEWPROPERTYNAMES_TYPE             SqlViewPropertyNames = "type"
	SQLVIEWPROPERTYNAMES_UPDATE_JOB_ID    SqlViewPropertyNames = "updateJobId"
)

// All allowed values of SqlViewPropertyNames enum
var AllowedSqlViewPropertyNamesEnumValues = []SqlViewPropertyNames{
	"access",
	"attributeValues",
	"cacheStrategy",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"sharing",
	"sqlQuery",
	"translations",
	"type",
	"updateJobId",
}

func (v *SqlViewPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SqlViewPropertyNames(value)
	for _, existing := range AllowedSqlViewPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SqlViewPropertyNames", value)
}

// NewSqlViewPropertyNamesFromValue returns a pointer to a valid SqlViewPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSqlViewPropertyNamesFromValue(v string) (*SqlViewPropertyNames, error) {
	ev := SqlViewPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SqlViewPropertyNames: valid values are %v", v, AllowedSqlViewPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SqlViewPropertyNames) IsValid() bool {
	for _, existing := range AllowedSqlViewPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SqlViewPropertyNames value
func (v SqlViewPropertyNames) Ptr() *SqlViewPropertyNames {
	return &v
}

type NullableSqlViewPropertyNames struct {
	value *SqlViewPropertyNames
	isSet bool
}

func (v NullableSqlViewPropertyNames) Get() *SqlViewPropertyNames {
	return v.value
}

func (v *NullableSqlViewPropertyNames) Set(val *SqlViewPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlViewPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlViewPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlViewPropertyNames(val *SqlViewPropertyNames) *NullableSqlViewPropertyNames {
	return &NullableSqlViewPropertyNames{value: val, isSet: true}
}

func (v NullableSqlViewPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlViewPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
