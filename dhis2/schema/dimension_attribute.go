/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DimensionAttribute the model 'DimensionAttribute'
type DimensionAttribute string

// List of DimensionAttribute
const (
	DIMENSIONATTRIBUTE_COLUMN DimensionAttribute = "COLUMN"
	DIMENSIONATTRIBUTE_ROW    DimensionAttribute = "ROW"
	DIMENSIONATTRIBUTE_FILTER DimensionAttribute = "FILTER"
)

// All allowed values of DimensionAttribute enum
var AllowedDimensionAttributeEnumValues = []DimensionAttribute{
	"COLUMN",
	"ROW",
	"FILTER",
}

func (v *DimensionAttribute) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DimensionAttribute(value)
	for _, existing := range AllowedDimensionAttributeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DimensionAttribute", value)
}

// NewDimensionAttributeFromValue returns a pointer to a valid DimensionAttribute
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDimensionAttributeFromValue(v string) (*DimensionAttribute, error) {
	ev := DimensionAttribute(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DimensionAttribute: valid values are %v", v, AllowedDimensionAttributeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DimensionAttribute) IsValid() bool {
	for _, existing := range AllowedDimensionAttributeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DimensionAttribute value
func (v DimensionAttribute) Ptr() *DimensionAttribute {
	return &v
}

type NullableDimensionAttribute struct {
	value *DimensionAttribute
	isSet bool
}

func (v NullableDimensionAttribute) Get() *DimensionAttribute {
	return v.value
}

func (v *NullableDimensionAttribute) Set(val *DimensionAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionAttribute(val *DimensionAttribute) *NullableDimensionAttribute {
	return &NullableDimensionAttribute{value: val, isSet: true}
}

func (v NullableDimensionAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
