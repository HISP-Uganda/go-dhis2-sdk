/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesMap the model 'PropertyNamesMap'
type PropertyNamesMap string

// List of PropertyNames_Map
const (
	PROPERTYNAMESMAP_ACCESS              PropertyNamesMap = "access"
	PROPERTYNAMESMAP_ATTRIBUTE_VALUES    PropertyNamesMap = "attributeValues"
	PROPERTYNAMESMAP_BASEMAP             PropertyNamesMap = "basemap"
	PROPERTYNAMESMAP_CODE                PropertyNamesMap = "code"
	PROPERTYNAMESMAP_CREATED             PropertyNamesMap = "created"
	PROPERTYNAMESMAP_CREATED_BY          PropertyNamesMap = "createdBy"
	PROPERTYNAMESMAP_DESCRIPTION         PropertyNamesMap = "description"
	PROPERTYNAMESMAP_DISPLAY_DESCRIPTION PropertyNamesMap = "displayDescription"
	PROPERTYNAMESMAP_DISPLAY_FORM_NAME   PropertyNamesMap = "displayFormName"
	PROPERTYNAMESMAP_DISPLAY_NAME        PropertyNamesMap = "displayName"
	PROPERTYNAMESMAP_DISPLAY_SHORT_NAME  PropertyNamesMap = "displayShortName"
	PROPERTYNAMESMAP_EXTERNAL_ACCESS     PropertyNamesMap = "externalAccess"
	PROPERTYNAMESMAP_FAVORITE            PropertyNamesMap = "favorite"
	PROPERTYNAMESMAP_FAVORITES           PropertyNamesMap = "favorites"
	PROPERTYNAMESMAP_FORM_NAME           PropertyNamesMap = "formName"
	PROPERTYNAMESMAP_HREF                PropertyNamesMap = "href"
	PROPERTYNAMESMAP_ID                  PropertyNamesMap = "id"
	PROPERTYNAMESMAP_INTERPRETATIONS     PropertyNamesMap = "interpretations"
	PROPERTYNAMESMAP_LAST_UPDATED        PropertyNamesMap = "lastUpdated"
	PROPERTYNAMESMAP_LAST_UPDATED_BY     PropertyNamesMap = "lastUpdatedBy"
	PROPERTYNAMESMAP_LATITUDE            PropertyNamesMap = "latitude"
	PROPERTYNAMESMAP_LONGITUDE           PropertyNamesMap = "longitude"
	PROPERTYNAMESMAP_MAP_VIEWS           PropertyNamesMap = "mapViews"
	PROPERTYNAMESMAP_NAME                PropertyNamesMap = "name"
	PROPERTYNAMESMAP_PUBLIC_ACCESS       PropertyNamesMap = "publicAccess"
	PROPERTYNAMESMAP_SHARING             PropertyNamesMap = "sharing"
	PROPERTYNAMESMAP_SHORT_NAME          PropertyNamesMap = "shortName"
	PROPERTYNAMESMAP_SUBSCRIBED          PropertyNamesMap = "subscribed"
	PROPERTYNAMESMAP_SUBSCRIBERS         PropertyNamesMap = "subscribers"
	PROPERTYNAMESMAP_TITLE               PropertyNamesMap = "title"
	PROPERTYNAMESMAP_TRANSLATIONS        PropertyNamesMap = "translations"
	PROPERTYNAMESMAP_USER                PropertyNamesMap = "user"
	PROPERTYNAMESMAP_USER_ACCESSES       PropertyNamesMap = "userAccesses"
	PROPERTYNAMESMAP_USER_GROUP_ACCESSES PropertyNamesMap = "userGroupAccesses"
	PROPERTYNAMESMAP_ZOOM                PropertyNamesMap = "zoom"
)

// All allowed values of PropertyNamesMap enum
var AllowedPropertyNamesMapEnumValues = []PropertyNamesMap{
	"access",
	"attributeValues",
	"basemap",
	"code",
	"created",
	"createdBy",
	"description",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"externalAccess",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"interpretations",
	"lastUpdated",
	"lastUpdatedBy",
	"latitude",
	"longitude",
	"mapViews",
	"name",
	"publicAccess",
	"sharing",
	"shortName",
	"subscribed",
	"subscribers",
	"title",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"zoom",
}

func (v *PropertyNamesMap) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesMap(value)
	for _, existing := range AllowedPropertyNamesMapEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesMap", value)
}

// NewPropertyNamesMapFromValue returns a pointer to a valid PropertyNamesMap
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesMapFromValue(v string) (*PropertyNamesMap, error) {
	ev := PropertyNamesMap(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesMap: valid values are %v", v, AllowedPropertyNamesMapEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesMap) IsValid() bool {
	for _, existing := range AllowedPropertyNamesMapEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Map value
func (v PropertyNamesMap) Ptr() *PropertyNamesMap {
	return &v
}

type NullablePropertyNamesMap struct {
	value *PropertyNamesMap
	isSet bool
}

func (v NullablePropertyNamesMap) Get() *PropertyNamesMap {
	return v.value
}

func (v *NullablePropertyNamesMap) Set(val *PropertyNamesMap) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesMap) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesMap(val *PropertyNamesMap) *NullablePropertyNamesMap {
	return &NullablePropertyNamesMap{value: val, isSet: true}
}

func (v NullablePropertyNamesMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
