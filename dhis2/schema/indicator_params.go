/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the IndicatorParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndicatorParams{}

// IndicatorParams struct for IndicatorParams
type IndicatorParams struct {
	AggregateExportAttributeOptionCombo *string                                       `json:"aggregateExportAttributeOptionCombo,omitempty"`
	AggregateExportCategoryOptionCombo  *string                                       `json:"aggregateExportCategoryOptionCombo,omitempty"`
	AggregationType                     AggregationType                               `json:"aggregationType"`
	Annualized                          *bool                                         `json:"annualized,omitempty"`
	AttributeValues                     []AttributeValueParams                        `json:"attributeValues,omitempty"`
	Code                                *string                                       `json:"code,omitempty"`
	Created                             *time.Time                                    `json:"created,omitempty"`
	CreatedBy                           *AggregateDataExchangeParamsCreatedBy         `json:"createdBy,omitempty"`
	DataSets                            []DataApprovalWorkflowParamsDataSetsInner     `json:"dataSets,omitempty"`
	Decimals                            *int32                                        `json:"decimals,omitempty"`
	Denominator                         *string                                       `json:"denominator,omitempty"`
	DenominatorDescription              *string                                       `json:"denominatorDescription,omitempty"`
	Description                         *string                                       `json:"description,omitempty"`
	DimensionItem                       *string                                       `json:"dimensionItem,omitempty"`
	DisplayDenominatorDescription       *string                                       `json:"displayDenominatorDescription,omitempty"`
	DisplayDescription                  *string                                       `json:"displayDescription,omitempty"`
	DisplayFormName                     *string                                       `json:"displayFormName,omitempty"`
	DisplayName                         *string                                       `json:"displayName,omitempty"`
	DisplayNumeratorDescription         *string                                       `json:"displayNumeratorDescription,omitempty"`
	DisplayShortName                    *string                                       `json:"displayShortName,omitempty"`
	ExplodedDenominator                 *string                                       `json:"explodedDenominator,omitempty"`
	ExplodedNumerator                   *string                                       `json:"explodedNumerator,omitempty"`
	Favorite                            *bool                                         `json:"favorite,omitempty"`
	Favorites                           []string                                      `json:"favorites,omitempty"`
	FormName                            *string                                       `json:"formName,omitempty"`
	Id                                  *string                                       `json:"id,omitempty"`
	IndicatorGroups                     []IndicatorGroupSetParamsIndicatorGroupsInner `json:"indicatorGroups,omitempty"`
	IndicatorType                       *IndicatorTypeParams                          `json:"indicatorType,omitempty"`
	LastUpdated                         *time.Time                                    `json:"lastUpdated,omitempty"`
	LastUpdatedBy                       *AggregateDataExchangeParamsCreatedBy         `json:"lastUpdatedBy,omitempty"`
	LegendSet                           *CategoryOptionComboParamsLegendSet           `json:"legendSet,omitempty"`
	LegendSets                          []CategoryOptionComboParamsLegendSet          `json:"legendSets,omitempty"`
	Name                                *string                                       `json:"name,omitempty"`
	Numerator                           *string                                       `json:"numerator,omitempty"`
	NumeratorDescription                *string                                       `json:"numeratorDescription,omitempty"`
	QueryMods                           *QueryModifiers                               `json:"queryMods,omitempty"`
	Sharing                             *Sharing                                      `json:"sharing,omitempty"`
	ShortName                           *string                                       `json:"shortName,omitempty"`
	Style                               *ObjectStyle                                  `json:"style,omitempty"`
	Translations                        []Translation                                 `json:"translations,omitempty"`
	Url                                 *string                                       `json:"url,omitempty"`
}

type _IndicatorParams IndicatorParams

// NewIndicatorParams instantiates a new IndicatorParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndicatorParams(aggregationType AggregationType) *IndicatorParams {
	this := IndicatorParams{}
	this.AggregationType = aggregationType
	return &this
}

// NewIndicatorParamsWithDefaults instantiates a new IndicatorParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndicatorParamsWithDefaults() *IndicatorParams {
	this := IndicatorParams{}
	return &this
}

// GetAggregateExportAttributeOptionCombo returns the AggregateExportAttributeOptionCombo field value if set, zero value otherwise.
func (o *IndicatorParams) GetAggregateExportAttributeOptionCombo() string {
	if o == nil || IsNil(o.AggregateExportAttributeOptionCombo) {
		var ret string
		return ret
	}
	return *o.AggregateExportAttributeOptionCombo
}

// GetAggregateExportAttributeOptionComboOk returns a tuple with the AggregateExportAttributeOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetAggregateExportAttributeOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.AggregateExportAttributeOptionCombo) {
		return nil, false
	}
	return o.AggregateExportAttributeOptionCombo, true
}

// HasAggregateExportAttributeOptionCombo returns a boolean if a field has been set.
func (o *IndicatorParams) HasAggregateExportAttributeOptionCombo() bool {
	if o != nil && !IsNil(o.AggregateExportAttributeOptionCombo) {
		return true
	}

	return false
}

// SetAggregateExportAttributeOptionCombo gets a reference to the given string and assigns it to the AggregateExportAttributeOptionCombo field.
func (o *IndicatorParams) SetAggregateExportAttributeOptionCombo(v string) {
	o.AggregateExportAttributeOptionCombo = &v
}

// GetAggregateExportCategoryOptionCombo returns the AggregateExportCategoryOptionCombo field value if set, zero value otherwise.
func (o *IndicatorParams) GetAggregateExportCategoryOptionCombo() string {
	if o == nil || IsNil(o.AggregateExportCategoryOptionCombo) {
		var ret string
		return ret
	}
	return *o.AggregateExportCategoryOptionCombo
}

// GetAggregateExportCategoryOptionComboOk returns a tuple with the AggregateExportCategoryOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetAggregateExportCategoryOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.AggregateExportCategoryOptionCombo) {
		return nil, false
	}
	return o.AggregateExportCategoryOptionCombo, true
}

// HasAggregateExportCategoryOptionCombo returns a boolean if a field has been set.
func (o *IndicatorParams) HasAggregateExportCategoryOptionCombo() bool {
	if o != nil && !IsNil(o.AggregateExportCategoryOptionCombo) {
		return true
	}

	return false
}

// SetAggregateExportCategoryOptionCombo gets a reference to the given string and assigns it to the AggregateExportCategoryOptionCombo field.
func (o *IndicatorParams) SetAggregateExportCategoryOptionCombo(v string) {
	o.AggregateExportCategoryOptionCombo = &v
}

// GetAggregationType returns the AggregationType field value
func (o *IndicatorParams) GetAggregationType() AggregationType {
	if o == nil {
		var ret AggregationType
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetAggregationTypeOk() (*AggregationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *IndicatorParams) SetAggregationType(v AggregationType) {
	o.AggregationType = v
}

// GetAnnualized returns the Annualized field value if set, zero value otherwise.
func (o *IndicatorParams) GetAnnualized() bool {
	if o == nil || IsNil(o.Annualized) {
		var ret bool
		return ret
	}
	return *o.Annualized
}

// GetAnnualizedOk returns a tuple with the Annualized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetAnnualizedOk() (*bool, bool) {
	if o == nil || IsNil(o.Annualized) {
		return nil, false
	}
	return o.Annualized, true
}

// HasAnnualized returns a boolean if a field has been set.
func (o *IndicatorParams) HasAnnualized() bool {
	if o != nil && !IsNil(o.Annualized) {
		return true
	}

	return false
}

// SetAnnualized gets a reference to the given bool and assigns it to the Annualized field.
func (o *IndicatorParams) SetAnnualized(v bool) {
	o.Annualized = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *IndicatorParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *IndicatorParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *IndicatorParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *IndicatorParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *IndicatorParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *IndicatorParams) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *IndicatorParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *IndicatorParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *IndicatorParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *IndicatorParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *IndicatorParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *IndicatorParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetDataSets returns the DataSets field value if set, zero value otherwise.
func (o *IndicatorParams) GetDataSets() []DataApprovalWorkflowParamsDataSetsInner {
	if o == nil || IsNil(o.DataSets) {
		var ret []DataApprovalWorkflowParamsDataSetsInner
		return ret
	}
	return o.DataSets
}

// GetDataSetsOk returns a tuple with the DataSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDataSetsOk() ([]DataApprovalWorkflowParamsDataSetsInner, bool) {
	if o == nil || IsNil(o.DataSets) {
		return nil, false
	}
	return o.DataSets, true
}

// HasDataSets returns a boolean if a field has been set.
func (o *IndicatorParams) HasDataSets() bool {
	if o != nil && !IsNil(o.DataSets) {
		return true
	}

	return false
}

// SetDataSets gets a reference to the given []DataApprovalWorkflowParamsDataSetsInner and assigns it to the DataSets field.
func (o *IndicatorParams) SetDataSets(v []DataApprovalWorkflowParamsDataSetsInner) {
	o.DataSets = v
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *IndicatorParams) GetDecimals() int32 {
	if o == nil || IsNil(o.Decimals) {
		var ret int32
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDecimalsOk() (*int32, bool) {
	if o == nil || IsNil(o.Decimals) {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *IndicatorParams) HasDecimals() bool {
	if o != nil && !IsNil(o.Decimals) {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int32 and assigns it to the Decimals field.
func (o *IndicatorParams) SetDecimals(v int32) {
	o.Decimals = &v
}

// GetDenominator returns the Denominator field value if set, zero value otherwise.
func (o *IndicatorParams) GetDenominator() string {
	if o == nil || IsNil(o.Denominator) {
		var ret string
		return ret
	}
	return *o.Denominator
}

// GetDenominatorOk returns a tuple with the Denominator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDenominatorOk() (*string, bool) {
	if o == nil || IsNil(o.Denominator) {
		return nil, false
	}
	return o.Denominator, true
}

// HasDenominator returns a boolean if a field has been set.
func (o *IndicatorParams) HasDenominator() bool {
	if o != nil && !IsNil(o.Denominator) {
		return true
	}

	return false
}

// SetDenominator gets a reference to the given string and assigns it to the Denominator field.
func (o *IndicatorParams) SetDenominator(v string) {
	o.Denominator = &v
}

// GetDenominatorDescription returns the DenominatorDescription field value if set, zero value otherwise.
func (o *IndicatorParams) GetDenominatorDescription() string {
	if o == nil || IsNil(o.DenominatorDescription) {
		var ret string
		return ret
	}
	return *o.DenominatorDescription
}

// GetDenominatorDescriptionOk returns a tuple with the DenominatorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDenominatorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DenominatorDescription) {
		return nil, false
	}
	return o.DenominatorDescription, true
}

// HasDenominatorDescription returns a boolean if a field has been set.
func (o *IndicatorParams) HasDenominatorDescription() bool {
	if o != nil && !IsNil(o.DenominatorDescription) {
		return true
	}

	return false
}

// SetDenominatorDescription gets a reference to the given string and assigns it to the DenominatorDescription field.
func (o *IndicatorParams) SetDenominatorDescription(v string) {
	o.DenominatorDescription = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IndicatorParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IndicatorParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IndicatorParams) SetDescription(v string) {
	o.Description = &v
}

// GetDimensionItem returns the DimensionItem field value if set, zero value otherwise.
func (o *IndicatorParams) GetDimensionItem() string {
	if o == nil || IsNil(o.DimensionItem) {
		var ret string
		return ret
	}
	return *o.DimensionItem
}

// GetDimensionItemOk returns a tuple with the DimensionItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDimensionItemOk() (*string, bool) {
	if o == nil || IsNil(o.DimensionItem) {
		return nil, false
	}
	return o.DimensionItem, true
}

// HasDimensionItem returns a boolean if a field has been set.
func (o *IndicatorParams) HasDimensionItem() bool {
	if o != nil && !IsNil(o.DimensionItem) {
		return true
	}

	return false
}

// SetDimensionItem gets a reference to the given string and assigns it to the DimensionItem field.
func (o *IndicatorParams) SetDimensionItem(v string) {
	o.DimensionItem = &v
}

// GetDisplayDenominatorDescription returns the DisplayDenominatorDescription field value if set, zero value otherwise.
func (o *IndicatorParams) GetDisplayDenominatorDescription() string {
	if o == nil || IsNil(o.DisplayDenominatorDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDenominatorDescription
}

// GetDisplayDenominatorDescriptionOk returns a tuple with the DisplayDenominatorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDisplayDenominatorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDenominatorDescription) {
		return nil, false
	}
	return o.DisplayDenominatorDescription, true
}

// HasDisplayDenominatorDescription returns a boolean if a field has been set.
func (o *IndicatorParams) HasDisplayDenominatorDescription() bool {
	if o != nil && !IsNil(o.DisplayDenominatorDescription) {
		return true
	}

	return false
}

// SetDisplayDenominatorDescription gets a reference to the given string and assigns it to the DisplayDenominatorDescription field.
func (o *IndicatorParams) SetDisplayDenominatorDescription(v string) {
	o.DisplayDenominatorDescription = &v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *IndicatorParams) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *IndicatorParams) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *IndicatorParams) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayFormName returns the DisplayFormName field value if set, zero value otherwise.
func (o *IndicatorParams) GetDisplayFormName() string {
	if o == nil || IsNil(o.DisplayFormName) {
		var ret string
		return ret
	}
	return *o.DisplayFormName
}

// GetDisplayFormNameOk returns a tuple with the DisplayFormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDisplayFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayFormName) {
		return nil, false
	}
	return o.DisplayFormName, true
}

// HasDisplayFormName returns a boolean if a field has been set.
func (o *IndicatorParams) HasDisplayFormName() bool {
	if o != nil && !IsNil(o.DisplayFormName) {
		return true
	}

	return false
}

// SetDisplayFormName gets a reference to the given string and assigns it to the DisplayFormName field.
func (o *IndicatorParams) SetDisplayFormName(v string) {
	o.DisplayFormName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IndicatorParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IndicatorParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IndicatorParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayNumeratorDescription returns the DisplayNumeratorDescription field value if set, zero value otherwise.
func (o *IndicatorParams) GetDisplayNumeratorDescription() string {
	if o == nil || IsNil(o.DisplayNumeratorDescription) {
		var ret string
		return ret
	}
	return *o.DisplayNumeratorDescription
}

// GetDisplayNumeratorDescriptionOk returns a tuple with the DisplayNumeratorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDisplayNumeratorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayNumeratorDescription) {
		return nil, false
	}
	return o.DisplayNumeratorDescription, true
}

// HasDisplayNumeratorDescription returns a boolean if a field has been set.
func (o *IndicatorParams) HasDisplayNumeratorDescription() bool {
	if o != nil && !IsNil(o.DisplayNumeratorDescription) {
		return true
	}

	return false
}

// SetDisplayNumeratorDescription gets a reference to the given string and assigns it to the DisplayNumeratorDescription field.
func (o *IndicatorParams) SetDisplayNumeratorDescription(v string) {
	o.DisplayNumeratorDescription = &v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *IndicatorParams) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *IndicatorParams) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *IndicatorParams) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetExplodedDenominator returns the ExplodedDenominator field value if set, zero value otherwise.
func (o *IndicatorParams) GetExplodedDenominator() string {
	if o == nil || IsNil(o.ExplodedDenominator) {
		var ret string
		return ret
	}
	return *o.ExplodedDenominator
}

// GetExplodedDenominatorOk returns a tuple with the ExplodedDenominator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetExplodedDenominatorOk() (*string, bool) {
	if o == nil || IsNil(o.ExplodedDenominator) {
		return nil, false
	}
	return o.ExplodedDenominator, true
}

// HasExplodedDenominator returns a boolean if a field has been set.
func (o *IndicatorParams) HasExplodedDenominator() bool {
	if o != nil && !IsNil(o.ExplodedDenominator) {
		return true
	}

	return false
}

// SetExplodedDenominator gets a reference to the given string and assigns it to the ExplodedDenominator field.
func (o *IndicatorParams) SetExplodedDenominator(v string) {
	o.ExplodedDenominator = &v
}

// GetExplodedNumerator returns the ExplodedNumerator field value if set, zero value otherwise.
func (o *IndicatorParams) GetExplodedNumerator() string {
	if o == nil || IsNil(o.ExplodedNumerator) {
		var ret string
		return ret
	}
	return *o.ExplodedNumerator
}

// GetExplodedNumeratorOk returns a tuple with the ExplodedNumerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetExplodedNumeratorOk() (*string, bool) {
	if o == nil || IsNil(o.ExplodedNumerator) {
		return nil, false
	}
	return o.ExplodedNumerator, true
}

// HasExplodedNumerator returns a boolean if a field has been set.
func (o *IndicatorParams) HasExplodedNumerator() bool {
	if o != nil && !IsNil(o.ExplodedNumerator) {
		return true
	}

	return false
}

// SetExplodedNumerator gets a reference to the given string and assigns it to the ExplodedNumerator field.
func (o *IndicatorParams) SetExplodedNumerator(v string) {
	o.ExplodedNumerator = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *IndicatorParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *IndicatorParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *IndicatorParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *IndicatorParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *IndicatorParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *IndicatorParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *IndicatorParams) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *IndicatorParams) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *IndicatorParams) SetFormName(v string) {
	o.FormName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IndicatorParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IndicatorParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IndicatorParams) SetId(v string) {
	o.Id = &v
}

// GetIndicatorGroups returns the IndicatorGroups field value if set, zero value otherwise.
func (o *IndicatorParams) GetIndicatorGroups() []IndicatorGroupSetParamsIndicatorGroupsInner {
	if o == nil || IsNil(o.IndicatorGroups) {
		var ret []IndicatorGroupSetParamsIndicatorGroupsInner
		return ret
	}
	return o.IndicatorGroups
}

// GetIndicatorGroupsOk returns a tuple with the IndicatorGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetIndicatorGroupsOk() ([]IndicatorGroupSetParamsIndicatorGroupsInner, bool) {
	if o == nil || IsNil(o.IndicatorGroups) {
		return nil, false
	}
	return o.IndicatorGroups, true
}

// HasIndicatorGroups returns a boolean if a field has been set.
func (o *IndicatorParams) HasIndicatorGroups() bool {
	if o != nil && !IsNil(o.IndicatorGroups) {
		return true
	}

	return false
}

// SetIndicatorGroups gets a reference to the given []IndicatorGroupSetParamsIndicatorGroupsInner and assigns it to the IndicatorGroups field.
func (o *IndicatorParams) SetIndicatorGroups(v []IndicatorGroupSetParamsIndicatorGroupsInner) {
	o.IndicatorGroups = v
}

// GetIndicatorType returns the IndicatorType field value if set, zero value otherwise.
func (o *IndicatorParams) GetIndicatorType() IndicatorTypeParams {
	if o == nil || IsNil(o.IndicatorType) {
		var ret IndicatorTypeParams
		return ret
	}
	return *o.IndicatorType
}

// GetIndicatorTypeOk returns a tuple with the IndicatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetIndicatorTypeOk() (*IndicatorTypeParams, bool) {
	if o == nil || IsNil(o.IndicatorType) {
		return nil, false
	}
	return o.IndicatorType, true
}

// HasIndicatorType returns a boolean if a field has been set.
func (o *IndicatorParams) HasIndicatorType() bool {
	if o != nil && !IsNil(o.IndicatorType) {
		return true
	}

	return false
}

// SetIndicatorType gets a reference to the given IndicatorTypeParams and assigns it to the IndicatorType field.
func (o *IndicatorParams) SetIndicatorType(v IndicatorTypeParams) {
	o.IndicatorType = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *IndicatorParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *IndicatorParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *IndicatorParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *IndicatorParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *IndicatorParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *IndicatorParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLegendSet returns the LegendSet field value if set, zero value otherwise.
func (o *IndicatorParams) GetLegendSet() CategoryOptionComboParamsLegendSet {
	if o == nil || IsNil(o.LegendSet) {
		var ret CategoryOptionComboParamsLegendSet
		return ret
	}
	return *o.LegendSet
}

// GetLegendSetOk returns a tuple with the LegendSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetLegendSetOk() (*CategoryOptionComboParamsLegendSet, bool) {
	if o == nil || IsNil(o.LegendSet) {
		return nil, false
	}
	return o.LegendSet, true
}

// HasLegendSet returns a boolean if a field has been set.
func (o *IndicatorParams) HasLegendSet() bool {
	if o != nil && !IsNil(o.LegendSet) {
		return true
	}

	return false
}

// SetLegendSet gets a reference to the given CategoryOptionComboParamsLegendSet and assigns it to the LegendSet field.
func (o *IndicatorParams) SetLegendSet(v CategoryOptionComboParamsLegendSet) {
	o.LegendSet = &v
}

// GetLegendSets returns the LegendSets field value if set, zero value otherwise.
func (o *IndicatorParams) GetLegendSets() []CategoryOptionComboParamsLegendSet {
	if o == nil || IsNil(o.LegendSets) {
		var ret []CategoryOptionComboParamsLegendSet
		return ret
	}
	return o.LegendSets
}

// GetLegendSetsOk returns a tuple with the LegendSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetLegendSetsOk() ([]CategoryOptionComboParamsLegendSet, bool) {
	if o == nil || IsNil(o.LegendSets) {
		return nil, false
	}
	return o.LegendSets, true
}

// HasLegendSets returns a boolean if a field has been set.
func (o *IndicatorParams) HasLegendSets() bool {
	if o != nil && !IsNil(o.LegendSets) {
		return true
	}

	return false
}

// SetLegendSets gets a reference to the given []CategoryOptionComboParamsLegendSet and assigns it to the LegendSets field.
func (o *IndicatorParams) SetLegendSets(v []CategoryOptionComboParamsLegendSet) {
	o.LegendSets = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IndicatorParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IndicatorParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IndicatorParams) SetName(v string) {
	o.Name = &v
}

// GetNumerator returns the Numerator field value if set, zero value otherwise.
func (o *IndicatorParams) GetNumerator() string {
	if o == nil || IsNil(o.Numerator) {
		var ret string
		return ret
	}
	return *o.Numerator
}

// GetNumeratorOk returns a tuple with the Numerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetNumeratorOk() (*string, bool) {
	if o == nil || IsNil(o.Numerator) {
		return nil, false
	}
	return o.Numerator, true
}

// HasNumerator returns a boolean if a field has been set.
func (o *IndicatorParams) HasNumerator() bool {
	if o != nil && !IsNil(o.Numerator) {
		return true
	}

	return false
}

// SetNumerator gets a reference to the given string and assigns it to the Numerator field.
func (o *IndicatorParams) SetNumerator(v string) {
	o.Numerator = &v
}

// GetNumeratorDescription returns the NumeratorDescription field value if set, zero value otherwise.
func (o *IndicatorParams) GetNumeratorDescription() string {
	if o == nil || IsNil(o.NumeratorDescription) {
		var ret string
		return ret
	}
	return *o.NumeratorDescription
}

// GetNumeratorDescriptionOk returns a tuple with the NumeratorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetNumeratorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.NumeratorDescription) {
		return nil, false
	}
	return o.NumeratorDescription, true
}

// HasNumeratorDescription returns a boolean if a field has been set.
func (o *IndicatorParams) HasNumeratorDescription() bool {
	if o != nil && !IsNil(o.NumeratorDescription) {
		return true
	}

	return false
}

// SetNumeratorDescription gets a reference to the given string and assigns it to the NumeratorDescription field.
func (o *IndicatorParams) SetNumeratorDescription(v string) {
	o.NumeratorDescription = &v
}

// GetQueryMods returns the QueryMods field value if set, zero value otherwise.
func (o *IndicatorParams) GetQueryMods() QueryModifiers {
	if o == nil || IsNil(o.QueryMods) {
		var ret QueryModifiers
		return ret
	}
	return *o.QueryMods
}

// GetQueryModsOk returns a tuple with the QueryMods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetQueryModsOk() (*QueryModifiers, bool) {
	if o == nil || IsNil(o.QueryMods) {
		return nil, false
	}
	return o.QueryMods, true
}

// HasQueryMods returns a boolean if a field has been set.
func (o *IndicatorParams) HasQueryMods() bool {
	if o != nil && !IsNil(o.QueryMods) {
		return true
	}

	return false
}

// SetQueryMods gets a reference to the given QueryModifiers and assigns it to the QueryMods field.
func (o *IndicatorParams) SetQueryMods(v QueryModifiers) {
	o.QueryMods = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *IndicatorParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *IndicatorParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *IndicatorParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *IndicatorParams) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *IndicatorParams) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *IndicatorParams) SetShortName(v string) {
	o.ShortName = &v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *IndicatorParams) GetStyle() ObjectStyle {
	if o == nil || IsNil(o.Style) {
		var ret ObjectStyle
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetStyleOk() (*ObjectStyle, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *IndicatorParams) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given ObjectStyle and assigns it to the Style field.
func (o *IndicatorParams) SetStyle(v ObjectStyle) {
	o.Style = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *IndicatorParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *IndicatorParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *IndicatorParams) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *IndicatorParams) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorParams) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *IndicatorParams) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *IndicatorParams) SetUrl(v string) {
	o.Url = &v
}

func (o IndicatorParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndicatorParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AggregateExportAttributeOptionCombo) {
		toSerialize["aggregateExportAttributeOptionCombo"] = o.AggregateExportAttributeOptionCombo
	}
	if !IsNil(o.AggregateExportCategoryOptionCombo) {
		toSerialize["aggregateExportCategoryOptionCombo"] = o.AggregateExportCategoryOptionCombo
	}
	toSerialize["aggregationType"] = o.AggregationType
	if !IsNil(o.Annualized) {
		toSerialize["annualized"] = o.Annualized
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DataSets) {
		toSerialize["dataSets"] = o.DataSets
	}
	if !IsNil(o.Decimals) {
		toSerialize["decimals"] = o.Decimals
	}
	if !IsNil(o.Denominator) {
		toSerialize["denominator"] = o.Denominator
	}
	if !IsNil(o.DenominatorDescription) {
		toSerialize["denominatorDescription"] = o.DenominatorDescription
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DimensionItem) {
		toSerialize["dimensionItem"] = o.DimensionItem
	}
	if !IsNil(o.DisplayDenominatorDescription) {
		toSerialize["displayDenominatorDescription"] = o.DisplayDenominatorDescription
	}
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayFormName) {
		toSerialize["displayFormName"] = o.DisplayFormName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayNumeratorDescription) {
		toSerialize["displayNumeratorDescription"] = o.DisplayNumeratorDescription
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	if !IsNil(o.ExplodedDenominator) {
		toSerialize["explodedDenominator"] = o.ExplodedDenominator
	}
	if !IsNil(o.ExplodedNumerator) {
		toSerialize["explodedNumerator"] = o.ExplodedNumerator
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IndicatorGroups) {
		toSerialize["indicatorGroups"] = o.IndicatorGroups
	}
	if !IsNil(o.IndicatorType) {
		toSerialize["indicatorType"] = o.IndicatorType
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LegendSet) {
		toSerialize["legendSet"] = o.LegendSet
	}
	if !IsNil(o.LegendSets) {
		toSerialize["legendSets"] = o.LegendSets
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Numerator) {
		toSerialize["numerator"] = o.Numerator
	}
	if !IsNil(o.NumeratorDescription) {
		toSerialize["numeratorDescription"] = o.NumeratorDescription
	}
	if !IsNil(o.QueryMods) {
		toSerialize["queryMods"] = o.QueryMods
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *IndicatorParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregationType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIndicatorParams := _IndicatorParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIndicatorParams)

	if err != nil {
		return err
	}

	*o = IndicatorParams(varIndicatorParams)

	return err
}

type NullableIndicatorParams struct {
	value *IndicatorParams
	isSet bool
}

func (v NullableIndicatorParams) Get() *IndicatorParams {
	return v.value
}

func (v *NullableIndicatorParams) Set(val *IndicatorParams) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorParams) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorParams(val *IndicatorParams) *NullableIndicatorParams {
	return &NullableIndicatorParams{value: val, isSet: true}
}

func (v NullableIndicatorParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
