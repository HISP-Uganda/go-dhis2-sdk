/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PeriodType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeriodType{}

// PeriodType struct for PeriodType
type PeriodType struct {
	FrequencyOrder int32   `json:"frequencyOrder"`
	IsoDuration    *string `json:"isoDuration,omitempty"`
	IsoFormat      *string `json:"isoFormat,omitempty"`
	Name           *string `json:"name,omitempty"`
}

type _PeriodType PeriodType

// NewPeriodType instantiates a new PeriodType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeriodType(frequencyOrder int32) *PeriodType {
	this := PeriodType{}
	this.FrequencyOrder = frequencyOrder
	return &this
}

// NewPeriodTypeWithDefaults instantiates a new PeriodType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeriodTypeWithDefaults() *PeriodType {
	this := PeriodType{}
	return &this
}

// GetFrequencyOrder returns the FrequencyOrder field value
func (o *PeriodType) GetFrequencyOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FrequencyOrder
}

// GetFrequencyOrderOk returns a tuple with the FrequencyOrder field value
// and a boolean to check if the value has been set.
func (o *PeriodType) GetFrequencyOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FrequencyOrder, true
}

// SetFrequencyOrder sets field value
func (o *PeriodType) SetFrequencyOrder(v int32) {
	o.FrequencyOrder = v
}

// GetIsoDuration returns the IsoDuration field value if set, zero value otherwise.
func (o *PeriodType) GetIsoDuration() string {
	if o == nil || IsNil(o.IsoDuration) {
		var ret string
		return ret
	}
	return *o.IsoDuration
}

// GetIsoDurationOk returns a tuple with the IsoDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodType) GetIsoDurationOk() (*string, bool) {
	if o == nil || IsNil(o.IsoDuration) {
		return nil, false
	}
	return o.IsoDuration, true
}

// HasIsoDuration returns a boolean if a field has been set.
func (o *PeriodType) HasIsoDuration() bool {
	if o != nil && !IsNil(o.IsoDuration) {
		return true
	}

	return false
}

// SetIsoDuration gets a reference to the given string and assigns it to the IsoDuration field.
func (o *PeriodType) SetIsoDuration(v string) {
	o.IsoDuration = &v
}

// GetIsoFormat returns the IsoFormat field value if set, zero value otherwise.
func (o *PeriodType) GetIsoFormat() string {
	if o == nil || IsNil(o.IsoFormat) {
		var ret string
		return ret
	}
	return *o.IsoFormat
}

// GetIsoFormatOk returns a tuple with the IsoFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodType) GetIsoFormatOk() (*string, bool) {
	if o == nil || IsNil(o.IsoFormat) {
		return nil, false
	}
	return o.IsoFormat, true
}

// HasIsoFormat returns a boolean if a field has been set.
func (o *PeriodType) HasIsoFormat() bool {
	if o != nil && !IsNil(o.IsoFormat) {
		return true
	}

	return false
}

// SetIsoFormat gets a reference to the given string and assigns it to the IsoFormat field.
func (o *PeriodType) SetIsoFormat(v string) {
	o.IsoFormat = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PeriodType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PeriodType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PeriodType) SetName(v string) {
	o.Name = &v
}

func (o PeriodType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeriodType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["frequencyOrder"] = o.FrequencyOrder
	if !IsNil(o.IsoDuration) {
		toSerialize["isoDuration"] = o.IsoDuration
	}
	if !IsNil(o.IsoFormat) {
		toSerialize["isoFormat"] = o.IsoFormat
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

func (o *PeriodType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"frequencyOrder",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPeriodType := _PeriodType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPeriodType)

	if err != nil {
		return err
	}

	*o = PeriodType(varPeriodType)

	return err
}

type NullablePeriodType struct {
	value *PeriodType
	isSet bool
}

func (v NullablePeriodType) Get() *PeriodType {
	return v.value
}

func (v *NullablePeriodType) Set(val *PeriodType) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriodType) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriodType(val *PeriodType) *NullablePeriodType {
	return &NullablePeriodType{value: val, isSet: true}
}

func (v NullablePeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
