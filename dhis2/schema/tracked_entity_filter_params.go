/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TrackedEntityFilterParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackedEntityFilterParams{}

// TrackedEntityFilterParams struct for TrackedEntityFilterParams
type TrackedEntityFilterParams struct {
	AttributeValues         []AttributeValueParams                `json:"attributeValues,omitempty"`
	Code                    *string                               `json:"code,omitempty"`
	Created                 *time.Time                            `json:"created,omitempty"`
	CreatedBy               *AggregateDataExchangeParamsCreatedBy `json:"createdBy,omitempty"`
	Description             *string                               `json:"description,omitempty"`
	DisplayDescription      *string                               `json:"displayDescription,omitempty"`
	DisplayName             *string                               `json:"displayName,omitempty"`
	EnrollmentCreatedPeriod *FilterPeriod                         `json:"enrollmentCreatedPeriod,omitempty"`
	EnrollmentStatus        EnrollmentStatus                      `json:"enrollmentStatus"`
	EntityQueryCriteria     *EntityQueryCriteria                  `json:"entityQueryCriteria,omitempty"`
	EventFilters            []EventFilterInfo                     `json:"eventFilters,omitempty"`
	Favorite                *bool                                 `json:"favorite,omitempty"`
	Favorites               []string                              `json:"favorites,omitempty"`
	Followup                *bool                                 `json:"followup,omitempty"`
	Id                      *string                               `json:"id,omitempty"`
	LastUpdated             *time.Time                            `json:"lastUpdated,omitempty"`
	LastUpdatedBy           *AggregateDataExchangeParamsCreatedBy `json:"lastUpdatedBy,omitempty"`
	Name                    *string                               `json:"name,omitempty"`
	Program                 *ProgramParams                        `json:"program,omitempty"`
	Sharing                 *Sharing                              `json:"sharing,omitempty"`
	SortOrder               int32                                 `json:"sortOrder"`
	Style                   *ObjectStyle                          `json:"style,omitempty"`
	Translations            []Translation                         `json:"translations,omitempty"`
}

type _TrackedEntityFilterParams TrackedEntityFilterParams

// NewTrackedEntityFilterParams instantiates a new TrackedEntityFilterParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackedEntityFilterParams(enrollmentStatus EnrollmentStatus, sortOrder int32) *TrackedEntityFilterParams {
	this := TrackedEntityFilterParams{}
	this.EnrollmentStatus = enrollmentStatus
	this.SortOrder = sortOrder
	return &this
}

// NewTrackedEntityFilterParamsWithDefaults instantiates a new TrackedEntityFilterParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackedEntityFilterParamsWithDefaults() *TrackedEntityFilterParams {
	this := TrackedEntityFilterParams{}
	return &this
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *TrackedEntityFilterParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TrackedEntityFilterParams) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *TrackedEntityFilterParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *TrackedEntityFilterParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TrackedEntityFilterParams) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *TrackedEntityFilterParams) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *TrackedEntityFilterParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnrollmentCreatedPeriod returns the EnrollmentCreatedPeriod field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetEnrollmentCreatedPeriod() FilterPeriod {
	if o == nil || IsNil(o.EnrollmentCreatedPeriod) {
		var ret FilterPeriod
		return ret
	}
	return *o.EnrollmentCreatedPeriod
}

// GetEnrollmentCreatedPeriodOk returns a tuple with the EnrollmentCreatedPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetEnrollmentCreatedPeriodOk() (*FilterPeriod, bool) {
	if o == nil || IsNil(o.EnrollmentCreatedPeriod) {
		return nil, false
	}
	return o.EnrollmentCreatedPeriod, true
}

// HasEnrollmentCreatedPeriod returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasEnrollmentCreatedPeriod() bool {
	if o != nil && !IsNil(o.EnrollmentCreatedPeriod) {
		return true
	}

	return false
}

// SetEnrollmentCreatedPeriod gets a reference to the given FilterPeriod and assigns it to the EnrollmentCreatedPeriod field.
func (o *TrackedEntityFilterParams) SetEnrollmentCreatedPeriod(v FilterPeriod) {
	o.EnrollmentCreatedPeriod = &v
}

// GetEnrollmentStatus returns the EnrollmentStatus field value
func (o *TrackedEntityFilterParams) GetEnrollmentStatus() EnrollmentStatus {
	if o == nil {
		var ret EnrollmentStatus
		return ret
	}

	return o.EnrollmentStatus
}

// GetEnrollmentStatusOk returns a tuple with the EnrollmentStatus field value
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetEnrollmentStatusOk() (*EnrollmentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnrollmentStatus, true
}

// SetEnrollmentStatus sets field value
func (o *TrackedEntityFilterParams) SetEnrollmentStatus(v EnrollmentStatus) {
	o.EnrollmentStatus = v
}

// GetEntityQueryCriteria returns the EntityQueryCriteria field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetEntityQueryCriteria() EntityQueryCriteria {
	if o == nil || IsNil(o.EntityQueryCriteria) {
		var ret EntityQueryCriteria
		return ret
	}
	return *o.EntityQueryCriteria
}

// GetEntityQueryCriteriaOk returns a tuple with the EntityQueryCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetEntityQueryCriteriaOk() (*EntityQueryCriteria, bool) {
	if o == nil || IsNil(o.EntityQueryCriteria) {
		return nil, false
	}
	return o.EntityQueryCriteria, true
}

// HasEntityQueryCriteria returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasEntityQueryCriteria() bool {
	if o != nil && !IsNil(o.EntityQueryCriteria) {
		return true
	}

	return false
}

// SetEntityQueryCriteria gets a reference to the given EntityQueryCriteria and assigns it to the EntityQueryCriteria field.
func (o *TrackedEntityFilterParams) SetEntityQueryCriteria(v EntityQueryCriteria) {
	o.EntityQueryCriteria = &v
}

// GetEventFilters returns the EventFilters field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetEventFilters() []EventFilterInfo {
	if o == nil || IsNil(o.EventFilters) {
		var ret []EventFilterInfo
		return ret
	}
	return o.EventFilters
}

// GetEventFiltersOk returns a tuple with the EventFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetEventFiltersOk() ([]EventFilterInfo, bool) {
	if o == nil || IsNil(o.EventFilters) {
		return nil, false
	}
	return o.EventFilters, true
}

// HasEventFilters returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasEventFilters() bool {
	if o != nil && !IsNil(o.EventFilters) {
		return true
	}

	return false
}

// SetEventFilters gets a reference to the given []EventFilterInfo and assigns it to the EventFilters field.
func (o *TrackedEntityFilterParams) SetEventFilters(v []EventFilterInfo) {
	o.EventFilters = v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *TrackedEntityFilterParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *TrackedEntityFilterParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFollowup returns the Followup field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetFollowup() bool {
	if o == nil || IsNil(o.Followup) {
		var ret bool
		return ret
	}
	return *o.Followup
}

// GetFollowupOk returns a tuple with the Followup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetFollowupOk() (*bool, bool) {
	if o == nil || IsNil(o.Followup) {
		return nil, false
	}
	return o.Followup, true
}

// HasFollowup returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasFollowup() bool {
	if o != nil && !IsNil(o.Followup) {
		return true
	}

	return false
}

// SetFollowup gets a reference to the given bool and assigns it to the Followup field.
func (o *TrackedEntityFilterParams) SetFollowup(v bool) {
	o.Followup = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TrackedEntityFilterParams) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *TrackedEntityFilterParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *TrackedEntityFilterParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TrackedEntityFilterParams) SetName(v string) {
	o.Name = &v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetProgram() ProgramParams {
	if o == nil || IsNil(o.Program) {
		var ret ProgramParams
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetProgramOk() (*ProgramParams, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given ProgramParams and assigns it to the Program field.
func (o *TrackedEntityFilterParams) SetProgram(v ProgramParams) {
	o.Program = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *TrackedEntityFilterParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetSortOrder returns the SortOrder field value
func (o *TrackedEntityFilterParams) GetSortOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortOrder, true
}

// SetSortOrder sets field value
func (o *TrackedEntityFilterParams) SetSortOrder(v int32) {
	o.SortOrder = v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetStyle() ObjectStyle {
	if o == nil || IsNil(o.Style) {
		var ret ObjectStyle
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetStyleOk() (*ObjectStyle, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given ObjectStyle and assigns it to the Style field.
func (o *TrackedEntityFilterParams) SetStyle(v ObjectStyle) {
	o.Style = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *TrackedEntityFilterParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityFilterParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *TrackedEntityFilterParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *TrackedEntityFilterParams) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o TrackedEntityFilterParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackedEntityFilterParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EnrollmentCreatedPeriod) {
		toSerialize["enrollmentCreatedPeriod"] = o.EnrollmentCreatedPeriod
	}
	toSerialize["enrollmentStatus"] = o.EnrollmentStatus
	if !IsNil(o.EntityQueryCriteria) {
		toSerialize["entityQueryCriteria"] = o.EntityQueryCriteria
	}
	if !IsNil(o.EventFilters) {
		toSerialize["eventFilters"] = o.EventFilters
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Followup) {
		toSerialize["followup"] = o.Followup
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	toSerialize["sortOrder"] = o.SortOrder
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

func (o *TrackedEntityFilterParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enrollmentStatus",
		"sortOrder",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackedEntityFilterParams := _TrackedEntityFilterParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackedEntityFilterParams)

	if err != nil {
		return err
	}

	*o = TrackedEntityFilterParams(varTrackedEntityFilterParams)

	return err
}

type NullableTrackedEntityFilterParams struct {
	value *TrackedEntityFilterParams
	isSet bool
}

func (v NullableTrackedEntityFilterParams) Get() *TrackedEntityFilterParams {
	return v.value
}

func (v *NullableTrackedEntityFilterParams) Set(val *TrackedEntityFilterParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackedEntityFilterParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackedEntityFilterParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackedEntityFilterParams(val *TrackedEntityFilterParams) *NullableTrackedEntityFilterParams {
	return &NullableTrackedEntityFilterParams{value: val, isSet: true}
}

func (v NullableTrackedEntityFilterParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackedEntityFilterParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
