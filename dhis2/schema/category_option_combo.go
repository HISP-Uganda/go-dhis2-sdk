/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CategoryOptionCombo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategoryOptionCombo{}

// CategoryOptionCombo struct for CategoryOptionCombo
type CategoryOptionCombo struct {
	Access             *Access                  `json:"access,omitempty"`
	AggregationType    AggregationType          `json:"aggregationType"`
	AttributeValues    []AttributeValue         `json:"attributeValues,omitempty"`
	CategoryCombo      *BaseIdentifiableObject  `json:"categoryCombo,omitempty"`
	CategoryOptions    []BaseIdentifiableObject `json:"categoryOptions,omitempty"`
	Code               *string                  `json:"code,omitempty"`
	Created            *time.Time               `json:"created,omitempty"`
	CreatedBy          *UserDto                 `json:"createdBy,omitempty"`
	Description        *string                  `json:"description,omitempty"`
	DimensionItem      *string                  `json:"dimensionItem,omitempty"`
	DimensionItemType  DimensionItemType        `json:"dimensionItemType"`
	DisplayDescription *string                  `json:"displayDescription,omitempty"`
	DisplayFormName    *string                  `json:"displayFormName,omitempty"`
	DisplayName        *string                  `json:"displayName,omitempty"`
	DisplayShortName   *string                  `json:"displayShortName,omitempty"`
	Favorite           *bool                    `json:"favorite,omitempty"`
	Favorites          []string                 `json:"favorites,omitempty"`
	FormName           *string                  `json:"formName,omitempty"`
	Href               *string                  `json:"href,omitempty"`
	Id                 *string                  `json:"id,omitempty"`
	IgnoreApproval     *bool                    `json:"ignoreApproval,omitempty"`
	LastUpdated        *time.Time               `json:"lastUpdated,omitempty"`
	LastUpdatedBy      *UserDto                 `json:"lastUpdatedBy,omitempty"`
	LegendSet          *LegendSet               `json:"legendSet,omitempty"`
	LegendSets         []LegendSet              `json:"legendSets,omitempty"`
	QueryMods          *QueryModifiers          `json:"queryMods,omitempty"`
	Sharing            *Sharing                 `json:"sharing,omitempty"`
	Translations       []Translation            `json:"translations,omitempty"`
}

type _CategoryOptionCombo CategoryOptionCombo

// NewCategoryOptionCombo instantiates a new CategoryOptionCombo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryOptionCombo(aggregationType AggregationType, dimensionItemType DimensionItemType) *CategoryOptionCombo {
	this := CategoryOptionCombo{}
	this.AggregationType = aggregationType
	this.DimensionItemType = dimensionItemType
	return &this
}

// NewCategoryOptionComboWithDefaults instantiates a new CategoryOptionCombo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryOptionComboWithDefaults() *CategoryOptionCombo {
	this := CategoryOptionCombo{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *CategoryOptionCombo) SetAccess(v Access) {
	o.Access = &v
}

// GetAggregationType returns the AggregationType field value
func (o *CategoryOptionCombo) GetAggregationType() AggregationType {
	if o == nil {
		var ret AggregationType
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetAggregationTypeOk() (*AggregationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *CategoryOptionCombo) SetAggregationType(v AggregationType) {
	o.AggregationType = v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *CategoryOptionCombo) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCategoryCombo returns the CategoryCombo field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetCategoryCombo() BaseIdentifiableObject {
	if o == nil || IsNil(o.CategoryCombo) {
		var ret BaseIdentifiableObject
		return ret
	}
	return *o.CategoryCombo
}

// GetCategoryComboOk returns a tuple with the CategoryCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetCategoryComboOk() (*BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.CategoryCombo) {
		return nil, false
	}
	return o.CategoryCombo, true
}

// HasCategoryCombo returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasCategoryCombo() bool {
	if o != nil && !IsNil(o.CategoryCombo) {
		return true
	}

	return false
}

// SetCategoryCombo gets a reference to the given BaseIdentifiableObject and assigns it to the CategoryCombo field.
func (o *CategoryOptionCombo) SetCategoryCombo(v BaseIdentifiableObject) {
	o.CategoryCombo = &v
}

// GetCategoryOptions returns the CategoryOptions field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetCategoryOptions() []BaseIdentifiableObject {
	if o == nil || IsNil(o.CategoryOptions) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.CategoryOptions
}

// GetCategoryOptionsOk returns a tuple with the CategoryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetCategoryOptionsOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.CategoryOptions) {
		return nil, false
	}
	return o.CategoryOptions, true
}

// HasCategoryOptions returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasCategoryOptions() bool {
	if o != nil && !IsNil(o.CategoryOptions) {
		return true
	}

	return false
}

// SetCategoryOptions gets a reference to the given []BaseIdentifiableObject and assigns it to the CategoryOptions field.
func (o *CategoryOptionCombo) SetCategoryOptions(v []BaseIdentifiableObject) {
	o.CategoryOptions = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CategoryOptionCombo) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *CategoryOptionCombo) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetCreatedBy() UserDto {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserDto
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetCreatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserDto and assigns it to the CreatedBy field.
func (o *CategoryOptionCombo) SetCreatedBy(v UserDto) {
	o.CreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CategoryOptionCombo) SetDescription(v string) {
	o.Description = &v
}

// GetDimensionItem returns the DimensionItem field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetDimensionItem() string {
	if o == nil || IsNil(o.DimensionItem) {
		var ret string
		return ret
	}
	return *o.DimensionItem
}

// GetDimensionItemOk returns a tuple with the DimensionItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetDimensionItemOk() (*string, bool) {
	if o == nil || IsNil(o.DimensionItem) {
		return nil, false
	}
	return o.DimensionItem, true
}

// HasDimensionItem returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasDimensionItem() bool {
	if o != nil && !IsNil(o.DimensionItem) {
		return true
	}

	return false
}

// SetDimensionItem gets a reference to the given string and assigns it to the DimensionItem field.
func (o *CategoryOptionCombo) SetDimensionItem(v string) {
	o.DimensionItem = &v
}

// GetDimensionItemType returns the DimensionItemType field value
func (o *CategoryOptionCombo) GetDimensionItemType() DimensionItemType {
	if o == nil {
		var ret DimensionItemType
		return ret
	}

	return o.DimensionItemType
}

// GetDimensionItemTypeOk returns a tuple with the DimensionItemType field value
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetDimensionItemTypeOk() (*DimensionItemType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DimensionItemType, true
}

// SetDimensionItemType sets field value
func (o *CategoryOptionCombo) SetDimensionItemType(v DimensionItemType) {
	o.DimensionItemType = v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *CategoryOptionCombo) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayFormName returns the DisplayFormName field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetDisplayFormName() string {
	if o == nil || IsNil(o.DisplayFormName) {
		var ret string
		return ret
	}
	return *o.DisplayFormName
}

// GetDisplayFormNameOk returns a tuple with the DisplayFormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetDisplayFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayFormName) {
		return nil, false
	}
	return o.DisplayFormName, true
}

// HasDisplayFormName returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasDisplayFormName() bool {
	if o != nil && !IsNil(o.DisplayFormName) {
		return true
	}

	return false
}

// SetDisplayFormName gets a reference to the given string and assigns it to the DisplayFormName field.
func (o *CategoryOptionCombo) SetDisplayFormName(v string) {
	o.DisplayFormName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CategoryOptionCombo) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *CategoryOptionCombo) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *CategoryOptionCombo) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *CategoryOptionCombo) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *CategoryOptionCombo) SetFormName(v string) {
	o.FormName = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *CategoryOptionCombo) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CategoryOptionCombo) SetId(v string) {
	o.Id = &v
}

// GetIgnoreApproval returns the IgnoreApproval field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetIgnoreApproval() bool {
	if o == nil || IsNil(o.IgnoreApproval) {
		var ret bool
		return ret
	}
	return *o.IgnoreApproval
}

// GetIgnoreApprovalOk returns a tuple with the IgnoreApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetIgnoreApprovalOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreApproval) {
		return nil, false
	}
	return o.IgnoreApproval, true
}

// HasIgnoreApproval returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasIgnoreApproval() bool {
	if o != nil && !IsNil(o.IgnoreApproval) {
		return true
	}

	return false
}

// SetIgnoreApproval gets a reference to the given bool and assigns it to the IgnoreApproval field.
func (o *CategoryOptionCombo) SetIgnoreApproval(v bool) {
	o.IgnoreApproval = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *CategoryOptionCombo) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetLastUpdatedBy() UserDto {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret UserDto
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetLastUpdatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given UserDto and assigns it to the LastUpdatedBy field.
func (o *CategoryOptionCombo) SetLastUpdatedBy(v UserDto) {
	o.LastUpdatedBy = &v
}

// GetLegendSet returns the LegendSet field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetLegendSet() LegendSet {
	if o == nil || IsNil(o.LegendSet) {
		var ret LegendSet
		return ret
	}
	return *o.LegendSet
}

// GetLegendSetOk returns a tuple with the LegendSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetLegendSetOk() (*LegendSet, bool) {
	if o == nil || IsNil(o.LegendSet) {
		return nil, false
	}
	return o.LegendSet, true
}

// HasLegendSet returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasLegendSet() bool {
	if o != nil && !IsNil(o.LegendSet) {
		return true
	}

	return false
}

// SetLegendSet gets a reference to the given LegendSet and assigns it to the LegendSet field.
func (o *CategoryOptionCombo) SetLegendSet(v LegendSet) {
	o.LegendSet = &v
}

// GetLegendSets returns the LegendSets field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetLegendSets() []LegendSet {
	if o == nil || IsNil(o.LegendSets) {
		var ret []LegendSet
		return ret
	}
	return o.LegendSets
}

// GetLegendSetsOk returns a tuple with the LegendSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetLegendSetsOk() ([]LegendSet, bool) {
	if o == nil || IsNil(o.LegendSets) {
		return nil, false
	}
	return o.LegendSets, true
}

// HasLegendSets returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasLegendSets() bool {
	if o != nil && !IsNil(o.LegendSets) {
		return true
	}

	return false
}

// SetLegendSets gets a reference to the given []LegendSet and assigns it to the LegendSets field.
func (o *CategoryOptionCombo) SetLegendSets(v []LegendSet) {
	o.LegendSets = v
}

// GetQueryMods returns the QueryMods field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetQueryMods() QueryModifiers {
	if o == nil || IsNil(o.QueryMods) {
		var ret QueryModifiers
		return ret
	}
	return *o.QueryMods
}

// GetQueryModsOk returns a tuple with the QueryMods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetQueryModsOk() (*QueryModifiers, bool) {
	if o == nil || IsNil(o.QueryMods) {
		return nil, false
	}
	return o.QueryMods, true
}

// HasQueryMods returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasQueryMods() bool {
	if o != nil && !IsNil(o.QueryMods) {
		return true
	}

	return false
}

// SetQueryMods gets a reference to the given QueryModifiers and assigns it to the QueryMods field.
func (o *CategoryOptionCombo) SetQueryMods(v QueryModifiers) {
	o.QueryMods = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *CategoryOptionCombo) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *CategoryOptionCombo) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryOptionCombo) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *CategoryOptionCombo) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *CategoryOptionCombo) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o CategoryOptionCombo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategoryOptionCombo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	toSerialize["aggregationType"] = o.AggregationType
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.CategoryCombo) {
		toSerialize["categoryCombo"] = o.CategoryCombo
	}
	if !IsNil(o.CategoryOptions) {
		toSerialize["categoryOptions"] = o.CategoryOptions
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DimensionItem) {
		toSerialize["dimensionItem"] = o.DimensionItem
	}
	toSerialize["dimensionItemType"] = o.DimensionItemType
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayFormName) {
		toSerialize["displayFormName"] = o.DisplayFormName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IgnoreApproval) {
		toSerialize["ignoreApproval"] = o.IgnoreApproval
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LegendSet) {
		toSerialize["legendSet"] = o.LegendSet
	}
	if !IsNil(o.LegendSets) {
		toSerialize["legendSets"] = o.LegendSets
	}
	if !IsNil(o.QueryMods) {
		toSerialize["queryMods"] = o.QueryMods
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

func (o *CategoryOptionCombo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregationType",
		"dimensionItemType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCategoryOptionCombo := _CategoryOptionCombo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCategoryOptionCombo)

	if err != nil {
		return err
	}

	*o = CategoryOptionCombo(varCategoryOptionCombo)

	return err
}

type NullableCategoryOptionCombo struct {
	value *CategoryOptionCombo
	isSet bool
}

func (v NullableCategoryOptionCombo) Get() *CategoryOptionCombo {
	return v.value
}

func (v *NullableCategoryOptionCombo) Set(val *CategoryOptionCombo) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryOptionCombo) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryOptionCombo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryOptionCombo(val *CategoryOptionCombo) *NullableCategoryOptionCombo {
	return &NullableCategoryOptionCombo{value: val, isSet: true}
}

func (v NullableCategoryOptionCombo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryOptionCombo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
