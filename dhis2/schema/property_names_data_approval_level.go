/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesDataApprovalLevel the model 'PropertyNamesDataApprovalLevel'
type PropertyNamesDataApprovalLevel string

// List of PropertyNames_DataApprovalLevel
const (
	PROPERTYNAMESDATAAPPROVALLEVEL_ACCESS                    PropertyNamesDataApprovalLevel = "access"
	PROPERTYNAMESDATAAPPROVALLEVEL_ATTRIBUTE_VALUES          PropertyNamesDataApprovalLevel = "attributeValues"
	PROPERTYNAMESDATAAPPROVALLEVEL_CATEGORY_OPTION_GROUP_SET PropertyNamesDataApprovalLevel = "categoryOptionGroupSet"
	PROPERTYNAMESDATAAPPROVALLEVEL_CODE                      PropertyNamesDataApprovalLevel = "code"
	PROPERTYNAMESDATAAPPROVALLEVEL_CREATED                   PropertyNamesDataApprovalLevel = "created"
	PROPERTYNAMESDATAAPPROVALLEVEL_CREATED_BY                PropertyNamesDataApprovalLevel = "createdBy"
	PROPERTYNAMESDATAAPPROVALLEVEL_DISPLAY_NAME              PropertyNamesDataApprovalLevel = "displayName"
	PROPERTYNAMESDATAAPPROVALLEVEL_EXTERNAL_ACCESS           PropertyNamesDataApprovalLevel = "externalAccess"
	PROPERTYNAMESDATAAPPROVALLEVEL_FAVORITE                  PropertyNamesDataApprovalLevel = "favorite"
	PROPERTYNAMESDATAAPPROVALLEVEL_FAVORITES                 PropertyNamesDataApprovalLevel = "favorites"
	PROPERTYNAMESDATAAPPROVALLEVEL_HREF                      PropertyNamesDataApprovalLevel = "href"
	PROPERTYNAMESDATAAPPROVALLEVEL_ID                        PropertyNamesDataApprovalLevel = "id"
	PROPERTYNAMESDATAAPPROVALLEVEL_LAST_UPDATED              PropertyNamesDataApprovalLevel = "lastUpdated"
	PROPERTYNAMESDATAAPPROVALLEVEL_LAST_UPDATED_BY           PropertyNamesDataApprovalLevel = "lastUpdatedBy"
	PROPERTYNAMESDATAAPPROVALLEVEL_LEVEL                     PropertyNamesDataApprovalLevel = "level"
	PROPERTYNAMESDATAAPPROVALLEVEL_NAME                      PropertyNamesDataApprovalLevel = "name"
	PROPERTYNAMESDATAAPPROVALLEVEL_ORG_UNIT_LEVEL            PropertyNamesDataApprovalLevel = "orgUnitLevel"
	PROPERTYNAMESDATAAPPROVALLEVEL_ORG_UNIT_LEVEL_NAME       PropertyNamesDataApprovalLevel = "orgUnitLevelName"
	PROPERTYNAMESDATAAPPROVALLEVEL_PUBLIC_ACCESS             PropertyNamesDataApprovalLevel = "publicAccess"
	PROPERTYNAMESDATAAPPROVALLEVEL_SHARING                   PropertyNamesDataApprovalLevel = "sharing"
	PROPERTYNAMESDATAAPPROVALLEVEL_TRANSLATIONS              PropertyNamesDataApprovalLevel = "translations"
	PROPERTYNAMESDATAAPPROVALLEVEL_USER                      PropertyNamesDataApprovalLevel = "user"
	PROPERTYNAMESDATAAPPROVALLEVEL_USER_ACCESSES             PropertyNamesDataApprovalLevel = "userAccesses"
	PROPERTYNAMESDATAAPPROVALLEVEL_USER_GROUP_ACCESSES       PropertyNamesDataApprovalLevel = "userGroupAccesses"
)

// All allowed values of PropertyNamesDataApprovalLevel enum
var AllowedPropertyNamesDataApprovalLevelEnumValues = []PropertyNamesDataApprovalLevel{
	"access",
	"attributeValues",
	"categoryOptionGroupSet",
	"code",
	"created",
	"createdBy",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"level",
	"name",
	"orgUnitLevel",
	"orgUnitLevelName",
	"publicAccess",
	"sharing",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesDataApprovalLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesDataApprovalLevel(value)
	for _, existing := range AllowedPropertyNamesDataApprovalLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesDataApprovalLevel", value)
}

// NewPropertyNamesDataApprovalLevelFromValue returns a pointer to a valid PropertyNamesDataApprovalLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesDataApprovalLevelFromValue(v string) (*PropertyNamesDataApprovalLevel, error) {
	ev := PropertyNamesDataApprovalLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesDataApprovalLevel: valid values are %v", v, AllowedPropertyNamesDataApprovalLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesDataApprovalLevel) IsValid() bool {
	for _, existing := range AllowedPropertyNamesDataApprovalLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_DataApprovalLevel value
func (v PropertyNamesDataApprovalLevel) Ptr() *PropertyNamesDataApprovalLevel {
	return &v
}

type NullablePropertyNamesDataApprovalLevel struct {
	value *PropertyNamesDataApprovalLevel
	isSet bool
}

func (v NullablePropertyNamesDataApprovalLevel) Get() *PropertyNamesDataApprovalLevel {
	return v.value
}

func (v *NullablePropertyNamesDataApprovalLevel) Set(val *PropertyNamesDataApprovalLevel) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesDataApprovalLevel) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesDataApprovalLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesDataApprovalLevel(val *PropertyNamesDataApprovalLevel) *NullablePropertyNamesDataApprovalLevel {
	return &NullablePropertyNamesDataApprovalLevel{value: val, isSet: true}
}

func (v NullablePropertyNamesDataApprovalLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesDataApprovalLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
