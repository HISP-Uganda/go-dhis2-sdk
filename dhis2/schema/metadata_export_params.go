/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MetadataExportParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataExportParams{}

// MetadataExportParams struct for MetadataExportParams
type MetadataExportParams struct {
	Classes                      []string                                          `json:"classes,omitempty"`
	DefaultFields                []string                                          `json:"defaultFields,omitempty"`
	DefaultFilter                []string                                          `json:"defaultFilter,omitempty"`
	DefaultOrder                 []string                                          `json:"defaultOrder,omitempty"`
	Defaults                     string                                            `json:"defaults"`
	Download                     *bool                                             `json:"download,omitempty"`
	ExportWithDependencies       *bool                                             `json:"exportWithDependencies,omitempty"`
	InclusionStrategy            *string                                           `json:"inclusionStrategy,omitempty"`
	ObjectExportWithDependencies *MetadataExportParamsObjectExportWithDependencies `json:"objectExportWithDependencies,omitempty"`
	SkipSharing                  *bool                                             `json:"skipSharing,omitempty"`
	User                         *AggregateDataExchangeCreatedBy                   `json:"user,omitempty"`
	Username                     *string                                           `json:"username,omitempty"`
}

type _MetadataExportParams MetadataExportParams

// NewMetadataExportParams instantiates a new MetadataExportParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataExportParams(defaults string) *MetadataExportParams {
	this := MetadataExportParams{}
	this.Defaults = defaults
	return &this
}

// NewMetadataExportParamsWithDefaults instantiates a new MetadataExportParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataExportParamsWithDefaults() *MetadataExportParams {
	this := MetadataExportParams{}
	return &this
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *MetadataExportParams) GetClasses() []string {
	if o == nil || IsNil(o.Classes) {
		var ret []string
		return ret
	}
	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetClassesOk() ([]string, bool) {
	if o == nil || IsNil(o.Classes) {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *MetadataExportParams) HasClasses() bool {
	if o != nil && !IsNil(o.Classes) {
		return true
	}

	return false
}

// SetClasses gets a reference to the given []string and assigns it to the Classes field.
func (o *MetadataExportParams) SetClasses(v []string) {
	o.Classes = v
}

// GetDefaultFields returns the DefaultFields field value if set, zero value otherwise.
func (o *MetadataExportParams) GetDefaultFields() []string {
	if o == nil || IsNil(o.DefaultFields) {
		var ret []string
		return ret
	}
	return o.DefaultFields
}

// GetDefaultFieldsOk returns a tuple with the DefaultFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetDefaultFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.DefaultFields) {
		return nil, false
	}
	return o.DefaultFields, true
}

// HasDefaultFields returns a boolean if a field has been set.
func (o *MetadataExportParams) HasDefaultFields() bool {
	if o != nil && !IsNil(o.DefaultFields) {
		return true
	}

	return false
}

// SetDefaultFields gets a reference to the given []string and assigns it to the DefaultFields field.
func (o *MetadataExportParams) SetDefaultFields(v []string) {
	o.DefaultFields = v
}

// GetDefaultFilter returns the DefaultFilter field value if set, zero value otherwise.
func (o *MetadataExportParams) GetDefaultFilter() []string {
	if o == nil || IsNil(o.DefaultFilter) {
		var ret []string
		return ret
	}
	return o.DefaultFilter
}

// GetDefaultFilterOk returns a tuple with the DefaultFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetDefaultFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.DefaultFilter) {
		return nil, false
	}
	return o.DefaultFilter, true
}

// HasDefaultFilter returns a boolean if a field has been set.
func (o *MetadataExportParams) HasDefaultFilter() bool {
	if o != nil && !IsNil(o.DefaultFilter) {
		return true
	}

	return false
}

// SetDefaultFilter gets a reference to the given []string and assigns it to the DefaultFilter field.
func (o *MetadataExportParams) SetDefaultFilter(v []string) {
	o.DefaultFilter = v
}

// GetDefaultOrder returns the DefaultOrder field value if set, zero value otherwise.
func (o *MetadataExportParams) GetDefaultOrder() []string {
	if o == nil || IsNil(o.DefaultOrder) {
		var ret []string
		return ret
	}
	return o.DefaultOrder
}

// GetDefaultOrderOk returns a tuple with the DefaultOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetDefaultOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.DefaultOrder) {
		return nil, false
	}
	return o.DefaultOrder, true
}

// HasDefaultOrder returns a boolean if a field has been set.
func (o *MetadataExportParams) HasDefaultOrder() bool {
	if o != nil && !IsNil(o.DefaultOrder) {
		return true
	}

	return false
}

// SetDefaultOrder gets a reference to the given []string and assigns it to the DefaultOrder field.
func (o *MetadataExportParams) SetDefaultOrder(v []string) {
	o.DefaultOrder = v
}

// GetDefaults returns the Defaults field value
func (o *MetadataExportParams) GetDefaults() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Defaults
}

// GetDefaultsOk returns a tuple with the Defaults field value
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetDefaultsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Defaults, true
}

// SetDefaults sets field value
func (o *MetadataExportParams) SetDefaults(v string) {
	o.Defaults = v
}

// GetDownload returns the Download field value if set, zero value otherwise.
func (o *MetadataExportParams) GetDownload() bool {
	if o == nil || IsNil(o.Download) {
		var ret bool
		return ret
	}
	return *o.Download
}

// GetDownloadOk returns a tuple with the Download field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetDownloadOk() (*bool, bool) {
	if o == nil || IsNil(o.Download) {
		return nil, false
	}
	return o.Download, true
}

// HasDownload returns a boolean if a field has been set.
func (o *MetadataExportParams) HasDownload() bool {
	if o != nil && !IsNil(o.Download) {
		return true
	}

	return false
}

// SetDownload gets a reference to the given bool and assigns it to the Download field.
func (o *MetadataExportParams) SetDownload(v bool) {
	o.Download = &v
}

// GetExportWithDependencies returns the ExportWithDependencies field value if set, zero value otherwise.
func (o *MetadataExportParams) GetExportWithDependencies() bool {
	if o == nil || IsNil(o.ExportWithDependencies) {
		var ret bool
		return ret
	}
	return *o.ExportWithDependencies
}

// GetExportWithDependenciesOk returns a tuple with the ExportWithDependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetExportWithDependenciesOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportWithDependencies) {
		return nil, false
	}
	return o.ExportWithDependencies, true
}

// HasExportWithDependencies returns a boolean if a field has been set.
func (o *MetadataExportParams) HasExportWithDependencies() bool {
	if o != nil && !IsNil(o.ExportWithDependencies) {
		return true
	}

	return false
}

// SetExportWithDependencies gets a reference to the given bool and assigns it to the ExportWithDependencies field.
func (o *MetadataExportParams) SetExportWithDependencies(v bool) {
	o.ExportWithDependencies = &v
}

// GetInclusionStrategy returns the InclusionStrategy field value if set, zero value otherwise.
func (o *MetadataExportParams) GetInclusionStrategy() string {
	if o == nil || IsNil(o.InclusionStrategy) {
		var ret string
		return ret
	}
	return *o.InclusionStrategy
}

// GetInclusionStrategyOk returns a tuple with the InclusionStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetInclusionStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.InclusionStrategy) {
		return nil, false
	}
	return o.InclusionStrategy, true
}

// HasInclusionStrategy returns a boolean if a field has been set.
func (o *MetadataExportParams) HasInclusionStrategy() bool {
	if o != nil && !IsNil(o.InclusionStrategy) {
		return true
	}

	return false
}

// SetInclusionStrategy gets a reference to the given string and assigns it to the InclusionStrategy field.
func (o *MetadataExportParams) SetInclusionStrategy(v string) {
	o.InclusionStrategy = &v
}

// GetObjectExportWithDependencies returns the ObjectExportWithDependencies field value if set, zero value otherwise.
func (o *MetadataExportParams) GetObjectExportWithDependencies() MetadataExportParamsObjectExportWithDependencies {
	if o == nil || IsNil(o.ObjectExportWithDependencies) {
		var ret MetadataExportParamsObjectExportWithDependencies
		return ret
	}
	return *o.ObjectExportWithDependencies
}

// GetObjectExportWithDependenciesOk returns a tuple with the ObjectExportWithDependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetObjectExportWithDependenciesOk() (*MetadataExportParamsObjectExportWithDependencies, bool) {
	if o == nil || IsNil(o.ObjectExportWithDependencies) {
		return nil, false
	}
	return o.ObjectExportWithDependencies, true
}

// HasObjectExportWithDependencies returns a boolean if a field has been set.
func (o *MetadataExportParams) HasObjectExportWithDependencies() bool {
	if o != nil && !IsNil(o.ObjectExportWithDependencies) {
		return true
	}

	return false
}

// SetObjectExportWithDependencies gets a reference to the given MetadataExportParamsObjectExportWithDependencies and assigns it to the ObjectExportWithDependencies field.
func (o *MetadataExportParams) SetObjectExportWithDependencies(v MetadataExportParamsObjectExportWithDependencies) {
	o.ObjectExportWithDependencies = &v
}

// GetSkipSharing returns the SkipSharing field value if set, zero value otherwise.
func (o *MetadataExportParams) GetSkipSharing() bool {
	if o == nil || IsNil(o.SkipSharing) {
		var ret bool
		return ret
	}
	return *o.SkipSharing
}

// GetSkipSharingOk returns a tuple with the SkipSharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetSkipSharingOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSharing) {
		return nil, false
	}
	return o.SkipSharing, true
}

// HasSkipSharing returns a boolean if a field has been set.
func (o *MetadataExportParams) HasSkipSharing() bool {
	if o != nil && !IsNil(o.SkipSharing) {
		return true
	}

	return false
}

// SetSkipSharing gets a reference to the given bool and assigns it to the SkipSharing field.
func (o *MetadataExportParams) SetSkipSharing(v bool) {
	o.SkipSharing = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *MetadataExportParams) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *MetadataExportParams) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *MetadataExportParams) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *MetadataExportParams) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataExportParams) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *MetadataExportParams) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *MetadataExportParams) SetUsername(v string) {
	o.Username = &v
}

func (o MetadataExportParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataExportParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Classes) {
		toSerialize["classes"] = o.Classes
	}
	if !IsNil(o.DefaultFields) {
		toSerialize["defaultFields"] = o.DefaultFields
	}
	if !IsNil(o.DefaultFilter) {
		toSerialize["defaultFilter"] = o.DefaultFilter
	}
	if !IsNil(o.DefaultOrder) {
		toSerialize["defaultOrder"] = o.DefaultOrder
	}
	toSerialize["defaults"] = o.Defaults
	if !IsNil(o.Download) {
		toSerialize["download"] = o.Download
	}
	if !IsNil(o.ExportWithDependencies) {
		toSerialize["exportWithDependencies"] = o.ExportWithDependencies
	}
	if !IsNil(o.InclusionStrategy) {
		toSerialize["inclusionStrategy"] = o.InclusionStrategy
	}
	if !IsNil(o.ObjectExportWithDependencies) {
		toSerialize["objectExportWithDependencies"] = o.ObjectExportWithDependencies
	}
	if !IsNil(o.SkipSharing) {
		toSerialize["skipSharing"] = o.SkipSharing
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

func (o *MetadataExportParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"defaults",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetadataExportParams := _MetadataExportParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetadataExportParams)

	if err != nil {
		return err
	}

	*o = MetadataExportParams(varMetadataExportParams)

	return err
}

type NullableMetadataExportParams struct {
	value *MetadataExportParams
	isSet bool
}

func (v NullableMetadataExportParams) Get() *MetadataExportParams {
	return v.value
}

func (v *NullableMetadataExportParams) Set(val *MetadataExportParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataExportParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataExportParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataExportParams(val *MetadataExportParams) *NullableMetadataExportParams {
	return &NullableMetadataExportParams{value: val, isSet: true}
}

func (v NullableMetadataExportParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataExportParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
