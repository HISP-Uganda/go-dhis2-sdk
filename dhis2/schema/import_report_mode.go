/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ImportReportMode the model 'ImportReportMode'
type ImportReportMode string

// List of ImportReportMode
const (
	IMPORTREPORTMODE_FULL             ImportReportMode = "FULL"
	IMPORTREPORTMODE_ERRORS           ImportReportMode = "ERRORS"
	IMPORTREPORTMODE_ERRORS_NOT_OWNER ImportReportMode = "ERRORS_NOT_OWNER"
	IMPORTREPORTMODE_DEBUG            ImportReportMode = "DEBUG"
)

// All allowed values of ImportReportMode enum
var AllowedImportReportModeEnumValues = []ImportReportMode{
	"FULL",
	"ERRORS",
	"ERRORS_NOT_OWNER",
	"DEBUG",
}

func (v *ImportReportMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImportReportMode(value)
	for _, existing := range AllowedImportReportModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImportReportMode", value)
}

// NewImportReportModeFromValue returns a pointer to a valid ImportReportMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImportReportModeFromValue(v string) (*ImportReportMode, error) {
	ev := ImportReportMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImportReportMode: valid values are %v", v, AllowedImportReportModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImportReportMode) IsValid() bool {
	for _, existing := range AllowedImportReportModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImportReportMode value
func (v ImportReportMode) Ptr() *ImportReportMode {
	return &v
}

type NullableImportReportMode struct {
	value *ImportReportMode
	isSet bool
}

func (v NullableImportReportMode) Get() *ImportReportMode {
	return v.value
}

func (v *NullableImportReportMode) Set(val *ImportReportMode) {
	v.value = val
	v.isSet = true
}

func (v NullableImportReportMode) IsSet() bool {
	return v.isSet
}

func (v *NullableImportReportMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportReportMode(val *ImportReportMode) *NullableImportReportMode {
	return &NullableImportReportMode{value: val, isSet: true}
}

func (v NullableImportReportMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportReportMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
