/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AuditGetDataApprovalAuditDalParameter - struct for AuditGetDataApprovalAuditDalParameter
type AuditGetDataApprovalAuditDalParameter struct {
	DataApprovalLevel *DataApprovalLevel
	ArrayOfString     *[]string
}

// DataApprovalLevelAsAuditGetDataApprovalAuditDalParameter is a convenience function that returns DataApprovalLevel wrapped in AuditGetDataApprovalAuditDalParameter
func DataApprovalLevelAsAuditGetDataApprovalAuditDalParameter(v *DataApprovalLevel) AuditGetDataApprovalAuditDalParameter {
	return AuditGetDataApprovalAuditDalParameter{
		DataApprovalLevel: v,
	}
}

// []stringAsAuditGetDataApprovalAuditDalParameter is a convenience function that returns []string wrapped in AuditGetDataApprovalAuditDalParameter
func ArrayOfStringAsAuditGetDataApprovalAuditDalParameter(v *[]string) AuditGetDataApprovalAuditDalParameter {
	return AuditGetDataApprovalAuditDalParameter{
		ArrayOfString: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuditGetDataApprovalAuditDalParameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DataApprovalLevel
	err = newStrictDecoder(data).Decode(&dst.DataApprovalLevel)
	if err == nil {
		jsonDataApprovalLevel, _ := json.Marshal(dst.DataApprovalLevel)
		if string(jsonDataApprovalLevel) == "{}" { // empty struct
			dst.DataApprovalLevel = nil
		} else {
			match++
		}
	} else {
		dst.DataApprovalLevel = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DataApprovalLevel = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AuditGetDataApprovalAuditDalParameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AuditGetDataApprovalAuditDalParameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuditGetDataApprovalAuditDalParameter) MarshalJSON() ([]byte, error) {
	if src.DataApprovalLevel != nil {
		return json.Marshal(&src.DataApprovalLevel)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuditGetDataApprovalAuditDalParameter) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DataApprovalLevel != nil {
		return obj.DataApprovalLevel
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableAuditGetDataApprovalAuditDalParameter struct {
	value *AuditGetDataApprovalAuditDalParameter
	isSet bool
}

func (v NullableAuditGetDataApprovalAuditDalParameter) Get() *AuditGetDataApprovalAuditDalParameter {
	return v.value
}

func (v *NullableAuditGetDataApprovalAuditDalParameter) Set(val *AuditGetDataApprovalAuditDalParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditGetDataApprovalAuditDalParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditGetDataApprovalAuditDalParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditGetDataApprovalAuditDalParameter(val *AuditGetDataApprovalAuditDalParameter) *NullableAuditGetDataApprovalAuditDalParameter {
	return &NullableAuditGetDataApprovalAuditDalParameter{value: val, isSet: true}
}

func (v NullableAuditGetDataApprovalAuditDalParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditGetDataApprovalAuditDalParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
