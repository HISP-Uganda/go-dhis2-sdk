/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ValidationMode the model 'ValidationMode'
type ValidationMode string

// List of ValidationMode
const (
	VALIDATIONMODE_FULL      ValidationMode = "FULL"
	VALIDATIONMODE_FAIL_FAST ValidationMode = "FAIL_FAST"
	VALIDATIONMODE_SKIP      ValidationMode = "SKIP"
)

// All allowed values of ValidationMode enum
var AllowedValidationModeEnumValues = []ValidationMode{
	"FULL",
	"FAIL_FAST",
	"SKIP",
}

func (v *ValidationMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValidationMode(value)
	for _, existing := range AllowedValidationModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValidationMode", value)
}

// NewValidationModeFromValue returns a pointer to a valid ValidationMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValidationModeFromValue(v string) (*ValidationMode, error) {
	ev := ValidationMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValidationMode: valid values are %v", v, AllowedValidationModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValidationMode) IsValid() bool {
	for _, existing := range AllowedValidationModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValidationMode value
func (v ValidationMode) Ptr() *ValidationMode {
	return &v
}

type NullableValidationMode struct {
	value *ValidationMode
	isSet bool
}

func (v NullableValidationMode) Get() *ValidationMode {
	return v.value
}

func (v *NullableValidationMode) Set(val *ValidationMode) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationMode) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationMode(val *ValidationMode) *NullableValidationMode {
	return &NullableValidationMode{value: val, isSet: true}
}

func (v NullableValidationMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
