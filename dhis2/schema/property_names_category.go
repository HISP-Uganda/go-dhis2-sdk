/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesCategory the model 'PropertyNamesCategory'
type PropertyNamesCategory string

// List of PropertyNames_Category
const (
	PROPERTYNAMESCATEGORY_ACCESS                  PropertyNamesCategory = "access"
	PROPERTYNAMESCATEGORY_AGGREGATION_TYPE        PropertyNamesCategory = "aggregationType"
	PROPERTYNAMESCATEGORY_ALL_ITEMS               PropertyNamesCategory = "allItems"
	PROPERTYNAMESCATEGORY_ATTRIBUTE_VALUES        PropertyNamesCategory = "attributeValues"
	PROPERTYNAMESCATEGORY_CATEGORY_COMBOS         PropertyNamesCategory = "categoryCombos"
	PROPERTYNAMESCATEGORY_CATEGORY_OPTIONS        PropertyNamesCategory = "categoryOptions"
	PROPERTYNAMESCATEGORY_CODE                    PropertyNamesCategory = "code"
	PROPERTYNAMESCATEGORY_CREATED                 PropertyNamesCategory = "created"
	PROPERTYNAMESCATEGORY_CREATED_BY              PropertyNamesCategory = "createdBy"
	PROPERTYNAMESCATEGORY_DATA_DIMENSION          PropertyNamesCategory = "dataDimension"
	PROPERTYNAMESCATEGORY_DATA_DIMENSION_TYPE     PropertyNamesCategory = "dataDimensionType"
	PROPERTYNAMESCATEGORY_DESCRIPTION             PropertyNamesCategory = "description"
	PROPERTYNAMESCATEGORY_DIMENSION               PropertyNamesCategory = "dimension"
	PROPERTYNAMESCATEGORY_DIMENSION_ITEM_KEYWORDS PropertyNamesCategory = "dimensionItemKeywords"
	PROPERTYNAMESCATEGORY_DISPLAY_DESCRIPTION     PropertyNamesCategory = "displayDescription"
	PROPERTYNAMESCATEGORY_DISPLAY_FORM_NAME       PropertyNamesCategory = "displayFormName"
	PROPERTYNAMESCATEGORY_DISPLAY_NAME            PropertyNamesCategory = "displayName"
	PROPERTYNAMESCATEGORY_DISPLAY_SHORT_NAME      PropertyNamesCategory = "displayShortName"
	PROPERTYNAMESCATEGORY_EXTERNAL_ACCESS         PropertyNamesCategory = "externalAccess"
	PROPERTYNAMESCATEGORY_FAVORITE                PropertyNamesCategory = "favorite"
	PROPERTYNAMESCATEGORY_FAVORITES               PropertyNamesCategory = "favorites"
	PROPERTYNAMESCATEGORY_FILTER                  PropertyNamesCategory = "filter"
	PROPERTYNAMESCATEGORY_FORM_NAME               PropertyNamesCategory = "formName"
	PROPERTYNAMESCATEGORY_HREF                    PropertyNamesCategory = "href"
	PROPERTYNAMESCATEGORY_ID                      PropertyNamesCategory = "id"
	PROPERTYNAMESCATEGORY_ITEMS                   PropertyNamesCategory = "items"
	PROPERTYNAMESCATEGORY_LAST_UPDATED            PropertyNamesCategory = "lastUpdated"
	PROPERTYNAMESCATEGORY_LAST_UPDATED_BY         PropertyNamesCategory = "lastUpdatedBy"
	PROPERTYNAMESCATEGORY_LEGEND_SET              PropertyNamesCategory = "legendSet"
	PROPERTYNAMESCATEGORY_NAME                    PropertyNamesCategory = "name"
	PROPERTYNAMESCATEGORY_OPTION_SET              PropertyNamesCategory = "optionSet"
	PROPERTYNAMESCATEGORY_PROGRAM_STAGE           PropertyNamesCategory = "programStage"
	PROPERTYNAMESCATEGORY_PUBLIC_ACCESS           PropertyNamesCategory = "publicAccess"
	PROPERTYNAMESCATEGORY_REPETITION              PropertyNamesCategory = "repetition"
	PROPERTYNAMESCATEGORY_SHARING                 PropertyNamesCategory = "sharing"
	PROPERTYNAMESCATEGORY_SHORT_NAME              PropertyNamesCategory = "shortName"
	PROPERTYNAMESCATEGORY_TRANSLATIONS            PropertyNamesCategory = "translations"
	PROPERTYNAMESCATEGORY_USER                    PropertyNamesCategory = "user"
	PROPERTYNAMESCATEGORY_USER_ACCESSES           PropertyNamesCategory = "userAccesses"
	PROPERTYNAMESCATEGORY_USER_GROUP_ACCESSES     PropertyNamesCategory = "userGroupAccesses"
	PROPERTYNAMESCATEGORY_VALUE_TYPE              PropertyNamesCategory = "valueType"
)

// All allowed values of PropertyNamesCategory enum
var AllowedPropertyNamesCategoryEnumValues = []PropertyNamesCategory{
	"access",
	"aggregationType",
	"allItems",
	"attributeValues",
	"categoryCombos",
	"categoryOptions",
	"code",
	"created",
	"createdBy",
	"dataDimension",
	"dataDimensionType",
	"description",
	"dimension",
	"dimensionItemKeywords",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"externalAccess",
	"favorite",
	"favorites",
	"filter",
	"formName",
	"href",
	"id",
	"items",
	"lastUpdated",
	"lastUpdatedBy",
	"legendSet",
	"name",
	"optionSet",
	"programStage",
	"publicAccess",
	"repetition",
	"sharing",
	"shortName",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"valueType",
}

func (v *PropertyNamesCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesCategory(value)
	for _, existing := range AllowedPropertyNamesCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesCategory", value)
}

// NewPropertyNamesCategoryFromValue returns a pointer to a valid PropertyNamesCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesCategoryFromValue(v string) (*PropertyNamesCategory, error) {
	ev := PropertyNamesCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesCategory: valid values are %v", v, AllowedPropertyNamesCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesCategory) IsValid() bool {
	for _, existing := range AllowedPropertyNamesCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Category value
func (v PropertyNamesCategory) Ptr() *PropertyNamesCategory {
	return &v
}

type NullablePropertyNamesCategory struct {
	value *PropertyNamesCategory
	isSet bool
}

func (v NullablePropertyNamesCategory) Get() *PropertyNamesCategory {
	return v.value
}

func (v *NullablePropertyNamesCategory) Set(val *PropertyNamesCategory) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesCategory) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesCategory(val *PropertyNamesCategory) *NullablePropertyNamesCategory {
	return &NullablePropertyNamesCategory{value: val, isSet: true}
}

func (v NullablePropertyNamesCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
