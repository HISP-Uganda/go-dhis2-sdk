/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// LegendDisplayStyle the model 'LegendDisplayStyle'
type LegendDisplayStyle string

// List of LegendDisplayStyle
const (
	LEGENDDISPLAYSTYLE_FILL LegendDisplayStyle = "FILL"
	LEGENDDISPLAYSTYLE_TEXT LegendDisplayStyle = "TEXT"
)

// All allowed values of LegendDisplayStyle enum
var AllowedLegendDisplayStyleEnumValues = []LegendDisplayStyle{
	"FILL",
	"TEXT",
}

func (v *LegendDisplayStyle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LegendDisplayStyle(value)
	for _, existing := range AllowedLegendDisplayStyleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LegendDisplayStyle", value)
}

// NewLegendDisplayStyleFromValue returns a pointer to a valid LegendDisplayStyle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLegendDisplayStyleFromValue(v string) (*LegendDisplayStyle, error) {
	ev := LegendDisplayStyle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LegendDisplayStyle: valid values are %v", v, AllowedLegendDisplayStyleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LegendDisplayStyle) IsValid() bool {
	for _, existing := range AllowedLegendDisplayStyleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LegendDisplayStyle value
func (v LegendDisplayStyle) Ptr() *LegendDisplayStyle {
	return &v
}

type NullableLegendDisplayStyle struct {
	value *LegendDisplayStyle
	isSet bool
}

func (v NullableLegendDisplayStyle) Get() *LegendDisplayStyle {
	return v.value
}

func (v *NullableLegendDisplayStyle) Set(val *LegendDisplayStyle) {
	v.value = val
	v.isSet = true
}

func (v NullableLegendDisplayStyle) IsSet() bool {
	return v.isSet
}

func (v *NullableLegendDisplayStyle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegendDisplayStyle(val *LegendDisplayStyle) *NullableLegendDisplayStyle {
	return &NullableLegendDisplayStyle{value: val, isSet: true}
}

func (v NullableLegendDisplayStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegendDisplayStyle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
