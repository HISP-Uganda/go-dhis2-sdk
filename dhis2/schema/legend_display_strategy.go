/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// LegendDisplayStrategy the model 'LegendDisplayStrategy'
type LegendDisplayStrategy string

// List of LegendDisplayStrategy
const (
	LEGENDDISPLAYSTRATEGY_FIXED        LegendDisplayStrategy = "FIXED"
	LEGENDDISPLAYSTRATEGY_BY_DATA_ITEM LegendDisplayStrategy = "BY_DATA_ITEM"
)

// All allowed values of LegendDisplayStrategy enum
var AllowedLegendDisplayStrategyEnumValues = []LegendDisplayStrategy{
	"FIXED",
	"BY_DATA_ITEM",
}

func (v *LegendDisplayStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LegendDisplayStrategy(value)
	for _, existing := range AllowedLegendDisplayStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LegendDisplayStrategy", value)
}

// NewLegendDisplayStrategyFromValue returns a pointer to a valid LegendDisplayStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLegendDisplayStrategyFromValue(v string) (*LegendDisplayStrategy, error) {
	ev := LegendDisplayStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LegendDisplayStrategy: valid values are %v", v, AllowedLegendDisplayStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LegendDisplayStrategy) IsValid() bool {
	for _, existing := range AllowedLegendDisplayStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LegendDisplayStrategy value
func (v LegendDisplayStrategy) Ptr() *LegendDisplayStrategy {
	return &v
}

type NullableLegendDisplayStrategy struct {
	value *LegendDisplayStrategy
	isSet bool
}

func (v NullableLegendDisplayStrategy) Get() *LegendDisplayStrategy {
	return v.value
}

func (v *NullableLegendDisplayStrategy) Set(val *LegendDisplayStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableLegendDisplayStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableLegendDisplayStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegendDisplayStrategy(val *LegendDisplayStrategy) *NullableLegendDisplayStrategy {
	return &NullableLegendDisplayStrategy{value: val, isSet: true}
}

func (v NullableLegendDisplayStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegendDisplayStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
