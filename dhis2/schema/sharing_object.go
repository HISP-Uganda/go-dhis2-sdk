/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SharingObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharingObject{}

// SharingObject struct for SharingObject
type SharingObject struct {
	DisplayName       *string                  `json:"displayName,omitempty"`
	ExternalAccess    bool                     `json:"externalAccess"`
	Id                *string                  `json:"id,omitempty"`
	Name              *string                  `json:"name,omitempty"`
	PublicAccess      *string                  `json:"publicAccess,omitempty"`
	User              *SharingUser             `json:"user,omitempty"`
	UserAccesses      []SharingUserAccess      `json:"userAccesses,omitempty"`
	UserGroupAccesses []SharingUserGroupAccess `json:"userGroupAccesses,omitempty"`
}

type _SharingObject SharingObject

// NewSharingObject instantiates a new SharingObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharingObject(externalAccess bool) *SharingObject {
	this := SharingObject{}
	this.ExternalAccess = externalAccess
	return &this
}

// NewSharingObjectWithDefaults instantiates a new SharingObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharingObjectWithDefaults() *SharingObject {
	this := SharingObject{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SharingObject) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingObject) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SharingObject) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SharingObject) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExternalAccess returns the ExternalAccess field value
func (o *SharingObject) GetExternalAccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value
// and a boolean to check if the value has been set.
func (o *SharingObject) GetExternalAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalAccess, true
}

// SetExternalAccess sets field value
func (o *SharingObject) SetExternalAccess(v bool) {
	o.ExternalAccess = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SharingObject) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingObject) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SharingObject) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SharingObject) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SharingObject) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingObject) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SharingObject) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SharingObject) SetName(v string) {
	o.Name = &v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *SharingObject) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingObject) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *SharingObject) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *SharingObject) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SharingObject) GetUser() SharingUser {
	if o == nil || IsNil(o.User) {
		var ret SharingUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingObject) GetUserOk() (*SharingUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SharingObject) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given SharingUser and assigns it to the User field.
func (o *SharingObject) SetUser(v SharingUser) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *SharingObject) GetUserAccesses() []SharingUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []SharingUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingObject) GetUserAccessesOk() ([]SharingUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *SharingObject) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []SharingUserAccess and assigns it to the UserAccesses field.
func (o *SharingObject) SetUserAccesses(v []SharingUserAccess) {
	o.UserAccesses = v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *SharingObject) GetUserGroupAccesses() []SharingUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []SharingUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingObject) GetUserGroupAccessesOk() ([]SharingUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *SharingObject) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []SharingUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *SharingObject) SetUserGroupAccesses(v []SharingUserGroupAccess) {
	o.UserGroupAccesses = v
}

func (o SharingObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharingObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["externalAccess"] = o.ExternalAccess
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	return toSerialize, nil
}

func (o *SharingObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"externalAccess",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharingObject := _SharingObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSharingObject)

	if err != nil {
		return err
	}

	*o = SharingObject(varSharingObject)

	return err
}

type NullableSharingObject struct {
	value *SharingObject
	isSet bool
}

func (v NullableSharingObject) Get() *SharingObject {
	return v.value
}

func (v *NullableSharingObject) Set(val *SharingObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSharingObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSharingObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharingObject(val *SharingObject) *NullableSharingObject {
	return &NullableSharingObject{value: val, isSet: true}
}

func (v NullableSharingObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharingObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
