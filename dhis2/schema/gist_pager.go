/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GistPager type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GistPager{}

// GistPager struct for GistPager
type GistPager struct {
	NextPage  *string `json:"nextPage,omitempty"`
	Page      int32   `json:"page"`
	PageCount *int32  `json:"pageCount,omitempty"`
	PageSize  int32   `json:"pageSize"`
	PrevPage  *string `json:"prevPage,omitempty"`
	Total     *int32  `json:"total,omitempty"`
}

type _GistPager GistPager

// NewGistPager instantiates a new GistPager object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGistPager(page int32, pageSize int32) *GistPager {
	this := GistPager{}
	this.Page = page
	this.PageSize = pageSize
	return &this
}

// NewGistPagerWithDefaults instantiates a new GistPager object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGistPagerWithDefaults() *GistPager {
	this := GistPager{}
	return &this
}

// GetNextPage returns the NextPage field value if set, zero value otherwise.
func (o *GistPager) GetNextPage() string {
	if o == nil || IsNil(o.NextPage) {
		var ret string
		return ret
	}
	return *o.NextPage
}

// GetNextPageOk returns a tuple with the NextPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistPager) GetNextPageOk() (*string, bool) {
	if o == nil || IsNil(o.NextPage) {
		return nil, false
	}
	return o.NextPage, true
}

// HasNextPage returns a boolean if a field has been set.
func (o *GistPager) HasNextPage() bool {
	if o != nil && !IsNil(o.NextPage) {
		return true
	}

	return false
}

// SetNextPage gets a reference to the given string and assigns it to the NextPage field.
func (o *GistPager) SetNextPage(v string) {
	o.NextPage = &v
}

// GetPage returns the Page field value
func (o *GistPager) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *GistPager) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *GistPager) SetPage(v int32) {
	o.Page = v
}

// GetPageCount returns the PageCount field value if set, zero value otherwise.
func (o *GistPager) GetPageCount() int32 {
	if o == nil || IsNil(o.PageCount) {
		var ret int32
		return ret
	}
	return *o.PageCount
}

// GetPageCountOk returns a tuple with the PageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistPager) GetPageCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PageCount) {
		return nil, false
	}
	return o.PageCount, true
}

// HasPageCount returns a boolean if a field has been set.
func (o *GistPager) HasPageCount() bool {
	if o != nil && !IsNil(o.PageCount) {
		return true
	}

	return false
}

// SetPageCount gets a reference to the given int32 and assigns it to the PageCount field.
func (o *GistPager) SetPageCount(v int32) {
	o.PageCount = &v
}

// GetPageSize returns the PageSize field value
func (o *GistPager) GetPageSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *GistPager) GetPageSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *GistPager) SetPageSize(v int32) {
	o.PageSize = v
}

// GetPrevPage returns the PrevPage field value if set, zero value otherwise.
func (o *GistPager) GetPrevPage() string {
	if o == nil || IsNil(o.PrevPage) {
		var ret string
		return ret
	}
	return *o.PrevPage
}

// GetPrevPageOk returns a tuple with the PrevPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistPager) GetPrevPageOk() (*string, bool) {
	if o == nil || IsNil(o.PrevPage) {
		return nil, false
	}
	return o.PrevPage, true
}

// HasPrevPage returns a boolean if a field has been set.
func (o *GistPager) HasPrevPage() bool {
	if o != nil && !IsNil(o.PrevPage) {
		return true
	}

	return false
}

// SetPrevPage gets a reference to the given string and assigns it to the PrevPage field.
func (o *GistPager) SetPrevPage(v string) {
	o.PrevPage = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *GistPager) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistPager) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *GistPager) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *GistPager) SetTotal(v int32) {
	o.Total = &v
}

func (o GistPager) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GistPager) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextPage) {
		toSerialize["nextPage"] = o.NextPage
	}
	toSerialize["page"] = o.Page
	if !IsNil(o.PageCount) {
		toSerialize["pageCount"] = o.PageCount
	}
	toSerialize["pageSize"] = o.PageSize
	if !IsNil(o.PrevPage) {
		toSerialize["prevPage"] = o.PrevPage
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

func (o *GistPager) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"page",
		"pageSize",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGistPager := _GistPager{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGistPager)

	if err != nil {
		return err
	}

	*o = GistPager(varGistPager)

	return err
}

type NullableGistPager struct {
	value *GistPager
	isSet bool
}

func (v NullableGistPager) Get() *GistPager {
	return v.value
}

func (v *NullableGistPager) Set(val *GistPager) {
	v.value = val
	v.isSet = true
}

func (v NullableGistPager) IsSet() bool {
	return v.isSet
}

func (v *NullableGistPager) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGistPager(val *GistPager) *NullableGistPager {
	return &NullableGistPager{value: val, isSet: true}
}

func (v NullableGistPager) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGistPager) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
