/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// LockExceptionPropertyNames the model 'LockExceptionPropertyNames'
type LockExceptionPropertyNames string

// List of LockExceptionPropertyNames
const (
	LOCKEXCEPTIONPROPERTYNAMES_CREATED           LockExceptionPropertyNames = "created"
	LOCKEXCEPTIONPROPERTYNAMES_DATA_SET          LockExceptionPropertyNames = "dataSet"
	LOCKEXCEPTIONPROPERTYNAMES_NAME              LockExceptionPropertyNames = "name"
	LOCKEXCEPTIONPROPERTYNAMES_ORGANISATION_UNIT LockExceptionPropertyNames = "organisationUnit"
	LOCKEXCEPTIONPROPERTYNAMES_PERIOD            LockExceptionPropertyNames = "period"
)

// All allowed values of LockExceptionPropertyNames enum
var AllowedLockExceptionPropertyNamesEnumValues = []LockExceptionPropertyNames{
	"created",
	"dataSet",
	"name",
	"organisationUnit",
	"period",
}

func (v *LockExceptionPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LockExceptionPropertyNames(value)
	for _, existing := range AllowedLockExceptionPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LockExceptionPropertyNames", value)
}

// NewLockExceptionPropertyNamesFromValue returns a pointer to a valid LockExceptionPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLockExceptionPropertyNamesFromValue(v string) (*LockExceptionPropertyNames, error) {
	ev := LockExceptionPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LockExceptionPropertyNames: valid values are %v", v, AllowedLockExceptionPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LockExceptionPropertyNames) IsValid() bool {
	for _, existing := range AllowedLockExceptionPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LockExceptionPropertyNames value
func (v LockExceptionPropertyNames) Ptr() *LockExceptionPropertyNames {
	return &v
}

type NullableLockExceptionPropertyNames struct {
	value *LockExceptionPropertyNames
	isSet bool
}

func (v NullableLockExceptionPropertyNames) Get() *LockExceptionPropertyNames {
	return v.value
}

func (v *NullableLockExceptionPropertyNames) Set(val *LockExceptionPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableLockExceptionPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableLockExceptionPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockExceptionPropertyNames(val *LockExceptionPropertyNames) *NullableLockExceptionPropertyNames {
	return &NullableLockExceptionPropertyNames{value: val, isSet: true}
}

func (v NullableLockExceptionPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockExceptionPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
