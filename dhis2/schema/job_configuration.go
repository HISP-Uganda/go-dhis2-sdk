/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the JobConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobConfiguration{}

// JobConfiguration struct for JobConfiguration
type JobConfiguration struct {
	Access               *Access                         `json:"access,omitempty"`
	AttributeValues      []AttributeValue                `json:"attributeValues,omitempty"`
	Code                 *string                         `json:"code,omitempty"`
	Configurable         *bool                           `json:"configurable,omitempty"`
	Created              *time.Time                      `json:"created,omitempty"`
	CreatedBy            *AggregateDataExchangeCreatedBy `json:"createdBy,omitempty"`
	CronExpression       *string                         `json:"cronExpression,omitempty"`
	Delay                *int32                          `json:"delay,omitempty"`
	DisplayName          *string                         `json:"displayName,omitempty"`
	Enabled              *bool                           `json:"enabled,omitempty"`
	ExternalAccess       *bool                           `json:"externalAccess,omitempty"`
	Favorite             *bool                           `json:"favorite,omitempty"`
	Favorites            []string                        `json:"favorites,omitempty"`
	Href                 *string                         `json:"href,omitempty"`
	Id                   *string                         `json:"id,omitempty"`
	JobParameters        *JobConfigurationJobParameters  `json:"jobParameters,omitempty"`
	JobStatus            string                          `json:"jobStatus"`
	JobType              string                          `json:"jobType"`
	LastExecuted         *time.Time                      `json:"lastExecuted,omitempty"`
	LastExecutedStatus   string                          `json:"lastExecutedStatus"`
	LastRuntimeExecution *string                         `json:"lastRuntimeExecution,omitempty"`
	LastUpdated          *time.Time                      `json:"lastUpdated,omitempty"`
	LastUpdatedBy        *AggregateDataExchangeCreatedBy `json:"lastUpdatedBy,omitempty"`
	LeaderOnlyJob        *bool                           `json:"leaderOnlyJob,omitempty"`
	Name                 *string                         `json:"name,omitempty"`
	NextExecutionTime    *time.Time                      `json:"nextExecutionTime,omitempty"`
	PublicAccess         *string                         `json:"publicAccess,omitempty"`
	SchedulingType       string                          `json:"schedulingType"`
	Sharing              *Sharing                        `json:"sharing,omitempty"`
	Translations         []Translation                   `json:"translations,omitempty"`
	User                 *AggregateDataExchangeCreatedBy `json:"user,omitempty"`
	UserAccesses         []LegacyUserAccess              `json:"userAccesses,omitempty"`
	UserGroupAccesses    []LegacyUserGroupAccess         `json:"userGroupAccesses,omitempty"`
	UserUid              *string                         `json:"userUid,omitempty"`
}

type _JobConfiguration JobConfiguration

// NewJobConfiguration instantiates a new JobConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobConfiguration(jobStatus string, jobType string, lastExecutedStatus string, schedulingType string) *JobConfiguration {
	this := JobConfiguration{}
	this.JobStatus = jobStatus
	this.JobType = jobType
	this.LastExecutedStatus = lastExecutedStatus
	this.SchedulingType = schedulingType
	return &this
}

// NewJobConfigurationWithDefaults instantiates a new JobConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobConfigurationWithDefaults() *JobConfiguration {
	this := JobConfiguration{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *JobConfiguration) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *JobConfiguration) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *JobConfiguration) SetAccess(v Access) {
	o.Access = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *JobConfiguration) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *JobConfiguration) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *JobConfiguration) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *JobConfiguration) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *JobConfiguration) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *JobConfiguration) SetCode(v string) {
	o.Code = &v
}

// GetConfigurable returns the Configurable field value if set, zero value otherwise.
func (o *JobConfiguration) GetConfigurable() bool {
	if o == nil || IsNil(o.Configurable) {
		var ret bool
		return ret
	}
	return *o.Configurable
}

// GetConfigurableOk returns a tuple with the Configurable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetConfigurableOk() (*bool, bool) {
	if o == nil || IsNil(o.Configurable) {
		return nil, false
	}
	return o.Configurable, true
}

// HasConfigurable returns a boolean if a field has been set.
func (o *JobConfiguration) HasConfigurable() bool {
	if o != nil && !IsNil(o.Configurable) {
		return true
	}

	return false
}

// SetConfigurable gets a reference to the given bool and assigns it to the Configurable field.
func (o *JobConfiguration) SetConfigurable(v bool) {
	o.Configurable = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *JobConfiguration) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *JobConfiguration) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *JobConfiguration) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *JobConfiguration) GetCreatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetCreatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *JobConfiguration) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the CreatedBy field.
func (o *JobConfiguration) SetCreatedBy(v AggregateDataExchangeCreatedBy) {
	o.CreatedBy = &v
}

// GetCronExpression returns the CronExpression field value if set, zero value otherwise.
func (o *JobConfiguration) GetCronExpression() string {
	if o == nil || IsNil(o.CronExpression) {
		var ret string
		return ret
	}
	return *o.CronExpression
}

// GetCronExpressionOk returns a tuple with the CronExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetCronExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.CronExpression) {
		return nil, false
	}
	return o.CronExpression, true
}

// HasCronExpression returns a boolean if a field has been set.
func (o *JobConfiguration) HasCronExpression() bool {
	if o != nil && !IsNil(o.CronExpression) {
		return true
	}

	return false
}

// SetCronExpression gets a reference to the given string and assigns it to the CronExpression field.
func (o *JobConfiguration) SetCronExpression(v string) {
	o.CronExpression = &v
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *JobConfiguration) GetDelay() int32 {
	if o == nil || IsNil(o.Delay) {
		var ret int32
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *JobConfiguration) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given int32 and assigns it to the Delay field.
func (o *JobConfiguration) SetDelay(v int32) {
	o.Delay = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *JobConfiguration) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *JobConfiguration) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *JobConfiguration) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *JobConfiguration) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *JobConfiguration) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *JobConfiguration) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExternalAccess returns the ExternalAccess field value if set, zero value otherwise.
func (o *JobConfiguration) GetExternalAccess() bool {
	if o == nil || IsNil(o.ExternalAccess) {
		var ret bool
		return ret
	}
	return *o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetExternalAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAccess) {
		return nil, false
	}
	return o.ExternalAccess, true
}

// HasExternalAccess returns a boolean if a field has been set.
func (o *JobConfiguration) HasExternalAccess() bool {
	if o != nil && !IsNil(o.ExternalAccess) {
		return true
	}

	return false
}

// SetExternalAccess gets a reference to the given bool and assigns it to the ExternalAccess field.
func (o *JobConfiguration) SetExternalAccess(v bool) {
	o.ExternalAccess = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *JobConfiguration) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *JobConfiguration) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *JobConfiguration) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *JobConfiguration) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *JobConfiguration) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *JobConfiguration) SetFavorites(v []string) {
	o.Favorites = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *JobConfiguration) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *JobConfiguration) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *JobConfiguration) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *JobConfiguration) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *JobConfiguration) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *JobConfiguration) SetId(v string) {
	o.Id = &v
}

// GetJobParameters returns the JobParameters field value if set, zero value otherwise.
func (o *JobConfiguration) GetJobParameters() JobConfigurationJobParameters {
	if o == nil || IsNil(o.JobParameters) {
		var ret JobConfigurationJobParameters
		return ret
	}
	return *o.JobParameters
}

// GetJobParametersOk returns a tuple with the JobParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetJobParametersOk() (*JobConfigurationJobParameters, bool) {
	if o == nil || IsNil(o.JobParameters) {
		return nil, false
	}
	return o.JobParameters, true
}

// HasJobParameters returns a boolean if a field has been set.
func (o *JobConfiguration) HasJobParameters() bool {
	if o != nil && !IsNil(o.JobParameters) {
		return true
	}

	return false
}

// SetJobParameters gets a reference to the given JobConfigurationJobParameters and assigns it to the JobParameters field.
func (o *JobConfiguration) SetJobParameters(v JobConfigurationJobParameters) {
	o.JobParameters = &v
}

// GetJobStatus returns the JobStatus field value
func (o *JobConfiguration) GetJobStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobStatus
}

// GetJobStatusOk returns a tuple with the JobStatus field value
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetJobStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobStatus, true
}

// SetJobStatus sets field value
func (o *JobConfiguration) SetJobStatus(v string) {
	o.JobStatus = v
}

// GetJobType returns the JobType field value
func (o *JobConfiguration) GetJobType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobType
}

// GetJobTypeOk returns a tuple with the JobType field value
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetJobTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobType, true
}

// SetJobType sets field value
func (o *JobConfiguration) SetJobType(v string) {
	o.JobType = v
}

// GetLastExecuted returns the LastExecuted field value if set, zero value otherwise.
func (o *JobConfiguration) GetLastExecuted() time.Time {
	if o == nil || IsNil(o.LastExecuted) {
		var ret time.Time
		return ret
	}
	return *o.LastExecuted
}

// GetLastExecutedOk returns a tuple with the LastExecuted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetLastExecutedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastExecuted) {
		return nil, false
	}
	return o.LastExecuted, true
}

// HasLastExecuted returns a boolean if a field has been set.
func (o *JobConfiguration) HasLastExecuted() bool {
	if o != nil && !IsNil(o.LastExecuted) {
		return true
	}

	return false
}

// SetLastExecuted gets a reference to the given time.Time and assigns it to the LastExecuted field.
func (o *JobConfiguration) SetLastExecuted(v time.Time) {
	o.LastExecuted = &v
}

// GetLastExecutedStatus returns the LastExecutedStatus field value
func (o *JobConfiguration) GetLastExecutedStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastExecutedStatus
}

// GetLastExecutedStatusOk returns a tuple with the LastExecutedStatus field value
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetLastExecutedStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastExecutedStatus, true
}

// SetLastExecutedStatus sets field value
func (o *JobConfiguration) SetLastExecutedStatus(v string) {
	o.LastExecutedStatus = v
}

// GetLastRuntimeExecution returns the LastRuntimeExecution field value if set, zero value otherwise.
func (o *JobConfiguration) GetLastRuntimeExecution() string {
	if o == nil || IsNil(o.LastRuntimeExecution) {
		var ret string
		return ret
	}
	return *o.LastRuntimeExecution
}

// GetLastRuntimeExecutionOk returns a tuple with the LastRuntimeExecution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetLastRuntimeExecutionOk() (*string, bool) {
	if o == nil || IsNil(o.LastRuntimeExecution) {
		return nil, false
	}
	return o.LastRuntimeExecution, true
}

// HasLastRuntimeExecution returns a boolean if a field has been set.
func (o *JobConfiguration) HasLastRuntimeExecution() bool {
	if o != nil && !IsNil(o.LastRuntimeExecution) {
		return true
	}

	return false
}

// SetLastRuntimeExecution gets a reference to the given string and assigns it to the LastRuntimeExecution field.
func (o *JobConfiguration) SetLastRuntimeExecution(v string) {
	o.LastRuntimeExecution = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *JobConfiguration) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *JobConfiguration) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *JobConfiguration) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *JobConfiguration) GetLastUpdatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetLastUpdatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *JobConfiguration) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the LastUpdatedBy field.
func (o *JobConfiguration) SetLastUpdatedBy(v AggregateDataExchangeCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLeaderOnlyJob returns the LeaderOnlyJob field value if set, zero value otherwise.
func (o *JobConfiguration) GetLeaderOnlyJob() bool {
	if o == nil || IsNil(o.LeaderOnlyJob) {
		var ret bool
		return ret
	}
	return *o.LeaderOnlyJob
}

// GetLeaderOnlyJobOk returns a tuple with the LeaderOnlyJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetLeaderOnlyJobOk() (*bool, bool) {
	if o == nil || IsNil(o.LeaderOnlyJob) {
		return nil, false
	}
	return o.LeaderOnlyJob, true
}

// HasLeaderOnlyJob returns a boolean if a field has been set.
func (o *JobConfiguration) HasLeaderOnlyJob() bool {
	if o != nil && !IsNil(o.LeaderOnlyJob) {
		return true
	}

	return false
}

// SetLeaderOnlyJob gets a reference to the given bool and assigns it to the LeaderOnlyJob field.
func (o *JobConfiguration) SetLeaderOnlyJob(v bool) {
	o.LeaderOnlyJob = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *JobConfiguration) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *JobConfiguration) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *JobConfiguration) SetName(v string) {
	o.Name = &v
}

// GetNextExecutionTime returns the NextExecutionTime field value if set, zero value otherwise.
func (o *JobConfiguration) GetNextExecutionTime() time.Time {
	if o == nil || IsNil(o.NextExecutionTime) {
		var ret time.Time
		return ret
	}
	return *o.NextExecutionTime
}

// GetNextExecutionTimeOk returns a tuple with the NextExecutionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetNextExecutionTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextExecutionTime) {
		return nil, false
	}
	return o.NextExecutionTime, true
}

// HasNextExecutionTime returns a boolean if a field has been set.
func (o *JobConfiguration) HasNextExecutionTime() bool {
	if o != nil && !IsNil(o.NextExecutionTime) {
		return true
	}

	return false
}

// SetNextExecutionTime gets a reference to the given time.Time and assigns it to the NextExecutionTime field.
func (o *JobConfiguration) SetNextExecutionTime(v time.Time) {
	o.NextExecutionTime = &v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *JobConfiguration) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *JobConfiguration) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *JobConfiguration) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetSchedulingType returns the SchedulingType field value
func (o *JobConfiguration) GetSchedulingType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchedulingType
}

// GetSchedulingTypeOk returns a tuple with the SchedulingType field value
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetSchedulingTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchedulingType, true
}

// SetSchedulingType sets field value
func (o *JobConfiguration) SetSchedulingType(v string) {
	o.SchedulingType = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *JobConfiguration) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *JobConfiguration) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *JobConfiguration) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *JobConfiguration) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *JobConfiguration) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *JobConfiguration) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *JobConfiguration) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *JobConfiguration) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *JobConfiguration) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *JobConfiguration) GetUserAccesses() []LegacyUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []LegacyUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetUserAccessesOk() ([]LegacyUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *JobConfiguration) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []LegacyUserAccess and assigns it to the UserAccesses field.
func (o *JobConfiguration) SetUserAccesses(v []LegacyUserAccess) {
	o.UserAccesses = v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *JobConfiguration) GetUserGroupAccesses() []LegacyUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []LegacyUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetUserGroupAccessesOk() ([]LegacyUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *JobConfiguration) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []LegacyUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *JobConfiguration) SetUserGroupAccesses(v []LegacyUserGroupAccess) {
	o.UserGroupAccesses = v
}

// GetUserUid returns the UserUid field value if set, zero value otherwise.
func (o *JobConfiguration) GetUserUid() string {
	if o == nil || IsNil(o.UserUid) {
		var ret string
		return ret
	}
	return *o.UserUid
}

// GetUserUidOk returns a tuple with the UserUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfiguration) GetUserUidOk() (*string, bool) {
	if o == nil || IsNil(o.UserUid) {
		return nil, false
	}
	return o.UserUid, true
}

// HasUserUid returns a boolean if a field has been set.
func (o *JobConfiguration) HasUserUid() bool {
	if o != nil && !IsNil(o.UserUid) {
		return true
	}

	return false
}

// SetUserUid gets a reference to the given string and assigns it to the UserUid field.
func (o *JobConfiguration) SetUserUid(v string) {
	o.UserUid = &v
}

func (o JobConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Configurable) {
		toSerialize["configurable"] = o.Configurable
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CronExpression) {
		toSerialize["cronExpression"] = o.CronExpression
	}
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExternalAccess) {
		toSerialize["externalAccess"] = o.ExternalAccess
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.JobParameters) {
		toSerialize["jobParameters"] = o.JobParameters
	}
	toSerialize["jobStatus"] = o.JobStatus
	toSerialize["jobType"] = o.JobType
	if !IsNil(o.LastExecuted) {
		toSerialize["lastExecuted"] = o.LastExecuted
	}
	toSerialize["lastExecutedStatus"] = o.LastExecutedStatus
	if !IsNil(o.LastRuntimeExecution) {
		toSerialize["lastRuntimeExecution"] = o.LastRuntimeExecution
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LeaderOnlyJob) {
		toSerialize["leaderOnlyJob"] = o.LeaderOnlyJob
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NextExecutionTime) {
		toSerialize["nextExecutionTime"] = o.NextExecutionTime
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	toSerialize["schedulingType"] = o.SchedulingType
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	if !IsNil(o.UserUid) {
		toSerialize["userUid"] = o.UserUid
	}
	return toSerialize, nil
}

func (o *JobConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jobStatus",
		"jobType",
		"lastExecutedStatus",
		"schedulingType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobConfiguration := _JobConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobConfiguration)

	if err != nil {
		return err
	}

	*o = JobConfiguration(varJobConfiguration)

	return err
}

type NullableJobConfiguration struct {
	value *JobConfiguration
	isSet bool
}

func (v NullableJobConfiguration) Get() *JobConfiguration {
	return v.value
}

func (v *NullableJobConfiguration) Set(val *JobConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableJobConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableJobConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobConfiguration(val *JobConfiguration) *NullableJobConfiguration {
	return &NullableJobConfiguration{value: val, isSet: true}
}

func (v NullableJobConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
