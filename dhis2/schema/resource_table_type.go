/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ResourceTableType the model 'ResourceTableType'
type ResourceTableType string

// List of ResourceTableType
const (
	RESOURCETABLETYPE_ORG_UNIT_STRUCTURE                 ResourceTableType = "ORG_UNIT_STRUCTURE"
	RESOURCETABLETYPE_DATA_SET_ORG_UNIT_CATEGORY         ResourceTableType = "DATA_SET_ORG_UNIT_CATEGORY"
	RESOURCETABLETYPE_CATEGORY_OPTION_COMBO_NAME         ResourceTableType = "CATEGORY_OPTION_COMBO_NAME"
	RESOURCETABLETYPE_DATA_ELEMENT_GROUP_SET_STRUCTURE   ResourceTableType = "DATA_ELEMENT_GROUP_SET_STRUCTURE"
	RESOURCETABLETYPE_INDICATOR_GROUP_SET_STRUCTURE      ResourceTableType = "INDICATOR_GROUP_SET_STRUCTURE"
	RESOURCETABLETYPE_ORG_UNIT_GROUP_SET_STRUCTURE       ResourceTableType = "ORG_UNIT_GROUP_SET_STRUCTURE"
	RESOURCETABLETYPE_CATEGORY_STRUCTURE                 ResourceTableType = "CATEGORY_STRUCTURE"
	RESOURCETABLETYPE_DATA_ELEMENT_STRUCTURE             ResourceTableType = "DATA_ELEMENT_STRUCTURE"
	RESOURCETABLETYPE_DATA_SET                           ResourceTableType = "DATA_SET"
	RESOURCETABLETYPE_PERIOD_STRUCTURE                   ResourceTableType = "PERIOD_STRUCTURE"
	RESOURCETABLETYPE_DATE_PERIOD_STRUCTURE              ResourceTableType = "DATE_PERIOD_STRUCTURE"
	RESOURCETABLETYPE_DATA_ELEMENT_CATEGORY_OPTION_COMBO ResourceTableType = "DATA_ELEMENT_CATEGORY_OPTION_COMBO"
	RESOURCETABLETYPE_DATA_APPROVAL_REMAP_LEVEL          ResourceTableType = "DATA_APPROVAL_REMAP_LEVEL"
	RESOURCETABLETYPE_DATA_APPROVAL_MIN_LEVEL            ResourceTableType = "DATA_APPROVAL_MIN_LEVEL"
	RESOURCETABLETYPE_TEI_RELATIONSHIP_COUNT             ResourceTableType = "TEI_RELATIONSHIP_COUNT"
)

// All allowed values of ResourceTableType enum
var AllowedResourceTableTypeEnumValues = []ResourceTableType{
	"ORG_UNIT_STRUCTURE",
	"DATA_SET_ORG_UNIT_CATEGORY",
	"CATEGORY_OPTION_COMBO_NAME",
	"DATA_ELEMENT_GROUP_SET_STRUCTURE",
	"INDICATOR_GROUP_SET_STRUCTURE",
	"ORG_UNIT_GROUP_SET_STRUCTURE",
	"CATEGORY_STRUCTURE",
	"DATA_ELEMENT_STRUCTURE",
	"DATA_SET",
	"PERIOD_STRUCTURE",
	"DATE_PERIOD_STRUCTURE",
	"DATA_ELEMENT_CATEGORY_OPTION_COMBO",
	"DATA_APPROVAL_REMAP_LEVEL",
	"DATA_APPROVAL_MIN_LEVEL",
	"TEI_RELATIONSHIP_COUNT",
}

func (v *ResourceTableType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceTableType(value)
	for _, existing := range AllowedResourceTableTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceTableType", value)
}

// NewResourceTableTypeFromValue returns a pointer to a valid ResourceTableType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceTableTypeFromValue(v string) (*ResourceTableType, error) {
	ev := ResourceTableType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceTableType: valid values are %v", v, AllowedResourceTableTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceTableType) IsValid() bool {
	for _, existing := range AllowedResourceTableTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceTableType value
func (v ResourceTableType) Ptr() *ResourceTableType {
	return &v
}

type NullableResourceTableType struct {
	value *ResourceTableType
	isSet bool
}

func (v NullableResourceTableType) Get() *ResourceTableType {
	return v.value
}

func (v *NullableResourceTableType) Set(val *ResourceTableType) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTableType) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTableType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTableType(val *ResourceTableType) *NullableResourceTableType {
	return &NullableResourceTableType{value: val, isSet: true}
}

func (v NullableResourceTableType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTableType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
