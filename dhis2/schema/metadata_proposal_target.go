/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// MetadataProposalTarget the model 'MetadataProposalTarget'
type MetadataProposalTarget string

// List of MetadataProposalTarget
const (
	METADATAPROPOSALTARGET_ORGANISATION_UNIT MetadataProposalTarget = "ORGANISATION_UNIT"
)

// All allowed values of MetadataProposalTarget enum
var AllowedMetadataProposalTargetEnumValues = []MetadataProposalTarget{
	"ORGANISATION_UNIT",
}

func (v *MetadataProposalTarget) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetadataProposalTarget(value)
	for _, existing := range AllowedMetadataProposalTargetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetadataProposalTarget", value)
}

// NewMetadataProposalTargetFromValue returns a pointer to a valid MetadataProposalTarget
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetadataProposalTargetFromValue(v string) (*MetadataProposalTarget, error) {
	ev := MetadataProposalTarget(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetadataProposalTarget: valid values are %v", v, AllowedMetadataProposalTargetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetadataProposalTarget) IsValid() bool {
	for _, existing := range AllowedMetadataProposalTargetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetadataProposalTarget value
func (v MetadataProposalTarget) Ptr() *MetadataProposalTarget {
	return &v
}

type NullableMetadataProposalTarget struct {
	value *MetadataProposalTarget
	isSet bool
}

func (v NullableMetadataProposalTarget) Get() *MetadataProposalTarget {
	return v.value
}

func (v *NullableMetadataProposalTarget) Set(val *MetadataProposalTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataProposalTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataProposalTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataProposalTarget(val *MetadataProposalTarget) *NullableMetadataProposalTarget {
	return &NullableMetadataProposalTarget{value: val, isSet: true}
}

func (v NullableMetadataProposalTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataProposalTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
