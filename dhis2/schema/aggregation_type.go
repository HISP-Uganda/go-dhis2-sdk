/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AggregationType the model 'AggregationType'
type AggregationType string

// List of AggregationType
const (
	AGGREGATIONTYPE_SUM                             AggregationType = "SUM"
	AGGREGATIONTYPE_AVERAGE                         AggregationType = "AVERAGE"
	AGGREGATIONTYPE_AVERAGE_SUM_ORG_UNIT            AggregationType = "AVERAGE_SUM_ORG_UNIT"
	AGGREGATIONTYPE_LAST                            AggregationType = "LAST"
	AGGREGATIONTYPE_LAST_AVERAGE_ORG_UNIT           AggregationType = "LAST_AVERAGE_ORG_UNIT"
	AGGREGATIONTYPE_LAST_LAST_ORG_UNIT              AggregationType = "LAST_LAST_ORG_UNIT"
	AGGREGATIONTYPE_LAST_IN_PERIOD                  AggregationType = "LAST_IN_PERIOD"
	AGGREGATIONTYPE_LAST_IN_PERIOD_AVERAGE_ORG_UNIT AggregationType = "LAST_IN_PERIOD_AVERAGE_ORG_UNIT"
	AGGREGATIONTYPE_FIRST                           AggregationType = "FIRST"
	AGGREGATIONTYPE_FIRST_AVERAGE_ORG_UNIT          AggregationType = "FIRST_AVERAGE_ORG_UNIT"
	AGGREGATIONTYPE_FIRST_FIRST_ORG_UNIT            AggregationType = "FIRST_FIRST_ORG_UNIT"
	AGGREGATIONTYPE_COUNT                           AggregationType = "COUNT"
	AGGREGATIONTYPE_STDDEV                          AggregationType = "STDDEV"
	AGGREGATIONTYPE_VARIANCE                        AggregationType = "VARIANCE"
	AGGREGATIONTYPE_MIN                             AggregationType = "MIN"
	AGGREGATIONTYPE_MAX                             AggregationType = "MAX"
	AGGREGATIONTYPE_MIN_SUM_ORG_UNIT                AggregationType = "MIN_SUM_ORG_UNIT"
	AGGREGATIONTYPE_MAX_SUM_ORG_UNIT                AggregationType = "MAX_SUM_ORG_UNIT"
	AGGREGATIONTYPE_NONE                            AggregationType = "NONE"
	AGGREGATIONTYPE_CUSTOM                          AggregationType = "CUSTOM"
	AGGREGATIONTYPE_DEFAULT                         AggregationType = "DEFAULT"
)

// All allowed values of AggregationType enum
var AllowedAggregationTypeEnumValues = []AggregationType{
	"SUM",
	"AVERAGE",
	"AVERAGE_SUM_ORG_UNIT",
	"LAST",
	"LAST_AVERAGE_ORG_UNIT",
	"LAST_LAST_ORG_UNIT",
	"LAST_IN_PERIOD",
	"LAST_IN_PERIOD_AVERAGE_ORG_UNIT",
	"FIRST",
	"FIRST_AVERAGE_ORG_UNIT",
	"FIRST_FIRST_ORG_UNIT",
	"COUNT",
	"STDDEV",
	"VARIANCE",
	"MIN",
	"MAX",
	"MIN_SUM_ORG_UNIT",
	"MAX_SUM_ORG_UNIT",
	"NONE",
	"CUSTOM",
	"DEFAULT",
}

func (v *AggregationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AggregationType(value)
	for _, existing := range AllowedAggregationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AggregationType", value)
}

// NewAggregationTypeFromValue returns a pointer to a valid AggregationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregationTypeFromValue(v string) (*AggregationType, error) {
	ev := AggregationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AggregationType: valid values are %v", v, AllowedAggregationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggregationType) IsValid() bool {
	for _, existing := range AllowedAggregationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AggregationType value
func (v AggregationType) Ptr() *AggregationType {
	return &v
}

type NullableAggregationType struct {
	value *AggregationType
	isSet bool
}

func (v NullableAggregationType) Get() *AggregationType {
	return v.value
}

func (v *NullableAggregationType) Set(val *AggregationType) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationType) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationType(val *AggregationType) *NullableAggregationType {
	return &NullableAggregationType{value: val, isSet: true}
}

func (v NullableAggregationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
