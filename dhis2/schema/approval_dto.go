/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the ApprovalDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalDto{}

// ApprovalDto struct for ApprovalDto
type ApprovalDto struct {
	// A UID for an CategoryOptionCombo object   (Java name `org.hisp.dhis.category.CategoryOptionCombo`)
	Aoc *string `json:"aoc,omitempty"`
	// A UID for an OrganisationUnit object   (Java name `org.hisp.dhis.organisationunit.OrganisationUnit`)
	Ou *string `json:"ou,omitempty"`
}

// NewApprovalDto instantiates a new ApprovalDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalDto() *ApprovalDto {
	this := ApprovalDto{}
	return &this
}

// NewApprovalDtoWithDefaults instantiates a new ApprovalDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalDtoWithDefaults() *ApprovalDto {
	this := ApprovalDto{}
	return &this
}

// GetAoc returns the Aoc field value if set, zero value otherwise.
func (o *ApprovalDto) GetAoc() string {
	if o == nil || IsNil(o.Aoc) {
		var ret string
		return ret
	}
	return *o.Aoc
}

// GetAocOk returns a tuple with the Aoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDto) GetAocOk() (*string, bool) {
	if o == nil || IsNil(o.Aoc) {
		return nil, false
	}
	return o.Aoc, true
}

// HasAoc returns a boolean if a field has been set.
func (o *ApprovalDto) HasAoc() bool {
	if o != nil && !IsNil(o.Aoc) {
		return true
	}

	return false
}

// SetAoc gets a reference to the given string and assigns it to the Aoc field.
func (o *ApprovalDto) SetAoc(v string) {
	o.Aoc = &v
}

// GetOu returns the Ou field value if set, zero value otherwise.
func (o *ApprovalDto) GetOu() string {
	if o == nil || IsNil(o.Ou) {
		var ret string
		return ret
	}
	return *o.Ou
}

// GetOuOk returns a tuple with the Ou field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDto) GetOuOk() (*string, bool) {
	if o == nil || IsNil(o.Ou) {
		return nil, false
	}
	return o.Ou, true
}

// HasOu returns a boolean if a field has been set.
func (o *ApprovalDto) HasOu() bool {
	if o != nil && !IsNil(o.Ou) {
		return true
	}

	return false
}

// SetOu gets a reference to the given string and assigns it to the Ou field.
func (o *ApprovalDto) SetOu(v string) {
	o.Ou = &v
}

func (o ApprovalDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aoc) {
		toSerialize["aoc"] = o.Aoc
	}
	if !IsNil(o.Ou) {
		toSerialize["ou"] = o.Ou
	}
	return toSerialize, nil
}

type NullableApprovalDto struct {
	value *ApprovalDto
	isSet bool
}

func (v NullableApprovalDto) Get() *ApprovalDto {
	return v.value
}

func (v *NullableApprovalDto) Set(val *ApprovalDto) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalDto) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalDto(val *ApprovalDto) *NullableApprovalDto {
	return &NullableApprovalDto{value: val, isSet: true}
}

func (v NullableApprovalDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
