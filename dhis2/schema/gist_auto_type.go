/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// GistAutoType the model 'GistAutoType'
type GistAutoType string

// List of GistAutoType
const (
	GISTAUTOTYPE_XL GistAutoType = "XL"
	GISTAUTOTYPE_L  GistAutoType = "L"
	GISTAUTOTYPE_M  GistAutoType = "M"
	GISTAUTOTYPE_S  GistAutoType = "S"
	GISTAUTOTYPE_XS GistAutoType = "XS"
)

// All allowed values of GistAutoType enum
var AllowedGistAutoTypeEnumValues = []GistAutoType{
	"XL",
	"L",
	"M",
	"S",
	"XS",
}

func (v *GistAutoType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GistAutoType(value)
	for _, existing := range AllowedGistAutoTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GistAutoType", value)
}

// NewGistAutoTypeFromValue returns a pointer to a valid GistAutoType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGistAutoTypeFromValue(v string) (*GistAutoType, error) {
	ev := GistAutoType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GistAutoType: valid values are %v", v, AllowedGistAutoTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GistAutoType) IsValid() bool {
	for _, existing := range AllowedGistAutoTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GistAutoType value
func (v GistAutoType) Ptr() *GistAutoType {
	return &v
}

type NullableGistAutoType struct {
	value *GistAutoType
	isSet bool
}

func (v NullableGistAutoType) Get() *GistAutoType {
	return v.value
}

func (v *NullableGistAutoType) Set(val *GistAutoType) {
	v.value = val
	v.isSet = true
}

func (v NullableGistAutoType) IsSet() bool {
	return v.isSet
}

func (v *NullableGistAutoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGistAutoType(val *GistAutoType) *NullableGistAutoType {
	return &NullableGistAutoType{value: val, isSet: true}
}

func (v NullableGistAutoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGistAutoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
