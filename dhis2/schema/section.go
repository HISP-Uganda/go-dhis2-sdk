/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Section type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Section{}

// Section struct for Section
type Section struct {
	Access                      *Access                  `json:"access,omitempty"`
	AttributeValues             []AttributeValue         `json:"attributeValues,omitempty"`
	CategoryCombos              []BaseIdentifiableObject `json:"categoryCombos,omitempty"`
	Code                        *string                  `json:"code,omitempty"`
	Created                     *time.Time               `json:"created,omitempty"`
	CreatedBy                   *UserDto                 `json:"createdBy,omitempty"`
	DataElements                []BaseIdentifiableObject `json:"dataElements,omitempty"`
	DataSet                     *BaseIdentifiableObject  `json:"dataSet,omitempty"`
	Description                 *string                  `json:"description,omitempty"`
	DisableDataElementAutoGroup *bool                    `json:"disableDataElementAutoGroup,omitempty"`
	DisplayName                 *string                  `json:"displayName,omitempty"`
	DisplayOptions              map[string]interface{}   `json:"displayOptions,omitempty"`
	Favorite                    *bool                    `json:"favorite,omitempty"`
	Favorites                   []string                 `json:"favorites,omitempty"`
	GreyedFields                []DataElementOperand     `json:"greyedFields,omitempty"`
	Href                        *string                  `json:"href,omitempty"`
	Id                          *string                  `json:"id,omitempty"`
	Indicators                  []BaseIdentifiableObject `json:"indicators,omitempty"`
	LastUpdated                 *time.Time               `json:"lastUpdated,omitempty"`
	LastUpdatedBy               *UserDto                 `json:"lastUpdatedBy,omitempty"`
	Name                        *string                  `json:"name,omitempty"`
	Sharing                     *Sharing                 `json:"sharing,omitempty"`
	ShowColumnTotals            *bool                    `json:"showColumnTotals,omitempty"`
	ShowRowTotals               *bool                    `json:"showRowTotals,omitempty"`
	SortOrder                   int32                    `json:"sortOrder"`
	Translations                []Translation            `json:"translations,omitempty"`
}

type _Section Section

// NewSection instantiates a new Section object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSection(sortOrder int32) *Section {
	this := Section{}
	this.SortOrder = sortOrder
	return &this
}

// NewSectionWithDefaults instantiates a new Section object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionWithDefaults() *Section {
	this := Section{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *Section) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *Section) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *Section) SetAccess(v Access) {
	o.Access = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *Section) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *Section) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *Section) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCategoryCombos returns the CategoryCombos field value if set, zero value otherwise.
func (o *Section) GetCategoryCombos() []BaseIdentifiableObject {
	if o == nil || IsNil(o.CategoryCombos) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.CategoryCombos
}

// GetCategoryCombosOk returns a tuple with the CategoryCombos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetCategoryCombosOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.CategoryCombos) {
		return nil, false
	}
	return o.CategoryCombos, true
}

// HasCategoryCombos returns a boolean if a field has been set.
func (o *Section) HasCategoryCombos() bool {
	if o != nil && !IsNil(o.CategoryCombos) {
		return true
	}

	return false
}

// SetCategoryCombos gets a reference to the given []BaseIdentifiableObject and assigns it to the CategoryCombos field.
func (o *Section) SetCategoryCombos(v []BaseIdentifiableObject) {
	o.CategoryCombos = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Section) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Section) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Section) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Section) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Section) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Section) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Section) GetCreatedBy() UserDto {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserDto
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetCreatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Section) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserDto and assigns it to the CreatedBy field.
func (o *Section) SetCreatedBy(v UserDto) {
	o.CreatedBy = &v
}

// GetDataElements returns the DataElements field value if set, zero value otherwise.
func (o *Section) GetDataElements() []BaseIdentifiableObject {
	if o == nil || IsNil(o.DataElements) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.DataElements
}

// GetDataElementsOk returns a tuple with the DataElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetDataElementsOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.DataElements) {
		return nil, false
	}
	return o.DataElements, true
}

// HasDataElements returns a boolean if a field has been set.
func (o *Section) HasDataElements() bool {
	if o != nil && !IsNil(o.DataElements) {
		return true
	}

	return false
}

// SetDataElements gets a reference to the given []BaseIdentifiableObject and assigns it to the DataElements field.
func (o *Section) SetDataElements(v []BaseIdentifiableObject) {
	o.DataElements = v
}

// GetDataSet returns the DataSet field value if set, zero value otherwise.
func (o *Section) GetDataSet() BaseIdentifiableObject {
	if o == nil || IsNil(o.DataSet) {
		var ret BaseIdentifiableObject
		return ret
	}
	return *o.DataSet
}

// GetDataSetOk returns a tuple with the DataSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetDataSetOk() (*BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.DataSet) {
		return nil, false
	}
	return o.DataSet, true
}

// HasDataSet returns a boolean if a field has been set.
func (o *Section) HasDataSet() bool {
	if o != nil && !IsNil(o.DataSet) {
		return true
	}

	return false
}

// SetDataSet gets a reference to the given BaseIdentifiableObject and assigns it to the DataSet field.
func (o *Section) SetDataSet(v BaseIdentifiableObject) {
	o.DataSet = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Section) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Section) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Section) SetDescription(v string) {
	o.Description = &v
}

// GetDisableDataElementAutoGroup returns the DisableDataElementAutoGroup field value if set, zero value otherwise.
func (o *Section) GetDisableDataElementAutoGroup() bool {
	if o == nil || IsNil(o.DisableDataElementAutoGroup) {
		var ret bool
		return ret
	}
	return *o.DisableDataElementAutoGroup
}

// GetDisableDataElementAutoGroupOk returns a tuple with the DisableDataElementAutoGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetDisableDataElementAutoGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableDataElementAutoGroup) {
		return nil, false
	}
	return o.DisableDataElementAutoGroup, true
}

// HasDisableDataElementAutoGroup returns a boolean if a field has been set.
func (o *Section) HasDisableDataElementAutoGroup() bool {
	if o != nil && !IsNil(o.DisableDataElementAutoGroup) {
		return true
	}

	return false
}

// SetDisableDataElementAutoGroup gets a reference to the given bool and assigns it to the DisableDataElementAutoGroup field.
func (o *Section) SetDisableDataElementAutoGroup(v bool) {
	o.DisableDataElementAutoGroup = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Section) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Section) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Section) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayOptions returns the DisplayOptions field value if set, zero value otherwise.
func (o *Section) GetDisplayOptions() map[string]interface{} {
	if o == nil || IsNil(o.DisplayOptions) {
		var ret map[string]interface{}
		return ret
	}
	return o.DisplayOptions
}

// GetDisplayOptionsOk returns a tuple with the DisplayOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetDisplayOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DisplayOptions) {
		return map[string]interface{}{}, false
	}
	return o.DisplayOptions, true
}

// HasDisplayOptions returns a boolean if a field has been set.
func (o *Section) HasDisplayOptions() bool {
	if o != nil && !IsNil(o.DisplayOptions) {
		return true
	}

	return false
}

// SetDisplayOptions gets a reference to the given map[string]interface{} and assigns it to the DisplayOptions field.
func (o *Section) SetDisplayOptions(v map[string]interface{}) {
	o.DisplayOptions = v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *Section) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *Section) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *Section) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *Section) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *Section) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *Section) SetFavorites(v []string) {
	o.Favorites = v
}

// GetGreyedFields returns the GreyedFields field value if set, zero value otherwise.
func (o *Section) GetGreyedFields() []DataElementOperand {
	if o == nil || IsNil(o.GreyedFields) {
		var ret []DataElementOperand
		return ret
	}
	return o.GreyedFields
}

// GetGreyedFieldsOk returns a tuple with the GreyedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetGreyedFieldsOk() ([]DataElementOperand, bool) {
	if o == nil || IsNil(o.GreyedFields) {
		return nil, false
	}
	return o.GreyedFields, true
}

// HasGreyedFields returns a boolean if a field has been set.
func (o *Section) HasGreyedFields() bool {
	if o != nil && !IsNil(o.GreyedFields) {
		return true
	}

	return false
}

// SetGreyedFields gets a reference to the given []DataElementOperand and assigns it to the GreyedFields field.
func (o *Section) SetGreyedFields(v []DataElementOperand) {
	o.GreyedFields = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Section) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Section) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Section) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Section) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Section) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Section) SetId(v string) {
	o.Id = &v
}

// GetIndicators returns the Indicators field value if set, zero value otherwise.
func (o *Section) GetIndicators() []BaseIdentifiableObject {
	if o == nil || IsNil(o.Indicators) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.Indicators
}

// GetIndicatorsOk returns a tuple with the Indicators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetIndicatorsOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.Indicators) {
		return nil, false
	}
	return o.Indicators, true
}

// HasIndicators returns a boolean if a field has been set.
func (o *Section) HasIndicators() bool {
	if o != nil && !IsNil(o.Indicators) {
		return true
	}

	return false
}

// SetIndicators gets a reference to the given []BaseIdentifiableObject and assigns it to the Indicators field.
func (o *Section) SetIndicators(v []BaseIdentifiableObject) {
	o.Indicators = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Section) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Section) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Section) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *Section) GetLastUpdatedBy() UserDto {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret UserDto
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetLastUpdatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *Section) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given UserDto and assigns it to the LastUpdatedBy field.
func (o *Section) SetLastUpdatedBy(v UserDto) {
	o.LastUpdatedBy = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Section) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Section) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Section) SetName(v string) {
	o.Name = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *Section) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *Section) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *Section) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetShowColumnTotals returns the ShowColumnTotals field value if set, zero value otherwise.
func (o *Section) GetShowColumnTotals() bool {
	if o == nil || IsNil(o.ShowColumnTotals) {
		var ret bool
		return ret
	}
	return *o.ShowColumnTotals
}

// GetShowColumnTotalsOk returns a tuple with the ShowColumnTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetShowColumnTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowColumnTotals) {
		return nil, false
	}
	return o.ShowColumnTotals, true
}

// HasShowColumnTotals returns a boolean if a field has been set.
func (o *Section) HasShowColumnTotals() bool {
	if o != nil && !IsNil(o.ShowColumnTotals) {
		return true
	}

	return false
}

// SetShowColumnTotals gets a reference to the given bool and assigns it to the ShowColumnTotals field.
func (o *Section) SetShowColumnTotals(v bool) {
	o.ShowColumnTotals = &v
}

// GetShowRowTotals returns the ShowRowTotals field value if set, zero value otherwise.
func (o *Section) GetShowRowTotals() bool {
	if o == nil || IsNil(o.ShowRowTotals) {
		var ret bool
		return ret
	}
	return *o.ShowRowTotals
}

// GetShowRowTotalsOk returns a tuple with the ShowRowTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetShowRowTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowRowTotals) {
		return nil, false
	}
	return o.ShowRowTotals, true
}

// HasShowRowTotals returns a boolean if a field has been set.
func (o *Section) HasShowRowTotals() bool {
	if o != nil && !IsNil(o.ShowRowTotals) {
		return true
	}

	return false
}

// SetShowRowTotals gets a reference to the given bool and assigns it to the ShowRowTotals field.
func (o *Section) SetShowRowTotals(v bool) {
	o.ShowRowTotals = &v
}

// GetSortOrder returns the SortOrder field value
func (o *Section) GetSortOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
func (o *Section) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortOrder, true
}

// SetSortOrder sets field value
func (o *Section) SetSortOrder(v int32) {
	o.SortOrder = v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *Section) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *Section) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *Section) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o Section) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Section) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.CategoryCombos) {
		toSerialize["categoryCombos"] = o.CategoryCombos
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DataElements) {
		toSerialize["dataElements"] = o.DataElements
	}
	if !IsNil(o.DataSet) {
		toSerialize["dataSet"] = o.DataSet
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisableDataElementAutoGroup) {
		toSerialize["disableDataElementAutoGroup"] = o.DisableDataElementAutoGroup
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayOptions) {
		toSerialize["displayOptions"] = o.DisplayOptions
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.GreyedFields) {
		toSerialize["greyedFields"] = o.GreyedFields
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Indicators) {
		toSerialize["indicators"] = o.Indicators
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.ShowColumnTotals) {
		toSerialize["showColumnTotals"] = o.ShowColumnTotals
	}
	if !IsNil(o.ShowRowTotals) {
		toSerialize["showRowTotals"] = o.ShowRowTotals
	}
	toSerialize["sortOrder"] = o.SortOrder
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

func (o *Section) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sortOrder",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSection := _Section{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSection)

	if err != nil {
		return err
	}

	*o = Section(varSection)

	return err
}

type NullableSection struct {
	value *Section
	isSet bool
}

func (v NullableSection) Get() *Section {
	return v.value
}

func (v *NullableSection) Set(val *Section) {
	v.value = val
	v.isSet = true
}

func (v NullableSection) IsSet() bool {
	return v.isSet
}

func (v *NullableSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSection(val *Section) *NullableSection {
	return &NullableSection{value: val, isSet: true}
}

func (v NullableSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
