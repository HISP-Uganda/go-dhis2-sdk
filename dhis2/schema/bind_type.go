/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// BindType the model 'BindType'
type BindType string

// List of BindType
const (
	BINDTYPE_TX  BindType = "BIND_TX"
	BINDTYPE_RX  BindType = "BIND_RX"
	BINDTYPE_TRX BindType = "BIND_TRX"
)

// All allowed values of BindType enum
var AllowedBindTypeEnumValues = []BindType{
	"BIND_TX",
	"BIND_RX",
	"BIND_TRX",
}

func (v *BindType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BindType(value)
	for _, existing := range AllowedBindTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BindType", value)
}

// NewBindTypeFromValue returns a pointer to a valid BindType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBindTypeFromValue(v string) (*BindType, error) {
	ev := BindType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BindType: valid values are %v", v, AllowedBindTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BindType) IsValid() bool {
	for _, existing := range AllowedBindTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BindType value
func (v BindType) Ptr() *BindType {
	return &v
}

type NullableBindType struct {
	value *BindType
	isSet bool
}

func (v NullableBindType) Get() *BindType {
	return v.value
}

func (v *NullableBindType) Set(val *BindType) {
	v.value = val
	v.isSet = true
}

func (v NullableBindType) IsSet() bool {
	return v.isSet
}

func (v *NullableBindType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBindType(val *BindType) *NullableBindType {
	return &NullableBindType{value: val, isSet: true}
}

func (v NullableBindType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBindType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
