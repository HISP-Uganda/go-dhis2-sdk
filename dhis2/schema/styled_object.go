/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StyledObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StyledObject{}

// StyledObject struct for StyledObject
type StyledObject struct {
	FontStyle *FontStyle `json:"fontStyle,omitempty"`
	Text      *string    `json:"text,omitempty"`
	TextMode  TextMode   `json:"textMode"`
}

type _StyledObject StyledObject

// NewStyledObject instantiates a new StyledObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStyledObject(textMode TextMode) *StyledObject {
	this := StyledObject{}
	this.TextMode = textMode
	return &this
}

// NewStyledObjectWithDefaults instantiates a new StyledObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStyledObjectWithDefaults() *StyledObject {
	this := StyledObject{}
	return &this
}

// GetFontStyle returns the FontStyle field value if set, zero value otherwise.
func (o *StyledObject) GetFontStyle() FontStyle {
	if o == nil || IsNil(o.FontStyle) {
		var ret FontStyle
		return ret
	}
	return *o.FontStyle
}

// GetFontStyleOk returns a tuple with the FontStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StyledObject) GetFontStyleOk() (*FontStyle, bool) {
	if o == nil || IsNil(o.FontStyle) {
		return nil, false
	}
	return o.FontStyle, true
}

// HasFontStyle returns a boolean if a field has been set.
func (o *StyledObject) HasFontStyle() bool {
	if o != nil && !IsNil(o.FontStyle) {
		return true
	}

	return false
}

// SetFontStyle gets a reference to the given FontStyle and assigns it to the FontStyle field.
func (o *StyledObject) SetFontStyle(v FontStyle) {
	o.FontStyle = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *StyledObject) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StyledObject) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *StyledObject) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *StyledObject) SetText(v string) {
	o.Text = &v
}

// GetTextMode returns the TextMode field value
func (o *StyledObject) GetTextMode() TextMode {
	if o == nil {
		var ret TextMode
		return ret
	}

	return o.TextMode
}

// GetTextModeOk returns a tuple with the TextMode field value
// and a boolean to check if the value has been set.
func (o *StyledObject) GetTextModeOk() (*TextMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TextMode, true
}

// SetTextMode sets field value
func (o *StyledObject) SetTextMode(v TextMode) {
	o.TextMode = v
}

func (o StyledObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StyledObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FontStyle) {
		toSerialize["fontStyle"] = o.FontStyle
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	toSerialize["textMode"] = o.TextMode
	return toSerialize, nil
}

func (o *StyledObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"textMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStyledObject := _StyledObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStyledObject)

	if err != nil {
		return err
	}

	*o = StyledObject(varStyledObject)

	return err
}

type NullableStyledObject struct {
	value *StyledObject
	isSet bool
}

func (v NullableStyledObject) Get() *StyledObject {
	return v.value
}

func (v *NullableStyledObject) Set(val *StyledObject) {
	v.value = val
	v.isSet = true
}

func (v NullableStyledObject) IsSet() bool {
	return v.isSet
}

func (v *NullableStyledObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStyledObject(val *StyledObject) *NullableStyledObject {
	return &NullableStyledObject{value: val, isSet: true}
}

func (v NullableStyledObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStyledObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
