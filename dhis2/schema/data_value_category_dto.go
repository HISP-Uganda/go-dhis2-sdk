/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the DataValueCategoryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataValueCategoryDto{}

// DataValueCategoryDto struct for DataValueCategoryDto
type DataValueCategoryDto struct {
	// A UID for an CategoryCombo object   (Java name `org.hisp.dhis.category.CategoryCombo`)
	Combo   *string  `json:"combo,omitempty"`
	Options []string `json:"options,omitempty"`
}

// NewDataValueCategoryDto instantiates a new DataValueCategoryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataValueCategoryDto() *DataValueCategoryDto {
	this := DataValueCategoryDto{}
	return &this
}

// NewDataValueCategoryDtoWithDefaults instantiates a new DataValueCategoryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataValueCategoryDtoWithDefaults() *DataValueCategoryDto {
	this := DataValueCategoryDto{}
	return &this
}

// GetCombo returns the Combo field value if set, zero value otherwise.
func (o *DataValueCategoryDto) GetCombo() string {
	if o == nil || IsNil(o.Combo) {
		var ret string
		return ret
	}
	return *o.Combo
}

// GetComboOk returns a tuple with the Combo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueCategoryDto) GetComboOk() (*string, bool) {
	if o == nil || IsNil(o.Combo) {
		return nil, false
	}
	return o.Combo, true
}

// HasCombo returns a boolean if a field has been set.
func (o *DataValueCategoryDto) HasCombo() bool {
	if o != nil && !IsNil(o.Combo) {
		return true
	}

	return false
}

// SetCombo gets a reference to the given string and assigns it to the Combo field.
func (o *DataValueCategoryDto) SetCombo(v string) {
	o.Combo = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *DataValueCategoryDto) GetOptions() []string {
	if o == nil || IsNil(o.Options) {
		var ret []string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueCategoryDto) GetOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *DataValueCategoryDto) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *DataValueCategoryDto) SetOptions(v []string) {
	o.Options = v
}

func (o DataValueCategoryDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataValueCategoryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Combo) {
		toSerialize["combo"] = o.Combo
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableDataValueCategoryDto struct {
	value *DataValueCategoryDto
	isSet bool
}

func (v NullableDataValueCategoryDto) Get() *DataValueCategoryDto {
	return v.value
}

func (v *NullableDataValueCategoryDto) Set(val *DataValueCategoryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataValueCategoryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataValueCategoryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataValueCategoryDto(val *DataValueCategoryDto) *NullableDataValueCategoryDto {
	return &NullableDataValueCategoryDto{value: val, isSet: true}
}

func (v NullableDataValueCategoryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataValueCategoryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
