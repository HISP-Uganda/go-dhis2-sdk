/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the UserMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserMessage{}

// UserMessage struct for UserMessage
type UserMessage struct {
	FollowUp *bool    `json:"followUp,omitempty"`
	Key      *string  `json:"key,omitempty"`
	Read     *bool    `json:"read,omitempty"`
	User     *UserDto `json:"user,omitempty"`
}

// NewUserMessage instantiates a new UserMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserMessage() *UserMessage {
	this := UserMessage{}
	return &this
}

// NewUserMessageWithDefaults instantiates a new UserMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserMessageWithDefaults() *UserMessage {
	this := UserMessage{}
	return &this
}

// GetFollowUp returns the FollowUp field value if set, zero value otherwise.
func (o *UserMessage) GetFollowUp() bool {
	if o == nil || IsNil(o.FollowUp) {
		var ret bool
		return ret
	}
	return *o.FollowUp
}

// GetFollowUpOk returns a tuple with the FollowUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMessage) GetFollowUpOk() (*bool, bool) {
	if o == nil || IsNil(o.FollowUp) {
		return nil, false
	}
	return o.FollowUp, true
}

// HasFollowUp returns a boolean if a field has been set.
func (o *UserMessage) HasFollowUp() bool {
	if o != nil && !IsNil(o.FollowUp) {
		return true
	}

	return false
}

// SetFollowUp gets a reference to the given bool and assigns it to the FollowUp field.
func (o *UserMessage) SetFollowUp(v bool) {
	o.FollowUp = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *UserMessage) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMessage) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *UserMessage) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *UserMessage) SetKey(v string) {
	o.Key = &v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *UserMessage) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMessage) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *UserMessage) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *UserMessage) SetRead(v bool) {
	o.Read = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *UserMessage) GetUser() UserDto {
	if o == nil || IsNil(o.User) {
		var ret UserDto
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMessage) GetUserOk() (*UserDto, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *UserMessage) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserDto and assigns it to the User field.
func (o *UserMessage) SetUser(v UserDto) {
	o.User = &v
}

func (o UserMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FollowUp) {
		toSerialize["followUp"] = o.FollowUp
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableUserMessage struct {
	value *UserMessage
	isSet bool
}

func (v NullableUserMessage) Get() *UserMessage {
	return v.value
}

func (v *NullableUserMessage) Set(val *UserMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableUserMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableUserMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserMessage(val *UserMessage) *NullableUserMessage {
	return &NullableUserMessage{value: val, isSet: true}
}

func (v NullableUserMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
