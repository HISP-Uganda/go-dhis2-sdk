/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the FilterOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterOptions{}

// FilterOptions struct for FilterOptions
type FilterOptions struct {
	Expanded *bool `json:"expanded,omitempty"`
	Visible  *bool `json:"visible,omitempty"`
}

// NewFilterOptions instantiates a new FilterOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterOptions() *FilterOptions {
	this := FilterOptions{}
	return &this
}

// NewFilterOptionsWithDefaults instantiates a new FilterOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterOptionsWithDefaults() *FilterOptions {
	this := FilterOptions{}
	return &this
}

// GetExpanded returns the Expanded field value if set, zero value otherwise.
func (o *FilterOptions) GetExpanded() bool {
	if o == nil || IsNil(o.Expanded) {
		var ret bool
		return ret
	}
	return *o.Expanded
}

// GetExpandedOk returns a tuple with the Expanded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterOptions) GetExpandedOk() (*bool, bool) {
	if o == nil || IsNil(o.Expanded) {
		return nil, false
	}
	return o.Expanded, true
}

// HasExpanded returns a boolean if a field has been set.
func (o *FilterOptions) HasExpanded() bool {
	if o != nil && !IsNil(o.Expanded) {
		return true
	}

	return false
}

// SetExpanded gets a reference to the given bool and assigns it to the Expanded field.
func (o *FilterOptions) SetExpanded(v bool) {
	o.Expanded = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *FilterOptions) GetVisible() bool {
	if o == nil || IsNil(o.Visible) {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterOptions) GetVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *FilterOptions) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *FilterOptions) SetVisible(v bool) {
	o.Visible = &v
}

func (o FilterOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expanded) {
		toSerialize["expanded"] = o.Expanded
	}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	return toSerialize, nil
}

type NullableFilterOptions struct {
	value *FilterOptions
	isSet bool
}

func (v NullableFilterOptions) Get() *FilterOptions {
	return v.value
}

func (v *NullableFilterOptions) Set(val *FilterOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterOptions(val *FilterOptions) *NullableFilterOptions {
	return &NullableFilterOptions{value: val, isSet: true}
}

func (v NullableFilterOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
