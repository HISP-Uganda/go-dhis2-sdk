/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesPushAnalysis the model 'PropertyNamesPushAnalysis'
type PropertyNamesPushAnalysis string

// List of PropertyNames_PushAnalysis
const (
	PROPERTYNAMESPUSHANALYSIS_ACCESS                PropertyNamesPushAnalysis = "access"
	PROPERTYNAMESPUSHANALYSIS_ATTRIBUTE_VALUES      PropertyNamesPushAnalysis = "attributeValues"
	PROPERTYNAMESPUSHANALYSIS_CODE                  PropertyNamesPushAnalysis = "code"
	PROPERTYNAMESPUSHANALYSIS_CREATED               PropertyNamesPushAnalysis = "created"
	PROPERTYNAMESPUSHANALYSIS_CREATED_BY            PropertyNamesPushAnalysis = "createdBy"
	PROPERTYNAMESPUSHANALYSIS_DASHBOARD             PropertyNamesPushAnalysis = "dashboard"
	PROPERTYNAMESPUSHANALYSIS_DISPLAY_NAME          PropertyNamesPushAnalysis = "displayName"
	PROPERTYNAMESPUSHANALYSIS_EXTERNAL_ACCESS       PropertyNamesPushAnalysis = "externalAccess"
	PROPERTYNAMESPUSHANALYSIS_FAVORITE              PropertyNamesPushAnalysis = "favorite"
	PROPERTYNAMESPUSHANALYSIS_FAVORITES             PropertyNamesPushAnalysis = "favorites"
	PROPERTYNAMESPUSHANALYSIS_HREF                  PropertyNamesPushAnalysis = "href"
	PROPERTYNAMESPUSHANALYSIS_ID                    PropertyNamesPushAnalysis = "id"
	PROPERTYNAMESPUSHANALYSIS_LAST_UPDATED          PropertyNamesPushAnalysis = "lastUpdated"
	PROPERTYNAMESPUSHANALYSIS_LAST_UPDATED_BY       PropertyNamesPushAnalysis = "lastUpdatedBy"
	PROPERTYNAMESPUSHANALYSIS_MESSAGE               PropertyNamesPushAnalysis = "message"
	PROPERTYNAMESPUSHANALYSIS_NAME                  PropertyNamesPushAnalysis = "name"
	PROPERTYNAMESPUSHANALYSIS_PUBLIC_ACCESS         PropertyNamesPushAnalysis = "publicAccess"
	PROPERTYNAMESPUSHANALYSIS_RECIPIENT_USER_GROUPS PropertyNamesPushAnalysis = "recipientUserGroups"
	PROPERTYNAMESPUSHANALYSIS_SHARING               PropertyNamesPushAnalysis = "sharing"
	PROPERTYNAMESPUSHANALYSIS_TITLE                 PropertyNamesPushAnalysis = "title"
	PROPERTYNAMESPUSHANALYSIS_TRANSLATIONS          PropertyNamesPushAnalysis = "translations"
	PROPERTYNAMESPUSHANALYSIS_USER                  PropertyNamesPushAnalysis = "user"
	PROPERTYNAMESPUSHANALYSIS_USER_ACCESSES         PropertyNamesPushAnalysis = "userAccesses"
	PROPERTYNAMESPUSHANALYSIS_USER_GROUP_ACCESSES   PropertyNamesPushAnalysis = "userGroupAccesses"
)

// All allowed values of PropertyNamesPushAnalysis enum
var AllowedPropertyNamesPushAnalysisEnumValues = []PropertyNamesPushAnalysis{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"dashboard",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"message",
	"name",
	"publicAccess",
	"recipientUserGroups",
	"sharing",
	"title",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesPushAnalysis) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesPushAnalysis(value)
	for _, existing := range AllowedPropertyNamesPushAnalysisEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesPushAnalysis", value)
}

// NewPropertyNamesPushAnalysisFromValue returns a pointer to a valid PropertyNamesPushAnalysis
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesPushAnalysisFromValue(v string) (*PropertyNamesPushAnalysis, error) {
	ev := PropertyNamesPushAnalysis(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesPushAnalysis: valid values are %v", v, AllowedPropertyNamesPushAnalysisEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesPushAnalysis) IsValid() bool {
	for _, existing := range AllowedPropertyNamesPushAnalysisEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_PushAnalysis value
func (v PropertyNamesPushAnalysis) Ptr() *PropertyNamesPushAnalysis {
	return &v
}

type NullablePropertyNamesPushAnalysis struct {
	value *PropertyNamesPushAnalysis
	isSet bool
}

func (v NullablePropertyNamesPushAnalysis) Get() *PropertyNamesPushAnalysis {
	return v.value
}

func (v *NullablePropertyNamesPushAnalysis) Set(val *PropertyNamesPushAnalysis) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesPushAnalysis) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesPushAnalysis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesPushAnalysis(val *PropertyNamesPushAnalysis) *NullablePropertyNamesPushAnalysis {
	return &NullablePropertyNamesPushAnalysis{value: val, isSet: true}
}

func (v NullablePropertyNamesPushAnalysis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesPushAnalysis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
