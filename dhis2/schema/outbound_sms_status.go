/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// OutboundSmsStatus the model 'OutboundSmsStatus'
type OutboundSmsStatus string

// List of OutboundSmsStatus
const (
	OUTBOUNDSMSSTATUS_OUTBOUND  OutboundSmsStatus = "OUTBOUND"
	OUTBOUNDSMSSTATUS_SENT      OutboundSmsStatus = "SENT"
	OUTBOUNDSMSSTATUS_ERROR     OutboundSmsStatus = "ERROR"
	OUTBOUNDSMSSTATUS_PENDING   OutboundSmsStatus = "PENDING"
	OUTBOUNDSMSSTATUS_SCHEDULED OutboundSmsStatus = "SCHEDULED"
	OUTBOUNDSMSSTATUS_DELIVERED OutboundSmsStatus = "DELIVERED"
	OUTBOUNDSMSSTATUS_FAILED    OutboundSmsStatus = "FAILED"
)

// All allowed values of OutboundSmsStatus enum
var AllowedOutboundSmsStatusEnumValues = []OutboundSmsStatus{
	"OUTBOUND",
	"SENT",
	"ERROR",
	"PENDING",
	"SCHEDULED",
	"DELIVERED",
	"FAILED",
}

func (v *OutboundSmsStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OutboundSmsStatus(value)
	for _, existing := range AllowedOutboundSmsStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OutboundSmsStatus", value)
}

// NewOutboundSmsStatusFromValue returns a pointer to a valid OutboundSmsStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOutboundSmsStatusFromValue(v string) (*OutboundSmsStatus, error) {
	ev := OutboundSmsStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OutboundSmsStatus: valid values are %v", v, AllowedOutboundSmsStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OutboundSmsStatus) IsValid() bool {
	for _, existing := range AllowedOutboundSmsStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OutboundSmsStatus value
func (v OutboundSmsStatus) Ptr() *OutboundSmsStatus {
	return &v
}

type NullableOutboundSmsStatus struct {
	value *OutboundSmsStatus
	isSet bool
}

func (v NullableOutboundSmsStatus) Get() *OutboundSmsStatus {
	return v.value
}

func (v *NullableOutboundSmsStatus) Set(val *OutboundSmsStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboundSmsStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboundSmsStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboundSmsStatus(val *OutboundSmsStatus) *NullableOutboundSmsStatus {
	return &NullableOutboundSmsStatus{value: val, isSet: true}
}

func (v NullableOutboundSmsStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboundSmsStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
