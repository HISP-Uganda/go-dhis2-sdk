/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ObjectReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectReport{}

// ObjectReport struct for ObjectReport
type ObjectReport struct {
	DisplayName  *string       `json:"displayName,omitempty"`
	ErrorReports []ErrorReport `json:"errorReports"`
	Index        *int32        `json:"index,omitempty"`
	Klass        *string       `json:"klass,omitempty"`
	Uid          *string       `json:"uid,omitempty"`
}

type _ObjectReport ObjectReport

// NewObjectReport instantiates a new ObjectReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectReport(errorReports []ErrorReport) *ObjectReport {
	this := ObjectReport{}
	this.ErrorReports = errorReports
	return &this
}

// NewObjectReportWithDefaults instantiates a new ObjectReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectReportWithDefaults() *ObjectReport {
	this := ObjectReport{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ObjectReport) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectReport) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ObjectReport) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ObjectReport) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetErrorReports returns the ErrorReports field value
func (o *ObjectReport) GetErrorReports() []ErrorReport {
	if o == nil {
		var ret []ErrorReport
		return ret
	}

	return o.ErrorReports
}

// GetErrorReportsOk returns a tuple with the ErrorReports field value
// and a boolean to check if the value has been set.
func (o *ObjectReport) GetErrorReportsOk() ([]ErrorReport, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorReports, true
}

// SetErrorReports sets field value
func (o *ObjectReport) SetErrorReports(v []ErrorReport) {
	o.ErrorReports = v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ObjectReport) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectReport) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ObjectReport) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *ObjectReport) SetIndex(v int32) {
	o.Index = &v
}

// GetKlass returns the Klass field value if set, zero value otherwise.
func (o *ObjectReport) GetKlass() string {
	if o == nil || IsNil(o.Klass) {
		var ret string
		return ret
	}
	return *o.Klass
}

// GetKlassOk returns a tuple with the Klass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectReport) GetKlassOk() (*string, bool) {
	if o == nil || IsNil(o.Klass) {
		return nil, false
	}
	return o.Klass, true
}

// HasKlass returns a boolean if a field has been set.
func (o *ObjectReport) HasKlass() bool {
	if o != nil && !IsNil(o.Klass) {
		return true
	}

	return false
}

// SetKlass gets a reference to the given string and assigns it to the Klass field.
func (o *ObjectReport) SetKlass(v string) {
	o.Klass = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *ObjectReport) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectReport) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *ObjectReport) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *ObjectReport) SetUid(v string) {
	o.Uid = &v
}

func (o ObjectReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["errorReports"] = o.ErrorReports
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.Klass) {
		toSerialize["klass"] = o.Klass
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

func (o *ObjectReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errorReports",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectReport := _ObjectReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectReport)

	if err != nil {
		return err
	}

	*o = ObjectReport(varObjectReport)

	return err
}

type NullableObjectReport struct {
	value *ObjectReport
	isSet bool
}

func (v NullableObjectReport) Get() *ObjectReport {
	return v.value
}

func (v *NullableObjectReport) Set(val *ObjectReport) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectReport) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectReport(val *ObjectReport) *NullableObjectReport {
	return &NullableObjectReport{value: val, isSet: true}
}

func (v NullableObjectReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
