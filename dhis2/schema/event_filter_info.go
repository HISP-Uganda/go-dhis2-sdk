/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventFilterInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventFilterInfo{}

// EventFilterInfo struct for EventFilterInfo
type EventFilterInfo struct {
	AssignedUserMode   AssignedUserSelectionMode `json:"assignedUserMode"`
	AssignedUsers      []string                  `json:"assignedUsers,omitempty"`
	EventCreatedPeriod *FilterPeriod             `json:"eventCreatedPeriod,omitempty"`
	EventStatus        EventStatus               `json:"eventStatus"`
	ProgramStage       *string                   `json:"programStage,omitempty"`
}

type _EventFilterInfo EventFilterInfo

// NewEventFilterInfo instantiates a new EventFilterInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventFilterInfo(assignedUserMode AssignedUserSelectionMode, eventStatus EventStatus) *EventFilterInfo {
	this := EventFilterInfo{}
	this.AssignedUserMode = assignedUserMode
	this.EventStatus = eventStatus
	return &this
}

// NewEventFilterInfoWithDefaults instantiates a new EventFilterInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventFilterInfoWithDefaults() *EventFilterInfo {
	this := EventFilterInfo{}
	return &this
}

// GetAssignedUserMode returns the AssignedUserMode field value
func (o *EventFilterInfo) GetAssignedUserMode() AssignedUserSelectionMode {
	if o == nil {
		var ret AssignedUserSelectionMode
		return ret
	}

	return o.AssignedUserMode
}

// GetAssignedUserModeOk returns a tuple with the AssignedUserMode field value
// and a boolean to check if the value has been set.
func (o *EventFilterInfo) GetAssignedUserModeOk() (*AssignedUserSelectionMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignedUserMode, true
}

// SetAssignedUserMode sets field value
func (o *EventFilterInfo) SetAssignedUserMode(v AssignedUserSelectionMode) {
	o.AssignedUserMode = v
}

// GetAssignedUsers returns the AssignedUsers field value if set, zero value otherwise.
func (o *EventFilterInfo) GetAssignedUsers() []string {
	if o == nil || IsNil(o.AssignedUsers) {
		var ret []string
		return ret
	}
	return o.AssignedUsers
}

// GetAssignedUsersOk returns a tuple with the AssignedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventFilterInfo) GetAssignedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.AssignedUsers) {
		return nil, false
	}
	return o.AssignedUsers, true
}

// HasAssignedUsers returns a boolean if a field has been set.
func (o *EventFilterInfo) HasAssignedUsers() bool {
	if o != nil && !IsNil(o.AssignedUsers) {
		return true
	}

	return false
}

// SetAssignedUsers gets a reference to the given []string and assigns it to the AssignedUsers field.
func (o *EventFilterInfo) SetAssignedUsers(v []string) {
	o.AssignedUsers = v
}

// GetEventCreatedPeriod returns the EventCreatedPeriod field value if set, zero value otherwise.
func (o *EventFilterInfo) GetEventCreatedPeriod() FilterPeriod {
	if o == nil || IsNil(o.EventCreatedPeriod) {
		var ret FilterPeriod
		return ret
	}
	return *o.EventCreatedPeriod
}

// GetEventCreatedPeriodOk returns a tuple with the EventCreatedPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventFilterInfo) GetEventCreatedPeriodOk() (*FilterPeriod, bool) {
	if o == nil || IsNil(o.EventCreatedPeriod) {
		return nil, false
	}
	return o.EventCreatedPeriod, true
}

// HasEventCreatedPeriod returns a boolean if a field has been set.
func (o *EventFilterInfo) HasEventCreatedPeriod() bool {
	if o != nil && !IsNil(o.EventCreatedPeriod) {
		return true
	}

	return false
}

// SetEventCreatedPeriod gets a reference to the given FilterPeriod and assigns it to the EventCreatedPeriod field.
func (o *EventFilterInfo) SetEventCreatedPeriod(v FilterPeriod) {
	o.EventCreatedPeriod = &v
}

// GetEventStatus returns the EventStatus field value
func (o *EventFilterInfo) GetEventStatus() EventStatus {
	if o == nil {
		var ret EventStatus
		return ret
	}

	return o.EventStatus
}

// GetEventStatusOk returns a tuple with the EventStatus field value
// and a boolean to check if the value has been set.
func (o *EventFilterInfo) GetEventStatusOk() (*EventStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventStatus, true
}

// SetEventStatus sets field value
func (o *EventFilterInfo) SetEventStatus(v EventStatus) {
	o.EventStatus = v
}

// GetProgramStage returns the ProgramStage field value if set, zero value otherwise.
func (o *EventFilterInfo) GetProgramStage() string {
	if o == nil || IsNil(o.ProgramStage) {
		var ret string
		return ret
	}
	return *o.ProgramStage
}

// GetProgramStageOk returns a tuple with the ProgramStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventFilterInfo) GetProgramStageOk() (*string, bool) {
	if o == nil || IsNil(o.ProgramStage) {
		return nil, false
	}
	return o.ProgramStage, true
}

// HasProgramStage returns a boolean if a field has been set.
func (o *EventFilterInfo) HasProgramStage() bool {
	if o != nil && !IsNil(o.ProgramStage) {
		return true
	}

	return false
}

// SetProgramStage gets a reference to the given string and assigns it to the ProgramStage field.
func (o *EventFilterInfo) SetProgramStage(v string) {
	o.ProgramStage = &v
}

func (o EventFilterInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventFilterInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assignedUserMode"] = o.AssignedUserMode
	if !IsNil(o.AssignedUsers) {
		toSerialize["assignedUsers"] = o.AssignedUsers
	}
	if !IsNil(o.EventCreatedPeriod) {
		toSerialize["eventCreatedPeriod"] = o.EventCreatedPeriod
	}
	toSerialize["eventStatus"] = o.EventStatus
	if !IsNil(o.ProgramStage) {
		toSerialize["programStage"] = o.ProgramStage
	}
	return toSerialize, nil
}

func (o *EventFilterInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assignedUserMode",
		"eventStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventFilterInfo := _EventFilterInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventFilterInfo)

	if err != nil {
		return err
	}

	*o = EventFilterInfo(varEventFilterInfo)

	return err
}

type NullableEventFilterInfo struct {
	value *EventFilterInfo
	isSet bool
}

func (v NullableEventFilterInfo) Get() *EventFilterInfo {
	return v.value
}

func (v *NullableEventFilterInfo) Set(val *EventFilterInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEventFilterInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEventFilterInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventFilterInfo(val *EventFilterInfo) *NullableEventFilterInfo {
	return &NullableEventFilterInfo{value: val, isSet: true}
}

func (v NullableEventFilterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventFilterInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
