/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// NormalizedOutlierMethod the model 'NormalizedOutlierMethod'
type NormalizedOutlierMethod string

// List of NormalizedOutlierMethod
const (
	NORMALIZEDOUTLIERMETHOD_Y_RESIDUALS_LINEAR NormalizedOutlierMethod = "Y_RESIDUALS_LINEAR"
)

// All allowed values of NormalizedOutlierMethod enum
var AllowedNormalizedOutlierMethodEnumValues = []NormalizedOutlierMethod{
	"Y_RESIDUALS_LINEAR",
}

func (v *NormalizedOutlierMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NormalizedOutlierMethod(value)
	for _, existing := range AllowedNormalizedOutlierMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NormalizedOutlierMethod", value)
}

// NewNormalizedOutlierMethodFromValue returns a pointer to a valid NormalizedOutlierMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNormalizedOutlierMethodFromValue(v string) (*NormalizedOutlierMethod, error) {
	ev := NormalizedOutlierMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NormalizedOutlierMethod: valid values are %v", v, AllowedNormalizedOutlierMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NormalizedOutlierMethod) IsValid() bool {
	for _, existing := range AllowedNormalizedOutlierMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NormalizedOutlierMethod value
func (v NormalizedOutlierMethod) Ptr() *NormalizedOutlierMethod {
	return &v
}

type NullableNormalizedOutlierMethod struct {
	value *NormalizedOutlierMethod
	isSet bool
}

func (v NullableNormalizedOutlierMethod) Get() *NormalizedOutlierMethod {
	return v.value
}

func (v *NullableNormalizedOutlierMethod) Set(val *NormalizedOutlierMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableNormalizedOutlierMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableNormalizedOutlierMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNormalizedOutlierMethod(val *NormalizedOutlierMethod) *NullableNormalizedOutlierMethod {
	return &NullableNormalizedOutlierMethod{value: val, isSet: true}
}

func (v NullableNormalizedOutlierMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNormalizedOutlierMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
