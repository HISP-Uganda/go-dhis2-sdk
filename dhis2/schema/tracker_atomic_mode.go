/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// TrackerAtomicMode the model 'TrackerAtomicMode'
type TrackerAtomicMode string

// List of TrackerAtomicMode
const (
	TRACKERATOMICMODE_ALL    TrackerAtomicMode = "ALL"
	TRACKERATOMICMODE_OBJECT TrackerAtomicMode = "OBJECT"
)

// All allowed values of TrackerAtomicMode enum
var AllowedTrackerAtomicModeEnumValues = []TrackerAtomicMode{
	"ALL",
	"OBJECT",
}

func (v *TrackerAtomicMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackerAtomicMode(value)
	for _, existing := range AllowedTrackerAtomicModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackerAtomicMode", value)
}

// NewTrackerAtomicModeFromValue returns a pointer to a valid TrackerAtomicMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackerAtomicModeFromValue(v string) (*TrackerAtomicMode, error) {
	ev := TrackerAtomicMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackerAtomicMode: valid values are %v", v, AllowedTrackerAtomicModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackerAtomicMode) IsValid() bool {
	for _, existing := range AllowedTrackerAtomicModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackerAtomicMode value
func (v TrackerAtomicMode) Ptr() *TrackerAtomicMode {
	return &v
}

type NullableTrackerAtomicMode struct {
	value *TrackerAtomicMode
	isSet bool
}

func (v NullableTrackerAtomicMode) Get() *TrackerAtomicMode {
	return v.value
}

func (v *NullableTrackerAtomicMode) Set(val *TrackerAtomicMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerAtomicMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerAtomicMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerAtomicMode(val *TrackerAtomicMode) *NullableTrackerAtomicMode {
	return &NullableTrackerAtomicMode{value: val, isSet: true}
}

func (v NullableTrackerAtomicMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerAtomicMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
