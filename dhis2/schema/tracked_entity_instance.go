/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// checks if the TrackedEntityInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackedEntityInstance{}

// TrackedEntityInstance struct for TrackedEntityInstance
type TrackedEntityInstance struct {
	Access                       *Access                               `json:"access,omitempty"`
	AttributeValues              []AttributeValue                      `json:"attributeValues,omitempty"`
	Code                         *string                               `json:"code,omitempty"`
	Created                      *time.Time                            `json:"created,omitempty"`
	CreatedAtClient              *time.Time                            `json:"createdAtClient,omitempty"`
	CreatedBy                    *AggregateDataExchangeCreatedBy       `json:"createdBy,omitempty"`
	CreatedByUserInfo            *UserInfoSnapshot                     `json:"createdByUserInfo,omitempty"`
	Deleted                      *bool                                 `json:"deleted,omitempty"`
	DisplayName                  *string                               `json:"displayName,omitempty"`
	ExternalAccess               *bool                                 `json:"externalAccess,omitempty"`
	Favorite                     *bool                                 `json:"favorite,omitempty"`
	Favorites                    []string                              `json:"favorites,omitempty"`
	Geometry                     map[string]interface{}                `json:"geometry,omitempty"`
	Href                         *string                               `json:"href,omitempty"`
	Id                           *string                               `json:"id,omitempty"`
	Inactive                     *bool                                 `json:"inactive,omitempty"`
	LastUpdated                  *time.Time                            `json:"lastUpdated,omitempty"`
	LastUpdatedAtClient          *time.Time                            `json:"lastUpdatedAtClient,omitempty"`
	LastUpdatedBy                *AggregateDataExchangeCreatedBy       `json:"lastUpdatedBy,omitempty"`
	LastUpdatedByUserInfo        *UserInfoSnapshot                     `json:"lastUpdatedByUserInfo,omitempty"`
	Name                         *string                               `json:"name,omitempty"`
	OrganisationUnit             *CategoryOptionOrganisationUnitsInner `json:"organisationUnit,omitempty"`
	PotentialDuplicate           *bool                                 `json:"potentialDuplicate,omitempty"`
	ProgramInstances             []ProgramMessageProgramInstance       `json:"programInstances,omitempty"`
	ProgramOwners                []TrackedEntityProgramOwner           `json:"programOwners,omitempty"`
	PublicAccess                 *string                               `json:"publicAccess,omitempty"`
	RelationshipItems            []RelationshipItem                    `json:"relationshipItems,omitempty"`
	Sharing                      *Sharing                              `json:"sharing,omitempty"`
	StoredBy                     *string                               `json:"storedBy,omitempty"`
	TrackedEntityAttributeValues []TrackedEntityAttributeValue         `json:"trackedEntityAttributeValues,omitempty"`
	TrackedEntityType            *MapViewTrackedEntityType             `json:"trackedEntityType,omitempty"`
	Translations                 []Translation                         `json:"translations,omitempty"`
	User                         *AggregateDataExchangeCreatedBy       `json:"user,omitempty"`
	UserAccesses                 []LegacyUserAccess                    `json:"userAccesses,omitempty"`
	UserGroupAccesses            []LegacyUserGroupAccess               `json:"userGroupAccesses,omitempty"`
}

// NewTrackedEntityInstance instantiates a new TrackedEntityInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackedEntityInstance() *TrackedEntityInstance {
	this := TrackedEntityInstance{}
	return &this
}

// NewTrackedEntityInstanceWithDefaults instantiates a new TrackedEntityInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackedEntityInstanceWithDefaults() *TrackedEntityInstance {
	this := TrackedEntityInstance{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *TrackedEntityInstance) SetAccess(v Access) {
	o.Access = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *TrackedEntityInstance) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TrackedEntityInstance) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *TrackedEntityInstance) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedAtClient returns the CreatedAtClient field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetCreatedAtClient() time.Time {
	if o == nil || IsNil(o.CreatedAtClient) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAtClient
}

// GetCreatedAtClientOk returns a tuple with the CreatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetCreatedAtClientOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAtClient) {
		return nil, false
	}
	return o.CreatedAtClient, true
}

// HasCreatedAtClient returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasCreatedAtClient() bool {
	if o != nil && !IsNil(o.CreatedAtClient) {
		return true
	}

	return false
}

// SetCreatedAtClient gets a reference to the given time.Time and assigns it to the CreatedAtClient field.
func (o *TrackedEntityInstance) SetCreatedAtClient(v time.Time) {
	o.CreatedAtClient = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetCreatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetCreatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the CreatedBy field.
func (o *TrackedEntityInstance) SetCreatedBy(v AggregateDataExchangeCreatedBy) {
	o.CreatedBy = &v
}

// GetCreatedByUserInfo returns the CreatedByUserInfo field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetCreatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.CreatedByUserInfo
}

// GetCreatedByUserInfoOk returns a tuple with the CreatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetCreatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		return nil, false
	}
	return o.CreatedByUserInfo, true
}

// HasCreatedByUserInfo returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasCreatedByUserInfo() bool {
	if o != nil && !IsNil(o.CreatedByUserInfo) {
		return true
	}

	return false
}

// SetCreatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the CreatedByUserInfo field.
func (o *TrackedEntityInstance) SetCreatedByUserInfo(v UserInfoSnapshot) {
	o.CreatedByUserInfo = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *TrackedEntityInstance) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *TrackedEntityInstance) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExternalAccess returns the ExternalAccess field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetExternalAccess() bool {
	if o == nil || IsNil(o.ExternalAccess) {
		var ret bool
		return ret
	}
	return *o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetExternalAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAccess) {
		return nil, false
	}
	return o.ExternalAccess, true
}

// HasExternalAccess returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasExternalAccess() bool {
	if o != nil && !IsNil(o.ExternalAccess) {
		return true
	}

	return false
}

// SetExternalAccess gets a reference to the given bool and assigns it to the ExternalAccess field.
func (o *TrackedEntityInstance) SetExternalAccess(v bool) {
	o.ExternalAccess = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *TrackedEntityInstance) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *TrackedEntityInstance) SetFavorites(v []string) {
	o.Favorites = v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetGeometry() map[string]interface{} {
	if o == nil || IsNil(o.Geometry) {
		var ret map[string]interface{}
		return ret
	}
	return o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetGeometryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Geometry) {
		return map[string]interface{}{}, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given map[string]interface{} and assigns it to the Geometry field.
func (o *TrackedEntityInstance) SetGeometry(v map[string]interface{}) {
	o.Geometry = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *TrackedEntityInstance) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TrackedEntityInstance) SetId(v string) {
	o.Id = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *TrackedEntityInstance) SetInactive(v bool) {
	o.Inactive = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *TrackedEntityInstance) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedAtClient returns the LastUpdatedAtClient field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetLastUpdatedAtClient() time.Time {
	if o == nil || IsNil(o.LastUpdatedAtClient) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedAtClient
}

// GetLastUpdatedAtClientOk returns a tuple with the LastUpdatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetLastUpdatedAtClientOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdatedAtClient) {
		return nil, false
	}
	return o.LastUpdatedAtClient, true
}

// HasLastUpdatedAtClient returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasLastUpdatedAtClient() bool {
	if o != nil && !IsNil(o.LastUpdatedAtClient) {
		return true
	}

	return false
}

// SetLastUpdatedAtClient gets a reference to the given time.Time and assigns it to the LastUpdatedAtClient field.
func (o *TrackedEntityInstance) SetLastUpdatedAtClient(v time.Time) {
	o.LastUpdatedAtClient = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetLastUpdatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetLastUpdatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the LastUpdatedBy field.
func (o *TrackedEntityInstance) SetLastUpdatedBy(v AggregateDataExchangeCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLastUpdatedByUserInfo returns the LastUpdatedByUserInfo field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetLastUpdatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.LastUpdatedByUserInfo
}

// GetLastUpdatedByUserInfoOk returns a tuple with the LastUpdatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetLastUpdatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		return nil, false
	}
	return o.LastUpdatedByUserInfo, true
}

// HasLastUpdatedByUserInfo returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasLastUpdatedByUserInfo() bool {
	if o != nil && !IsNil(o.LastUpdatedByUserInfo) {
		return true
	}

	return false
}

// SetLastUpdatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the LastUpdatedByUserInfo field.
func (o *TrackedEntityInstance) SetLastUpdatedByUserInfo(v UserInfoSnapshot) {
	o.LastUpdatedByUserInfo = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TrackedEntityInstance) SetName(v string) {
	o.Name = &v
}

// GetOrganisationUnit returns the OrganisationUnit field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetOrganisationUnit() CategoryOptionOrganisationUnitsInner {
	if o == nil || IsNil(o.OrganisationUnit) {
		var ret CategoryOptionOrganisationUnitsInner
		return ret
	}
	return *o.OrganisationUnit
}

// GetOrganisationUnitOk returns a tuple with the OrganisationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetOrganisationUnitOk() (*CategoryOptionOrganisationUnitsInner, bool) {
	if o == nil || IsNil(o.OrganisationUnit) {
		return nil, false
	}
	return o.OrganisationUnit, true
}

// HasOrganisationUnit returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasOrganisationUnit() bool {
	if o != nil && !IsNil(o.OrganisationUnit) {
		return true
	}

	return false
}

// SetOrganisationUnit gets a reference to the given CategoryOptionOrganisationUnitsInner and assigns it to the OrganisationUnit field.
func (o *TrackedEntityInstance) SetOrganisationUnit(v CategoryOptionOrganisationUnitsInner) {
	o.OrganisationUnit = &v
}

// GetPotentialDuplicate returns the PotentialDuplicate field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetPotentialDuplicate() bool {
	if o == nil || IsNil(o.PotentialDuplicate) {
		var ret bool
		return ret
	}
	return *o.PotentialDuplicate
}

// GetPotentialDuplicateOk returns a tuple with the PotentialDuplicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetPotentialDuplicateOk() (*bool, bool) {
	if o == nil || IsNil(o.PotentialDuplicate) {
		return nil, false
	}
	return o.PotentialDuplicate, true
}

// HasPotentialDuplicate returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasPotentialDuplicate() bool {
	if o != nil && !IsNil(o.PotentialDuplicate) {
		return true
	}

	return false
}

// SetPotentialDuplicate gets a reference to the given bool and assigns it to the PotentialDuplicate field.
func (o *TrackedEntityInstance) SetPotentialDuplicate(v bool) {
	o.PotentialDuplicate = &v
}

// GetProgramInstances returns the ProgramInstances field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetProgramInstances() []ProgramMessageProgramInstance {
	if o == nil || IsNil(o.ProgramInstances) {
		var ret []ProgramMessageProgramInstance
		return ret
	}
	return o.ProgramInstances
}

// GetProgramInstancesOk returns a tuple with the ProgramInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetProgramInstancesOk() ([]ProgramMessageProgramInstance, bool) {
	if o == nil || IsNil(o.ProgramInstances) {
		return nil, false
	}
	return o.ProgramInstances, true
}

// HasProgramInstances returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasProgramInstances() bool {
	if o != nil && !IsNil(o.ProgramInstances) {
		return true
	}

	return false
}

// SetProgramInstances gets a reference to the given []ProgramMessageProgramInstance and assigns it to the ProgramInstances field.
func (o *TrackedEntityInstance) SetProgramInstances(v []ProgramMessageProgramInstance) {
	o.ProgramInstances = v
}

// GetProgramOwners returns the ProgramOwners field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetProgramOwners() []TrackedEntityProgramOwner {
	if o == nil || IsNil(o.ProgramOwners) {
		var ret []TrackedEntityProgramOwner
		return ret
	}
	return o.ProgramOwners
}

// GetProgramOwnersOk returns a tuple with the ProgramOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetProgramOwnersOk() ([]TrackedEntityProgramOwner, bool) {
	if o == nil || IsNil(o.ProgramOwners) {
		return nil, false
	}
	return o.ProgramOwners, true
}

// HasProgramOwners returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasProgramOwners() bool {
	if o != nil && !IsNil(o.ProgramOwners) {
		return true
	}

	return false
}

// SetProgramOwners gets a reference to the given []TrackedEntityProgramOwner and assigns it to the ProgramOwners field.
func (o *TrackedEntityInstance) SetProgramOwners(v []TrackedEntityProgramOwner) {
	o.ProgramOwners = v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *TrackedEntityInstance) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetRelationshipItems returns the RelationshipItems field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetRelationshipItems() []RelationshipItem {
	if o == nil || IsNil(o.RelationshipItems) {
		var ret []RelationshipItem
		return ret
	}
	return o.RelationshipItems
}

// GetRelationshipItemsOk returns a tuple with the RelationshipItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetRelationshipItemsOk() ([]RelationshipItem, bool) {
	if o == nil || IsNil(o.RelationshipItems) {
		return nil, false
	}
	return o.RelationshipItems, true
}

// HasRelationshipItems returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasRelationshipItems() bool {
	if o != nil && !IsNil(o.RelationshipItems) {
		return true
	}

	return false
}

// SetRelationshipItems gets a reference to the given []RelationshipItem and assigns it to the RelationshipItems field.
func (o *TrackedEntityInstance) SetRelationshipItems(v []RelationshipItem) {
	o.RelationshipItems = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *TrackedEntityInstance) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *TrackedEntityInstance) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetTrackedEntityAttributeValues returns the TrackedEntityAttributeValues field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetTrackedEntityAttributeValues() []TrackedEntityAttributeValue {
	if o == nil || IsNil(o.TrackedEntityAttributeValues) {
		var ret []TrackedEntityAttributeValue
		return ret
	}
	return o.TrackedEntityAttributeValues
}

// GetTrackedEntityAttributeValuesOk returns a tuple with the TrackedEntityAttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetTrackedEntityAttributeValuesOk() ([]TrackedEntityAttributeValue, bool) {
	if o == nil || IsNil(o.TrackedEntityAttributeValues) {
		return nil, false
	}
	return o.TrackedEntityAttributeValues, true
}

// HasTrackedEntityAttributeValues returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasTrackedEntityAttributeValues() bool {
	if o != nil && !IsNil(o.TrackedEntityAttributeValues) {
		return true
	}

	return false
}

// SetTrackedEntityAttributeValues gets a reference to the given []TrackedEntityAttributeValue and assigns it to the TrackedEntityAttributeValues field.
func (o *TrackedEntityInstance) SetTrackedEntityAttributeValues(v []TrackedEntityAttributeValue) {
	o.TrackedEntityAttributeValues = v
}

// GetTrackedEntityType returns the TrackedEntityType field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetTrackedEntityType() MapViewTrackedEntityType {
	if o == nil || IsNil(o.TrackedEntityType) {
		var ret MapViewTrackedEntityType
		return ret
	}
	return *o.TrackedEntityType
}

// GetTrackedEntityTypeOk returns a tuple with the TrackedEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetTrackedEntityTypeOk() (*MapViewTrackedEntityType, bool) {
	if o == nil || IsNil(o.TrackedEntityType) {
		return nil, false
	}
	return o.TrackedEntityType, true
}

// HasTrackedEntityType returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasTrackedEntityType() bool {
	if o != nil && !IsNil(o.TrackedEntityType) {
		return true
	}

	return false
}

// SetTrackedEntityType gets a reference to the given MapViewTrackedEntityType and assigns it to the TrackedEntityType field.
func (o *TrackedEntityInstance) SetTrackedEntityType(v MapViewTrackedEntityType) {
	o.TrackedEntityType = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *TrackedEntityInstance) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *TrackedEntityInstance) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetUserAccesses() []LegacyUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []LegacyUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetUserAccessesOk() ([]LegacyUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []LegacyUserAccess and assigns it to the UserAccesses field.
func (o *TrackedEntityInstance) SetUserAccesses(v []LegacyUserAccess) {
	o.UserAccesses = v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *TrackedEntityInstance) GetUserGroupAccesses() []LegacyUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []LegacyUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityInstance) GetUserGroupAccessesOk() ([]LegacyUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *TrackedEntityInstance) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []LegacyUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *TrackedEntityInstance) SetUserGroupAccesses(v []LegacyUserGroupAccess) {
	o.UserGroupAccesses = v
}

func (o TrackedEntityInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackedEntityInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedAtClient) {
		toSerialize["createdAtClient"] = o.CreatedAtClient
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CreatedByUserInfo) {
		toSerialize["createdByUserInfo"] = o.CreatedByUserInfo
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.ExternalAccess) {
		toSerialize["externalAccess"] = o.ExternalAccess
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedAtClient) {
		toSerialize["lastUpdatedAtClient"] = o.LastUpdatedAtClient
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LastUpdatedByUserInfo) {
		toSerialize["lastUpdatedByUserInfo"] = o.LastUpdatedByUserInfo
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrganisationUnit) {
		toSerialize["organisationUnit"] = o.OrganisationUnit
	}
	if !IsNil(o.PotentialDuplicate) {
		toSerialize["potentialDuplicate"] = o.PotentialDuplicate
	}
	if !IsNil(o.ProgramInstances) {
		toSerialize["programInstances"] = o.ProgramInstances
	}
	if !IsNil(o.ProgramOwners) {
		toSerialize["programOwners"] = o.ProgramOwners
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	if !IsNil(o.RelationshipItems) {
		toSerialize["relationshipItems"] = o.RelationshipItems
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.TrackedEntityAttributeValues) {
		toSerialize["trackedEntityAttributeValues"] = o.TrackedEntityAttributeValues
	}
	if !IsNil(o.TrackedEntityType) {
		toSerialize["trackedEntityType"] = o.TrackedEntityType
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	return toSerialize, nil
}

type NullableTrackedEntityInstance struct {
	value *TrackedEntityInstance
	isSet bool
}

func (v NullableTrackedEntityInstance) Get() *TrackedEntityInstance {
	return v.value
}

func (v *NullableTrackedEntityInstance) Set(val *TrackedEntityInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackedEntityInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackedEntityInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackedEntityInstance(val *TrackedEntityInstance) *NullableTrackedEntityInstance {
	return &NullableTrackedEntityInstance{value: val, isSet: true}
}

func (v NullableTrackedEntityInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackedEntityInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
