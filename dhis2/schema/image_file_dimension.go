/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ImageFileDimension the model 'ImageFileDimension'
type ImageFileDimension string

// List of ImageFileDimension
const (
	IMAGEFILEDIMENSION_SMALL    ImageFileDimension = "SMALL"
	IMAGEFILEDIMENSION_MEDIUM   ImageFileDimension = "MEDIUM"
	IMAGEFILEDIMENSION_LARGE    ImageFileDimension = "LARGE"
	IMAGEFILEDIMENSION_ORIGINAL ImageFileDimension = "ORIGINAL"
)

// All allowed values of ImageFileDimension enum
var AllowedImageFileDimensionEnumValues = []ImageFileDimension{
	"SMALL",
	"MEDIUM",
	"LARGE",
	"ORIGINAL",
}

func (v *ImageFileDimension) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageFileDimension(value)
	for _, existing := range AllowedImageFileDimensionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageFileDimension", value)
}

// NewImageFileDimensionFromValue returns a pointer to a valid ImageFileDimension
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageFileDimensionFromValue(v string) (*ImageFileDimension, error) {
	ev := ImageFileDimension(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageFileDimension: valid values are %v", v, AllowedImageFileDimensionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageFileDimension) IsValid() bool {
	for _, existing := range AllowedImageFileDimensionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageFileDimension value
func (v ImageFileDimension) Ptr() *ImageFileDimension {
	return &v
}

type NullableImageFileDimension struct {
	value *ImageFileDimension
	isSet bool
}

func (v NullableImageFileDimension) Get() *ImageFileDimension {
	return v.value
}

func (v *NullableImageFileDimension) Set(val *ImageFileDimension) {
	v.value = val
	v.isSet = true
}

func (v NullableImageFileDimension) IsSet() bool {
	return v.isSet
}

func (v *NullableImageFileDimension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageFileDimension(val *ImageFileDimension) *NullableImageFileDimension {
	return &NullableImageFileDimension{value: val, isSet: true}
}

func (v NullableImageFileDimension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageFileDimension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
