/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AddIconRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddIconRequest{}

// AddIconRequest struct for AddIconRequest
type AddIconRequest struct {
	Description    *string  `json:"description,omitempty"`
	FileResourceId string   `json:"fileResourceId"`
	Key            string   `json:"key"`
	Keywords       []string `json:"keywords,omitempty"`
}

type _AddIconRequest AddIconRequest

// NewAddIconRequest instantiates a new AddIconRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddIconRequest(fileResourceId string, key string) *AddIconRequest {
	this := AddIconRequest{}
	this.FileResourceId = fileResourceId
	this.Key = key
	return &this
}

// NewAddIconRequestWithDefaults instantiates a new AddIconRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddIconRequestWithDefaults() *AddIconRequest {
	this := AddIconRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddIconRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIconRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddIconRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddIconRequest) SetDescription(v string) {
	o.Description = &v
}

// GetFileResourceId returns the FileResourceId field value
func (o *AddIconRequest) GetFileResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileResourceId
}

// GetFileResourceIdOk returns a tuple with the FileResourceId field value
// and a boolean to check if the value has been set.
func (o *AddIconRequest) GetFileResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileResourceId, true
}

// SetFileResourceId sets field value
func (o *AddIconRequest) SetFileResourceId(v string) {
	o.FileResourceId = v
}

// GetKey returns the Key field value
func (o *AddIconRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *AddIconRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *AddIconRequest) SetKey(v string) {
	o.Key = v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *AddIconRequest) GetKeywords() []string {
	if o == nil || IsNil(o.Keywords) {
		var ret []string
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIconRequest) GetKeywordsOk() ([]string, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *AddIconRequest) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []string and assigns it to the Keywords field.
func (o *AddIconRequest) SetKeywords(v []string) {
	o.Keywords = v
}

func (o AddIconRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddIconRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["fileResourceId"] = o.FileResourceId
	toSerialize["key"] = o.Key
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	return toSerialize, nil
}

func (o *AddIconRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fileResourceId",
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddIconRequest := _AddIconRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddIconRequest)

	if err != nil {
		return err
	}

	*o = AddIconRequest(varAddIconRequest)

	return err
}

type NullableAddIconRequest struct {
	value *AddIconRequest
	isSet bool
}

func (v NullableAddIconRequest) Get() *AddIconRequest {
	return v.value
}

func (v *NullableAddIconRequest) Set(val *AddIconRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddIconRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddIconRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddIconRequest(val *AddIconRequest) *NullableAddIconRequest {
	return &NullableAddIconRequest{value: val, isSet: true}
}

func (v NullableAddIconRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddIconRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
