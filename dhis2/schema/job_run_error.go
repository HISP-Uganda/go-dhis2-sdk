/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the JobRunError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobRunError{}

// JobRunError struct for JobRunError
type JobRunError struct {
	Args []string `json:"args,omitempty"`
	Code string   `json:"code"`
	// A UID for an JobConfiguration object   (Java name `org.hisp.dhis.scheduling.JobConfiguration`)
	Id      *string `json:"id,omitempty"`
	Type    string  `json:"type"`
	Message string  `json:"message"`
}

type _JobRunError JobRunError

// NewJobRunError instantiates a new JobRunError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobRunError(code string, type_ string, message string) *JobRunError {
	this := JobRunError{}
	this.Code = code
	this.Type = type_
	this.Message = message
	return &this
}

// NewJobRunErrorWithDefaults instantiates a new JobRunError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobRunErrorWithDefaults() *JobRunError {
	this := JobRunError{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *JobRunError) GetArgs() []string {
	if o == nil || IsNil(o.Args) {
		var ret []string
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobRunError) GetArgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *JobRunError) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *JobRunError) SetArgs(v []string) {
	o.Args = v
}

// GetCode returns the Code field value
func (o *JobRunError) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *JobRunError) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *JobRunError) SetCode(v string) {
	o.Code = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *JobRunError) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobRunError) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *JobRunError) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *JobRunError) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *JobRunError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *JobRunError) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *JobRunError) SetType(v string) {
	o.Type = v
}

// GetMessage returns the Message field value
func (o *JobRunError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *JobRunError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *JobRunError) SetMessage(v string) {
	o.Message = v
}

func (o JobRunError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobRunError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	toSerialize["code"] = o.Code
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *JobRunError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"type",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobRunError := _JobRunError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobRunError)

	if err != nil {
		return err
	}

	*o = JobRunError(varJobRunError)

	return err
}

type NullableJobRunError struct {
	value *JobRunError
	isSet bool
}

func (v NullableJobRunError) Get() *JobRunError {
	return v.value
}

func (v *NullableJobRunError) Set(val *JobRunError) {
	v.value = val
	v.isSet = true
}

func (v NullableJobRunError) IsSet() bool {
	return v.isSet
}

func (v *NullableJobRunError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobRunError(val *JobRunError) *NullableJobRunError {
	return &NullableJobRunError{value: val, isSet: true}
}

func (v NullableJobRunError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobRunError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
