/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GeoJsonImportReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoJsonImportReport{}

// GeoJsonImportReport struct for GeoJsonImportReport
type GeoJsonImportReport struct {
	Conflicts                    []ImportConflict `json:"conflicts,omitempty"`
	ImportCount                  *ImportCount     `json:"importCount,omitempty"`
	ResponseType                 *string          `json:"responseType,omitempty"`
	Status                       ImportStatus     `json:"status"`
	TotalConflictOccurrenceCount int32            `json:"totalConflictOccurrenceCount"`
}

type _GeoJsonImportReport GeoJsonImportReport

// NewGeoJsonImportReport instantiates a new GeoJsonImportReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoJsonImportReport(status ImportStatus, totalConflictOccurrenceCount int32) *GeoJsonImportReport {
	this := GeoJsonImportReport{}
	this.Status = status
	this.TotalConflictOccurrenceCount = totalConflictOccurrenceCount
	return &this
}

// NewGeoJsonImportReportWithDefaults instantiates a new GeoJsonImportReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoJsonImportReportWithDefaults() *GeoJsonImportReport {
	this := GeoJsonImportReport{}
	return &this
}

// GetConflicts returns the Conflicts field value if set, zero value otherwise.
func (o *GeoJsonImportReport) GetConflicts() []ImportConflict {
	if o == nil || IsNil(o.Conflicts) {
		var ret []ImportConflict
		return ret
	}
	return o.Conflicts
}

// GetConflictsOk returns a tuple with the Conflicts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJsonImportReport) GetConflictsOk() ([]ImportConflict, bool) {
	if o == nil || IsNil(o.Conflicts) {
		return nil, false
	}
	return o.Conflicts, true
}

// HasConflicts returns a boolean if a field has been set.
func (o *GeoJsonImportReport) HasConflicts() bool {
	if o != nil && !IsNil(o.Conflicts) {
		return true
	}

	return false
}

// SetConflicts gets a reference to the given []ImportConflict and assigns it to the Conflicts field.
func (o *GeoJsonImportReport) SetConflicts(v []ImportConflict) {
	o.Conflicts = v
}

// GetImportCount returns the ImportCount field value if set, zero value otherwise.
func (o *GeoJsonImportReport) GetImportCount() ImportCount {
	if o == nil || IsNil(o.ImportCount) {
		var ret ImportCount
		return ret
	}
	return *o.ImportCount
}

// GetImportCountOk returns a tuple with the ImportCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJsonImportReport) GetImportCountOk() (*ImportCount, bool) {
	if o == nil || IsNil(o.ImportCount) {
		return nil, false
	}
	return o.ImportCount, true
}

// HasImportCount returns a boolean if a field has been set.
func (o *GeoJsonImportReport) HasImportCount() bool {
	if o != nil && !IsNil(o.ImportCount) {
		return true
	}

	return false
}

// SetImportCount gets a reference to the given ImportCount and assigns it to the ImportCount field.
func (o *GeoJsonImportReport) SetImportCount(v ImportCount) {
	o.ImportCount = &v
}

// GetResponseType returns the ResponseType field value if set, zero value otherwise.
func (o *GeoJsonImportReport) GetResponseType() string {
	if o == nil || IsNil(o.ResponseType) {
		var ret string
		return ret
	}
	return *o.ResponseType
}

// GetResponseTypeOk returns a tuple with the ResponseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJsonImportReport) GetResponseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseType) {
		return nil, false
	}
	return o.ResponseType, true
}

// HasResponseType returns a boolean if a field has been set.
func (o *GeoJsonImportReport) HasResponseType() bool {
	if o != nil && !IsNil(o.ResponseType) {
		return true
	}

	return false
}

// SetResponseType gets a reference to the given string and assigns it to the ResponseType field.
func (o *GeoJsonImportReport) SetResponseType(v string) {
	o.ResponseType = &v
}

// GetStatus returns the Status field value
func (o *GeoJsonImportReport) GetStatus() ImportStatus {
	if o == nil {
		var ret ImportStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GeoJsonImportReport) GetStatusOk() (*ImportStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GeoJsonImportReport) SetStatus(v ImportStatus) {
	o.Status = v
}

// GetTotalConflictOccurrenceCount returns the TotalConflictOccurrenceCount field value
func (o *GeoJsonImportReport) GetTotalConflictOccurrenceCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalConflictOccurrenceCount
}

// GetTotalConflictOccurrenceCountOk returns a tuple with the TotalConflictOccurrenceCount field value
// and a boolean to check if the value has been set.
func (o *GeoJsonImportReport) GetTotalConflictOccurrenceCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalConflictOccurrenceCount, true
}

// SetTotalConflictOccurrenceCount sets field value
func (o *GeoJsonImportReport) SetTotalConflictOccurrenceCount(v int32) {
	o.TotalConflictOccurrenceCount = v
}

func (o GeoJsonImportReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoJsonImportReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conflicts) {
		toSerialize["conflicts"] = o.Conflicts
	}
	if !IsNil(o.ImportCount) {
		toSerialize["importCount"] = o.ImportCount
	}
	if !IsNil(o.ResponseType) {
		toSerialize["responseType"] = o.ResponseType
	}
	toSerialize["status"] = o.Status
	toSerialize["totalConflictOccurrenceCount"] = o.TotalConflictOccurrenceCount
	return toSerialize, nil
}

func (o *GeoJsonImportReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"totalConflictOccurrenceCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeoJsonImportReport := _GeoJsonImportReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGeoJsonImportReport)

	if err != nil {
		return err
	}

	*o = GeoJsonImportReport(varGeoJsonImportReport)

	return err
}

type NullableGeoJsonImportReport struct {
	value *GeoJsonImportReport
	isSet bool
}

func (v NullableGeoJsonImportReport) Get() *GeoJsonImportReport {
	return v.value
}

func (v *NullableGeoJsonImportReport) Set(val *GeoJsonImportReport) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJsonImportReport) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJsonImportReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJsonImportReport(val *GeoJsonImportReport) *NullableGeoJsonImportReport {
	return &NullableGeoJsonImportReport{value: val, isSet: true}
}

func (v NullableGeoJsonImportReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJsonImportReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
