/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Interpretation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Interpretation{}

// Interpretation struct for Interpretation
type Interpretation struct {
	Access             *Access                               `json:"access,omitempty"`
	AttributeValues    []AttributeValue                      `json:"attributeValues,omitempty"`
	Code               *string                               `json:"code,omitempty"`
	Comments           []InterpretationCommentsInner         `json:"comments,omitempty"`
	Created            *time.Time                            `json:"created,omitempty"`
	CreatedBy          *AggregateDataExchangeCreatedBy       `json:"createdBy,omitempty"`
	DataSet            *DataApprovalWorkflowDataSetsInner    `json:"dataSet,omitempty"`
	DisplayName        *string                               `json:"displayName,omitempty"`
	EventChart         *DashboardItemEventChart              `json:"eventChart,omitempty"`
	EventReport        *DashboardItemEventReport             `json:"eventReport,omitempty"`
	EventVisualization *DashboardItemEventVisualization      `json:"eventVisualization,omitempty"`
	ExternalAccess     *bool                                 `json:"externalAccess,omitempty"`
	Favorite           *bool                                 `json:"favorite,omitempty"`
	Favorites          []string                              `json:"favorites,omitempty"`
	Href               *string                               `json:"href,omitempty"`
	Id                 *string                               `json:"id,omitempty"`
	LastUpdated        *time.Time                            `json:"lastUpdated,omitempty"`
	LastUpdatedBy      *AggregateDataExchangeCreatedBy       `json:"lastUpdatedBy,omitempty"`
	LikedBy            []AggregateDataExchangeCreatedBy      `json:"likedBy,omitempty"`
	Likes              int32                                 `json:"likes"`
	Map                *DashboardItemMap                     `json:"map,omitempty"`
	Mentions           []Mention                             `json:"mentions,omitempty"`
	OrganisationUnit   *CategoryOptionOrganisationUnitsInner `json:"organisationUnit,omitempty"`
	Period             *string                               `json:"period,omitempty"`
	PublicAccess       *string                               `json:"publicAccess,omitempty"`
	Sharing            *Sharing                              `json:"sharing,omitempty"`
	Text               *string                               `json:"text,omitempty"`
	Translations       []Translation                         `json:"translations,omitempty"`
	Type               string                                `json:"type"`
	User               *AggregateDataExchangeCreatedBy       `json:"user,omitempty"`
	UserAccesses       []LegacyUserAccess                    `json:"userAccesses,omitempty"`
	UserGroupAccesses  []LegacyUserGroupAccess               `json:"userGroupAccesses,omitempty"`
	Visualization      *DashboardItemVisualization           `json:"visualization,omitempty"`
}

type _Interpretation Interpretation

// NewInterpretation instantiates a new Interpretation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterpretation(likes int32, type_ string) *Interpretation {
	this := Interpretation{}
	this.Likes = likes
	this.Type = type_
	return &this
}

// NewInterpretationWithDefaults instantiates a new Interpretation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterpretationWithDefaults() *Interpretation {
	this := Interpretation{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *Interpretation) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *Interpretation) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *Interpretation) SetAccess(v Access) {
	o.Access = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *Interpretation) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *Interpretation) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *Interpretation) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Interpretation) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Interpretation) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Interpretation) SetCode(v string) {
	o.Code = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Interpretation) GetComments() []InterpretationCommentsInner {
	if o == nil || IsNil(o.Comments) {
		var ret []InterpretationCommentsInner
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetCommentsOk() ([]InterpretationCommentsInner, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Interpretation) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []InterpretationCommentsInner and assigns it to the Comments field.
func (o *Interpretation) SetComments(v []InterpretationCommentsInner) {
	o.Comments = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Interpretation) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Interpretation) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Interpretation) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Interpretation) GetCreatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetCreatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Interpretation) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the CreatedBy field.
func (o *Interpretation) SetCreatedBy(v AggregateDataExchangeCreatedBy) {
	o.CreatedBy = &v
}

// GetDataSet returns the DataSet field value if set, zero value otherwise.
func (o *Interpretation) GetDataSet() DataApprovalWorkflowDataSetsInner {
	if o == nil || IsNil(o.DataSet) {
		var ret DataApprovalWorkflowDataSetsInner
		return ret
	}
	return *o.DataSet
}

// GetDataSetOk returns a tuple with the DataSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetDataSetOk() (*DataApprovalWorkflowDataSetsInner, bool) {
	if o == nil || IsNil(o.DataSet) {
		return nil, false
	}
	return o.DataSet, true
}

// HasDataSet returns a boolean if a field has been set.
func (o *Interpretation) HasDataSet() bool {
	if o != nil && !IsNil(o.DataSet) {
		return true
	}

	return false
}

// SetDataSet gets a reference to the given DataApprovalWorkflowDataSetsInner and assigns it to the DataSet field.
func (o *Interpretation) SetDataSet(v DataApprovalWorkflowDataSetsInner) {
	o.DataSet = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Interpretation) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Interpretation) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Interpretation) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEventChart returns the EventChart field value if set, zero value otherwise.
func (o *Interpretation) GetEventChart() DashboardItemEventChart {
	if o == nil || IsNil(o.EventChart) {
		var ret DashboardItemEventChart
		return ret
	}
	return *o.EventChart
}

// GetEventChartOk returns a tuple with the EventChart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetEventChartOk() (*DashboardItemEventChart, bool) {
	if o == nil || IsNil(o.EventChart) {
		return nil, false
	}
	return o.EventChart, true
}

// HasEventChart returns a boolean if a field has been set.
func (o *Interpretation) HasEventChart() bool {
	if o != nil && !IsNil(o.EventChart) {
		return true
	}

	return false
}

// SetEventChart gets a reference to the given DashboardItemEventChart and assigns it to the EventChart field.
func (o *Interpretation) SetEventChart(v DashboardItemEventChart) {
	o.EventChart = &v
}

// GetEventReport returns the EventReport field value if set, zero value otherwise.
func (o *Interpretation) GetEventReport() DashboardItemEventReport {
	if o == nil || IsNil(o.EventReport) {
		var ret DashboardItemEventReport
		return ret
	}
	return *o.EventReport
}

// GetEventReportOk returns a tuple with the EventReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetEventReportOk() (*DashboardItemEventReport, bool) {
	if o == nil || IsNil(o.EventReport) {
		return nil, false
	}
	return o.EventReport, true
}

// HasEventReport returns a boolean if a field has been set.
func (o *Interpretation) HasEventReport() bool {
	if o != nil && !IsNil(o.EventReport) {
		return true
	}

	return false
}

// SetEventReport gets a reference to the given DashboardItemEventReport and assigns it to the EventReport field.
func (o *Interpretation) SetEventReport(v DashboardItemEventReport) {
	o.EventReport = &v
}

// GetEventVisualization returns the EventVisualization field value if set, zero value otherwise.
func (o *Interpretation) GetEventVisualization() DashboardItemEventVisualization {
	if o == nil || IsNil(o.EventVisualization) {
		var ret DashboardItemEventVisualization
		return ret
	}
	return *o.EventVisualization
}

// GetEventVisualizationOk returns a tuple with the EventVisualization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetEventVisualizationOk() (*DashboardItemEventVisualization, bool) {
	if o == nil || IsNil(o.EventVisualization) {
		return nil, false
	}
	return o.EventVisualization, true
}

// HasEventVisualization returns a boolean if a field has been set.
func (o *Interpretation) HasEventVisualization() bool {
	if o != nil && !IsNil(o.EventVisualization) {
		return true
	}

	return false
}

// SetEventVisualization gets a reference to the given DashboardItemEventVisualization and assigns it to the EventVisualization field.
func (o *Interpretation) SetEventVisualization(v DashboardItemEventVisualization) {
	o.EventVisualization = &v
}

// GetExternalAccess returns the ExternalAccess field value if set, zero value otherwise.
func (o *Interpretation) GetExternalAccess() bool {
	if o == nil || IsNil(o.ExternalAccess) {
		var ret bool
		return ret
	}
	return *o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetExternalAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAccess) {
		return nil, false
	}
	return o.ExternalAccess, true
}

// HasExternalAccess returns a boolean if a field has been set.
func (o *Interpretation) HasExternalAccess() bool {
	if o != nil && !IsNil(o.ExternalAccess) {
		return true
	}

	return false
}

// SetExternalAccess gets a reference to the given bool and assigns it to the ExternalAccess field.
func (o *Interpretation) SetExternalAccess(v bool) {
	o.ExternalAccess = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *Interpretation) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *Interpretation) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *Interpretation) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *Interpretation) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *Interpretation) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *Interpretation) SetFavorites(v []string) {
	o.Favorites = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Interpretation) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Interpretation) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Interpretation) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Interpretation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Interpretation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Interpretation) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Interpretation) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Interpretation) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Interpretation) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *Interpretation) GetLastUpdatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetLastUpdatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *Interpretation) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the LastUpdatedBy field.
func (o *Interpretation) SetLastUpdatedBy(v AggregateDataExchangeCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLikedBy returns the LikedBy field value if set, zero value otherwise.
func (o *Interpretation) GetLikedBy() []AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LikedBy) {
		var ret []AggregateDataExchangeCreatedBy
		return ret
	}
	return o.LikedBy
}

// GetLikedByOk returns a tuple with the LikedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetLikedByOk() ([]AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LikedBy) {
		return nil, false
	}
	return o.LikedBy, true
}

// HasLikedBy returns a boolean if a field has been set.
func (o *Interpretation) HasLikedBy() bool {
	if o != nil && !IsNil(o.LikedBy) {
		return true
	}

	return false
}

// SetLikedBy gets a reference to the given []AggregateDataExchangeCreatedBy and assigns it to the LikedBy field.
func (o *Interpretation) SetLikedBy(v []AggregateDataExchangeCreatedBy) {
	o.LikedBy = v
}

// GetLikes returns the Likes field value
func (o *Interpretation) GetLikes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Likes
}

// GetLikesOk returns a tuple with the Likes field value
// and a boolean to check if the value has been set.
func (o *Interpretation) GetLikesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Likes, true
}

// SetLikes sets field value
func (o *Interpretation) SetLikes(v int32) {
	o.Likes = v
}

// GetMap returns the Map field value if set, zero value otherwise.
func (o *Interpretation) GetMap() DashboardItemMap {
	if o == nil || IsNil(o.Map) {
		var ret DashboardItemMap
		return ret
	}
	return *o.Map
}

// GetMapOk returns a tuple with the Map field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetMapOk() (*DashboardItemMap, bool) {
	if o == nil || IsNil(o.Map) {
		return nil, false
	}
	return o.Map, true
}

// HasMap returns a boolean if a field has been set.
func (o *Interpretation) HasMap() bool {
	if o != nil && !IsNil(o.Map) {
		return true
	}

	return false
}

// SetMap gets a reference to the given DashboardItemMap and assigns it to the Map field.
func (o *Interpretation) SetMap(v DashboardItemMap) {
	o.Map = &v
}

// GetMentions returns the Mentions field value if set, zero value otherwise.
func (o *Interpretation) GetMentions() []Mention {
	if o == nil || IsNil(o.Mentions) {
		var ret []Mention
		return ret
	}
	return o.Mentions
}

// GetMentionsOk returns a tuple with the Mentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetMentionsOk() ([]Mention, bool) {
	if o == nil || IsNil(o.Mentions) {
		return nil, false
	}
	return o.Mentions, true
}

// HasMentions returns a boolean if a field has been set.
func (o *Interpretation) HasMentions() bool {
	if o != nil && !IsNil(o.Mentions) {
		return true
	}

	return false
}

// SetMentions gets a reference to the given []Mention and assigns it to the Mentions field.
func (o *Interpretation) SetMentions(v []Mention) {
	o.Mentions = v
}

// GetOrganisationUnit returns the OrganisationUnit field value if set, zero value otherwise.
func (o *Interpretation) GetOrganisationUnit() CategoryOptionOrganisationUnitsInner {
	if o == nil || IsNil(o.OrganisationUnit) {
		var ret CategoryOptionOrganisationUnitsInner
		return ret
	}
	return *o.OrganisationUnit
}

// GetOrganisationUnitOk returns a tuple with the OrganisationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetOrganisationUnitOk() (*CategoryOptionOrganisationUnitsInner, bool) {
	if o == nil || IsNil(o.OrganisationUnit) {
		return nil, false
	}
	return o.OrganisationUnit, true
}

// HasOrganisationUnit returns a boolean if a field has been set.
func (o *Interpretation) HasOrganisationUnit() bool {
	if o != nil && !IsNil(o.OrganisationUnit) {
		return true
	}

	return false
}

// SetOrganisationUnit gets a reference to the given CategoryOptionOrganisationUnitsInner and assigns it to the OrganisationUnit field.
func (o *Interpretation) SetOrganisationUnit(v CategoryOptionOrganisationUnitsInner) {
	o.OrganisationUnit = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *Interpretation) GetPeriod() string {
	if o == nil || IsNil(o.Period) {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *Interpretation) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *Interpretation) SetPeriod(v string) {
	o.Period = &v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *Interpretation) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *Interpretation) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *Interpretation) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *Interpretation) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *Interpretation) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *Interpretation) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Interpretation) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Interpretation) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Interpretation) SetText(v string) {
	o.Text = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *Interpretation) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *Interpretation) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *Interpretation) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetType returns the Type field value
func (o *Interpretation) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Interpretation) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Interpretation) SetType(v string) {
	o.Type = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Interpretation) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Interpretation) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *Interpretation) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *Interpretation) GetUserAccesses() []LegacyUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []LegacyUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetUserAccessesOk() ([]LegacyUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *Interpretation) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []LegacyUserAccess and assigns it to the UserAccesses field.
func (o *Interpretation) SetUserAccesses(v []LegacyUserAccess) {
	o.UserAccesses = v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *Interpretation) GetUserGroupAccesses() []LegacyUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []LegacyUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetUserGroupAccessesOk() ([]LegacyUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *Interpretation) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []LegacyUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *Interpretation) SetUserGroupAccesses(v []LegacyUserGroupAccess) {
	o.UserGroupAccesses = v
}

// GetVisualization returns the Visualization field value if set, zero value otherwise.
func (o *Interpretation) GetVisualization() DashboardItemVisualization {
	if o == nil || IsNil(o.Visualization) {
		var ret DashboardItemVisualization
		return ret
	}
	return *o.Visualization
}

// GetVisualizationOk returns a tuple with the Visualization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpretation) GetVisualizationOk() (*DashboardItemVisualization, bool) {
	if o == nil || IsNil(o.Visualization) {
		return nil, false
	}
	return o.Visualization, true
}

// HasVisualization returns a boolean if a field has been set.
func (o *Interpretation) HasVisualization() bool {
	if o != nil && !IsNil(o.Visualization) {
		return true
	}

	return false
}

// SetVisualization gets a reference to the given DashboardItemVisualization and assigns it to the Visualization field.
func (o *Interpretation) SetVisualization(v DashboardItemVisualization) {
	o.Visualization = &v
}

func (o Interpretation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Interpretation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DataSet) {
		toSerialize["dataSet"] = o.DataSet
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EventChart) {
		toSerialize["eventChart"] = o.EventChart
	}
	if !IsNil(o.EventReport) {
		toSerialize["eventReport"] = o.EventReport
	}
	if !IsNil(o.EventVisualization) {
		toSerialize["eventVisualization"] = o.EventVisualization
	}
	if !IsNil(o.ExternalAccess) {
		toSerialize["externalAccess"] = o.ExternalAccess
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LikedBy) {
		toSerialize["likedBy"] = o.LikedBy
	}
	toSerialize["likes"] = o.Likes
	if !IsNil(o.Map) {
		toSerialize["map"] = o.Map
	}
	if !IsNil(o.Mentions) {
		toSerialize["mentions"] = o.Mentions
	}
	if !IsNil(o.OrganisationUnit) {
		toSerialize["organisationUnit"] = o.OrganisationUnit
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	if !IsNil(o.Visualization) {
		toSerialize["visualization"] = o.Visualization
	}
	return toSerialize, nil
}

func (o *Interpretation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"likes",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInterpretation := _Interpretation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInterpretation)

	if err != nil {
		return err
	}

	*o = Interpretation(varInterpretation)

	return err
}

type NullableInterpretation struct {
	value *Interpretation
	isSet bool
}

func (v NullableInterpretation) Get() *Interpretation {
	return v.value
}

func (v *NullableInterpretation) Set(val *Interpretation) {
	v.value = val
	v.isSet = true
}

func (v NullableInterpretation) IsSet() bool {
	return v.isSet
}

func (v *NullableInterpretation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterpretation(val *Interpretation) *NullableInterpretation {
	return &NullableInterpretation{value: val, isSet: true}
}

func (v NullableInterpretation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterpretation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
