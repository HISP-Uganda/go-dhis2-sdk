/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DataApprovalLevelPropertyNames the model 'DataApprovalLevelPropertyNames'
type DataApprovalLevelPropertyNames string

// List of DataApprovalLevelPropertyNames
const (
	DATAAPPROVALLEVELPROPERTYNAMES_ACCESS                    DataApprovalLevelPropertyNames = "access"
	DATAAPPROVALLEVELPROPERTYNAMES_ATTRIBUTE_VALUES          DataApprovalLevelPropertyNames = "attributeValues"
	DATAAPPROVALLEVELPROPERTYNAMES_CATEGORY_OPTION_GROUP_SET DataApprovalLevelPropertyNames = "categoryOptionGroupSet"
	DATAAPPROVALLEVELPROPERTYNAMES_CODE                      DataApprovalLevelPropertyNames = "code"
	DATAAPPROVALLEVELPROPERTYNAMES_CREATED                   DataApprovalLevelPropertyNames = "created"
	DATAAPPROVALLEVELPROPERTYNAMES_CREATED_BY                DataApprovalLevelPropertyNames = "createdBy"
	DATAAPPROVALLEVELPROPERTYNAMES_DISPLAY_NAME              DataApprovalLevelPropertyNames = "displayName"
	DATAAPPROVALLEVELPROPERTYNAMES_FAVORITE                  DataApprovalLevelPropertyNames = "favorite"
	DATAAPPROVALLEVELPROPERTYNAMES_FAVORITES                 DataApprovalLevelPropertyNames = "favorites"
	DATAAPPROVALLEVELPROPERTYNAMES_HREF                      DataApprovalLevelPropertyNames = "href"
	DATAAPPROVALLEVELPROPERTYNAMES_ID                        DataApprovalLevelPropertyNames = "id"
	DATAAPPROVALLEVELPROPERTYNAMES_LAST_UPDATED              DataApprovalLevelPropertyNames = "lastUpdated"
	DATAAPPROVALLEVELPROPERTYNAMES_LAST_UPDATED_BY           DataApprovalLevelPropertyNames = "lastUpdatedBy"
	DATAAPPROVALLEVELPROPERTYNAMES_LEVEL                     DataApprovalLevelPropertyNames = "level"
	DATAAPPROVALLEVELPROPERTYNAMES_NAME                      DataApprovalLevelPropertyNames = "name"
	DATAAPPROVALLEVELPROPERTYNAMES_ORG_UNIT_LEVEL            DataApprovalLevelPropertyNames = "orgUnitLevel"
	DATAAPPROVALLEVELPROPERTYNAMES_ORG_UNIT_LEVEL_NAME       DataApprovalLevelPropertyNames = "orgUnitLevelName"
	DATAAPPROVALLEVELPROPERTYNAMES_SHARING                   DataApprovalLevelPropertyNames = "sharing"
	DATAAPPROVALLEVELPROPERTYNAMES_TRANSLATIONS              DataApprovalLevelPropertyNames = "translations"
)

// All allowed values of DataApprovalLevelPropertyNames enum
var AllowedDataApprovalLevelPropertyNamesEnumValues = []DataApprovalLevelPropertyNames{
	"access",
	"attributeValues",
	"categoryOptionGroupSet",
	"code",
	"created",
	"createdBy",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"level",
	"name",
	"orgUnitLevel",
	"orgUnitLevelName",
	"sharing",
	"translations",
}

func (v *DataApprovalLevelPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataApprovalLevelPropertyNames(value)
	for _, existing := range AllowedDataApprovalLevelPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataApprovalLevelPropertyNames", value)
}

// NewDataApprovalLevelPropertyNamesFromValue returns a pointer to a valid DataApprovalLevelPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataApprovalLevelPropertyNamesFromValue(v string) (*DataApprovalLevelPropertyNames, error) {
	ev := DataApprovalLevelPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataApprovalLevelPropertyNames: valid values are %v", v, AllowedDataApprovalLevelPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataApprovalLevelPropertyNames) IsValid() bool {
	for _, existing := range AllowedDataApprovalLevelPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataApprovalLevelPropertyNames value
func (v DataApprovalLevelPropertyNames) Ptr() *DataApprovalLevelPropertyNames {
	return &v
}

type NullableDataApprovalLevelPropertyNames struct {
	value *DataApprovalLevelPropertyNames
	isSet bool
}

func (v NullableDataApprovalLevelPropertyNames) Get() *DataApprovalLevelPropertyNames {
	return v.value
}

func (v *NullableDataApprovalLevelPropertyNames) Set(val *DataApprovalLevelPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableDataApprovalLevelPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableDataApprovalLevelPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataApprovalLevelPropertyNames(val *DataApprovalLevelPropertyNames) *NullableDataApprovalLevelPropertyNames {
	return &NullableDataApprovalLevelPropertyNames{value: val, isSet: true}
}

func (v NullableDataApprovalLevelPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataApprovalLevelPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
