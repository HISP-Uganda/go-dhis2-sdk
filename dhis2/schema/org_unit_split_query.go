/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the OrgUnitSplitQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgUnitSplitQuery{}

// OrgUnitSplitQuery struct for OrgUnitSplitQuery
type OrgUnitSplitQuery struct {
	DeleteSource  *bool    `json:"deleteSource,omitempty"`
	PrimaryTarget *string  `json:"primaryTarget,omitempty"`
	Source        *string  `json:"source,omitempty"`
	Targets       []string `json:"targets,omitempty"`
}

// NewOrgUnitSplitQuery instantiates a new OrgUnitSplitQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgUnitSplitQuery() *OrgUnitSplitQuery {
	this := OrgUnitSplitQuery{}
	return &this
}

// NewOrgUnitSplitQueryWithDefaults instantiates a new OrgUnitSplitQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgUnitSplitQueryWithDefaults() *OrgUnitSplitQuery {
	this := OrgUnitSplitQuery{}
	return &this
}

// GetDeleteSource returns the DeleteSource field value if set, zero value otherwise.
func (o *OrgUnitSplitQuery) GetDeleteSource() bool {
	if o == nil || IsNil(o.DeleteSource) {
		var ret bool
		return ret
	}
	return *o.DeleteSource
}

// GetDeleteSourceOk returns a tuple with the DeleteSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUnitSplitQuery) GetDeleteSourceOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteSource) {
		return nil, false
	}
	return o.DeleteSource, true
}

// HasDeleteSource returns a boolean if a field has been set.
func (o *OrgUnitSplitQuery) HasDeleteSource() bool {
	if o != nil && !IsNil(o.DeleteSource) {
		return true
	}

	return false
}

// SetDeleteSource gets a reference to the given bool and assigns it to the DeleteSource field.
func (o *OrgUnitSplitQuery) SetDeleteSource(v bool) {
	o.DeleteSource = &v
}

// GetPrimaryTarget returns the PrimaryTarget field value if set, zero value otherwise.
func (o *OrgUnitSplitQuery) GetPrimaryTarget() string {
	if o == nil || IsNil(o.PrimaryTarget) {
		var ret string
		return ret
	}
	return *o.PrimaryTarget
}

// GetPrimaryTargetOk returns a tuple with the PrimaryTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUnitSplitQuery) GetPrimaryTargetOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryTarget) {
		return nil, false
	}
	return o.PrimaryTarget, true
}

// HasPrimaryTarget returns a boolean if a field has been set.
func (o *OrgUnitSplitQuery) HasPrimaryTarget() bool {
	if o != nil && !IsNil(o.PrimaryTarget) {
		return true
	}

	return false
}

// SetPrimaryTarget gets a reference to the given string and assigns it to the PrimaryTarget field.
func (o *OrgUnitSplitQuery) SetPrimaryTarget(v string) {
	o.PrimaryTarget = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *OrgUnitSplitQuery) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUnitSplitQuery) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *OrgUnitSplitQuery) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *OrgUnitSplitQuery) SetSource(v string) {
	o.Source = &v
}

// GetTargets returns the Targets field value if set, zero value otherwise.
func (o *OrgUnitSplitQuery) GetTargets() []string {
	if o == nil || IsNil(o.Targets) {
		var ret []string
		return ret
	}
	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUnitSplitQuery) GetTargetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Targets) {
		return nil, false
	}
	return o.Targets, true
}

// HasTargets returns a boolean if a field has been set.
func (o *OrgUnitSplitQuery) HasTargets() bool {
	if o != nil && !IsNil(o.Targets) {
		return true
	}

	return false
}

// SetTargets gets a reference to the given []string and assigns it to the Targets field.
func (o *OrgUnitSplitQuery) SetTargets(v []string) {
	o.Targets = v
}

func (o OrgUnitSplitQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgUnitSplitQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeleteSource) {
		toSerialize["deleteSource"] = o.DeleteSource
	}
	if !IsNil(o.PrimaryTarget) {
		toSerialize["primaryTarget"] = o.PrimaryTarget
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Targets) {
		toSerialize["targets"] = o.Targets
	}
	return toSerialize, nil
}

type NullableOrgUnitSplitQuery struct {
	value *OrgUnitSplitQuery
	isSet bool
}

func (v NullableOrgUnitSplitQuery) Get() *OrgUnitSplitQuery {
	return v.value
}

func (v *NullableOrgUnitSplitQuery) Set(val *OrgUnitSplitQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgUnitSplitQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgUnitSplitQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgUnitSplitQuery(val *OrgUnitSplitQuery) *NullableOrgUnitSplitQuery {
	return &NullableOrgUnitSplitQuery{value: val, isSet: true}
}

func (v NullableOrgUnitSplitQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgUnitSplitQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
