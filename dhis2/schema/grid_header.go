/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GridHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridHeader{}

// GridHeader struct for GridHeader
type GridHeader struct {
	Column                *string   `json:"column,omitempty"`
	Hidden                *bool     `json:"hidden,omitempty"`
	LegendSet             *string   `json:"legendSet,omitempty"`
	Meta                  *bool     `json:"meta,omitempty"`
	Name                  *string   `json:"name,omitempty"`
	OptionSet             *string   `json:"optionSet,omitempty"`
	ProgramStage          *string   `json:"programStage,omitempty"`
	RepeatableStageParams *string   `json:"repeatableStageParams,omitempty"`
	StageOffset           *int32    `json:"stageOffset,omitempty"`
	Type                  *string   `json:"type,omitempty"`
	ValueType             ValueType `json:"valueType"`
}

type _GridHeader GridHeader

// NewGridHeader instantiates a new GridHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridHeader(valueType ValueType) *GridHeader {
	this := GridHeader{}
	this.ValueType = valueType
	return &this
}

// NewGridHeaderWithDefaults instantiates a new GridHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridHeaderWithDefaults() *GridHeader {
	this := GridHeader{}
	return &this
}

// GetColumn returns the Column field value if set, zero value otherwise.
func (o *GridHeader) GetColumn() string {
	if o == nil || IsNil(o.Column) {
		var ret string
		return ret
	}
	return *o.Column
}

// GetColumnOk returns a tuple with the Column field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridHeader) GetColumnOk() (*string, bool) {
	if o == nil || IsNil(o.Column) {
		return nil, false
	}
	return o.Column, true
}

// HasColumn returns a boolean if a field has been set.
func (o *GridHeader) HasColumn() bool {
	if o != nil && !IsNil(o.Column) {
		return true
	}

	return false
}

// SetColumn gets a reference to the given string and assigns it to the Column field.
func (o *GridHeader) SetColumn(v string) {
	o.Column = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *GridHeader) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridHeader) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *GridHeader) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *GridHeader) SetHidden(v bool) {
	o.Hidden = &v
}

// GetLegendSet returns the LegendSet field value if set, zero value otherwise.
func (o *GridHeader) GetLegendSet() string {
	if o == nil || IsNil(o.LegendSet) {
		var ret string
		return ret
	}
	return *o.LegendSet
}

// GetLegendSetOk returns a tuple with the LegendSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridHeader) GetLegendSetOk() (*string, bool) {
	if o == nil || IsNil(o.LegendSet) {
		return nil, false
	}
	return o.LegendSet, true
}

// HasLegendSet returns a boolean if a field has been set.
func (o *GridHeader) HasLegendSet() bool {
	if o != nil && !IsNil(o.LegendSet) {
		return true
	}

	return false
}

// SetLegendSet gets a reference to the given string and assigns it to the LegendSet field.
func (o *GridHeader) SetLegendSet(v string) {
	o.LegendSet = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *GridHeader) GetMeta() bool {
	if o == nil || IsNil(o.Meta) {
		var ret bool
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridHeader) GetMetaOk() (*bool, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *GridHeader) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given bool and assigns it to the Meta field.
func (o *GridHeader) SetMeta(v bool) {
	o.Meta = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GridHeader) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridHeader) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GridHeader) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GridHeader) SetName(v string) {
	o.Name = &v
}

// GetOptionSet returns the OptionSet field value if set, zero value otherwise.
func (o *GridHeader) GetOptionSet() string {
	if o == nil || IsNil(o.OptionSet) {
		var ret string
		return ret
	}
	return *o.OptionSet
}

// GetOptionSetOk returns a tuple with the OptionSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridHeader) GetOptionSetOk() (*string, bool) {
	if o == nil || IsNil(o.OptionSet) {
		return nil, false
	}
	return o.OptionSet, true
}

// HasOptionSet returns a boolean if a field has been set.
func (o *GridHeader) HasOptionSet() bool {
	if o != nil && !IsNil(o.OptionSet) {
		return true
	}

	return false
}

// SetOptionSet gets a reference to the given string and assigns it to the OptionSet field.
func (o *GridHeader) SetOptionSet(v string) {
	o.OptionSet = &v
}

// GetProgramStage returns the ProgramStage field value if set, zero value otherwise.
func (o *GridHeader) GetProgramStage() string {
	if o == nil || IsNil(o.ProgramStage) {
		var ret string
		return ret
	}
	return *o.ProgramStage
}

// GetProgramStageOk returns a tuple with the ProgramStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridHeader) GetProgramStageOk() (*string, bool) {
	if o == nil || IsNil(o.ProgramStage) {
		return nil, false
	}
	return o.ProgramStage, true
}

// HasProgramStage returns a boolean if a field has been set.
func (o *GridHeader) HasProgramStage() bool {
	if o != nil && !IsNil(o.ProgramStage) {
		return true
	}

	return false
}

// SetProgramStage gets a reference to the given string and assigns it to the ProgramStage field.
func (o *GridHeader) SetProgramStage(v string) {
	o.ProgramStage = &v
}

// GetRepeatableStageParams returns the RepeatableStageParams field value if set, zero value otherwise.
func (o *GridHeader) GetRepeatableStageParams() string {
	if o == nil || IsNil(o.RepeatableStageParams) {
		var ret string
		return ret
	}
	return *o.RepeatableStageParams
}

// GetRepeatableStageParamsOk returns a tuple with the RepeatableStageParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridHeader) GetRepeatableStageParamsOk() (*string, bool) {
	if o == nil || IsNil(o.RepeatableStageParams) {
		return nil, false
	}
	return o.RepeatableStageParams, true
}

// HasRepeatableStageParams returns a boolean if a field has been set.
func (o *GridHeader) HasRepeatableStageParams() bool {
	if o != nil && !IsNil(o.RepeatableStageParams) {
		return true
	}

	return false
}

// SetRepeatableStageParams gets a reference to the given string and assigns it to the RepeatableStageParams field.
func (o *GridHeader) SetRepeatableStageParams(v string) {
	o.RepeatableStageParams = &v
}

// GetStageOffset returns the StageOffset field value if set, zero value otherwise.
func (o *GridHeader) GetStageOffset() int32 {
	if o == nil || IsNil(o.StageOffset) {
		var ret int32
		return ret
	}
	return *o.StageOffset
}

// GetStageOffsetOk returns a tuple with the StageOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridHeader) GetStageOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.StageOffset) {
		return nil, false
	}
	return o.StageOffset, true
}

// HasStageOffset returns a boolean if a field has been set.
func (o *GridHeader) HasStageOffset() bool {
	if o != nil && !IsNil(o.StageOffset) {
		return true
	}

	return false
}

// SetStageOffset gets a reference to the given int32 and assigns it to the StageOffset field.
func (o *GridHeader) SetStageOffset(v int32) {
	o.StageOffset = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GridHeader) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridHeader) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GridHeader) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GridHeader) SetType(v string) {
	o.Type = &v
}

// GetValueType returns the ValueType field value
func (o *GridHeader) GetValueType() ValueType {
	if o == nil {
		var ret ValueType
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *GridHeader) GetValueTypeOk() (*ValueType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *GridHeader) SetValueType(v ValueType) {
	o.ValueType = v
}

func (o GridHeader) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Column) {
		toSerialize["column"] = o.Column
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.LegendSet) {
		toSerialize["legendSet"] = o.LegendSet
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OptionSet) {
		toSerialize["optionSet"] = o.OptionSet
	}
	if !IsNil(o.ProgramStage) {
		toSerialize["programStage"] = o.ProgramStage
	}
	if !IsNil(o.RepeatableStageParams) {
		toSerialize["repeatableStageParams"] = o.RepeatableStageParams
	}
	if !IsNil(o.StageOffset) {
		toSerialize["stageOffset"] = o.StageOffset
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["valueType"] = o.ValueType
	return toSerialize, nil
}

func (o *GridHeader) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"valueType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGridHeader := _GridHeader{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGridHeader)

	if err != nil {
		return err
	}

	*o = GridHeader(varGridHeader)

	return err
}

type NullableGridHeader struct {
	value *GridHeader
	isSet bool
}

func (v NullableGridHeader) Get() *GridHeader {
	return v.value
}

func (v *NullableGridHeader) Set(val *GridHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableGridHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableGridHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridHeader(val *GridHeader) *NullableGridHeader {
	return &NullableGridHeader{value: val, isSet: true}
}

func (v NullableGridHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
