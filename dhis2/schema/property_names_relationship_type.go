/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesRelationshipType the model 'PropertyNamesRelationshipType'
type PropertyNamesRelationshipType string

// List of PropertyNames_RelationshipType
const (
	PROPERTYNAMESRELATIONSHIPTYPE_ACCESS               PropertyNamesRelationshipType = "access"
	PROPERTYNAMESRELATIONSHIPTYPE_ATTRIBUTE_VALUES     PropertyNamesRelationshipType = "attributeValues"
	PROPERTYNAMESRELATIONSHIPTYPE_BIDIRECTIONAL        PropertyNamesRelationshipType = "bidirectional"
	PROPERTYNAMESRELATIONSHIPTYPE_CODE                 PropertyNamesRelationshipType = "code"
	PROPERTYNAMESRELATIONSHIPTYPE_CREATED              PropertyNamesRelationshipType = "created"
	PROPERTYNAMESRELATIONSHIPTYPE_CREATED_BY           PropertyNamesRelationshipType = "createdBy"
	PROPERTYNAMESRELATIONSHIPTYPE_DESCRIPTION          PropertyNamesRelationshipType = "description"
	PROPERTYNAMESRELATIONSHIPTYPE_DISPLAY_FROM_TO_NAME PropertyNamesRelationshipType = "displayFromToName"
	PROPERTYNAMESRELATIONSHIPTYPE_DISPLAY_NAME         PropertyNamesRelationshipType = "displayName"
	PROPERTYNAMESRELATIONSHIPTYPE_DISPLAY_TO_FROM_NAME PropertyNamesRelationshipType = "displayToFromName"
	PROPERTYNAMESRELATIONSHIPTYPE_EXTERNAL_ACCESS      PropertyNamesRelationshipType = "externalAccess"
	PROPERTYNAMESRELATIONSHIPTYPE_FAVORITE             PropertyNamesRelationshipType = "favorite"
	PROPERTYNAMESRELATIONSHIPTYPE_FAVORITES            PropertyNamesRelationshipType = "favorites"
	PROPERTYNAMESRELATIONSHIPTYPE_FROM_CONSTRAINT      PropertyNamesRelationshipType = "fromConstraint"
	PROPERTYNAMESRELATIONSHIPTYPE_FROM_TO_NAME         PropertyNamesRelationshipType = "fromToName"
	PROPERTYNAMESRELATIONSHIPTYPE_HREF                 PropertyNamesRelationshipType = "href"
	PROPERTYNAMESRELATIONSHIPTYPE_ID                   PropertyNamesRelationshipType = "id"
	PROPERTYNAMESRELATIONSHIPTYPE_LAST_UPDATED         PropertyNamesRelationshipType = "lastUpdated"
	PROPERTYNAMESRELATIONSHIPTYPE_LAST_UPDATED_BY      PropertyNamesRelationshipType = "lastUpdatedBy"
	PROPERTYNAMESRELATIONSHIPTYPE_NAME                 PropertyNamesRelationshipType = "name"
	PROPERTYNAMESRELATIONSHIPTYPE_PUBLIC_ACCESS        PropertyNamesRelationshipType = "publicAccess"
	PROPERTYNAMESRELATIONSHIPTYPE_REFERRAL             PropertyNamesRelationshipType = "referral"
	PROPERTYNAMESRELATIONSHIPTYPE_SHARING              PropertyNamesRelationshipType = "sharing"
	PROPERTYNAMESRELATIONSHIPTYPE_TO_CONSTRAINT        PropertyNamesRelationshipType = "toConstraint"
	PROPERTYNAMESRELATIONSHIPTYPE_TO_FROM_NAME         PropertyNamesRelationshipType = "toFromName"
	PROPERTYNAMESRELATIONSHIPTYPE_TRANSLATIONS         PropertyNamesRelationshipType = "translations"
	PROPERTYNAMESRELATIONSHIPTYPE_USER                 PropertyNamesRelationshipType = "user"
	PROPERTYNAMESRELATIONSHIPTYPE_USER_ACCESSES        PropertyNamesRelationshipType = "userAccesses"
	PROPERTYNAMESRELATIONSHIPTYPE_USER_GROUP_ACCESSES  PropertyNamesRelationshipType = "userGroupAccesses"
)

// All allowed values of PropertyNamesRelationshipType enum
var AllowedPropertyNamesRelationshipTypeEnumValues = []PropertyNamesRelationshipType{
	"access",
	"attributeValues",
	"bidirectional",
	"code",
	"created",
	"createdBy",
	"description",
	"displayFromToName",
	"displayName",
	"displayToFromName",
	"externalAccess",
	"favorite",
	"favorites",
	"fromConstraint",
	"fromToName",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"referral",
	"sharing",
	"toConstraint",
	"toFromName",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesRelationshipType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesRelationshipType(value)
	for _, existing := range AllowedPropertyNamesRelationshipTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesRelationshipType", value)
}

// NewPropertyNamesRelationshipTypeFromValue returns a pointer to a valid PropertyNamesRelationshipType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesRelationshipTypeFromValue(v string) (*PropertyNamesRelationshipType, error) {
	ev := PropertyNamesRelationshipType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesRelationshipType: valid values are %v", v, AllowedPropertyNamesRelationshipTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesRelationshipType) IsValid() bool {
	for _, existing := range AllowedPropertyNamesRelationshipTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_RelationshipType value
func (v PropertyNamesRelationshipType) Ptr() *PropertyNamesRelationshipType {
	return &v
}

type NullablePropertyNamesRelationshipType struct {
	value *PropertyNamesRelationshipType
	isSet bool
}

func (v NullablePropertyNamesRelationshipType) Get() *PropertyNamesRelationshipType {
	return v.value
}

func (v *NullablePropertyNamesRelationshipType) Set(val *PropertyNamesRelationshipType) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesRelationshipType) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesRelationshipType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesRelationshipType(val *PropertyNamesRelationshipType) *NullablePropertyNamesRelationshipType {
	return &NullablePropertyNamesRelationshipType{value: val, isSet: true}
}

func (v NullablePropertyNamesRelationshipType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesRelationshipType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
