/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"time"
)

// checks if the DataInputPeriod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInputPeriod{}

// DataInputPeriod struct for DataInputPeriod
type DataInputPeriod struct {
	ClosingDate *time.Time `json:"closingDate,omitempty"`
	OpeningDate *time.Time `json:"openingDate,omitempty"`
	Period      *string    `json:"period,omitempty"`
}

// NewDataInputPeriod instantiates a new DataInputPeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInputPeriod() *DataInputPeriod {
	this := DataInputPeriod{}
	return &this
}

// NewDataInputPeriodWithDefaults instantiates a new DataInputPeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInputPeriodWithDefaults() *DataInputPeriod {
	this := DataInputPeriod{}
	return &this
}

// GetClosingDate returns the ClosingDate field value if set, zero value otherwise.
func (o *DataInputPeriod) GetClosingDate() time.Time {
	if o == nil || IsNil(o.ClosingDate) {
		var ret time.Time
		return ret
	}
	return *o.ClosingDate
}

// GetClosingDateOk returns a tuple with the ClosingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInputPeriod) GetClosingDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosingDate) {
		return nil, false
	}
	return o.ClosingDate, true
}

// HasClosingDate returns a boolean if a field has been set.
func (o *DataInputPeriod) HasClosingDate() bool {
	if o != nil && !IsNil(o.ClosingDate) {
		return true
	}

	return false
}

// SetClosingDate gets a reference to the given time.Time and assigns it to the ClosingDate field.
func (o *DataInputPeriod) SetClosingDate(v time.Time) {
	o.ClosingDate = &v
}

// GetOpeningDate returns the OpeningDate field value if set, zero value otherwise.
func (o *DataInputPeriod) GetOpeningDate() time.Time {
	if o == nil || IsNil(o.OpeningDate) {
		var ret time.Time
		return ret
	}
	return *o.OpeningDate
}

// GetOpeningDateOk returns a tuple with the OpeningDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInputPeriod) GetOpeningDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OpeningDate) {
		return nil, false
	}
	return o.OpeningDate, true
}

// HasOpeningDate returns a boolean if a field has been set.
func (o *DataInputPeriod) HasOpeningDate() bool {
	if o != nil && !IsNil(o.OpeningDate) {
		return true
	}

	return false
}

// SetOpeningDate gets a reference to the given time.Time and assigns it to the OpeningDate field.
func (o *DataInputPeriod) SetOpeningDate(v time.Time) {
	o.OpeningDate = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *DataInputPeriod) GetPeriod() string {
	if o == nil || IsNil(o.Period) {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInputPeriod) GetPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *DataInputPeriod) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *DataInputPeriod) SetPeriod(v string) {
	o.Period = &v
}

func (o DataInputPeriod) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInputPeriod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClosingDate) {
		toSerialize["closingDate"] = o.ClosingDate
	}
	if !IsNil(o.OpeningDate) {
		toSerialize["openingDate"] = o.OpeningDate
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	return toSerialize, nil
}

type NullableDataInputPeriod struct {
	value *DataInputPeriod
	isSet bool
}

func (v NullableDataInputPeriod) Get() *DataInputPeriod {
	return v.value
}

func (v *NullableDataInputPeriod) Set(val *DataInputPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInputPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInputPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInputPeriod(val *DataInputPeriod) *NullableDataInputPeriod {
	return &NullableDataInputPeriod{value: val, isSet: true}
}

func (v NullableDataInputPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInputPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
