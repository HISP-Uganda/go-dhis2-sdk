/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesCategoryCombo the model 'PropertyNamesCategoryCombo'
type PropertyNamesCategoryCombo string

// List of PropertyNames_CategoryCombo
const (
	PROPERTYNAMESCATEGORYCOMBO_ACCESS                 PropertyNamesCategoryCombo = "access"
	PROPERTYNAMESCATEGORYCOMBO_ATTRIBUTE_VALUES       PropertyNamesCategoryCombo = "attributeValues"
	PROPERTYNAMESCATEGORYCOMBO_CATEGORIES             PropertyNamesCategoryCombo = "categories"
	PROPERTYNAMESCATEGORYCOMBO_CATEGORY_OPTION_COMBOS PropertyNamesCategoryCombo = "categoryOptionCombos"
	PROPERTYNAMESCATEGORYCOMBO_CODE                   PropertyNamesCategoryCombo = "code"
	PROPERTYNAMESCATEGORYCOMBO_CREATED                PropertyNamesCategoryCombo = "created"
	PROPERTYNAMESCATEGORYCOMBO_CREATED_BY             PropertyNamesCategoryCombo = "createdBy"
	PROPERTYNAMESCATEGORYCOMBO_DATA_DIMENSION_TYPE    PropertyNamesCategoryCombo = "dataDimensionType"
	PROPERTYNAMESCATEGORYCOMBO_DISPLAY_NAME           PropertyNamesCategoryCombo = "displayName"
	PROPERTYNAMESCATEGORYCOMBO_EXTERNAL_ACCESS        PropertyNamesCategoryCombo = "externalAccess"
	PROPERTYNAMESCATEGORYCOMBO_FAVORITE               PropertyNamesCategoryCombo = "favorite"
	PROPERTYNAMESCATEGORYCOMBO_FAVORITES              PropertyNamesCategoryCombo = "favorites"
	PROPERTYNAMESCATEGORYCOMBO_HREF                   PropertyNamesCategoryCombo = "href"
	PROPERTYNAMESCATEGORYCOMBO_ID                     PropertyNamesCategoryCombo = "id"
	PROPERTYNAMESCATEGORYCOMBO_IS_DEFAULT             PropertyNamesCategoryCombo = "isDefault"
	PROPERTYNAMESCATEGORYCOMBO_LAST_UPDATED           PropertyNamesCategoryCombo = "lastUpdated"
	PROPERTYNAMESCATEGORYCOMBO_LAST_UPDATED_BY        PropertyNamesCategoryCombo = "lastUpdatedBy"
	PROPERTYNAMESCATEGORYCOMBO_NAME                   PropertyNamesCategoryCombo = "name"
	PROPERTYNAMESCATEGORYCOMBO_PUBLIC_ACCESS          PropertyNamesCategoryCombo = "publicAccess"
	PROPERTYNAMESCATEGORYCOMBO_SHARING                PropertyNamesCategoryCombo = "sharing"
	PROPERTYNAMESCATEGORYCOMBO_SKIP_TOTAL             PropertyNamesCategoryCombo = "skipTotal"
	PROPERTYNAMESCATEGORYCOMBO_TRANSLATIONS           PropertyNamesCategoryCombo = "translations"
	PROPERTYNAMESCATEGORYCOMBO_USER                   PropertyNamesCategoryCombo = "user"
	PROPERTYNAMESCATEGORYCOMBO_USER_ACCESSES          PropertyNamesCategoryCombo = "userAccesses"
	PROPERTYNAMESCATEGORYCOMBO_USER_GROUP_ACCESSES    PropertyNamesCategoryCombo = "userGroupAccesses"
)

// All allowed values of PropertyNamesCategoryCombo enum
var AllowedPropertyNamesCategoryComboEnumValues = []PropertyNamesCategoryCombo{
	"access",
	"attributeValues",
	"categories",
	"categoryOptionCombos",
	"code",
	"created",
	"createdBy",
	"dataDimensionType",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"isDefault",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"skipTotal",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesCategoryCombo) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesCategoryCombo(value)
	for _, existing := range AllowedPropertyNamesCategoryComboEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesCategoryCombo", value)
}

// NewPropertyNamesCategoryComboFromValue returns a pointer to a valid PropertyNamesCategoryCombo
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesCategoryComboFromValue(v string) (*PropertyNamesCategoryCombo, error) {
	ev := PropertyNamesCategoryCombo(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesCategoryCombo: valid values are %v", v, AllowedPropertyNamesCategoryComboEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesCategoryCombo) IsValid() bool {
	for _, existing := range AllowedPropertyNamesCategoryComboEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_CategoryCombo value
func (v PropertyNamesCategoryCombo) Ptr() *PropertyNamesCategoryCombo {
	return &v
}

type NullablePropertyNamesCategoryCombo struct {
	value *PropertyNamesCategoryCombo
	isSet bool
}

func (v NullablePropertyNamesCategoryCombo) Get() *PropertyNamesCategoryCombo {
	return v.value
}

func (v *NullablePropertyNamesCategoryCombo) Set(val *PropertyNamesCategoryCombo) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesCategoryCombo) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesCategoryCombo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesCategoryCombo(val *PropertyNamesCategoryCombo) *NullablePropertyNamesCategoryCombo {
	return &NullablePropertyNamesCategoryCombo{value: val, isSet: true}
}

func (v NullablePropertyNamesCategoryCombo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesCategoryCombo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
