/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// IndicatorGroupPropertyNames the model 'IndicatorGroupPropertyNames'
type IndicatorGroupPropertyNames string

// List of IndicatorGroupPropertyNames
const (
	INDICATORGROUPPROPERTYNAMES_ACCESS              IndicatorGroupPropertyNames = "access"
	INDICATORGROUPPROPERTYNAMES_ATTRIBUTE_VALUES    IndicatorGroupPropertyNames = "attributeValues"
	INDICATORGROUPPROPERTYNAMES_CODE                IndicatorGroupPropertyNames = "code"
	INDICATORGROUPPROPERTYNAMES_CREATED             IndicatorGroupPropertyNames = "created"
	INDICATORGROUPPROPERTYNAMES_CREATED_BY          IndicatorGroupPropertyNames = "createdBy"
	INDICATORGROUPPROPERTYNAMES_DESCRIPTION         IndicatorGroupPropertyNames = "description"
	INDICATORGROUPPROPERTYNAMES_DISPLAY_NAME        IndicatorGroupPropertyNames = "displayName"
	INDICATORGROUPPROPERTYNAMES_FAVORITE            IndicatorGroupPropertyNames = "favorite"
	INDICATORGROUPPROPERTYNAMES_FAVORITES           IndicatorGroupPropertyNames = "favorites"
	INDICATORGROUPPROPERTYNAMES_GROUP_SETS          IndicatorGroupPropertyNames = "groupSets"
	INDICATORGROUPPROPERTYNAMES_HREF                IndicatorGroupPropertyNames = "href"
	INDICATORGROUPPROPERTYNAMES_ID                  IndicatorGroupPropertyNames = "id"
	INDICATORGROUPPROPERTYNAMES_INDICATOR_GROUP_SET IndicatorGroupPropertyNames = "indicatorGroupSet"
	INDICATORGROUPPROPERTYNAMES_INDICATORS          IndicatorGroupPropertyNames = "indicators"
	INDICATORGROUPPROPERTYNAMES_LAST_UPDATED        IndicatorGroupPropertyNames = "lastUpdated"
	INDICATORGROUPPROPERTYNAMES_LAST_UPDATED_BY     IndicatorGroupPropertyNames = "lastUpdatedBy"
	INDICATORGROUPPROPERTYNAMES_NAME                IndicatorGroupPropertyNames = "name"
	INDICATORGROUPPROPERTYNAMES_SHARING             IndicatorGroupPropertyNames = "sharing"
	INDICATORGROUPPROPERTYNAMES_TRANSLATIONS        IndicatorGroupPropertyNames = "translations"
)

// All allowed values of IndicatorGroupPropertyNames enum
var AllowedIndicatorGroupPropertyNamesEnumValues = []IndicatorGroupPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"favorite",
	"favorites",
	"groupSets",
	"href",
	"id",
	"indicatorGroupSet",
	"indicators",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"sharing",
	"translations",
}

func (v *IndicatorGroupPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IndicatorGroupPropertyNames(value)
	for _, existing := range AllowedIndicatorGroupPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IndicatorGroupPropertyNames", value)
}

// NewIndicatorGroupPropertyNamesFromValue returns a pointer to a valid IndicatorGroupPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIndicatorGroupPropertyNamesFromValue(v string) (*IndicatorGroupPropertyNames, error) {
	ev := IndicatorGroupPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IndicatorGroupPropertyNames: valid values are %v", v, AllowedIndicatorGroupPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IndicatorGroupPropertyNames) IsValid() bool {
	for _, existing := range AllowedIndicatorGroupPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IndicatorGroupPropertyNames value
func (v IndicatorGroupPropertyNames) Ptr() *IndicatorGroupPropertyNames {
	return &v
}

type NullableIndicatorGroupPropertyNames struct {
	value *IndicatorGroupPropertyNames
	isSet bool
}

func (v NullableIndicatorGroupPropertyNames) Get() *IndicatorGroupPropertyNames {
	return v.value
}

func (v *NullableIndicatorGroupPropertyNames) Set(val *IndicatorGroupPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorGroupPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorGroupPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorGroupPropertyNames(val *IndicatorGroupPropertyNames) *NullableIndicatorGroupPropertyNames {
	return &NullableIndicatorGroupPropertyNames{value: val, isSet: true}
}

func (v NullableIndicatorGroupPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorGroupPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
