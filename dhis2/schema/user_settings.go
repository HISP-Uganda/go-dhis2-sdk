/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSettings{}

// UserSettings struct for UserSettings
type UserSettings struct {
	UserAnalysisDisplayProperty  DisplayProperty `json:"userAnalysisDisplayProperty"`
	UserDbLocale                 *string         `json:"userDbLocale,omitempty"`
	UserMessageEmailNotification *bool           `json:"userMessageEmailNotification,omitempty"`
	UserMessageSmsNotification   *bool           `json:"userMessageSmsNotification,omitempty"`
	UserStyle                    *string         `json:"userStyle,omitempty"`
	UserTrackerDashboardLayout   *string         `json:"userTrackerDashboardLayout,omitempty"`
	UserUiLocale                 *string         `json:"userUiLocale,omitempty"`
}

type _UserSettings UserSettings

// NewUserSettings instantiates a new UserSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettings(userAnalysisDisplayProperty DisplayProperty) *UserSettings {
	this := UserSettings{}
	this.UserAnalysisDisplayProperty = userAnalysisDisplayProperty
	return &this
}

// NewUserSettingsWithDefaults instantiates a new UserSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsWithDefaults() *UserSettings {
	this := UserSettings{}
	return &this
}

// GetUserAnalysisDisplayProperty returns the UserAnalysisDisplayProperty field value
func (o *UserSettings) GetUserAnalysisDisplayProperty() DisplayProperty {
	if o == nil {
		var ret DisplayProperty
		return ret
	}

	return o.UserAnalysisDisplayProperty
}

// GetUserAnalysisDisplayPropertyOk returns a tuple with the UserAnalysisDisplayProperty field value
// and a boolean to check if the value has been set.
func (o *UserSettings) GetUserAnalysisDisplayPropertyOk() (*DisplayProperty, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserAnalysisDisplayProperty, true
}

// SetUserAnalysisDisplayProperty sets field value
func (o *UserSettings) SetUserAnalysisDisplayProperty(v DisplayProperty) {
	o.UserAnalysisDisplayProperty = v
}

// GetUserDbLocale returns the UserDbLocale field value if set, zero value otherwise.
func (o *UserSettings) GetUserDbLocale() string {
	if o == nil || IsNil(o.UserDbLocale) {
		var ret string
		return ret
	}
	return *o.UserDbLocale
}

// GetUserDbLocaleOk returns a tuple with the UserDbLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetUserDbLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.UserDbLocale) {
		return nil, false
	}
	return o.UserDbLocale, true
}

// HasUserDbLocale returns a boolean if a field has been set.
func (o *UserSettings) HasUserDbLocale() bool {
	if o != nil && !IsNil(o.UserDbLocale) {
		return true
	}

	return false
}

// SetUserDbLocale gets a reference to the given string and assigns it to the UserDbLocale field.
func (o *UserSettings) SetUserDbLocale(v string) {
	o.UserDbLocale = &v
}

// GetUserMessageEmailNotification returns the UserMessageEmailNotification field value if set, zero value otherwise.
func (o *UserSettings) GetUserMessageEmailNotification() bool {
	if o == nil || IsNil(o.UserMessageEmailNotification) {
		var ret bool
		return ret
	}
	return *o.UserMessageEmailNotification
}

// GetUserMessageEmailNotificationOk returns a tuple with the UserMessageEmailNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetUserMessageEmailNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.UserMessageEmailNotification) {
		return nil, false
	}
	return o.UserMessageEmailNotification, true
}

// HasUserMessageEmailNotification returns a boolean if a field has been set.
func (o *UserSettings) HasUserMessageEmailNotification() bool {
	if o != nil && !IsNil(o.UserMessageEmailNotification) {
		return true
	}

	return false
}

// SetUserMessageEmailNotification gets a reference to the given bool and assigns it to the UserMessageEmailNotification field.
func (o *UserSettings) SetUserMessageEmailNotification(v bool) {
	o.UserMessageEmailNotification = &v
}

// GetUserMessageSmsNotification returns the UserMessageSmsNotification field value if set, zero value otherwise.
func (o *UserSettings) GetUserMessageSmsNotification() bool {
	if o == nil || IsNil(o.UserMessageSmsNotification) {
		var ret bool
		return ret
	}
	return *o.UserMessageSmsNotification
}

// GetUserMessageSmsNotificationOk returns a tuple with the UserMessageSmsNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetUserMessageSmsNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.UserMessageSmsNotification) {
		return nil, false
	}
	return o.UserMessageSmsNotification, true
}

// HasUserMessageSmsNotification returns a boolean if a field has been set.
func (o *UserSettings) HasUserMessageSmsNotification() bool {
	if o != nil && !IsNil(o.UserMessageSmsNotification) {
		return true
	}

	return false
}

// SetUserMessageSmsNotification gets a reference to the given bool and assigns it to the UserMessageSmsNotification field.
func (o *UserSettings) SetUserMessageSmsNotification(v bool) {
	o.UserMessageSmsNotification = &v
}

// GetUserStyle returns the UserStyle field value if set, zero value otherwise.
func (o *UserSettings) GetUserStyle() string {
	if o == nil || IsNil(o.UserStyle) {
		var ret string
		return ret
	}
	return *o.UserStyle
}

// GetUserStyleOk returns a tuple with the UserStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetUserStyleOk() (*string, bool) {
	if o == nil || IsNil(o.UserStyle) {
		return nil, false
	}
	return o.UserStyle, true
}

// HasUserStyle returns a boolean if a field has been set.
func (o *UserSettings) HasUserStyle() bool {
	if o != nil && !IsNil(o.UserStyle) {
		return true
	}

	return false
}

// SetUserStyle gets a reference to the given string and assigns it to the UserStyle field.
func (o *UserSettings) SetUserStyle(v string) {
	o.UserStyle = &v
}

// GetUserTrackerDashboardLayout returns the UserTrackerDashboardLayout field value if set, zero value otherwise.
func (o *UserSettings) GetUserTrackerDashboardLayout() string {
	if o == nil || IsNil(o.UserTrackerDashboardLayout) {
		var ret string
		return ret
	}
	return *o.UserTrackerDashboardLayout
}

// GetUserTrackerDashboardLayoutOk returns a tuple with the UserTrackerDashboardLayout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetUserTrackerDashboardLayoutOk() (*string, bool) {
	if o == nil || IsNil(o.UserTrackerDashboardLayout) {
		return nil, false
	}
	return o.UserTrackerDashboardLayout, true
}

// HasUserTrackerDashboardLayout returns a boolean if a field has been set.
func (o *UserSettings) HasUserTrackerDashboardLayout() bool {
	if o != nil && !IsNil(o.UserTrackerDashboardLayout) {
		return true
	}

	return false
}

// SetUserTrackerDashboardLayout gets a reference to the given string and assigns it to the UserTrackerDashboardLayout field.
func (o *UserSettings) SetUserTrackerDashboardLayout(v string) {
	o.UserTrackerDashboardLayout = &v
}

// GetUserUiLocale returns the UserUiLocale field value if set, zero value otherwise.
func (o *UserSettings) GetUserUiLocale() string {
	if o == nil || IsNil(o.UserUiLocale) {
		var ret string
		return ret
	}
	return *o.UserUiLocale
}

// GetUserUiLocaleOk returns a tuple with the UserUiLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetUserUiLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.UserUiLocale) {
		return nil, false
	}
	return o.UserUiLocale, true
}

// HasUserUiLocale returns a boolean if a field has been set.
func (o *UserSettings) HasUserUiLocale() bool {
	if o != nil && !IsNil(o.UserUiLocale) {
		return true
	}

	return false
}

// SetUserUiLocale gets a reference to the given string and assigns it to the UserUiLocale field.
func (o *UserSettings) SetUserUiLocale(v string) {
	o.UserUiLocale = &v
}

func (o UserSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userAnalysisDisplayProperty"] = o.UserAnalysisDisplayProperty
	if !IsNil(o.UserDbLocale) {
		toSerialize["userDbLocale"] = o.UserDbLocale
	}
	if !IsNil(o.UserMessageEmailNotification) {
		toSerialize["userMessageEmailNotification"] = o.UserMessageEmailNotification
	}
	if !IsNil(o.UserMessageSmsNotification) {
		toSerialize["userMessageSmsNotification"] = o.UserMessageSmsNotification
	}
	if !IsNil(o.UserStyle) {
		toSerialize["userStyle"] = o.UserStyle
	}
	if !IsNil(o.UserTrackerDashboardLayout) {
		toSerialize["userTrackerDashboardLayout"] = o.UserTrackerDashboardLayout
	}
	if !IsNil(o.UserUiLocale) {
		toSerialize["userUiLocale"] = o.UserUiLocale
	}
	return toSerialize, nil
}

func (o *UserSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userAnalysisDisplayProperty",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSettings := _UserSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSettings)

	if err != nil {
		return err
	}

	*o = UserSettings(varUserSettings)

	return err
}

type NullableUserSettings struct {
	value *UserSettings
	isSet bool
}

func (v NullableUserSettings) Get() *UserSettings {
	return v.value
}

func (v *NullableUserSettings) Set(val *UserSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettings(val *UserSettings) *NullableUserSettings {
	return &NullableUserSettings{value: val, isSet: true}
}

func (v NullableUserSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
