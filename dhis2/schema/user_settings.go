/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSettings{}

// UserSettings struct for UserSettings
type UserSettings struct {
	AnalysisDisplayProperty  string  `json:"analysisDisplayProperty"`
	DbLocale                 *string `json:"dbLocale,omitempty"`
	MessageEmailNotification *bool   `json:"messageEmailNotification,omitempty"`
	MessageSmsNotification   *bool   `json:"messageSmsNotification,omitempty"`
	Style                    *string `json:"style,omitempty"`
	TrackerDashboardLayout   *string `json:"trackerDashboardLayout,omitempty"`
	UiLocale                 *string `json:"uiLocale,omitempty"`
}

type _UserSettings UserSettings

// NewUserSettings instantiates a new UserSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettings(analysisDisplayProperty string) *UserSettings {
	this := UserSettings{}
	this.AnalysisDisplayProperty = analysisDisplayProperty
	return &this
}

// NewUserSettingsWithDefaults instantiates a new UserSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsWithDefaults() *UserSettings {
	this := UserSettings{}
	return &this
}

// GetAnalysisDisplayProperty returns the AnalysisDisplayProperty field value
func (o *UserSettings) GetAnalysisDisplayProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnalysisDisplayProperty
}

// GetAnalysisDisplayPropertyOk returns a tuple with the AnalysisDisplayProperty field value
// and a boolean to check if the value has been set.
func (o *UserSettings) GetAnalysisDisplayPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnalysisDisplayProperty, true
}

// SetAnalysisDisplayProperty sets field value
func (o *UserSettings) SetAnalysisDisplayProperty(v string) {
	o.AnalysisDisplayProperty = v
}

// GetDbLocale returns the DbLocale field value if set, zero value otherwise.
func (o *UserSettings) GetDbLocale() string {
	if o == nil || IsNil(o.DbLocale) {
		var ret string
		return ret
	}
	return *o.DbLocale
}

// GetDbLocaleOk returns a tuple with the DbLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetDbLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.DbLocale) {
		return nil, false
	}
	return o.DbLocale, true
}

// HasDbLocale returns a boolean if a field has been set.
func (o *UserSettings) HasDbLocale() bool {
	if o != nil && !IsNil(o.DbLocale) {
		return true
	}

	return false
}

// SetDbLocale gets a reference to the given string and assigns it to the DbLocale field.
func (o *UserSettings) SetDbLocale(v string) {
	o.DbLocale = &v
}

// GetMessageEmailNotification returns the MessageEmailNotification field value if set, zero value otherwise.
func (o *UserSettings) GetMessageEmailNotification() bool {
	if o == nil || IsNil(o.MessageEmailNotification) {
		var ret bool
		return ret
	}
	return *o.MessageEmailNotification
}

// GetMessageEmailNotificationOk returns a tuple with the MessageEmailNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetMessageEmailNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.MessageEmailNotification) {
		return nil, false
	}
	return o.MessageEmailNotification, true
}

// HasMessageEmailNotification returns a boolean if a field has been set.
func (o *UserSettings) HasMessageEmailNotification() bool {
	if o != nil && !IsNil(o.MessageEmailNotification) {
		return true
	}

	return false
}

// SetMessageEmailNotification gets a reference to the given bool and assigns it to the MessageEmailNotification field.
func (o *UserSettings) SetMessageEmailNotification(v bool) {
	o.MessageEmailNotification = &v
}

// GetMessageSmsNotification returns the MessageSmsNotification field value if set, zero value otherwise.
func (o *UserSettings) GetMessageSmsNotification() bool {
	if o == nil || IsNil(o.MessageSmsNotification) {
		var ret bool
		return ret
	}
	return *o.MessageSmsNotification
}

// GetMessageSmsNotificationOk returns a tuple with the MessageSmsNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetMessageSmsNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.MessageSmsNotification) {
		return nil, false
	}
	return o.MessageSmsNotification, true
}

// HasMessageSmsNotification returns a boolean if a field has been set.
func (o *UserSettings) HasMessageSmsNotification() bool {
	if o != nil && !IsNil(o.MessageSmsNotification) {
		return true
	}

	return false
}

// SetMessageSmsNotification gets a reference to the given bool and assigns it to the MessageSmsNotification field.
func (o *UserSettings) SetMessageSmsNotification(v bool) {
	o.MessageSmsNotification = &v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *UserSettings) GetStyle() string {
	if o == nil || IsNil(o.Style) {
		var ret string
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetStyleOk() (*string, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *UserSettings) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given string and assigns it to the Style field.
func (o *UserSettings) SetStyle(v string) {
	o.Style = &v
}

// GetTrackerDashboardLayout returns the TrackerDashboardLayout field value if set, zero value otherwise.
func (o *UserSettings) GetTrackerDashboardLayout() string {
	if o == nil || IsNil(o.TrackerDashboardLayout) {
		var ret string
		return ret
	}
	return *o.TrackerDashboardLayout
}

// GetTrackerDashboardLayoutOk returns a tuple with the TrackerDashboardLayout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetTrackerDashboardLayoutOk() (*string, bool) {
	if o == nil || IsNil(o.TrackerDashboardLayout) {
		return nil, false
	}
	return o.TrackerDashboardLayout, true
}

// HasTrackerDashboardLayout returns a boolean if a field has been set.
func (o *UserSettings) HasTrackerDashboardLayout() bool {
	if o != nil && !IsNil(o.TrackerDashboardLayout) {
		return true
	}

	return false
}

// SetTrackerDashboardLayout gets a reference to the given string and assigns it to the TrackerDashboardLayout field.
func (o *UserSettings) SetTrackerDashboardLayout(v string) {
	o.TrackerDashboardLayout = &v
}

// GetUiLocale returns the UiLocale field value if set, zero value otherwise.
func (o *UserSettings) GetUiLocale() string {
	if o == nil || IsNil(o.UiLocale) {
		var ret string
		return ret
	}
	return *o.UiLocale
}

// GetUiLocaleOk returns a tuple with the UiLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetUiLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.UiLocale) {
		return nil, false
	}
	return o.UiLocale, true
}

// HasUiLocale returns a boolean if a field has been set.
func (o *UserSettings) HasUiLocale() bool {
	if o != nil && !IsNil(o.UiLocale) {
		return true
	}

	return false
}

// SetUiLocale gets a reference to the given string and assigns it to the UiLocale field.
func (o *UserSettings) SetUiLocale(v string) {
	o.UiLocale = &v
}

func (o UserSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["analysisDisplayProperty"] = o.AnalysisDisplayProperty
	if !IsNil(o.DbLocale) {
		toSerialize["dbLocale"] = o.DbLocale
	}
	if !IsNil(o.MessageEmailNotification) {
		toSerialize["messageEmailNotification"] = o.MessageEmailNotification
	}
	if !IsNil(o.MessageSmsNotification) {
		toSerialize["messageSmsNotification"] = o.MessageSmsNotification
	}
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	if !IsNil(o.TrackerDashboardLayout) {
		toSerialize["trackerDashboardLayout"] = o.TrackerDashboardLayout
	}
	if !IsNil(o.UiLocale) {
		toSerialize["uiLocale"] = o.UiLocale
	}
	return toSerialize, nil
}

func (o *UserSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"analysisDisplayProperty",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSettings := _UserSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSettings)

	if err != nil {
		return err
	}

	*o = UserSettings(varUserSettings)

	return err
}

type NullableUserSettings struct {
	value *UserSettings
	isSet bool
}

func (v NullableUserSettings) Get() *UserSettings {
	return v.value
}

func (v *NullableUserSettings) Set(val *UserSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettings(val *UserSettings) *NullableUserSettings {
	return &NullableUserSettings{value: val, isSet: true}
}

func (v NullableUserSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
