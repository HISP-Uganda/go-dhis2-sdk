/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DimensionType the model 'DimensionType'
type DimensionType string

// List of DimensionType
const (
	DIMENSIONTYPE_DATA_X                      DimensionType = "DATA_X"
	DIMENSIONTYPE_PROGRAM_DATA_ELEMENT        DimensionType = "PROGRAM_DATA_ELEMENT"
	DIMENSIONTYPE_PROGRAM_ATTRIBUTE           DimensionType = "PROGRAM_ATTRIBUTE"
	DIMENSIONTYPE_PROGRAM_INDICATOR           DimensionType = "PROGRAM_INDICATOR"
	DIMENSIONTYPE_DATA_COLLAPSED              DimensionType = "DATA_COLLAPSED"
	DIMENSIONTYPE_CATEGORY_OPTION_COMBO       DimensionType = "CATEGORY_OPTION_COMBO"
	DIMENSIONTYPE_ATTRIBUTE_OPTION_COMBO      DimensionType = "ATTRIBUTE_OPTION_COMBO"
	DIMENSIONTYPE_PERIOD                      DimensionType = "PERIOD"
	DIMENSIONTYPE_ORGANISATION_UNIT           DimensionType = "ORGANISATION_UNIT"
	DIMENSIONTYPE_CATEGORY_OPTION_GROUP_SET   DimensionType = "CATEGORY_OPTION_GROUP_SET"
	DIMENSIONTYPE_DATA_ELEMENT_GROUP_SET      DimensionType = "DATA_ELEMENT_GROUP_SET"
	DIMENSIONTYPE_ORGANISATION_UNIT_GROUP_SET DimensionType = "ORGANISATION_UNIT_GROUP_SET"
	DIMENSIONTYPE_ORGANISATION_UNIT_GROUP     DimensionType = "ORGANISATION_UNIT_GROUP"
	DIMENSIONTYPE_CATEGORY                    DimensionType = "CATEGORY"
	DIMENSIONTYPE_OPTION_GROUP_SET            DimensionType = "OPTION_GROUP_SET"
	DIMENSIONTYPE_VALIDATION_RULE             DimensionType = "VALIDATION_RULE"
	DIMENSIONTYPE_STATIC                      DimensionType = "STATIC"
	DIMENSIONTYPE_ORGANISATION_UNIT_LEVEL     DimensionType = "ORGANISATION_UNIT_LEVEL"
)

// All allowed values of DimensionType enum
var AllowedDimensionTypeEnumValues = []DimensionType{
	"DATA_X",
	"PROGRAM_DATA_ELEMENT",
	"PROGRAM_ATTRIBUTE",
	"PROGRAM_INDICATOR",
	"DATA_COLLAPSED",
	"CATEGORY_OPTION_COMBO",
	"ATTRIBUTE_OPTION_COMBO",
	"PERIOD",
	"ORGANISATION_UNIT",
	"CATEGORY_OPTION_GROUP_SET",
	"DATA_ELEMENT_GROUP_SET",
	"ORGANISATION_UNIT_GROUP_SET",
	"ORGANISATION_UNIT_GROUP",
	"CATEGORY",
	"OPTION_GROUP_SET",
	"VALIDATION_RULE",
	"STATIC",
	"ORGANISATION_UNIT_LEVEL",
}

func (v *DimensionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DimensionType(value)
	for _, existing := range AllowedDimensionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DimensionType", value)
}

// NewDimensionTypeFromValue returns a pointer to a valid DimensionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDimensionTypeFromValue(v string) (*DimensionType, error) {
	ev := DimensionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DimensionType: valid values are %v", v, AllowedDimensionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DimensionType) IsValid() bool {
	for _, existing := range AllowedDimensionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DimensionType value
func (v DimensionType) Ptr() *DimensionType {
	return &v
}

type NullableDimensionType struct {
	value *DimensionType
	isSet bool
}

func (v NullableDimensionType) Get() *DimensionType {
	return v.value
}

func (v *NullableDimensionType) Set(val *DimensionType) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionType) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionType(val *DimensionType) *NullableDimensionType {
	return &NullableDimensionType{value: val, isSet: true}
}

func (v NullableDimensionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
