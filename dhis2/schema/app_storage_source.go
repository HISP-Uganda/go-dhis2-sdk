/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AppStorageSource the model 'AppStorageSource'
type AppStorageSource string

// List of AppStorageSource
const (
	APPSTORAGESOURCE_LOCAL   AppStorageSource = "LOCAL"
	APPSTORAGESOURCE_JCLOUDS AppStorageSource = "JCLOUDS"
	APPSTORAGESOURCE_BUNDLED AppStorageSource = "BUNDLED"
)

// All allowed values of AppStorageSource enum
var AllowedAppStorageSourceEnumValues = []AppStorageSource{
	"LOCAL",
	"JCLOUDS",
	"BUNDLED",
}

func (v *AppStorageSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppStorageSource(value)
	for _, existing := range AllowedAppStorageSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppStorageSource", value)
}

// NewAppStorageSourceFromValue returns a pointer to a valid AppStorageSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppStorageSourceFromValue(v string) (*AppStorageSource, error) {
	ev := AppStorageSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppStorageSource: valid values are %v", v, AllowedAppStorageSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppStorageSource) IsValid() bool {
	for _, existing := range AllowedAppStorageSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppStorageSource value
func (v AppStorageSource) Ptr() *AppStorageSource {
	return &v
}

type NullableAppStorageSource struct {
	value *AppStorageSource
	isSet bool
}

func (v NullableAppStorageSource) Get() *AppStorageSource {
	return v.value
}

func (v *NullableAppStorageSource) Set(val *AppStorageSource) {
	v.value = val
	v.isSet = true
}

func (v NullableAppStorageSource) IsSet() bool {
	return v.isSet
}

func (v *NullableAppStorageSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppStorageSource(val *AppStorageSource) *NullableAppStorageSource {
	return &NullableAppStorageSource{value: val, isSet: true}
}

func (v NullableAppStorageSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppStorageSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
