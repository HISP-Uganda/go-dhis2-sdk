/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// EventVisualizationType the model 'EventVisualizationType'
type EventVisualizationType string

// List of EventVisualizationType
const (
	EVENTVISUALIZATIONTYPE_COLUMN                EventVisualizationType = "COLUMN"
	EVENTVISUALIZATIONTYPE_STACKED_COLUMN        EventVisualizationType = "STACKED_COLUMN"
	EVENTVISUALIZATIONTYPE_BAR                   EventVisualizationType = "BAR"
	EVENTVISUALIZATIONTYPE_STACKED_BAR           EventVisualizationType = "STACKED_BAR"
	EVENTVISUALIZATIONTYPE_LINE                  EventVisualizationType = "LINE"
	EVENTVISUALIZATIONTYPE_LINE_LIST             EventVisualizationType = "LINE_LIST"
	EVENTVISUALIZATIONTYPE_AREA                  EventVisualizationType = "AREA"
	EVENTVISUALIZATIONTYPE_STACKED_AREA          EventVisualizationType = "STACKED_AREA"
	EVENTVISUALIZATIONTYPE_PIE                   EventVisualizationType = "PIE"
	EVENTVISUALIZATIONTYPE_RADAR                 EventVisualizationType = "RADAR"
	EVENTVISUALIZATIONTYPE_GAUGE                 EventVisualizationType = "GAUGE"
	EVENTVISUALIZATIONTYPE_YEAR_OVER_YEAR_LINE   EventVisualizationType = "YEAR_OVER_YEAR_LINE"
	EVENTVISUALIZATIONTYPE_YEAR_OVER_YEAR_COLUMN EventVisualizationType = "YEAR_OVER_YEAR_COLUMN"
	EVENTVISUALIZATIONTYPE_SINGLE_VALUE          EventVisualizationType = "SINGLE_VALUE"
	EVENTVISUALIZATIONTYPE_PIVOT_TABLE           EventVisualizationType = "PIVOT_TABLE"
	EVENTVISUALIZATIONTYPE_SCATTER               EventVisualizationType = "SCATTER"
	EVENTVISUALIZATIONTYPE_BUBBLE                EventVisualizationType = "BUBBLE"
)

// All allowed values of EventVisualizationType enum
var AllowedEventVisualizationTypeEnumValues = []EventVisualizationType{
	"COLUMN",
	"STACKED_COLUMN",
	"BAR",
	"STACKED_BAR",
	"LINE",
	"LINE_LIST",
	"AREA",
	"STACKED_AREA",
	"PIE",
	"RADAR",
	"GAUGE",
	"YEAR_OVER_YEAR_LINE",
	"YEAR_OVER_YEAR_COLUMN",
	"SINGLE_VALUE",
	"PIVOT_TABLE",
	"SCATTER",
	"BUBBLE",
}

func (v *EventVisualizationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventVisualizationType(value)
	for _, existing := range AllowedEventVisualizationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventVisualizationType", value)
}

// NewEventVisualizationTypeFromValue returns a pointer to a valid EventVisualizationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventVisualizationTypeFromValue(v string) (*EventVisualizationType, error) {
	ev := EventVisualizationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventVisualizationType: valid values are %v", v, AllowedEventVisualizationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventVisualizationType) IsValid() bool {
	for _, existing := range AllowedEventVisualizationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventVisualizationType value
func (v EventVisualizationType) Ptr() *EventVisualizationType {
	return &v
}

type NullableEventVisualizationType struct {
	value *EventVisualizationType
	isSet bool
}

func (v NullableEventVisualizationType) Get() *EventVisualizationType {
	return v.value
}

func (v *NullableEventVisualizationType) Set(val *EventVisualizationType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventVisualizationType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventVisualizationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventVisualizationType(val *EventVisualizationType) *NullableEventVisualizationType {
	return &NullableEventVisualizationType{value: val, isSet: true}
}

func (v NullableEventVisualizationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventVisualizationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
