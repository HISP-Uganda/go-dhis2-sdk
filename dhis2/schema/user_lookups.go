/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the UserLookups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLookups{}

// UserLookups struct for UserLookups
type UserLookups struct {
	Users []UserLookup `json:"users,omitempty"`
}

// NewUserLookups instantiates a new UserLookups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLookups() *UserLookups {
	this := UserLookups{}
	return &this
}

// NewUserLookupsWithDefaults instantiates a new UserLookups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLookupsWithDefaults() *UserLookups {
	this := UserLookups{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UserLookups) GetUsers() []UserLookup {
	if o == nil || IsNil(o.Users) {
		var ret []UserLookup
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLookups) GetUsersOk() ([]UserLookup, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UserLookups) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []UserLookup and assigns it to the Users field.
func (o *UserLookups) SetUsers(v []UserLookup) {
	o.Users = v
}

func (o UserLookups) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLookups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableUserLookups struct {
	value *UserLookups
	isSet bool
}

func (v NullableUserLookups) Get() *UserLookups {
	return v.value
}

func (v *NullableUserLookups) Set(val *UserLookups) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLookups) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLookups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLookups(val *UserLookups) *NullableUserLookups {
	return &NullableUserLookups{value: val, isSet: true}
}

func (v NullableUserLookups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLookups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
