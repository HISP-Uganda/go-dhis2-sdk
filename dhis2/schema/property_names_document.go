/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesDocument the model 'PropertyNamesDocument'
type PropertyNamesDocument string

// List of PropertyNames_Document
const (
	PROPERTYNAMESDOCUMENT_ACCESS              PropertyNamesDocument = "access"
	PROPERTYNAMESDOCUMENT_ATTACHMENT          PropertyNamesDocument = "attachment"
	PROPERTYNAMESDOCUMENT_ATTRIBUTE_VALUES    PropertyNamesDocument = "attributeValues"
	PROPERTYNAMESDOCUMENT_CODE                PropertyNamesDocument = "code"
	PROPERTYNAMESDOCUMENT_CONTENT_TYPE        PropertyNamesDocument = "contentType"
	PROPERTYNAMESDOCUMENT_CREATED             PropertyNamesDocument = "created"
	PROPERTYNAMESDOCUMENT_CREATED_BY          PropertyNamesDocument = "createdBy"
	PROPERTYNAMESDOCUMENT_DISPLAY_NAME        PropertyNamesDocument = "displayName"
	PROPERTYNAMESDOCUMENT_EXTERNAL            PropertyNamesDocument = "external"
	PROPERTYNAMESDOCUMENT_EXTERNAL_ACCESS     PropertyNamesDocument = "externalAccess"
	PROPERTYNAMESDOCUMENT_FAVORITE            PropertyNamesDocument = "favorite"
	PROPERTYNAMESDOCUMENT_FAVORITES           PropertyNamesDocument = "favorites"
	PROPERTYNAMESDOCUMENT_HREF                PropertyNamesDocument = "href"
	PROPERTYNAMESDOCUMENT_ID                  PropertyNamesDocument = "id"
	PROPERTYNAMESDOCUMENT_LAST_UPDATED        PropertyNamesDocument = "lastUpdated"
	PROPERTYNAMESDOCUMENT_LAST_UPDATED_BY     PropertyNamesDocument = "lastUpdatedBy"
	PROPERTYNAMESDOCUMENT_NAME                PropertyNamesDocument = "name"
	PROPERTYNAMESDOCUMENT_PUBLIC_ACCESS       PropertyNamesDocument = "publicAccess"
	PROPERTYNAMESDOCUMENT_SHARING             PropertyNamesDocument = "sharing"
	PROPERTYNAMESDOCUMENT_TRANSLATIONS        PropertyNamesDocument = "translations"
	PROPERTYNAMESDOCUMENT_URL                 PropertyNamesDocument = "url"
	PROPERTYNAMESDOCUMENT_USER                PropertyNamesDocument = "user"
	PROPERTYNAMESDOCUMENT_USER_ACCESSES       PropertyNamesDocument = "userAccesses"
	PROPERTYNAMESDOCUMENT_USER_GROUP_ACCESSES PropertyNamesDocument = "userGroupAccesses"
)

// All allowed values of PropertyNamesDocument enum
var AllowedPropertyNamesDocumentEnumValues = []PropertyNamesDocument{
	"access",
	"attachment",
	"attributeValues",
	"code",
	"contentType",
	"created",
	"createdBy",
	"displayName",
	"external",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"translations",
	"url",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesDocument) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesDocument(value)
	for _, existing := range AllowedPropertyNamesDocumentEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesDocument", value)
}

// NewPropertyNamesDocumentFromValue returns a pointer to a valid PropertyNamesDocument
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesDocumentFromValue(v string) (*PropertyNamesDocument, error) {
	ev := PropertyNamesDocument(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesDocument: valid values are %v", v, AllowedPropertyNamesDocumentEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesDocument) IsValid() bool {
	for _, existing := range AllowedPropertyNamesDocumentEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Document value
func (v PropertyNamesDocument) Ptr() *PropertyNamesDocument {
	return &v
}

type NullablePropertyNamesDocument struct {
	value *PropertyNamesDocument
	isSet bool
}

func (v NullablePropertyNamesDocument) Get() *PropertyNamesDocument {
	return v.value
}

func (v *NullablePropertyNamesDocument) Set(val *PropertyNamesDocument) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesDocument) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesDocument(val *PropertyNamesDocument) *NullablePropertyNamesDocument {
	return &NullablePropertyNamesDocument{value: val, isSet: true}
}

func (v NullablePropertyNamesDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
