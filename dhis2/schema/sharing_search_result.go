/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the SharingSearchResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharingSearchResult{}

// SharingSearchResult struct for SharingSearchResult
type SharingSearchResult struct {
	UserGroups []SharingUserGroupAccess `json:"userGroups,omitempty"`
	Users      []SharingUserAccess      `json:"users,omitempty"`
}

// NewSharingSearchResult instantiates a new SharingSearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharingSearchResult() *SharingSearchResult {
	this := SharingSearchResult{}
	return &this
}

// NewSharingSearchResultWithDefaults instantiates a new SharingSearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharingSearchResultWithDefaults() *SharingSearchResult {
	this := SharingSearchResult{}
	return &this
}

// GetUserGroups returns the UserGroups field value if set, zero value otherwise.
func (o *SharingSearchResult) GetUserGroups() []SharingUserGroupAccess {
	if o == nil || IsNil(o.UserGroups) {
		var ret []SharingUserGroupAccess
		return ret
	}
	return o.UserGroups
}

// GetUserGroupsOk returns a tuple with the UserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingSearchResult) GetUserGroupsOk() ([]SharingUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroups) {
		return nil, false
	}
	return o.UserGroups, true
}

// HasUserGroups returns a boolean if a field has been set.
func (o *SharingSearchResult) HasUserGroups() bool {
	if o != nil && !IsNil(o.UserGroups) {
		return true
	}

	return false
}

// SetUserGroups gets a reference to the given []SharingUserGroupAccess and assigns it to the UserGroups field.
func (o *SharingSearchResult) SetUserGroups(v []SharingUserGroupAccess) {
	o.UserGroups = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *SharingSearchResult) GetUsers() []SharingUserAccess {
	if o == nil || IsNil(o.Users) {
		var ret []SharingUserAccess
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingSearchResult) GetUsersOk() ([]SharingUserAccess, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *SharingSearchResult) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []SharingUserAccess and assigns it to the Users field.
func (o *SharingSearchResult) SetUsers(v []SharingUserAccess) {
	o.Users = v
}

func (o SharingSearchResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharingSearchResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserGroups) {
		toSerialize["userGroups"] = o.UserGroups
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableSharingSearchResult struct {
	value *SharingSearchResult
	isSet bool
}

func (v NullableSharingSearchResult) Get() *SharingSearchResult {
	return v.value
}

func (v *NullableSharingSearchResult) Set(val *SharingSearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSharingSearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSharingSearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharingSearchResult(val *SharingSearchResult) *NullableSharingSearchResult {
	return &NullableSharingSearchResult{value: val, isSet: true}
}

func (v NullableSharingSearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharingSearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
