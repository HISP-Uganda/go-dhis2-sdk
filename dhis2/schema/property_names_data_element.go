/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesDataElement the model 'PropertyNamesDataElement'
type PropertyNamesDataElement string

// List of PropertyNames_DataElement
const (
	PROPERTYNAMESDATAELEMENT_ACCESS              PropertyNamesDataElement = "access"
	PROPERTYNAMESDATAELEMENT_AGGREGATION_LEVELS  PropertyNamesDataElement = "aggregationLevels"
	PROPERTYNAMESDATAELEMENT_AGGREGATION_TYPE    PropertyNamesDataElement = "aggregationType"
	PROPERTYNAMESDATAELEMENT_ATTRIBUTE_VALUES    PropertyNamesDataElement = "attributeValues"
	PROPERTYNAMESDATAELEMENT_CATEGORY_COMBO      PropertyNamesDataElement = "categoryCombo"
	PROPERTYNAMESDATAELEMENT_CODE                PropertyNamesDataElement = "code"
	PROPERTYNAMESDATAELEMENT_COMMENT_OPTION_SET  PropertyNamesDataElement = "commentOptionSet"
	PROPERTYNAMESDATAELEMENT_CREATED             PropertyNamesDataElement = "created"
	PROPERTYNAMESDATAELEMENT_CREATED_BY          PropertyNamesDataElement = "createdBy"
	PROPERTYNAMESDATAELEMENT_DATA_ELEMENT_GROUPS PropertyNamesDataElement = "dataElementGroups"
	PROPERTYNAMESDATAELEMENT_DATA_SET_ELEMENTS   PropertyNamesDataElement = "dataSetElements"
	PROPERTYNAMESDATAELEMENT_DESCRIPTION         PropertyNamesDataElement = "description"
	PROPERTYNAMESDATAELEMENT_DIMENSION_ITEM      PropertyNamesDataElement = "dimensionItem"
	PROPERTYNAMESDATAELEMENT_DISPLAY_DESCRIPTION PropertyNamesDataElement = "displayDescription"
	PROPERTYNAMESDATAELEMENT_DISPLAY_FORM_NAME   PropertyNamesDataElement = "displayFormName"
	PROPERTYNAMESDATAELEMENT_DISPLAY_NAME        PropertyNamesDataElement = "displayName"
	PROPERTYNAMESDATAELEMENT_DISPLAY_SHORT_NAME  PropertyNamesDataElement = "displayShortName"
	PROPERTYNAMESDATAELEMENT_DOMAIN_TYPE         PropertyNamesDataElement = "domainType"
	PROPERTYNAMESDATAELEMENT_EXTERNAL_ACCESS     PropertyNamesDataElement = "externalAccess"
	PROPERTYNAMESDATAELEMENT_FAVORITE            PropertyNamesDataElement = "favorite"
	PROPERTYNAMESDATAELEMENT_FAVORITES           PropertyNamesDataElement = "favorites"
	PROPERTYNAMESDATAELEMENT_FIELD_MASK          PropertyNamesDataElement = "fieldMask"
	PROPERTYNAMESDATAELEMENT_FORM_NAME           PropertyNamesDataElement = "formName"
	PROPERTYNAMESDATAELEMENT_HREF                PropertyNamesDataElement = "href"
	PROPERTYNAMESDATAELEMENT_ID                  PropertyNamesDataElement = "id"
	PROPERTYNAMESDATAELEMENT_LAST_UPDATED        PropertyNamesDataElement = "lastUpdated"
	PROPERTYNAMESDATAELEMENT_LAST_UPDATED_BY     PropertyNamesDataElement = "lastUpdatedBy"
	PROPERTYNAMESDATAELEMENT_LEGEND_SET          PropertyNamesDataElement = "legendSet"
	PROPERTYNAMESDATAELEMENT_LEGEND_SETS         PropertyNamesDataElement = "legendSets"
	PROPERTYNAMESDATAELEMENT_NAME                PropertyNamesDataElement = "name"
	PROPERTYNAMESDATAELEMENT_OPTION_SET          PropertyNamesDataElement = "optionSet"
	PROPERTYNAMESDATAELEMENT_OPTION_SET_VALUE    PropertyNamesDataElement = "optionSetValue"
	PROPERTYNAMESDATAELEMENT_PUBLIC_ACCESS       PropertyNamesDataElement = "publicAccess"
	PROPERTYNAMESDATAELEMENT_QUERY_MODS          PropertyNamesDataElement = "queryMods"
	PROPERTYNAMESDATAELEMENT_SHARING             PropertyNamesDataElement = "sharing"
	PROPERTYNAMESDATAELEMENT_SHORT_NAME          PropertyNamesDataElement = "shortName"
	PROPERTYNAMESDATAELEMENT_STYLE               PropertyNamesDataElement = "style"
	PROPERTYNAMESDATAELEMENT_TRANSLATIONS        PropertyNamesDataElement = "translations"
	PROPERTYNAMESDATAELEMENT_URL                 PropertyNamesDataElement = "url"
	PROPERTYNAMESDATAELEMENT_USER                PropertyNamesDataElement = "user"
	PROPERTYNAMESDATAELEMENT_USER_ACCESSES       PropertyNamesDataElement = "userAccesses"
	PROPERTYNAMESDATAELEMENT_USER_GROUP_ACCESSES PropertyNamesDataElement = "userGroupAccesses"
	PROPERTYNAMESDATAELEMENT_VALUE_TYPE          PropertyNamesDataElement = "valueType"
	PROPERTYNAMESDATAELEMENT_VALUE_TYPE_OPTIONS  PropertyNamesDataElement = "valueTypeOptions"
	PROPERTYNAMESDATAELEMENT_ZERO_IS_SIGNIFICANT PropertyNamesDataElement = "zeroIsSignificant"
)

// All allowed values of PropertyNamesDataElement enum
var AllowedPropertyNamesDataElementEnumValues = []PropertyNamesDataElement{
	"access",
	"aggregationLevels",
	"aggregationType",
	"attributeValues",
	"categoryCombo",
	"code",
	"commentOptionSet",
	"created",
	"createdBy",
	"dataElementGroups",
	"dataSetElements",
	"description",
	"dimensionItem",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"domainType",
	"externalAccess",
	"favorite",
	"favorites",
	"fieldMask",
	"formName",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"legendSet",
	"legendSets",
	"name",
	"optionSet",
	"optionSetValue",
	"publicAccess",
	"queryMods",
	"sharing",
	"shortName",
	"style",
	"translations",
	"url",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"valueType",
	"valueTypeOptions",
	"zeroIsSignificant",
}

func (v *PropertyNamesDataElement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesDataElement(value)
	for _, existing := range AllowedPropertyNamesDataElementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesDataElement", value)
}

// NewPropertyNamesDataElementFromValue returns a pointer to a valid PropertyNamesDataElement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesDataElementFromValue(v string) (*PropertyNamesDataElement, error) {
	ev := PropertyNamesDataElement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesDataElement: valid values are %v", v, AllowedPropertyNamesDataElementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesDataElement) IsValid() bool {
	for _, existing := range AllowedPropertyNamesDataElementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_DataElement value
func (v PropertyNamesDataElement) Ptr() *PropertyNamesDataElement {
	return &v
}

type NullablePropertyNamesDataElement struct {
	value *PropertyNamesDataElement
	isSet bool
}

func (v NullablePropertyNamesDataElement) Get() *PropertyNamesDataElement {
	return v.value
}

func (v *NullablePropertyNamesDataElement) Set(val *PropertyNamesDataElement) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesDataElement) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesDataElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesDataElement(val *PropertyNamesDataElement) *NullablePropertyNamesDataElement {
	return &NullablePropertyNamesDataElement{value: val, isSet: true}
}

func (v NullablePropertyNamesDataElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesDataElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
