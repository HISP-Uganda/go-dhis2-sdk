/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the Form type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Form{}

// Form struct for Form
type Form struct {
	CategoryCombo *FormCategoryCombo                `json:"categoryCombo,omitempty"`
	Groups        []Group                           `json:"groups,omitempty"`
	Label         *string                           `json:"label,omitempty"`
	Options       map[string]map[string]interface{} `json:"options,omitempty"`
	Subtitle      *string                           `json:"subtitle,omitempty"`
}

// NewForm instantiates a new Form object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForm() *Form {
	this := Form{}
	return &this
}

// NewFormWithDefaults instantiates a new Form object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormWithDefaults() *Form {
	this := Form{}
	return &this
}

// GetCategoryCombo returns the CategoryCombo field value if set, zero value otherwise.
func (o *Form) GetCategoryCombo() FormCategoryCombo {
	if o == nil || IsNil(o.CategoryCombo) {
		var ret FormCategoryCombo
		return ret
	}
	return *o.CategoryCombo
}

// GetCategoryComboOk returns a tuple with the CategoryCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetCategoryComboOk() (*FormCategoryCombo, bool) {
	if o == nil || IsNil(o.CategoryCombo) {
		return nil, false
	}
	return o.CategoryCombo, true
}

// HasCategoryCombo returns a boolean if a field has been set.
func (o *Form) HasCategoryCombo() bool {
	if o != nil && !IsNil(o.CategoryCombo) {
		return true
	}

	return false
}

// SetCategoryCombo gets a reference to the given FormCategoryCombo and assigns it to the CategoryCombo field.
func (o *Form) SetCategoryCombo(v FormCategoryCombo) {
	o.CategoryCombo = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *Form) GetGroups() []Group {
	if o == nil || IsNil(o.Groups) {
		var ret []Group
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetGroupsOk() ([]Group, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *Form) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []Group and assigns it to the Groups field.
func (o *Form) SetGroups(v []Group) {
	o.Groups = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Form) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Form) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Form) SetLabel(v string) {
	o.Label = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Form) GetOptions() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetOptionsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Form) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]map[string]interface{} and assigns it to the Options field.
func (o *Form) SetOptions(v map[string]map[string]interface{}) {
	o.Options = v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *Form) GetSubtitle() string {
	if o == nil || IsNil(o.Subtitle) {
		var ret string
		return ret
	}
	return *o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetSubtitleOk() (*string, bool) {
	if o == nil || IsNil(o.Subtitle) {
		return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *Form) HasSubtitle() bool {
	if o != nil && !IsNil(o.Subtitle) {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given string and assigns it to the Subtitle field.
func (o *Form) SetSubtitle(v string) {
	o.Subtitle = &v
}

func (o Form) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Form) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryCombo) {
		toSerialize["categoryCombo"] = o.CategoryCombo
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Subtitle) {
		toSerialize["subtitle"] = o.Subtitle
	}
	return toSerialize, nil
}

type NullableForm struct {
	value *Form
	isSet bool
}

func (v NullableForm) Get() *Form {
	return v.value
}

func (v *NullableForm) Set(val *Form) {
	v.value = val
	v.isSet = true
}

func (v NullableForm) IsSet() bool {
	return v.isSet
}

func (v *NullableForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForm(val *Form) *NullableForm {
	return &NullableForm{value: val, isSet: true}
}

func (v NullableForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
