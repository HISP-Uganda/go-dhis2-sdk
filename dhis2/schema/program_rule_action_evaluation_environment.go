/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ProgramRuleActionEvaluationEnvironment the model 'ProgramRuleActionEvaluationEnvironment'
type ProgramRuleActionEvaluationEnvironment string

// List of ProgramRuleActionEvaluationEnvironment
const (
	PROGRAMRULEACTIONEVALUATIONENVIRONMENT_WEB     ProgramRuleActionEvaluationEnvironment = "WEB"
	PROGRAMRULEACTIONEVALUATIONENVIRONMENT_ANDROID ProgramRuleActionEvaluationEnvironment = "ANDROID"
)

// All allowed values of ProgramRuleActionEvaluationEnvironment enum
var AllowedProgramRuleActionEvaluationEnvironmentEnumValues = []ProgramRuleActionEvaluationEnvironment{
	"WEB",
	"ANDROID",
}

func (v *ProgramRuleActionEvaluationEnvironment) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProgramRuleActionEvaluationEnvironment(value)
	for _, existing := range AllowedProgramRuleActionEvaluationEnvironmentEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProgramRuleActionEvaluationEnvironment", value)
}

// NewProgramRuleActionEvaluationEnvironmentFromValue returns a pointer to a valid ProgramRuleActionEvaluationEnvironment
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProgramRuleActionEvaluationEnvironmentFromValue(v string) (*ProgramRuleActionEvaluationEnvironment, error) {
	ev := ProgramRuleActionEvaluationEnvironment(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProgramRuleActionEvaluationEnvironment: valid values are %v", v, AllowedProgramRuleActionEvaluationEnvironmentEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProgramRuleActionEvaluationEnvironment) IsValid() bool {
	for _, existing := range AllowedProgramRuleActionEvaluationEnvironmentEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramRuleActionEvaluationEnvironment value
func (v ProgramRuleActionEvaluationEnvironment) Ptr() *ProgramRuleActionEvaluationEnvironment {
	return &v
}

type NullableProgramRuleActionEvaluationEnvironment struct {
	value *ProgramRuleActionEvaluationEnvironment
	isSet bool
}

func (v NullableProgramRuleActionEvaluationEnvironment) Get() *ProgramRuleActionEvaluationEnvironment {
	return v.value
}

func (v *NullableProgramRuleActionEvaluationEnvironment) Set(val *ProgramRuleActionEvaluationEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramRuleActionEvaluationEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramRuleActionEvaluationEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramRuleActionEvaluationEnvironment(val *ProgramRuleActionEvaluationEnvironment) *NullableProgramRuleActionEvaluationEnvironment {
	return &NullableProgramRuleActionEvaluationEnvironment{value: val, isSet: true}
}

func (v NullableProgramRuleActionEvaluationEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramRuleActionEvaluationEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
