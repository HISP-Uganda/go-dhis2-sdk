/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// TargetType the model 'TargetType'
type TargetType string

// List of TargetType
const (
	TARGETTYPE_INTERNAL TargetType = "INTERNAL"
	TARGETTYPE_EXTERNAL TargetType = "EXTERNAL"
)

// All allowed values of TargetType enum
var AllowedTargetTypeEnumValues = []TargetType{
	"INTERNAL",
	"EXTERNAL",
}

func (v *TargetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TargetType(value)
	for _, existing := range AllowedTargetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TargetType", value)
}

// NewTargetTypeFromValue returns a pointer to a valid TargetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTargetTypeFromValue(v string) (*TargetType, error) {
	ev := TargetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TargetType: valid values are %v", v, AllowedTargetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TargetType) IsValid() bool {
	for _, existing := range AllowedTargetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TargetType value
func (v TargetType) Ptr() *TargetType {
	return &v
}

type NullableTargetType struct {
	value *TargetType
	isSet bool
}

func (v NullableTargetType) Get() *TargetType {
	return v.value
}

func (v *NullableTargetType) Set(val *TargetType) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetType) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetType(val *TargetType) *NullableTargetType {
	return &NullableTargetType{value: val, isSet: true}
}

func (v NullableTargetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
