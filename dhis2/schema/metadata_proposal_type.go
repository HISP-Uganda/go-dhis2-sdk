/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// MetadataProposalType the model 'MetadataProposalType'
type MetadataProposalType string

// List of MetadataProposalType
const (
	METADATAPROPOSALTYPE_ADD    MetadataProposalType = "ADD"
	METADATAPROPOSALTYPE_UPDATE MetadataProposalType = "UPDATE"
	METADATAPROPOSALTYPE_REMOVE MetadataProposalType = "REMOVE"
)

// All allowed values of MetadataProposalType enum
var AllowedMetadataProposalTypeEnumValues = []MetadataProposalType{
	"ADD",
	"UPDATE",
	"REMOVE",
}

func (v *MetadataProposalType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetadataProposalType(value)
	for _, existing := range AllowedMetadataProposalTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetadataProposalType", value)
}

// NewMetadataProposalTypeFromValue returns a pointer to a valid MetadataProposalType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetadataProposalTypeFromValue(v string) (*MetadataProposalType, error) {
	ev := MetadataProposalType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetadataProposalType: valid values are %v", v, AllowedMetadataProposalTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetadataProposalType) IsValid() bool {
	for _, existing := range AllowedMetadataProposalTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetadataProposalType value
func (v MetadataProposalType) Ptr() *MetadataProposalType {
	return &v
}

type NullableMetadataProposalType struct {
	value *MetadataProposalType
	isSet bool
}

func (v NullableMetadataProposalType) Get() *MetadataProposalType {
	return v.value
}

func (v *NullableMetadataProposalType) Set(val *MetadataProposalType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataProposalType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataProposalType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataProposalType(val *MetadataProposalType) *NullableMetadataProposalType {
	return &NullableMetadataProposalType{value: val, isSet: true}
}

func (v NullableMetadataProposalType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataProposalType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
