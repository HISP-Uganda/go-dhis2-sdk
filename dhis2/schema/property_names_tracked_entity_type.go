/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesTrackedEntityType the model 'PropertyNamesTrackedEntityType'
type PropertyNamesTrackedEntityType string

// List of PropertyNames_TrackedEntityType
const (
	PROPERTYNAMESTRACKEDENTITYTYPE_ACCESS                            PropertyNamesTrackedEntityType = "access"
	PROPERTYNAMESTRACKEDENTITYTYPE_ALLOW_AUDIT_LOG                   PropertyNamesTrackedEntityType = "allowAuditLog"
	PROPERTYNAMESTRACKEDENTITYTYPE_ATTRIBUTE_VALUES                  PropertyNamesTrackedEntityType = "attributeValues"
	PROPERTYNAMESTRACKEDENTITYTYPE_CODE                              PropertyNamesTrackedEntityType = "code"
	PROPERTYNAMESTRACKEDENTITYTYPE_CREATED                           PropertyNamesTrackedEntityType = "created"
	PROPERTYNAMESTRACKEDENTITYTYPE_CREATED_BY                        PropertyNamesTrackedEntityType = "createdBy"
	PROPERTYNAMESTRACKEDENTITYTYPE_DESCRIPTION                       PropertyNamesTrackedEntityType = "description"
	PROPERTYNAMESTRACKEDENTITYTYPE_DISPLAY_DESCRIPTION               PropertyNamesTrackedEntityType = "displayDescription"
	PROPERTYNAMESTRACKEDENTITYTYPE_DISPLAY_FORM_NAME                 PropertyNamesTrackedEntityType = "displayFormName"
	PROPERTYNAMESTRACKEDENTITYTYPE_DISPLAY_NAME                      PropertyNamesTrackedEntityType = "displayName"
	PROPERTYNAMESTRACKEDENTITYTYPE_DISPLAY_SHORT_NAME                PropertyNamesTrackedEntityType = "displayShortName"
	PROPERTYNAMESTRACKEDENTITYTYPE_EXTERNAL_ACCESS                   PropertyNamesTrackedEntityType = "externalAccess"
	PROPERTYNAMESTRACKEDENTITYTYPE_FAVORITE                          PropertyNamesTrackedEntityType = "favorite"
	PROPERTYNAMESTRACKEDENTITYTYPE_FAVORITES                         PropertyNamesTrackedEntityType = "favorites"
	PROPERTYNAMESTRACKEDENTITYTYPE_FEATURE_TYPE                      PropertyNamesTrackedEntityType = "featureType"
	PROPERTYNAMESTRACKEDENTITYTYPE_FORM_NAME                         PropertyNamesTrackedEntityType = "formName"
	PROPERTYNAMESTRACKEDENTITYTYPE_HREF                              PropertyNamesTrackedEntityType = "href"
	PROPERTYNAMESTRACKEDENTITYTYPE_ID                                PropertyNamesTrackedEntityType = "id"
	PROPERTYNAMESTRACKEDENTITYTYPE_LAST_UPDATED                      PropertyNamesTrackedEntityType = "lastUpdated"
	PROPERTYNAMESTRACKEDENTITYTYPE_LAST_UPDATED_BY                   PropertyNamesTrackedEntityType = "lastUpdatedBy"
	PROPERTYNAMESTRACKEDENTITYTYPE_MAX_TEI_COUNT_TO_RETURN           PropertyNamesTrackedEntityType = "maxTeiCountToReturn"
	PROPERTYNAMESTRACKEDENTITYTYPE_MIN_ATTRIBUTES_REQUIRED_TO_SEARCH PropertyNamesTrackedEntityType = "minAttributesRequiredToSearch"
	PROPERTYNAMESTRACKEDENTITYTYPE_NAME                              PropertyNamesTrackedEntityType = "name"
	PROPERTYNAMESTRACKEDENTITYTYPE_PUBLIC_ACCESS                     PropertyNamesTrackedEntityType = "publicAccess"
	PROPERTYNAMESTRACKEDENTITYTYPE_SHARING                           PropertyNamesTrackedEntityType = "sharing"
	PROPERTYNAMESTRACKEDENTITYTYPE_SHORT_NAME                        PropertyNamesTrackedEntityType = "shortName"
	PROPERTYNAMESTRACKEDENTITYTYPE_STYLE                             PropertyNamesTrackedEntityType = "style"
	PROPERTYNAMESTRACKEDENTITYTYPE_TRACKED_ENTITY_TYPE_ATTRIBUTES    PropertyNamesTrackedEntityType = "trackedEntityTypeAttributes"
	PROPERTYNAMESTRACKEDENTITYTYPE_TRANSLATIONS                      PropertyNamesTrackedEntityType = "translations"
	PROPERTYNAMESTRACKEDENTITYTYPE_USER                              PropertyNamesTrackedEntityType = "user"
	PROPERTYNAMESTRACKEDENTITYTYPE_USER_ACCESSES                     PropertyNamesTrackedEntityType = "userAccesses"
	PROPERTYNAMESTRACKEDENTITYTYPE_USER_GROUP_ACCESSES               PropertyNamesTrackedEntityType = "userGroupAccesses"
)

// All allowed values of PropertyNamesTrackedEntityType enum
var AllowedPropertyNamesTrackedEntityTypeEnumValues = []PropertyNamesTrackedEntityType{
	"access",
	"allowAuditLog",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"externalAccess",
	"favorite",
	"favorites",
	"featureType",
	"formName",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"maxTeiCountToReturn",
	"minAttributesRequiredToSearch",
	"name",
	"publicAccess",
	"sharing",
	"shortName",
	"style",
	"trackedEntityTypeAttributes",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesTrackedEntityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesTrackedEntityType(value)
	for _, existing := range AllowedPropertyNamesTrackedEntityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesTrackedEntityType", value)
}

// NewPropertyNamesTrackedEntityTypeFromValue returns a pointer to a valid PropertyNamesTrackedEntityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesTrackedEntityTypeFromValue(v string) (*PropertyNamesTrackedEntityType, error) {
	ev := PropertyNamesTrackedEntityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesTrackedEntityType: valid values are %v", v, AllowedPropertyNamesTrackedEntityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesTrackedEntityType) IsValid() bool {
	for _, existing := range AllowedPropertyNamesTrackedEntityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_TrackedEntityType value
func (v PropertyNamesTrackedEntityType) Ptr() *PropertyNamesTrackedEntityType {
	return &v
}

type NullablePropertyNamesTrackedEntityType struct {
	value *PropertyNamesTrackedEntityType
	isSet bool
}

func (v NullablePropertyNamesTrackedEntityType) Get() *PropertyNamesTrackedEntityType {
	return v.value
}

func (v *NullablePropertyNamesTrackedEntityType) Set(val *PropertyNamesTrackedEntityType) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesTrackedEntityType) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesTrackedEntityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesTrackedEntityType(val *PropertyNamesTrackedEntityType) *NullablePropertyNamesTrackedEntityType {
	return &NullablePropertyNamesTrackedEntityType{value: val, isSet: true}
}

func (v NullablePropertyNamesTrackedEntityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesTrackedEntityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
