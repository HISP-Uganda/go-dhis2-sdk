/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesReport the model 'PropertyNamesReport'
type PropertyNamesReport string

// List of PropertyNames_Report
const (
	PROPERTYNAMESREPORT_ACCESS              PropertyNamesReport = "access"
	PROPERTYNAMESREPORT_ATTRIBUTE_VALUES    PropertyNamesReport = "attributeValues"
	PROPERTYNAMESREPORT_CACHE_STRATEGY      PropertyNamesReport = "cacheStrategy"
	PROPERTYNAMESREPORT_CODE                PropertyNamesReport = "code"
	PROPERTYNAMESREPORT_CREATED             PropertyNamesReport = "created"
	PROPERTYNAMESREPORT_CREATED_BY          PropertyNamesReport = "createdBy"
	PROPERTYNAMESREPORT_DESIGN_CONTENT      PropertyNamesReport = "designContent"
	PROPERTYNAMESREPORT_DISPLAY_NAME        PropertyNamesReport = "displayName"
	PROPERTYNAMESREPORT_EXTERNAL_ACCESS     PropertyNamesReport = "externalAccess"
	PROPERTYNAMESREPORT_FAVORITE            PropertyNamesReport = "favorite"
	PROPERTYNAMESREPORT_FAVORITES           PropertyNamesReport = "favorites"
	PROPERTYNAMESREPORT_HREF                PropertyNamesReport = "href"
	PROPERTYNAMESREPORT_ID                  PropertyNamesReport = "id"
	PROPERTYNAMESREPORT_LAST_UPDATED        PropertyNamesReport = "lastUpdated"
	PROPERTYNAMESREPORT_LAST_UPDATED_BY     PropertyNamesReport = "lastUpdatedBy"
	PROPERTYNAMESREPORT_NAME                PropertyNamesReport = "name"
	PROPERTYNAMESREPORT_PUBLIC_ACCESS       PropertyNamesReport = "publicAccess"
	PROPERTYNAMESREPORT_RELATIVE_PERIODS    PropertyNamesReport = "relativePeriods"
	PROPERTYNAMESREPORT_REPORT_PARAMS       PropertyNamesReport = "reportParams"
	PROPERTYNAMESREPORT_SHARING             PropertyNamesReport = "sharing"
	PROPERTYNAMESREPORT_TRANSLATIONS        PropertyNamesReport = "translations"
	PROPERTYNAMESREPORT_TYPE                PropertyNamesReport = "type"
	PROPERTYNAMESREPORT_USER                PropertyNamesReport = "user"
	PROPERTYNAMESREPORT_USER_ACCESSES       PropertyNamesReport = "userAccesses"
	PROPERTYNAMESREPORT_USER_GROUP_ACCESSES PropertyNamesReport = "userGroupAccesses"
	PROPERTYNAMESREPORT_VISUALIZATION       PropertyNamesReport = "visualization"
)

// All allowed values of PropertyNamesReport enum
var AllowedPropertyNamesReportEnumValues = []PropertyNamesReport{
	"access",
	"attributeValues",
	"cacheStrategy",
	"code",
	"created",
	"createdBy",
	"designContent",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"relativePeriods",
	"reportParams",
	"sharing",
	"translations",
	"type",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"visualization",
}

func (v *PropertyNamesReport) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesReport(value)
	for _, existing := range AllowedPropertyNamesReportEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesReport", value)
}

// NewPropertyNamesReportFromValue returns a pointer to a valid PropertyNamesReport
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesReportFromValue(v string) (*PropertyNamesReport, error) {
	ev := PropertyNamesReport(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesReport: valid values are %v", v, AllowedPropertyNamesReportEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesReport) IsValid() bool {
	for _, existing := range AllowedPropertyNamesReportEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Report value
func (v PropertyNamesReport) Ptr() *PropertyNamesReport {
	return &v
}

type NullablePropertyNamesReport struct {
	value *PropertyNamesReport
	isSet bool
}

func (v NullablePropertyNamesReport) Get() *PropertyNamesReport {
	return v.value
}

func (v *NullablePropertyNamesReport) Set(val *PropertyNamesReport) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesReport) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesReport(val *PropertyNamesReport) *NullablePropertyNamesReport {
	return &NullablePropertyNamesReport{value: val, isSet: true}
}

func (v NullablePropertyNamesReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
