/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the SoftwareUpdateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SoftwareUpdateResponse{}

// SoftwareUpdateResponse struct for SoftwareUpdateResponse
type SoftwareUpdateResponse struct {
	ResponseType *string `json:"responseType,omitempty"`
	// keys are class java.lang.Object
	VersionMetadata *map[string]map[string]string `json:"versionMetadata,omitempty"`
}

// NewSoftwareUpdateResponse instantiates a new SoftwareUpdateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwareUpdateResponse() *SoftwareUpdateResponse {
	this := SoftwareUpdateResponse{}
	return &this
}

// NewSoftwareUpdateResponseWithDefaults instantiates a new SoftwareUpdateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwareUpdateResponseWithDefaults() *SoftwareUpdateResponse {
	this := SoftwareUpdateResponse{}
	return &this
}

// GetResponseType returns the ResponseType field value if set, zero value otherwise.
func (o *SoftwareUpdateResponse) GetResponseType() string {
	if o == nil || IsNil(o.ResponseType) {
		var ret string
		return ret
	}
	return *o.ResponseType
}

// GetResponseTypeOk returns a tuple with the ResponseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareUpdateResponse) GetResponseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseType) {
		return nil, false
	}
	return o.ResponseType, true
}

// HasResponseType returns a boolean if a field has been set.
func (o *SoftwareUpdateResponse) HasResponseType() bool {
	if o != nil && !IsNil(o.ResponseType) {
		return true
	}

	return false
}

// SetResponseType gets a reference to the given string and assigns it to the ResponseType field.
func (o *SoftwareUpdateResponse) SetResponseType(v string) {
	o.ResponseType = &v
}

// GetVersionMetadata returns the VersionMetadata field value if set, zero value otherwise.
func (o *SoftwareUpdateResponse) GetVersionMetadata() map[string]map[string]string {
	if o == nil || IsNil(o.VersionMetadata) {
		var ret map[string]map[string]string
		return ret
	}
	return *o.VersionMetadata
}

// GetVersionMetadataOk returns a tuple with the VersionMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareUpdateResponse) GetVersionMetadataOk() (*map[string]map[string]string, bool) {
	if o == nil || IsNil(o.VersionMetadata) {
		return nil, false
	}
	return o.VersionMetadata, true
}

// HasVersionMetadata returns a boolean if a field has been set.
func (o *SoftwareUpdateResponse) HasVersionMetadata() bool {
	if o != nil && !IsNil(o.VersionMetadata) {
		return true
	}

	return false
}

// SetVersionMetadata gets a reference to the given map[string]map[string]string and assigns it to the VersionMetadata field.
func (o *SoftwareUpdateResponse) SetVersionMetadata(v map[string]map[string]string) {
	o.VersionMetadata = &v
}

func (o SoftwareUpdateResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SoftwareUpdateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResponseType) {
		toSerialize["responseType"] = o.ResponseType
	}
	if !IsNil(o.VersionMetadata) {
		toSerialize["versionMetadata"] = o.VersionMetadata
	}
	return toSerialize, nil
}

type NullableSoftwareUpdateResponse struct {
	value *SoftwareUpdateResponse
	isSet bool
}

func (v NullableSoftwareUpdateResponse) Get() *SoftwareUpdateResponse {
	return v.value
}

func (v *NullableSoftwareUpdateResponse) Set(val *SoftwareUpdateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareUpdateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareUpdateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareUpdateResponse(val *SoftwareUpdateResponse) *NullableSoftwareUpdateResponse {
	return &NullableSoftwareUpdateResponse{value: val, isSet: true}
}

func (v NullableSoftwareUpdateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareUpdateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
