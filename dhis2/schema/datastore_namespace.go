/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the DatastoreNamespace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreNamespace{}

// DatastoreNamespace struct for DatastoreNamespace
type DatastoreNamespace struct {
	Authorities         []string `json:"authorities,omitempty"`
	Namespace           *string  `json:"namespace,omitempty"`
	ReadOnlyAuthorities []string `json:"readOnlyAuthorities,omitempty"`
}

// NewDatastoreNamespace instantiates a new DatastoreNamespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreNamespace() *DatastoreNamespace {
	this := DatastoreNamespace{}
	return &this
}

// NewDatastoreNamespaceWithDefaults instantiates a new DatastoreNamespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreNamespaceWithDefaults() *DatastoreNamespace {
	this := DatastoreNamespace{}
	return &this
}

// GetAuthorities returns the Authorities field value if set, zero value otherwise.
func (o *DatastoreNamespace) GetAuthorities() []string {
	if o == nil || IsNil(o.Authorities) {
		var ret []string
		return ret
	}
	return o.Authorities
}

// GetAuthoritiesOk returns a tuple with the Authorities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreNamespace) GetAuthoritiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Authorities) {
		return nil, false
	}
	return o.Authorities, true
}

// HasAuthorities returns a boolean if a field has been set.
func (o *DatastoreNamespace) HasAuthorities() bool {
	if o != nil && !IsNil(o.Authorities) {
		return true
	}

	return false
}

// SetAuthorities gets a reference to the given []string and assigns it to the Authorities field.
func (o *DatastoreNamespace) SetAuthorities(v []string) {
	o.Authorities = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *DatastoreNamespace) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreNamespace) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *DatastoreNamespace) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *DatastoreNamespace) SetNamespace(v string) {
	o.Namespace = &v
}

// GetReadOnlyAuthorities returns the ReadOnlyAuthorities field value if set, zero value otherwise.
func (o *DatastoreNamespace) GetReadOnlyAuthorities() []string {
	if o == nil || IsNil(o.ReadOnlyAuthorities) {
		var ret []string
		return ret
	}
	return o.ReadOnlyAuthorities
}

// GetReadOnlyAuthoritiesOk returns a tuple with the ReadOnlyAuthorities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreNamespace) GetReadOnlyAuthoritiesOk() ([]string, bool) {
	if o == nil || IsNil(o.ReadOnlyAuthorities) {
		return nil, false
	}
	return o.ReadOnlyAuthorities, true
}

// HasReadOnlyAuthorities returns a boolean if a field has been set.
func (o *DatastoreNamespace) HasReadOnlyAuthorities() bool {
	if o != nil && !IsNil(o.ReadOnlyAuthorities) {
		return true
	}

	return false
}

// SetReadOnlyAuthorities gets a reference to the given []string and assigns it to the ReadOnlyAuthorities field.
func (o *DatastoreNamespace) SetReadOnlyAuthorities(v []string) {
	o.ReadOnlyAuthorities = v
}

func (o DatastoreNamespace) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreNamespace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authorities) {
		toSerialize["authorities"] = o.Authorities
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.ReadOnlyAuthorities) {
		toSerialize["readOnlyAuthorities"] = o.ReadOnlyAuthorities
	}
	return toSerialize, nil
}

type NullableDatastoreNamespace struct {
	value *DatastoreNamespace
	isSet bool
}

func (v NullableDatastoreNamespace) Get() *DatastoreNamespace {
	return v.value
}

func (v *NullableDatastoreNamespace) Set(val *DatastoreNamespace) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreNamespace) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreNamespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreNamespace(val *DatastoreNamespace) *NullableDatastoreNamespace {
	return &NullableDatastoreNamespace{value: val, isSet: true}
}

func (v NullableDatastoreNamespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreNamespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
