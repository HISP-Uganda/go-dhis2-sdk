/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// FailurePolicy the model 'FailurePolicy'
type FailurePolicy string

// List of FailurePolicy
const (
	FAILUREPOLICY_PARENT            FailurePolicy = "PARENT"
	FAILUREPOLICY_FAIL              FailurePolicy = "FAIL"
	FAILUREPOLICY_SKIP_STAGE        FailurePolicy = "SKIP_STAGE"
	FAILUREPOLICY_SKIP_ITEM         FailurePolicy = "SKIP_ITEM"
	FAILUREPOLICY_SKIP_ITEM_OUTLIER FailurePolicy = "SKIP_ITEM_OUTLIER"
)

// All allowed values of FailurePolicy enum
var AllowedFailurePolicyEnumValues = []FailurePolicy{
	"PARENT",
	"FAIL",
	"SKIP_STAGE",
	"SKIP_ITEM",
	"SKIP_ITEM_OUTLIER",
}

func (v *FailurePolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FailurePolicy(value)
	for _, existing := range AllowedFailurePolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FailurePolicy", value)
}

// NewFailurePolicyFromValue returns a pointer to a valid FailurePolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFailurePolicyFromValue(v string) (*FailurePolicy, error) {
	ev := FailurePolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FailurePolicy: valid values are %v", v, AllowedFailurePolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FailurePolicy) IsValid() bool {
	for _, existing := range AllowedFailurePolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FailurePolicy value
func (v FailurePolicy) Ptr() *FailurePolicy {
	return &v
}

type NullableFailurePolicy struct {
	value *FailurePolicy
	isSet bool
}

func (v NullableFailurePolicy) Get() *FailurePolicy {
	return v.value
}

func (v *NullableFailurePolicy) Set(val *FailurePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableFailurePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableFailurePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailurePolicy(val *FailurePolicy) *NullableFailurePolicy {
	return &NullableFailurePolicy{value: val, isSet: true}
}

func (v NullableFailurePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailurePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
