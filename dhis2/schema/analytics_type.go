/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// AnalyticsType the model 'AnalyticsType'
type AnalyticsType string

// List of AnalyticsType
const (
	ANALYTICSTYPE_EVENT      AnalyticsType = "EVENT"
	ANALYTICSTYPE_ENROLLMENT AnalyticsType = "ENROLLMENT"
)

// All allowed values of AnalyticsType enum
var AllowedAnalyticsTypeEnumValues = []AnalyticsType{
	"EVENT",
	"ENROLLMENT",
}

func (v *AnalyticsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsType(value)
	for _, existing := range AllowedAnalyticsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsType", value)
}

// NewAnalyticsTypeFromValue returns a pointer to a valid AnalyticsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsTypeFromValue(v string) (*AnalyticsType, error) {
	ev := AnalyticsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsType: valid values are %v", v, AllowedAnalyticsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsType) IsValid() bool {
	for _, existing := range AllowedAnalyticsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsType value
func (v AnalyticsType) Ptr() *AnalyticsType {
	return &v
}

type NullableAnalyticsType struct {
	value *AnalyticsType
	isSet bool
}

func (v NullableAnalyticsType) Get() *AnalyticsType {
	return v.value
}

func (v *NullableAnalyticsType) Set(val *AnalyticsType) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsType) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsType(val *AnalyticsType) *NullableAnalyticsType {
	return &NullableAnalyticsType{value: val, isSet: true}
}

func (v NullableAnalyticsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
