/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DataDimensionItemType the model 'DataDimensionItemType'
type DataDimensionItemType string

// List of DataDimensionItemType
const (
	DATADIMENSIONITEMTYPE_INDICATOR                    DataDimensionItemType = "INDICATOR"
	DATADIMENSIONITEMTYPE_DATA_ELEMENT                 DataDimensionItemType = "DATA_ELEMENT"
	DATADIMENSIONITEMTYPE_DATA_ELEMENT_OPERAND         DataDimensionItemType = "DATA_ELEMENT_OPERAND"
	DATADIMENSIONITEMTYPE_REPORTING_RATE               DataDimensionItemType = "REPORTING_RATE"
	DATADIMENSIONITEMTYPE_PROGRAM_INDICATOR            DataDimensionItemType = "PROGRAM_INDICATOR"
	DATADIMENSIONITEMTYPE_PROGRAM_DATA_ELEMENT         DataDimensionItemType = "PROGRAM_DATA_ELEMENT"
	DATADIMENSIONITEMTYPE_PROGRAM_DATA_ELEMENT_OPTION  DataDimensionItemType = "PROGRAM_DATA_ELEMENT_OPTION"
	DATADIMENSIONITEMTYPE_PROGRAM_ATTRIBUTE            DataDimensionItemType = "PROGRAM_ATTRIBUTE"
	DATADIMENSIONITEMTYPE_PROGRAM_ATTRIBUTE_OPTION     DataDimensionItemType = "PROGRAM_ATTRIBUTE_OPTION"
	DATADIMENSIONITEMTYPE_EXPRESSION_DIMENSION_ITEM    DataDimensionItemType = "EXPRESSION_DIMENSION_ITEM"
	DATADIMENSIONITEMTYPE_SUBEXPRESSION_DIMENSION_ITEM DataDimensionItemType = "SUBEXPRESSION_DIMENSION_ITEM"
	DATADIMENSIONITEMTYPE_VALIDATION_RULE              DataDimensionItemType = "VALIDATION_RULE"
)

// All allowed values of DataDimensionItemType enum
var AllowedDataDimensionItemTypeEnumValues = []DataDimensionItemType{
	"INDICATOR",
	"DATA_ELEMENT",
	"DATA_ELEMENT_OPERAND",
	"REPORTING_RATE",
	"PROGRAM_INDICATOR",
	"PROGRAM_DATA_ELEMENT",
	"PROGRAM_DATA_ELEMENT_OPTION",
	"PROGRAM_ATTRIBUTE",
	"PROGRAM_ATTRIBUTE_OPTION",
	"EXPRESSION_DIMENSION_ITEM",
	"SUBEXPRESSION_DIMENSION_ITEM",
	"VALIDATION_RULE",
}

func (v *DataDimensionItemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataDimensionItemType(value)
	for _, existing := range AllowedDataDimensionItemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataDimensionItemType", value)
}

// NewDataDimensionItemTypeFromValue returns a pointer to a valid DataDimensionItemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataDimensionItemTypeFromValue(v string) (*DataDimensionItemType, error) {
	ev := DataDimensionItemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataDimensionItemType: valid values are %v", v, AllowedDataDimensionItemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataDimensionItemType) IsValid() bool {
	for _, existing := range AllowedDataDimensionItemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataDimensionItemType value
func (v DataDimensionItemType) Ptr() *DataDimensionItemType {
	return &v
}

type NullableDataDimensionItemType struct {
	value *DataDimensionItemType
	isSet bool
}

func (v NullableDataDimensionItemType) Get() *DataDimensionItemType {
	return v.value
}

func (v *NullableDataDimensionItemType) Set(val *DataDimensionItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableDataDimensionItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableDataDimensionItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataDimensionItemType(val *DataDimensionItemType) *NullableDataDimensionItemType {
	return &NullableDataDimensionItemType{value: val, isSet: true}
}

func (v NullableDataDimensionItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataDimensionItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
