/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DataValuesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataValuesDto{}

// DataValuesDto struct for DataValuesDto
type DataValuesDto struct {
	CompleteStatus *CompleteStatusDto `json:"completeStatus,omitempty"`
	DataValues     []DataValueDto     `json:"dataValues,omitempty"`
	LockStatus     string             `json:"lockStatus"`
	MinMaxValues   []MinMaxValueDto   `json:"minMaxValues,omitempty"`
}

type _DataValuesDto DataValuesDto

// NewDataValuesDto instantiates a new DataValuesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataValuesDto(lockStatus string) *DataValuesDto {
	this := DataValuesDto{}
	this.LockStatus = lockStatus
	return &this
}

// NewDataValuesDtoWithDefaults instantiates a new DataValuesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataValuesDtoWithDefaults() *DataValuesDto {
	this := DataValuesDto{}
	return &this
}

// GetCompleteStatus returns the CompleteStatus field value if set, zero value otherwise.
func (o *DataValuesDto) GetCompleteStatus() CompleteStatusDto {
	if o == nil || IsNil(o.CompleteStatus) {
		var ret CompleteStatusDto
		return ret
	}
	return *o.CompleteStatus
}

// GetCompleteStatusOk returns a tuple with the CompleteStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValuesDto) GetCompleteStatusOk() (*CompleteStatusDto, bool) {
	if o == nil || IsNil(o.CompleteStatus) {
		return nil, false
	}
	return o.CompleteStatus, true
}

// HasCompleteStatus returns a boolean if a field has been set.
func (o *DataValuesDto) HasCompleteStatus() bool {
	if o != nil && !IsNil(o.CompleteStatus) {
		return true
	}

	return false
}

// SetCompleteStatus gets a reference to the given CompleteStatusDto and assigns it to the CompleteStatus field.
func (o *DataValuesDto) SetCompleteStatus(v CompleteStatusDto) {
	o.CompleteStatus = &v
}

// GetDataValues returns the DataValues field value if set, zero value otherwise.
func (o *DataValuesDto) GetDataValues() []DataValueDto {
	if o == nil || IsNil(o.DataValues) {
		var ret []DataValueDto
		return ret
	}
	return o.DataValues
}

// GetDataValuesOk returns a tuple with the DataValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValuesDto) GetDataValuesOk() ([]DataValueDto, bool) {
	if o == nil || IsNil(o.DataValues) {
		return nil, false
	}
	return o.DataValues, true
}

// HasDataValues returns a boolean if a field has been set.
func (o *DataValuesDto) HasDataValues() bool {
	if o != nil && !IsNil(o.DataValues) {
		return true
	}

	return false
}

// SetDataValues gets a reference to the given []DataValueDto and assigns it to the DataValues field.
func (o *DataValuesDto) SetDataValues(v []DataValueDto) {
	o.DataValues = v
}

// GetLockStatus returns the LockStatus field value
func (o *DataValuesDto) GetLockStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LockStatus
}

// GetLockStatusOk returns a tuple with the LockStatus field value
// and a boolean to check if the value has been set.
func (o *DataValuesDto) GetLockStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LockStatus, true
}

// SetLockStatus sets field value
func (o *DataValuesDto) SetLockStatus(v string) {
	o.LockStatus = v
}

// GetMinMaxValues returns the MinMaxValues field value if set, zero value otherwise.
func (o *DataValuesDto) GetMinMaxValues() []MinMaxValueDto {
	if o == nil || IsNil(o.MinMaxValues) {
		var ret []MinMaxValueDto
		return ret
	}
	return o.MinMaxValues
}

// GetMinMaxValuesOk returns a tuple with the MinMaxValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValuesDto) GetMinMaxValuesOk() ([]MinMaxValueDto, bool) {
	if o == nil || IsNil(o.MinMaxValues) {
		return nil, false
	}
	return o.MinMaxValues, true
}

// HasMinMaxValues returns a boolean if a field has been set.
func (o *DataValuesDto) HasMinMaxValues() bool {
	if o != nil && !IsNil(o.MinMaxValues) {
		return true
	}

	return false
}

// SetMinMaxValues gets a reference to the given []MinMaxValueDto and assigns it to the MinMaxValues field.
func (o *DataValuesDto) SetMinMaxValues(v []MinMaxValueDto) {
	o.MinMaxValues = v
}

func (o DataValuesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataValuesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompleteStatus) {
		toSerialize["completeStatus"] = o.CompleteStatus
	}
	if !IsNil(o.DataValues) {
		toSerialize["dataValues"] = o.DataValues
	}
	toSerialize["lockStatus"] = o.LockStatus
	if !IsNil(o.MinMaxValues) {
		toSerialize["minMaxValues"] = o.MinMaxValues
	}
	return toSerialize, nil
}

func (o *DataValuesDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lockStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataValuesDto := _DataValuesDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataValuesDto)

	if err != nil {
		return err
	}

	*o = DataValuesDto(varDataValuesDto)

	return err
}

type NullableDataValuesDto struct {
	value *DataValuesDto
	isSet bool
}

func (v NullableDataValuesDto) Get() *DataValuesDto {
	return v.value
}

func (v *NullableDataValuesDto) Set(val *DataValuesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataValuesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataValuesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataValuesDto(val *DataValuesDto) *NullableDataValuesDto {
	return &NullableDataValuesDto{value: val, isSet: true}
}

func (v NullableDataValuesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataValuesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
