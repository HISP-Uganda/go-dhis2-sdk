/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"time"
)

// checks if the DeletedObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletedObject{}

// DeletedObject struct for DeletedObject
type DeletedObject struct {
	Code      *string    `json:"code,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	DeletedBy *string    `json:"deletedBy,omitempty"`
	Klass     *string    `json:"klass,omitempty"`
	Uid       *string    `json:"uid,omitempty"`
}

// NewDeletedObject instantiates a new DeletedObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletedObject() *DeletedObject {
	this := DeletedObject{}
	return &this
}

// NewDeletedObjectWithDefaults instantiates a new DeletedObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletedObjectWithDefaults() *DeletedObject {
	this := DeletedObject{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *DeletedObject) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedObject) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *DeletedObject) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *DeletedObject) SetCode(v string) {
	o.Code = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *DeletedObject) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedObject) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *DeletedObject) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *DeletedObject) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *DeletedObject) GetDeletedBy() string {
	if o == nil || IsNil(o.DeletedBy) {
		var ret string
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedObject) GetDeletedByOk() (*string, bool) {
	if o == nil || IsNil(o.DeletedBy) {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *DeletedObject) HasDeletedBy() bool {
	if o != nil && !IsNil(o.DeletedBy) {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given string and assigns it to the DeletedBy field.
func (o *DeletedObject) SetDeletedBy(v string) {
	o.DeletedBy = &v
}

// GetKlass returns the Klass field value if set, zero value otherwise.
func (o *DeletedObject) GetKlass() string {
	if o == nil || IsNil(o.Klass) {
		var ret string
		return ret
	}
	return *o.Klass
}

// GetKlassOk returns a tuple with the Klass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedObject) GetKlassOk() (*string, bool) {
	if o == nil || IsNil(o.Klass) {
		return nil, false
	}
	return o.Klass, true
}

// HasKlass returns a boolean if a field has been set.
func (o *DeletedObject) HasKlass() bool {
	if o != nil && !IsNil(o.Klass) {
		return true
	}

	return false
}

// SetKlass gets a reference to the given string and assigns it to the Klass field.
func (o *DeletedObject) SetKlass(v string) {
	o.Klass = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *DeletedObject) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedObject) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *DeletedObject) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *DeletedObject) SetUid(v string) {
	o.Uid = &v
}

func (o DeletedObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletedObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if !IsNil(o.DeletedBy) {
		toSerialize["deletedBy"] = o.DeletedBy
	}
	if !IsNil(o.Klass) {
		toSerialize["klass"] = o.Klass
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

type NullableDeletedObject struct {
	value *DeletedObject
	isSet bool
}

func (v NullableDeletedObject) Get() *DeletedObject {
	return v.value
}

func (v *NullableDeletedObject) Set(val *DeletedObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletedObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletedObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletedObject(val *DeletedObject) *NullableDeletedObject {
	return &NullableDeletedObject{value: val, isSet: true}
}

func (v NullableDeletedObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletedObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
