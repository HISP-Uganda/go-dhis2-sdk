/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// Dhis2OAuth2AuthorizationConsentPropertyNames the model 'Dhis2OAuth2AuthorizationConsentPropertyNames'
type Dhis2OAuth2AuthorizationConsentPropertyNames string

// List of Dhis2OAuth2AuthorizationConsentPropertyNames
const (
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_ACCESS               Dhis2OAuth2AuthorizationConsentPropertyNames = "access"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_ATTRIBUTE_VALUES     Dhis2OAuth2AuthorizationConsentPropertyNames = "attributeValues"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_AUTHORITIES          Dhis2OAuth2AuthorizationConsentPropertyNames = "authorities"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_CODE                 Dhis2OAuth2AuthorizationConsentPropertyNames = "code"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_CREATED              Dhis2OAuth2AuthorizationConsentPropertyNames = "created"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_CREATED_BY           Dhis2OAuth2AuthorizationConsentPropertyNames = "createdBy"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_DISPLAY_NAME         Dhis2OAuth2AuthorizationConsentPropertyNames = "displayName"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_FAVORITE             Dhis2OAuth2AuthorizationConsentPropertyNames = "favorite"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_FAVORITES            Dhis2OAuth2AuthorizationConsentPropertyNames = "favorites"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_HREF                 Dhis2OAuth2AuthorizationConsentPropertyNames = "href"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_ID                   Dhis2OAuth2AuthorizationConsentPropertyNames = "id"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_LAST_UPDATED         Dhis2OAuth2AuthorizationConsentPropertyNames = "lastUpdated"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_LAST_UPDATED_BY      Dhis2OAuth2AuthorizationConsentPropertyNames = "lastUpdatedBy"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_NAME                 Dhis2OAuth2AuthorizationConsentPropertyNames = "name"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_PRINCIPAL_NAME       Dhis2OAuth2AuthorizationConsentPropertyNames = "principalName"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_REGISTERED_CLIENT_ID Dhis2OAuth2AuthorizationConsentPropertyNames = "registeredClientId"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_SHARING              Dhis2OAuth2AuthorizationConsentPropertyNames = "sharing"
	DHIS2OAUTH2AUTHORIZATIONCONSENTPROPERTYNAMES_TRANSLATIONS         Dhis2OAuth2AuthorizationConsentPropertyNames = "translations"
)

// All allowed values of Dhis2OAuth2AuthorizationConsentPropertyNames enum
var AllowedDhis2OAuth2AuthorizationConsentPropertyNamesEnumValues = []Dhis2OAuth2AuthorizationConsentPropertyNames{
	"access",
	"attributeValues",
	"authorities",
	"code",
	"created",
	"createdBy",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"principalName",
	"registeredClientId",
	"sharing",
	"translations",
}

func (v *Dhis2OAuth2AuthorizationConsentPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Dhis2OAuth2AuthorizationConsentPropertyNames(value)
	for _, existing := range AllowedDhis2OAuth2AuthorizationConsentPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Dhis2OAuth2AuthorizationConsentPropertyNames", value)
}

// NewDhis2OAuth2AuthorizationConsentPropertyNamesFromValue returns a pointer to a valid Dhis2OAuth2AuthorizationConsentPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDhis2OAuth2AuthorizationConsentPropertyNamesFromValue(v string) (*Dhis2OAuth2AuthorizationConsentPropertyNames, error) {
	ev := Dhis2OAuth2AuthorizationConsentPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Dhis2OAuth2AuthorizationConsentPropertyNames: valid values are %v", v, AllowedDhis2OAuth2AuthorizationConsentPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Dhis2OAuth2AuthorizationConsentPropertyNames) IsValid() bool {
	for _, existing := range AllowedDhis2OAuth2AuthorizationConsentPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Dhis2OAuth2AuthorizationConsentPropertyNames value
func (v Dhis2OAuth2AuthorizationConsentPropertyNames) Ptr() *Dhis2OAuth2AuthorizationConsentPropertyNames {
	return &v
}

type NullableDhis2OAuth2AuthorizationConsentPropertyNames struct {
	value *Dhis2OAuth2AuthorizationConsentPropertyNames
	isSet bool
}

func (v NullableDhis2OAuth2AuthorizationConsentPropertyNames) Get() *Dhis2OAuth2AuthorizationConsentPropertyNames {
	return v.value
}

func (v *NullableDhis2OAuth2AuthorizationConsentPropertyNames) Set(val *Dhis2OAuth2AuthorizationConsentPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableDhis2OAuth2AuthorizationConsentPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableDhis2OAuth2AuthorizationConsentPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhis2OAuth2AuthorizationConsentPropertyNames(val *Dhis2OAuth2AuthorizationConsentPropertyNames) *NullableDhis2OAuth2AuthorizationConsentPropertyNames {
	return &NullableDhis2OAuth2AuthorizationConsentPropertyNames{value: val, isSet: true}
}

func (v NullableDhis2OAuth2AuthorizationConsentPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhis2OAuth2AuthorizationConsentPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
