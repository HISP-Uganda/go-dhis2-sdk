/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MergeReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeReport{}

// MergeReport struct for MergeReport
type MergeReport struct {
	MergeErrors    []ErrorMessage `json:"mergeErrors,omitempty"`
	MergeType      MergeType      `json:"mergeType"`
	Message        *string        `json:"message,omitempty"`
	SourcesDeleted []string       `json:"sourcesDeleted,omitempty"`
}

type _MergeReport MergeReport

// NewMergeReport instantiates a new MergeReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeReport(mergeType MergeType) *MergeReport {
	this := MergeReport{}
	this.MergeType = mergeType
	return &this
}

// NewMergeReportWithDefaults instantiates a new MergeReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeReportWithDefaults() *MergeReport {
	this := MergeReport{}
	return &this
}

// GetMergeErrors returns the MergeErrors field value if set, zero value otherwise.
func (o *MergeReport) GetMergeErrors() []ErrorMessage {
	if o == nil || IsNil(o.MergeErrors) {
		var ret []ErrorMessage
		return ret
	}
	return o.MergeErrors
}

// GetMergeErrorsOk returns a tuple with the MergeErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeReport) GetMergeErrorsOk() ([]ErrorMessage, bool) {
	if o == nil || IsNil(o.MergeErrors) {
		return nil, false
	}
	return o.MergeErrors, true
}

// HasMergeErrors returns a boolean if a field has been set.
func (o *MergeReport) HasMergeErrors() bool {
	if o != nil && !IsNil(o.MergeErrors) {
		return true
	}

	return false
}

// SetMergeErrors gets a reference to the given []ErrorMessage and assigns it to the MergeErrors field.
func (o *MergeReport) SetMergeErrors(v []ErrorMessage) {
	o.MergeErrors = v
}

// GetMergeType returns the MergeType field value
func (o *MergeReport) GetMergeType() MergeType {
	if o == nil {
		var ret MergeType
		return ret
	}

	return o.MergeType
}

// GetMergeTypeOk returns a tuple with the MergeType field value
// and a boolean to check if the value has been set.
func (o *MergeReport) GetMergeTypeOk() (*MergeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MergeType, true
}

// SetMergeType sets field value
func (o *MergeReport) SetMergeType(v MergeType) {
	o.MergeType = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *MergeReport) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeReport) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *MergeReport) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *MergeReport) SetMessage(v string) {
	o.Message = &v
}

// GetSourcesDeleted returns the SourcesDeleted field value if set, zero value otherwise.
func (o *MergeReport) GetSourcesDeleted() []string {
	if o == nil || IsNil(o.SourcesDeleted) {
		var ret []string
		return ret
	}
	return o.SourcesDeleted
}

// GetSourcesDeletedOk returns a tuple with the SourcesDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeReport) GetSourcesDeletedOk() ([]string, bool) {
	if o == nil || IsNil(o.SourcesDeleted) {
		return nil, false
	}
	return o.SourcesDeleted, true
}

// HasSourcesDeleted returns a boolean if a field has been set.
func (o *MergeReport) HasSourcesDeleted() bool {
	if o != nil && !IsNil(o.SourcesDeleted) {
		return true
	}

	return false
}

// SetSourcesDeleted gets a reference to the given []string and assigns it to the SourcesDeleted field.
func (o *MergeReport) SetSourcesDeleted(v []string) {
	o.SourcesDeleted = v
}

func (o MergeReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MergeErrors) {
		toSerialize["mergeErrors"] = o.MergeErrors
	}
	toSerialize["mergeType"] = o.MergeType
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.SourcesDeleted) {
		toSerialize["sourcesDeleted"] = o.SourcesDeleted
	}
	return toSerialize, nil
}

func (o *MergeReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mergeType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMergeReport := _MergeReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMergeReport)

	if err != nil {
		return err
	}

	*o = MergeReport(varMergeReport)

	return err
}

type NullableMergeReport struct {
	value *MergeReport
	isSet bool
}

func (v NullableMergeReport) Get() *MergeReport {
	return v.value
}

func (v *NullableMergeReport) Set(val *MergeReport) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeReport) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeReport(val *MergeReport) *NullableMergeReport {
	return &NullableMergeReport{value: val, isSet: true}
}

func (v NullableMergeReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
