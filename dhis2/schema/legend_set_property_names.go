/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// LegendSetPropertyNames the model 'LegendSetPropertyNames'
type LegendSetPropertyNames string

// List of LegendSetPropertyNames
const (
	LEGENDSETPROPERTYNAMES_ACCESS           LegendSetPropertyNames = "access"
	LEGENDSETPROPERTYNAMES_ATTRIBUTE_VALUES LegendSetPropertyNames = "attributeValues"
	LEGENDSETPROPERTYNAMES_CODE             LegendSetPropertyNames = "code"
	LEGENDSETPROPERTYNAMES_CREATED          LegendSetPropertyNames = "created"
	LEGENDSETPROPERTYNAMES_CREATED_BY       LegendSetPropertyNames = "createdBy"
	LEGENDSETPROPERTYNAMES_DISPLAY_NAME     LegendSetPropertyNames = "displayName"
	LEGENDSETPROPERTYNAMES_FAVORITE         LegendSetPropertyNames = "favorite"
	LEGENDSETPROPERTYNAMES_FAVORITES        LegendSetPropertyNames = "favorites"
	LEGENDSETPROPERTYNAMES_HREF             LegendSetPropertyNames = "href"
	LEGENDSETPROPERTYNAMES_ID               LegendSetPropertyNames = "id"
	LEGENDSETPROPERTYNAMES_LAST_UPDATED     LegendSetPropertyNames = "lastUpdated"
	LEGENDSETPROPERTYNAMES_LAST_UPDATED_BY  LegendSetPropertyNames = "lastUpdatedBy"
	LEGENDSETPROPERTYNAMES_LEGENDS          LegendSetPropertyNames = "legends"
	LEGENDSETPROPERTYNAMES_NAME             LegendSetPropertyNames = "name"
	LEGENDSETPROPERTYNAMES_SHARING          LegendSetPropertyNames = "sharing"
	LEGENDSETPROPERTYNAMES_SYMBOLIZER       LegendSetPropertyNames = "symbolizer"
	LEGENDSETPROPERTYNAMES_TRANSLATIONS     LegendSetPropertyNames = "translations"
)

// All allowed values of LegendSetPropertyNames enum
var AllowedLegendSetPropertyNamesEnumValues = []LegendSetPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"legends",
	"name",
	"sharing",
	"symbolizer",
	"translations",
}

func (v *LegendSetPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LegendSetPropertyNames(value)
	for _, existing := range AllowedLegendSetPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LegendSetPropertyNames", value)
}

// NewLegendSetPropertyNamesFromValue returns a pointer to a valid LegendSetPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLegendSetPropertyNamesFromValue(v string) (*LegendSetPropertyNames, error) {
	ev := LegendSetPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LegendSetPropertyNames: valid values are %v", v, AllowedLegendSetPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LegendSetPropertyNames) IsValid() bool {
	for _, existing := range AllowedLegendSetPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LegendSetPropertyNames value
func (v LegendSetPropertyNames) Ptr() *LegendSetPropertyNames {
	return &v
}

type NullableLegendSetPropertyNames struct {
	value *LegendSetPropertyNames
	isSet bool
}

func (v NullableLegendSetPropertyNames) Get() *LegendSetPropertyNames {
	return v.value
}

func (v *NullableLegendSetPropertyNames) Set(val *LegendSetPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableLegendSetPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableLegendSetPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegendSetPropertyNames(val *LegendSetPropertyNames) *NullableLegendSetPropertyNames {
	return &NullableLegendSetPropertyNames{value: val, isSet: true}
}

func (v NullableLegendSetPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegendSetPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
