/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the MinMaxValueParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MinMaxValueParams{}

// MinMaxValueParams struct for MinMaxValueParams
type MinMaxValueParams struct {
	DataSets         []string `json:"dataSets,omitempty"`
	OrganisationUnit *string  `json:"organisationUnit,omitempty"`
}

// NewMinMaxValueParams instantiates a new MinMaxValueParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinMaxValueParams() *MinMaxValueParams {
	this := MinMaxValueParams{}
	return &this
}

// NewMinMaxValueParamsWithDefaults instantiates a new MinMaxValueParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinMaxValueParamsWithDefaults() *MinMaxValueParams {
	this := MinMaxValueParams{}
	return &this
}

// GetDataSets returns the DataSets field value if set, zero value otherwise.
func (o *MinMaxValueParams) GetDataSets() []string {
	if o == nil || IsNil(o.DataSets) {
		var ret []string
		return ret
	}
	return o.DataSets
}

// GetDataSetsOk returns a tuple with the DataSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinMaxValueParams) GetDataSetsOk() ([]string, bool) {
	if o == nil || IsNil(o.DataSets) {
		return nil, false
	}
	return o.DataSets, true
}

// HasDataSets returns a boolean if a field has been set.
func (o *MinMaxValueParams) HasDataSets() bool {
	if o != nil && !IsNil(o.DataSets) {
		return true
	}

	return false
}

// SetDataSets gets a reference to the given []string and assigns it to the DataSets field.
func (o *MinMaxValueParams) SetDataSets(v []string) {
	o.DataSets = v
}

// GetOrganisationUnit returns the OrganisationUnit field value if set, zero value otherwise.
func (o *MinMaxValueParams) GetOrganisationUnit() string {
	if o == nil || IsNil(o.OrganisationUnit) {
		var ret string
		return ret
	}
	return *o.OrganisationUnit
}

// GetOrganisationUnitOk returns a tuple with the OrganisationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinMaxValueParams) GetOrganisationUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrganisationUnit) {
		return nil, false
	}
	return o.OrganisationUnit, true
}

// HasOrganisationUnit returns a boolean if a field has been set.
func (o *MinMaxValueParams) HasOrganisationUnit() bool {
	if o != nil && !IsNil(o.OrganisationUnit) {
		return true
	}

	return false
}

// SetOrganisationUnit gets a reference to the given string and assigns it to the OrganisationUnit field.
func (o *MinMaxValueParams) SetOrganisationUnit(v string) {
	o.OrganisationUnit = &v
}

func (o MinMaxValueParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MinMaxValueParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataSets) {
		toSerialize["dataSets"] = o.DataSets
	}
	if !IsNil(o.OrganisationUnit) {
		toSerialize["organisationUnit"] = o.OrganisationUnit
	}
	return toSerialize, nil
}

type NullableMinMaxValueParams struct {
	value *MinMaxValueParams
	isSet bool
}

func (v NullableMinMaxValueParams) Get() *MinMaxValueParams {
	return v.value
}

func (v *NullableMinMaxValueParams) Set(val *MinMaxValueParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMinMaxValueParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMinMaxValueParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinMaxValueParams(val *MinMaxValueParams) *NullableMinMaxValueParams {
	return &NullableMinMaxValueParams{value: val, isSet: true}
}

func (v NullableMinMaxValueParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinMaxValueParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
