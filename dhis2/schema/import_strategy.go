/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ImportStrategy the model 'ImportStrategy'
type ImportStrategy string

// List of ImportStrategy
const (
	IMPORTSTRATEGY_CREATE            ImportStrategy = "CREATE"
	IMPORTSTRATEGY_UPDATE            ImportStrategy = "UPDATE"
	IMPORTSTRATEGY_CREATE_AND_UPDATE ImportStrategy = "CREATE_AND_UPDATE"
	IMPORTSTRATEGY_DELETE            ImportStrategy = "DELETE"
	IMPORTSTRATEGY_SYNC              ImportStrategy = "SYNC"
	IMPORTSTRATEGY_NEW_AND_UPDATES   ImportStrategy = "NEW_AND_UPDATES"
	IMPORTSTRATEGY_NEW               ImportStrategy = "NEW"
	IMPORTSTRATEGY_UPDATES           ImportStrategy = "UPDATES"
	IMPORTSTRATEGY_DELETES           ImportStrategy = "DELETES"
)

// All allowed values of ImportStrategy enum
var AllowedImportStrategyEnumValues = []ImportStrategy{
	"CREATE",
	"UPDATE",
	"CREATE_AND_UPDATE",
	"DELETE",
	"SYNC",
	"NEW_AND_UPDATES",
	"NEW",
	"UPDATES",
	"DELETES",
}

func (v *ImportStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImportStrategy(value)
	for _, existing := range AllowedImportStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImportStrategy", value)
}

// NewImportStrategyFromValue returns a pointer to a valid ImportStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImportStrategyFromValue(v string) (*ImportStrategy, error) {
	ev := ImportStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImportStrategy: valid values are %v", v, AllowedImportStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImportStrategy) IsValid() bool {
	for _, existing := range AllowedImportStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImportStrategy value
func (v ImportStrategy) Ptr() *ImportStrategy {
	return &v
}

type NullableImportStrategy struct {
	value *ImportStrategy
	isSet bool
}

func (v NullableImportStrategy) Get() *ImportStrategy {
	return v.value
}

func (v *NullableImportStrategy) Set(val *ImportStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableImportStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableImportStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportStrategy(val *ImportStrategy) *NullableImportStrategy {
	return &NullableImportStrategy{value: val, isSet: true}
}

func (v NullableImportStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
