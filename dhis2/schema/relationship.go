/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the Relationship type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Relationship{}

// Relationship struct for Relationship
type Relationship struct {
	Bidirectional    *bool                    `json:"bidirectional,omitempty"`
	Created          *string                  `json:"created,omitempty"`
	From             *TrackerRelationshipItem `json:"from,omitempty"`
	LastUpdated      *string                  `json:"lastUpdated,omitempty"`
	Relationship     *string                  `json:"relationship,omitempty"`
	RelationshipName *string                  `json:"relationshipName,omitempty"`
	RelationshipType *string                  `json:"relationshipType,omitempty"`
	To               *TrackerRelationshipItem `json:"to,omitempty"`
}

// NewRelationship instantiates a new Relationship object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationship() *Relationship {
	this := Relationship{}
	return &this
}

// NewRelationshipWithDefaults instantiates a new Relationship object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipWithDefaults() *Relationship {
	this := Relationship{}
	return &this
}

// GetBidirectional returns the Bidirectional field value if set, zero value otherwise.
func (o *Relationship) GetBidirectional() bool {
	if o == nil || IsNil(o.Bidirectional) {
		var ret bool
		return ret
	}
	return *o.Bidirectional
}

// GetBidirectionalOk returns a tuple with the Bidirectional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetBidirectionalOk() (*bool, bool) {
	if o == nil || IsNil(o.Bidirectional) {
		return nil, false
	}
	return o.Bidirectional, true
}

// HasBidirectional returns a boolean if a field has been set.
func (o *Relationship) HasBidirectional() bool {
	if o != nil && !IsNil(o.Bidirectional) {
		return true
	}

	return false
}

// SetBidirectional gets a reference to the given bool and assigns it to the Bidirectional field.
func (o *Relationship) SetBidirectional(v bool) {
	o.Bidirectional = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Relationship) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Relationship) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *Relationship) SetCreated(v string) {
	o.Created = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *Relationship) GetFrom() TrackerRelationshipItem {
	if o == nil || IsNil(o.From) {
		var ret TrackerRelationshipItem
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetFromOk() (*TrackerRelationshipItem, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *Relationship) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given TrackerRelationshipItem and assigns it to the From field.
func (o *Relationship) SetFrom(v TrackerRelationshipItem) {
	o.From = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Relationship) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Relationship) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *Relationship) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *Relationship) GetRelationship() string {
	if o == nil || IsNil(o.Relationship) {
		var ret string
		return ret
	}
	return *o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetRelationshipOk() (*string, bool) {
	if o == nil || IsNil(o.Relationship) {
		return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *Relationship) HasRelationship() bool {
	if o != nil && !IsNil(o.Relationship) {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given string and assigns it to the Relationship field.
func (o *Relationship) SetRelationship(v string) {
	o.Relationship = &v
}

// GetRelationshipName returns the RelationshipName field value if set, zero value otherwise.
func (o *Relationship) GetRelationshipName() string {
	if o == nil || IsNil(o.RelationshipName) {
		var ret string
		return ret
	}
	return *o.RelationshipName
}

// GetRelationshipNameOk returns a tuple with the RelationshipName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetRelationshipNameOk() (*string, bool) {
	if o == nil || IsNil(o.RelationshipName) {
		return nil, false
	}
	return o.RelationshipName, true
}

// HasRelationshipName returns a boolean if a field has been set.
func (o *Relationship) HasRelationshipName() bool {
	if o != nil && !IsNil(o.RelationshipName) {
		return true
	}

	return false
}

// SetRelationshipName gets a reference to the given string and assigns it to the RelationshipName field.
func (o *Relationship) SetRelationshipName(v string) {
	o.RelationshipName = &v
}

// GetRelationshipType returns the RelationshipType field value if set, zero value otherwise.
func (o *Relationship) GetRelationshipType() string {
	if o == nil || IsNil(o.RelationshipType) {
		var ret string
		return ret
	}
	return *o.RelationshipType
}

// GetRelationshipTypeOk returns a tuple with the RelationshipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetRelationshipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RelationshipType) {
		return nil, false
	}
	return o.RelationshipType, true
}

// HasRelationshipType returns a boolean if a field has been set.
func (o *Relationship) HasRelationshipType() bool {
	if o != nil && !IsNil(o.RelationshipType) {
		return true
	}

	return false
}

// SetRelationshipType gets a reference to the given string and assigns it to the RelationshipType field.
func (o *Relationship) SetRelationshipType(v string) {
	o.RelationshipType = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *Relationship) GetTo() TrackerRelationshipItem {
	if o == nil || IsNil(o.To) {
		var ret TrackerRelationshipItem
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetToOk() (*TrackerRelationshipItem, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *Relationship) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given TrackerRelationshipItem and assigns it to the To field.
func (o *Relationship) SetTo(v TrackerRelationshipItem) {
	o.To = &v
}

func (o Relationship) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Relationship) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bidirectional) {
		toSerialize["bidirectional"] = o.Bidirectional
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.Relationship) {
		toSerialize["relationship"] = o.Relationship
	}
	if !IsNil(o.RelationshipName) {
		toSerialize["relationshipName"] = o.RelationshipName
	}
	if !IsNil(o.RelationshipType) {
		toSerialize["relationshipType"] = o.RelationshipType
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	return toSerialize, nil
}

type NullableRelationship struct {
	value *Relationship
	isSet bool
}

func (v NullableRelationship) Get() *Relationship {
	return v.value
}

func (v *NullableRelationship) Set(val *Relationship) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationship(val *Relationship) *NullableRelationship {
	return &NullableRelationship{value: val, isSet: true}
}

func (v NullableRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
