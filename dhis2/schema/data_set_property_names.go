/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DataSetPropertyNames the model 'DataSetPropertyNames'
type DataSetPropertyNames string

// List of DataSetPropertyNames
const (
	DATASETPROPERTYNAMES_ACCESS                           DataSetPropertyNames = "access"
	DATASETPROPERTYNAMES_AGGREGATION_TYPE                 DataSetPropertyNames = "aggregationType"
	DATASETPROPERTYNAMES_ATTRIBUTE_VALUES                 DataSetPropertyNames = "attributeValues"
	DATASETPROPERTYNAMES_CATEGORY_COMBO                   DataSetPropertyNames = "categoryCombo"
	DATASETPROPERTYNAMES_CODE                             DataSetPropertyNames = "code"
	DATASETPROPERTYNAMES_COMPULSORY_DATA_ELEMENT_OPERANDS DataSetPropertyNames = "compulsoryDataElementOperands"
	DATASETPROPERTYNAMES_COMPULSORY_FIELDS_COMPLETE_ONLY  DataSetPropertyNames = "compulsoryFieldsCompleteOnly"
	DATASETPROPERTYNAMES_CREATED                          DataSetPropertyNames = "created"
	DATASETPROPERTYNAMES_CREATED_BY                       DataSetPropertyNames = "createdBy"
	DATASETPROPERTYNAMES_DATA_ELEMENT_DECORATION          DataSetPropertyNames = "dataElementDecoration"
	DATASETPROPERTYNAMES_DATA_ENTRY_FORM                  DataSetPropertyNames = "dataEntryForm"
	DATASETPROPERTYNAMES_DATA_INPUT_PERIODS               DataSetPropertyNames = "dataInputPeriods"
	DATASETPROPERTYNAMES_DATA_SET_ELEMENTS                DataSetPropertyNames = "dataSetElements"
	DATASETPROPERTYNAMES_DESCRIPTION                      DataSetPropertyNames = "description"
	DATASETPROPERTYNAMES_DIMENSION_ITEM                   DataSetPropertyNames = "dimensionItem"
	DATASETPROPERTYNAMES_DISPLAY_DESCRIPTION              DataSetPropertyNames = "displayDescription"
	DATASETPROPERTYNAMES_DISPLAY_FORM_NAME                DataSetPropertyNames = "displayFormName"
	DATASETPROPERTYNAMES_DISPLAY_NAME                     DataSetPropertyNames = "displayName"
	DATASETPROPERTYNAMES_DISPLAY_OPTIONS                  DataSetPropertyNames = "displayOptions"
	DATASETPROPERTYNAMES_DISPLAY_SHORT_NAME               DataSetPropertyNames = "displayShortName"
	DATASETPROPERTYNAMES_EXPIRY_DAYS                      DataSetPropertyNames = "expiryDays"
	DATASETPROPERTYNAMES_FAVORITE                         DataSetPropertyNames = "favorite"
	DATASETPROPERTYNAMES_FAVORITES                        DataSetPropertyNames = "favorites"
	DATASETPROPERTYNAMES_FIELD_COMBINATION_REQUIRED       DataSetPropertyNames = "fieldCombinationRequired"
	DATASETPROPERTYNAMES_FORM_NAME                        DataSetPropertyNames = "formName"
	DATASETPROPERTYNAMES_FORM_TYPE                        DataSetPropertyNames = "formType"
	DATASETPROPERTYNAMES_HREF                             DataSetPropertyNames = "href"
	DATASETPROPERTYNAMES_ID                               DataSetPropertyNames = "id"
	DATASETPROPERTYNAMES_INDICATORS                       DataSetPropertyNames = "indicators"
	DATASETPROPERTYNAMES_INTERPRETATIONS                  DataSetPropertyNames = "interpretations"
	DATASETPROPERTYNAMES_LAST_UPDATED                     DataSetPropertyNames = "lastUpdated"
	DATASETPROPERTYNAMES_LAST_UPDATED_BY                  DataSetPropertyNames = "lastUpdatedBy"
	DATASETPROPERTYNAMES_LEGEND_SET                       DataSetPropertyNames = "legendSet"
	DATASETPROPERTYNAMES_LEGEND_SETS                      DataSetPropertyNames = "legendSets"
	DATASETPROPERTYNAMES_MOBILE                           DataSetPropertyNames = "mobile"
	DATASETPROPERTYNAMES_NAME                             DataSetPropertyNames = "name"
	DATASETPROPERTYNAMES_NO_VALUE_REQUIRES_COMMENT        DataSetPropertyNames = "noValueRequiresComment"
	DATASETPROPERTYNAMES_NOTIFICATION_RECIPIENTS          DataSetPropertyNames = "notificationRecipients"
	DATASETPROPERTYNAMES_NOTIFY_COMPLETING_USER           DataSetPropertyNames = "notifyCompletingUser"
	DATASETPROPERTYNAMES_OPEN_FUTURE_PERIODS              DataSetPropertyNames = "openFuturePeriods"
	DATASETPROPERTYNAMES_OPEN_PERIODS_AFTER_CO_END_DATE   DataSetPropertyNames = "openPeriodsAfterCoEndDate"
	DATASETPROPERTYNAMES_ORGANISATION_UNITS               DataSetPropertyNames = "organisationUnits"
	DATASETPROPERTYNAMES_PERIOD_TYPE                      DataSetPropertyNames = "periodType"
	DATASETPROPERTYNAMES_QUERY_MODS                       DataSetPropertyNames = "queryMods"
	DATASETPROPERTYNAMES_RENDER_AS_TABS                   DataSetPropertyNames = "renderAsTabs"
	DATASETPROPERTYNAMES_RENDER_HORIZONTALLY              DataSetPropertyNames = "renderHorizontally"
	DATASETPROPERTYNAMES_SECTIONS                         DataSetPropertyNames = "sections"
	DATASETPROPERTYNAMES_SHARING                          DataSetPropertyNames = "sharing"
	DATASETPROPERTYNAMES_SHORT_NAME                       DataSetPropertyNames = "shortName"
	DATASETPROPERTYNAMES_SKIP_OFFLINE                     DataSetPropertyNames = "skipOffline"
	DATASETPROPERTYNAMES_STYLE                            DataSetPropertyNames = "style"
	DATASETPROPERTYNAMES_TIMELY_DAYS                      DataSetPropertyNames = "timelyDays"
	DATASETPROPERTYNAMES_TRANSLATIONS                     DataSetPropertyNames = "translations"
	DATASETPROPERTYNAMES_VALID_COMPLETE_ONLY              DataSetPropertyNames = "validCompleteOnly"
	DATASETPROPERTYNAMES_VERSION                          DataSetPropertyNames = "version"
	DATASETPROPERTYNAMES_WORKFLOW                         DataSetPropertyNames = "workflow"
)

// All allowed values of DataSetPropertyNames enum
var AllowedDataSetPropertyNamesEnumValues = []DataSetPropertyNames{
	"access",
	"aggregationType",
	"attributeValues",
	"categoryCombo",
	"code",
	"compulsoryDataElementOperands",
	"compulsoryFieldsCompleteOnly",
	"created",
	"createdBy",
	"dataElementDecoration",
	"dataEntryForm",
	"dataInputPeriods",
	"dataSetElements",
	"description",
	"dimensionItem",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayOptions",
	"displayShortName",
	"expiryDays",
	"favorite",
	"favorites",
	"fieldCombinationRequired",
	"formName",
	"formType",
	"href",
	"id",
	"indicators",
	"interpretations",
	"lastUpdated",
	"lastUpdatedBy",
	"legendSet",
	"legendSets",
	"mobile",
	"name",
	"noValueRequiresComment",
	"notificationRecipients",
	"notifyCompletingUser",
	"openFuturePeriods",
	"openPeriodsAfterCoEndDate",
	"organisationUnits",
	"periodType",
	"queryMods",
	"renderAsTabs",
	"renderHorizontally",
	"sections",
	"sharing",
	"shortName",
	"skipOffline",
	"style",
	"timelyDays",
	"translations",
	"validCompleteOnly",
	"version",
	"workflow",
}

func (v *DataSetPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataSetPropertyNames(value)
	for _, existing := range AllowedDataSetPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataSetPropertyNames", value)
}

// NewDataSetPropertyNamesFromValue returns a pointer to a valid DataSetPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataSetPropertyNamesFromValue(v string) (*DataSetPropertyNames, error) {
	ev := DataSetPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataSetPropertyNames: valid values are %v", v, AllowedDataSetPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataSetPropertyNames) IsValid() bool {
	for _, existing := range AllowedDataSetPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataSetPropertyNames value
func (v DataSetPropertyNames) Ptr() *DataSetPropertyNames {
	return &v
}

type NullableDataSetPropertyNames struct {
	value *DataSetPropertyNames
	isSet bool
}

func (v NullableDataSetPropertyNames) Get() *DataSetPropertyNames {
	return v.value
}

func (v *NullableDataSetPropertyNames) Set(val *DataSetPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSetPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSetPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSetPropertyNames(val *DataSetPropertyNames) *NullableDataSetPropertyNames {
	return &NullableDataSetPropertyNames{value: val, isSet: true}
}

func (v NullableDataSetPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSetPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
