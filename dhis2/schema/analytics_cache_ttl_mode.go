/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AnalyticsCacheTtlMode the model 'AnalyticsCacheTtlMode'
type AnalyticsCacheTtlMode string

// List of AnalyticsCacheTtlMode
const (
	ANALYTICSCACHETTLMODE_FIXED       AnalyticsCacheTtlMode = "FIXED"
	ANALYTICSCACHETTLMODE_PROGRESSIVE AnalyticsCacheTtlMode = "PROGRESSIVE"
)

// All allowed values of AnalyticsCacheTtlMode enum
var AllowedAnalyticsCacheTtlModeEnumValues = []AnalyticsCacheTtlMode{
	"FIXED",
	"PROGRESSIVE",
}

func (v *AnalyticsCacheTtlMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsCacheTtlMode(value)
	for _, existing := range AllowedAnalyticsCacheTtlModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsCacheTtlMode", value)
}

// NewAnalyticsCacheTtlModeFromValue returns a pointer to a valid AnalyticsCacheTtlMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsCacheTtlModeFromValue(v string) (*AnalyticsCacheTtlMode, error) {
	ev := AnalyticsCacheTtlMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsCacheTtlMode: valid values are %v", v, AllowedAnalyticsCacheTtlModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsCacheTtlMode) IsValid() bool {
	for _, existing := range AllowedAnalyticsCacheTtlModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsCacheTtlMode value
func (v AnalyticsCacheTtlMode) Ptr() *AnalyticsCacheTtlMode {
	return &v
}

type NullableAnalyticsCacheTtlMode struct {
	value *AnalyticsCacheTtlMode
	isSet bool
}

func (v NullableAnalyticsCacheTtlMode) Get() *AnalyticsCacheTtlMode {
	return v.value
}

func (v *NullableAnalyticsCacheTtlMode) Set(val *AnalyticsCacheTtlMode) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsCacheTtlMode) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsCacheTtlMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsCacheTtlMode(val *AnalyticsCacheTtlMode) *NullableAnalyticsCacheTtlMode {
	return &NullableAnalyticsCacheTtlMode{value: val, isSet: true}
}

func (v NullableAnalyticsCacheTtlMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsCacheTtlMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
