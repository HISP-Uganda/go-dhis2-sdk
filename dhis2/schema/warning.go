/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the Warning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Warning{}

// Warning struct for Warning
type Warning struct {
	Message     *string `json:"message,omitempty"`
	TrackerType *string `json:"trackerType,omitempty"`
	Uid         *string `json:"uid,omitempty"`
	WarningCode *string `json:"warningCode,omitempty"`
}

// NewWarning instantiates a new Warning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWarning() *Warning {
	this := Warning{}
	return &this
}

// NewWarningWithDefaults instantiates a new Warning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWarningWithDefaults() *Warning {
	this := Warning{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Warning) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Warning) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Warning) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Warning) SetMessage(v string) {
	o.Message = &v
}

// GetTrackerType returns the TrackerType field value if set, zero value otherwise.
func (o *Warning) GetTrackerType() string {
	if o == nil || IsNil(o.TrackerType) {
		var ret string
		return ret
	}
	return *o.TrackerType
}

// GetTrackerTypeOk returns a tuple with the TrackerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Warning) GetTrackerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TrackerType) {
		return nil, false
	}
	return o.TrackerType, true
}

// HasTrackerType returns a boolean if a field has been set.
func (o *Warning) HasTrackerType() bool {
	if o != nil && !IsNil(o.TrackerType) {
		return true
	}

	return false
}

// SetTrackerType gets a reference to the given string and assigns it to the TrackerType field.
func (o *Warning) SetTrackerType(v string) {
	o.TrackerType = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *Warning) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Warning) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *Warning) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *Warning) SetUid(v string) {
	o.Uid = &v
}

// GetWarningCode returns the WarningCode field value if set, zero value otherwise.
func (o *Warning) GetWarningCode() string {
	if o == nil || IsNil(o.WarningCode) {
		var ret string
		return ret
	}
	return *o.WarningCode
}

// GetWarningCodeOk returns a tuple with the WarningCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Warning) GetWarningCodeOk() (*string, bool) {
	if o == nil || IsNil(o.WarningCode) {
		return nil, false
	}
	return o.WarningCode, true
}

// HasWarningCode returns a boolean if a field has been set.
func (o *Warning) HasWarningCode() bool {
	if o != nil && !IsNil(o.WarningCode) {
		return true
	}

	return false
}

// SetWarningCode gets a reference to the given string and assigns it to the WarningCode field.
func (o *Warning) SetWarningCode(v string) {
	o.WarningCode = &v
}

func (o Warning) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Warning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.TrackerType) {
		toSerialize["trackerType"] = o.TrackerType
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.WarningCode) {
		toSerialize["warningCode"] = o.WarningCode
	}
	return toSerialize, nil
}

type NullableWarning struct {
	value *Warning
	isSet bool
}

func (v NullableWarning) Get() *Warning {
	return v.value
}

func (v *NullableWarning) Set(val *Warning) {
	v.value = val
	v.isSet = true
}

func (v NullableWarning) IsSet() bool {
	return v.isSet
}

func (v *NullableWarning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarning(val *Warning) *NullableWarning {
	return &NullableWarning{value: val, isSet: true}
}

func (v NullableWarning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
