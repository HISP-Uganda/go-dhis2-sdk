/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ApiTokenType the model 'ApiTokenType'
type ApiTokenType string

// List of ApiTokenType
const (
	APITOKENTYPE_V1 ApiTokenType = "PERSONAL_ACCESS_TOKEN_V1"
	APITOKENTYPE_V2 ApiTokenType = "PERSONAL_ACCESS_TOKEN_V2"
)

// All allowed values of ApiTokenType enum
var AllowedApiTokenTypeEnumValues = []ApiTokenType{
	"PERSONAL_ACCESS_TOKEN_V1",
	"PERSONAL_ACCESS_TOKEN_V2",
}

func (v *ApiTokenType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiTokenType(value)
	for _, existing := range AllowedApiTokenTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiTokenType", value)
}

// NewApiTokenTypeFromValue returns a pointer to a valid ApiTokenType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiTokenTypeFromValue(v string) (*ApiTokenType, error) {
	ev := ApiTokenType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiTokenType: valid values are %v", v, AllowedApiTokenTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiTokenType) IsValid() bool {
	for _, existing := range AllowedApiTokenTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiTokenType value
func (v ApiTokenType) Ptr() *ApiTokenType {
	return &v
}

type NullableApiTokenType struct {
	value *ApiTokenType
	isSet bool
}

func (v NullableApiTokenType) Get() *ApiTokenType {
	return v.value
}

func (v *NullableApiTokenType) Set(val *ApiTokenType) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTokenType) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTokenType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTokenType(val *ApiTokenType) *NullableApiTokenType {
	return &NullableApiTokenType{value: val, isSet: true}
}

func (v NullableApiTokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTokenType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
