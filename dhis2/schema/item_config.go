/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ItemConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemConfig{}

// ItemConfig struct for ItemConfig
type ItemConfig struct {
	InsertHeight   *int32   `json:"insertHeight,omitempty"`
	InsertPosition Position `json:"insertPosition"`
}

type _ItemConfig ItemConfig

// NewItemConfig instantiates a new ItemConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemConfig(insertPosition Position) *ItemConfig {
	this := ItemConfig{}
	this.InsertPosition = insertPosition
	return &this
}

// NewItemConfigWithDefaults instantiates a new ItemConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemConfigWithDefaults() *ItemConfig {
	this := ItemConfig{}
	return &this
}

// GetInsertHeight returns the InsertHeight field value if set, zero value otherwise.
func (o *ItemConfig) GetInsertHeight() int32 {
	if o == nil || IsNil(o.InsertHeight) {
		var ret int32
		return ret
	}
	return *o.InsertHeight
}

// GetInsertHeightOk returns a tuple with the InsertHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemConfig) GetInsertHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.InsertHeight) {
		return nil, false
	}
	return o.InsertHeight, true
}

// HasInsertHeight returns a boolean if a field has been set.
func (o *ItemConfig) HasInsertHeight() bool {
	if o != nil && !IsNil(o.InsertHeight) {
		return true
	}

	return false
}

// SetInsertHeight gets a reference to the given int32 and assigns it to the InsertHeight field.
func (o *ItemConfig) SetInsertHeight(v int32) {
	o.InsertHeight = &v
}

// GetInsertPosition returns the InsertPosition field value
func (o *ItemConfig) GetInsertPosition() Position {
	if o == nil {
		var ret Position
		return ret
	}

	return o.InsertPosition
}

// GetInsertPositionOk returns a tuple with the InsertPosition field value
// and a boolean to check if the value has been set.
func (o *ItemConfig) GetInsertPositionOk() (*Position, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InsertPosition, true
}

// SetInsertPosition sets field value
func (o *ItemConfig) SetInsertPosition(v Position) {
	o.InsertPosition = v
}

func (o ItemConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InsertHeight) {
		toSerialize["insertHeight"] = o.InsertHeight
	}
	toSerialize["insertPosition"] = o.InsertPosition
	return toSerialize, nil
}

func (o *ItemConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"insertPosition",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItemConfig := _ItemConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varItemConfig)

	if err != nil {
		return err
	}

	*o = ItemConfig(varItemConfig)

	return err
}

type NullableItemConfig struct {
	value *ItemConfig
	isSet bool
}

func (v NullableItemConfig) Get() *ItemConfig {
	return v.value
}

func (v *NullableItemConfig) Set(val *ItemConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableItemConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableItemConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemConfig(val *ItemConfig) *NullableItemConfig {
	return &NullableItemConfig{value: val, isSet: true}
}

func (v NullableItemConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
