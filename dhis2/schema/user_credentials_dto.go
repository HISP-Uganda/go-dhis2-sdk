/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// checks if the UserCredentialsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserCredentialsDto{}

// UserCredentialsDto struct for UserCredentialsDto
type UserCredentialsDto struct {
	Access                   *Access                             `json:"access,omitempty"`
	AccountExpiry            *time.Time                          `json:"accountExpiry,omitempty"`
	CatDimensionConstraints  []CategoryComboCategoriesInner      `json:"catDimensionConstraints,omitempty"`
	CogsDimensionConstraints []CategoryOptionGroupGroupSetsInner `json:"cogsDimensionConstraints,omitempty"`
	Disabled                 *bool                               `json:"disabled,omitempty"`
	ExternalAuth             *bool                               `json:"externalAuth,omitempty"`
	Id                       *string                             `json:"id,omitempty"`
	IdToken                  *string                             `json:"idToken,omitempty"`
	Invitation               *bool                               `json:"invitation,omitempty"`
	LastLogin                *time.Time                          `json:"lastLogin,omitempty"`
	LdapId                   *string                             `json:"ldapId,omitempty"`
	OpenId                   *string                             `json:"openId,omitempty"`
	Password                 *string                             `json:"password,omitempty"`
	PasswordLastUpdated      *time.Time                          `json:"passwordLastUpdated,omitempty"`
	PreviousPasswords        []string                            `json:"previousPasswords,omitempty"`
	RestoreExpiry            *time.Time                          `json:"restoreExpiry,omitempty"`
	RestoreToken             *string                             `json:"restoreToken,omitempty"`
	SelfRegistered           *bool                               `json:"selfRegistered,omitempty"`
	Sharing                  *Sharing                            `json:"sharing,omitempty"`
	TwoFA                    *bool                               `json:"twoFA,omitempty"`
	Uid                      *string                             `json:"uid,omitempty"`
	UserRoles                []ConfigurationSelfRegistrationRole `json:"userRoles,omitempty"`
	Username                 *string                             `json:"username,omitempty"`
	Uuid                     *string                             `json:"uuid,omitempty"`
}

// NewUserCredentialsDto instantiates a new UserCredentialsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCredentialsDto() *UserCredentialsDto {
	this := UserCredentialsDto{}
	return &this
}

// NewUserCredentialsDtoWithDefaults instantiates a new UserCredentialsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCredentialsDtoWithDefaults() *UserCredentialsDto {
	this := UserCredentialsDto{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *UserCredentialsDto) SetAccess(v Access) {
	o.Access = &v
}

// GetAccountExpiry returns the AccountExpiry field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetAccountExpiry() time.Time {
	if o == nil || IsNil(o.AccountExpiry) {
		var ret time.Time
		return ret
	}
	return *o.AccountExpiry
}

// GetAccountExpiryOk returns a tuple with the AccountExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetAccountExpiryOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AccountExpiry) {
		return nil, false
	}
	return o.AccountExpiry, true
}

// HasAccountExpiry returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasAccountExpiry() bool {
	if o != nil && !IsNil(o.AccountExpiry) {
		return true
	}

	return false
}

// SetAccountExpiry gets a reference to the given time.Time and assigns it to the AccountExpiry field.
func (o *UserCredentialsDto) SetAccountExpiry(v time.Time) {
	o.AccountExpiry = &v
}

// GetCatDimensionConstraints returns the CatDimensionConstraints field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetCatDimensionConstraints() []CategoryComboCategoriesInner {
	if o == nil || IsNil(o.CatDimensionConstraints) {
		var ret []CategoryComboCategoriesInner
		return ret
	}
	return o.CatDimensionConstraints
}

// GetCatDimensionConstraintsOk returns a tuple with the CatDimensionConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetCatDimensionConstraintsOk() ([]CategoryComboCategoriesInner, bool) {
	if o == nil || IsNil(o.CatDimensionConstraints) {
		return nil, false
	}
	return o.CatDimensionConstraints, true
}

// HasCatDimensionConstraints returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasCatDimensionConstraints() bool {
	if o != nil && !IsNil(o.CatDimensionConstraints) {
		return true
	}

	return false
}

// SetCatDimensionConstraints gets a reference to the given []CategoryComboCategoriesInner and assigns it to the CatDimensionConstraints field.
func (o *UserCredentialsDto) SetCatDimensionConstraints(v []CategoryComboCategoriesInner) {
	o.CatDimensionConstraints = v
}

// GetCogsDimensionConstraints returns the CogsDimensionConstraints field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetCogsDimensionConstraints() []CategoryOptionGroupGroupSetsInner {
	if o == nil || IsNil(o.CogsDimensionConstraints) {
		var ret []CategoryOptionGroupGroupSetsInner
		return ret
	}
	return o.CogsDimensionConstraints
}

// GetCogsDimensionConstraintsOk returns a tuple with the CogsDimensionConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetCogsDimensionConstraintsOk() ([]CategoryOptionGroupGroupSetsInner, bool) {
	if o == nil || IsNil(o.CogsDimensionConstraints) {
		return nil, false
	}
	return o.CogsDimensionConstraints, true
}

// HasCogsDimensionConstraints returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasCogsDimensionConstraints() bool {
	if o != nil && !IsNil(o.CogsDimensionConstraints) {
		return true
	}

	return false
}

// SetCogsDimensionConstraints gets a reference to the given []CategoryOptionGroupGroupSetsInner and assigns it to the CogsDimensionConstraints field.
func (o *UserCredentialsDto) SetCogsDimensionConstraints(v []CategoryOptionGroupGroupSetsInner) {
	o.CogsDimensionConstraints = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *UserCredentialsDto) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetExternalAuth returns the ExternalAuth field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetExternalAuth() bool {
	if o == nil || IsNil(o.ExternalAuth) {
		var ret bool
		return ret
	}
	return *o.ExternalAuth
}

// GetExternalAuthOk returns a tuple with the ExternalAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetExternalAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAuth) {
		return nil, false
	}
	return o.ExternalAuth, true
}

// HasExternalAuth returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasExternalAuth() bool {
	if o != nil && !IsNil(o.ExternalAuth) {
		return true
	}

	return false
}

// SetExternalAuth gets a reference to the given bool and assigns it to the ExternalAuth field.
func (o *UserCredentialsDto) SetExternalAuth(v bool) {
	o.ExternalAuth = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserCredentialsDto) SetId(v string) {
	o.Id = &v
}

// GetIdToken returns the IdToken field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetIdToken() string {
	if o == nil || IsNil(o.IdToken) {
		var ret string
		return ret
	}
	return *o.IdToken
}

// GetIdTokenOk returns a tuple with the IdToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetIdTokenOk() (*string, bool) {
	if o == nil || IsNil(o.IdToken) {
		return nil, false
	}
	return o.IdToken, true
}

// HasIdToken returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasIdToken() bool {
	if o != nil && !IsNil(o.IdToken) {
		return true
	}

	return false
}

// SetIdToken gets a reference to the given string and assigns it to the IdToken field.
func (o *UserCredentialsDto) SetIdToken(v string) {
	o.IdToken = &v
}

// GetInvitation returns the Invitation field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetInvitation() bool {
	if o == nil || IsNil(o.Invitation) {
		var ret bool
		return ret
	}
	return *o.Invitation
}

// GetInvitationOk returns a tuple with the Invitation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetInvitationOk() (*bool, bool) {
	if o == nil || IsNil(o.Invitation) {
		return nil, false
	}
	return o.Invitation, true
}

// HasInvitation returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasInvitation() bool {
	if o != nil && !IsNil(o.Invitation) {
		return true
	}

	return false
}

// SetInvitation gets a reference to the given bool and assigns it to the Invitation field.
func (o *UserCredentialsDto) SetInvitation(v bool) {
	o.Invitation = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetLastLogin() time.Time {
	if o == nil || IsNil(o.LastLogin) {
		var ret time.Time
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetLastLoginOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastLogin) {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasLastLogin() bool {
	if o != nil && !IsNil(o.LastLogin) {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given time.Time and assigns it to the LastLogin field.
func (o *UserCredentialsDto) SetLastLogin(v time.Time) {
	o.LastLogin = &v
}

// GetLdapId returns the LdapId field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetLdapId() string {
	if o == nil || IsNil(o.LdapId) {
		var ret string
		return ret
	}
	return *o.LdapId
}

// GetLdapIdOk returns a tuple with the LdapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetLdapIdOk() (*string, bool) {
	if o == nil || IsNil(o.LdapId) {
		return nil, false
	}
	return o.LdapId, true
}

// HasLdapId returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasLdapId() bool {
	if o != nil && !IsNil(o.LdapId) {
		return true
	}

	return false
}

// SetLdapId gets a reference to the given string and assigns it to the LdapId field.
func (o *UserCredentialsDto) SetLdapId(v string) {
	o.LdapId = &v
}

// GetOpenId returns the OpenId field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetOpenId() string {
	if o == nil || IsNil(o.OpenId) {
		var ret string
		return ret
	}
	return *o.OpenId
}

// GetOpenIdOk returns a tuple with the OpenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetOpenIdOk() (*string, bool) {
	if o == nil || IsNil(o.OpenId) {
		return nil, false
	}
	return o.OpenId, true
}

// HasOpenId returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasOpenId() bool {
	if o != nil && !IsNil(o.OpenId) {
		return true
	}

	return false
}

// SetOpenId gets a reference to the given string and assigns it to the OpenId field.
func (o *UserCredentialsDto) SetOpenId(v string) {
	o.OpenId = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserCredentialsDto) SetPassword(v string) {
	o.Password = &v
}

// GetPasswordLastUpdated returns the PasswordLastUpdated field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetPasswordLastUpdated() time.Time {
	if o == nil || IsNil(o.PasswordLastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.PasswordLastUpdated
}

// GetPasswordLastUpdatedOk returns a tuple with the PasswordLastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetPasswordLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PasswordLastUpdated) {
		return nil, false
	}
	return o.PasswordLastUpdated, true
}

// HasPasswordLastUpdated returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasPasswordLastUpdated() bool {
	if o != nil && !IsNil(o.PasswordLastUpdated) {
		return true
	}

	return false
}

// SetPasswordLastUpdated gets a reference to the given time.Time and assigns it to the PasswordLastUpdated field.
func (o *UserCredentialsDto) SetPasswordLastUpdated(v time.Time) {
	o.PasswordLastUpdated = &v
}

// GetPreviousPasswords returns the PreviousPasswords field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetPreviousPasswords() []string {
	if o == nil || IsNil(o.PreviousPasswords) {
		var ret []string
		return ret
	}
	return o.PreviousPasswords
}

// GetPreviousPasswordsOk returns a tuple with the PreviousPasswords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetPreviousPasswordsOk() ([]string, bool) {
	if o == nil || IsNil(o.PreviousPasswords) {
		return nil, false
	}
	return o.PreviousPasswords, true
}

// HasPreviousPasswords returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasPreviousPasswords() bool {
	if o != nil && !IsNil(o.PreviousPasswords) {
		return true
	}

	return false
}

// SetPreviousPasswords gets a reference to the given []string and assigns it to the PreviousPasswords field.
func (o *UserCredentialsDto) SetPreviousPasswords(v []string) {
	o.PreviousPasswords = v
}

// GetRestoreExpiry returns the RestoreExpiry field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetRestoreExpiry() time.Time {
	if o == nil || IsNil(o.RestoreExpiry) {
		var ret time.Time
		return ret
	}
	return *o.RestoreExpiry
}

// GetRestoreExpiryOk returns a tuple with the RestoreExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetRestoreExpiryOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RestoreExpiry) {
		return nil, false
	}
	return o.RestoreExpiry, true
}

// HasRestoreExpiry returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasRestoreExpiry() bool {
	if o != nil && !IsNil(o.RestoreExpiry) {
		return true
	}

	return false
}

// SetRestoreExpiry gets a reference to the given time.Time and assigns it to the RestoreExpiry field.
func (o *UserCredentialsDto) SetRestoreExpiry(v time.Time) {
	o.RestoreExpiry = &v
}

// GetRestoreToken returns the RestoreToken field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetRestoreToken() string {
	if o == nil || IsNil(o.RestoreToken) {
		var ret string
		return ret
	}
	return *o.RestoreToken
}

// GetRestoreTokenOk returns a tuple with the RestoreToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetRestoreTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RestoreToken) {
		return nil, false
	}
	return o.RestoreToken, true
}

// HasRestoreToken returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasRestoreToken() bool {
	if o != nil && !IsNil(o.RestoreToken) {
		return true
	}

	return false
}

// SetRestoreToken gets a reference to the given string and assigns it to the RestoreToken field.
func (o *UserCredentialsDto) SetRestoreToken(v string) {
	o.RestoreToken = &v
}

// GetSelfRegistered returns the SelfRegistered field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetSelfRegistered() bool {
	if o == nil || IsNil(o.SelfRegistered) {
		var ret bool
		return ret
	}
	return *o.SelfRegistered
}

// GetSelfRegisteredOk returns a tuple with the SelfRegistered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetSelfRegisteredOk() (*bool, bool) {
	if o == nil || IsNil(o.SelfRegistered) {
		return nil, false
	}
	return o.SelfRegistered, true
}

// HasSelfRegistered returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasSelfRegistered() bool {
	if o != nil && !IsNil(o.SelfRegistered) {
		return true
	}

	return false
}

// SetSelfRegistered gets a reference to the given bool and assigns it to the SelfRegistered field.
func (o *UserCredentialsDto) SetSelfRegistered(v bool) {
	o.SelfRegistered = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *UserCredentialsDto) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetTwoFA returns the TwoFA field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetTwoFA() bool {
	if o == nil || IsNil(o.TwoFA) {
		var ret bool
		return ret
	}
	return *o.TwoFA
}

// GetTwoFAOk returns a tuple with the TwoFA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetTwoFAOk() (*bool, bool) {
	if o == nil || IsNil(o.TwoFA) {
		return nil, false
	}
	return o.TwoFA, true
}

// HasTwoFA returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasTwoFA() bool {
	if o != nil && !IsNil(o.TwoFA) {
		return true
	}

	return false
}

// SetTwoFA gets a reference to the given bool and assigns it to the TwoFA field.
func (o *UserCredentialsDto) SetTwoFA(v bool) {
	o.TwoFA = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *UserCredentialsDto) SetUid(v string) {
	o.Uid = &v
}

// GetUserRoles returns the UserRoles field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetUserRoles() []ConfigurationSelfRegistrationRole {
	if o == nil || IsNil(o.UserRoles) {
		var ret []ConfigurationSelfRegistrationRole
		return ret
	}
	return o.UserRoles
}

// GetUserRolesOk returns a tuple with the UserRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetUserRolesOk() ([]ConfigurationSelfRegistrationRole, bool) {
	if o == nil || IsNil(o.UserRoles) {
		return nil, false
	}
	return o.UserRoles, true
}

// HasUserRoles returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasUserRoles() bool {
	if o != nil && !IsNil(o.UserRoles) {
		return true
	}

	return false
}

// SetUserRoles gets a reference to the given []ConfigurationSelfRegistrationRole and assigns it to the UserRoles field.
func (o *UserCredentialsDto) SetUserRoles(v []ConfigurationSelfRegistrationRole) {
	o.UserRoles = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserCredentialsDto) SetUsername(v string) {
	o.Username = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *UserCredentialsDto) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCredentialsDto) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *UserCredentialsDto) SetUuid(v string) {
	o.Uuid = &v
}

func (o UserCredentialsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserCredentialsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AccountExpiry) {
		toSerialize["accountExpiry"] = o.AccountExpiry
	}
	if !IsNil(o.CatDimensionConstraints) {
		toSerialize["catDimensionConstraints"] = o.CatDimensionConstraints
	}
	if !IsNil(o.CogsDimensionConstraints) {
		toSerialize["cogsDimensionConstraints"] = o.CogsDimensionConstraints
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.ExternalAuth) {
		toSerialize["externalAuth"] = o.ExternalAuth
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdToken) {
		toSerialize["idToken"] = o.IdToken
	}
	if !IsNil(o.Invitation) {
		toSerialize["invitation"] = o.Invitation
	}
	if !IsNil(o.LastLogin) {
		toSerialize["lastLogin"] = o.LastLogin
	}
	if !IsNil(o.LdapId) {
		toSerialize["ldapId"] = o.LdapId
	}
	if !IsNil(o.OpenId) {
		toSerialize["openId"] = o.OpenId
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.PasswordLastUpdated) {
		toSerialize["passwordLastUpdated"] = o.PasswordLastUpdated
	}
	if !IsNil(o.PreviousPasswords) {
		toSerialize["previousPasswords"] = o.PreviousPasswords
	}
	if !IsNil(o.RestoreExpiry) {
		toSerialize["restoreExpiry"] = o.RestoreExpiry
	}
	if !IsNil(o.RestoreToken) {
		toSerialize["restoreToken"] = o.RestoreToken
	}
	if !IsNil(o.SelfRegistered) {
		toSerialize["selfRegistered"] = o.SelfRegistered
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.TwoFA) {
		toSerialize["twoFA"] = o.TwoFA
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.UserRoles) {
		toSerialize["userRoles"] = o.UserRoles
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableUserCredentialsDto struct {
	value *UserCredentialsDto
	isSet bool
}

func (v NullableUserCredentialsDto) Get() *UserCredentialsDto {
	return v.value
}

func (v *NullableUserCredentialsDto) Set(val *UserCredentialsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCredentialsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCredentialsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCredentialsDto(val *UserCredentialsDto) *NullableUserCredentialsDto {
	return &NullableUserCredentialsDto{value: val, isSet: true}
}

func (v NullableUserCredentialsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCredentialsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
