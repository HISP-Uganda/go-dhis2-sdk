/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the DataValueContextDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataValueContextDto{}

// DataValueContextDto struct for DataValueContextDto
type DataValueContextDto struct {
	Audits  []DataValueAuditDto `json:"audits,omitempty"`
	History []DataValueDto      `json:"history,omitempty"`
}

// NewDataValueContextDto instantiates a new DataValueContextDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataValueContextDto() *DataValueContextDto {
	this := DataValueContextDto{}
	return &this
}

// NewDataValueContextDtoWithDefaults instantiates a new DataValueContextDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataValueContextDtoWithDefaults() *DataValueContextDto {
	this := DataValueContextDto{}
	return &this
}

// GetAudits returns the Audits field value if set, zero value otherwise.
func (o *DataValueContextDto) GetAudits() []DataValueAuditDto {
	if o == nil || IsNil(o.Audits) {
		var ret []DataValueAuditDto
		return ret
	}
	return o.Audits
}

// GetAuditsOk returns a tuple with the Audits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueContextDto) GetAuditsOk() ([]DataValueAuditDto, bool) {
	if o == nil || IsNil(o.Audits) {
		return nil, false
	}
	return o.Audits, true
}

// HasAudits returns a boolean if a field has been set.
func (o *DataValueContextDto) HasAudits() bool {
	if o != nil && !IsNil(o.Audits) {
		return true
	}

	return false
}

// SetAudits gets a reference to the given []DataValueAuditDto and assigns it to the Audits field.
func (o *DataValueContextDto) SetAudits(v []DataValueAuditDto) {
	o.Audits = v
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *DataValueContextDto) GetHistory() []DataValueDto {
	if o == nil || IsNil(o.History) {
		var ret []DataValueDto
		return ret
	}
	return o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueContextDto) GetHistoryOk() ([]DataValueDto, bool) {
	if o == nil || IsNil(o.History) {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *DataValueContextDto) HasHistory() bool {
	if o != nil && !IsNil(o.History) {
		return true
	}

	return false
}

// SetHistory gets a reference to the given []DataValueDto and assigns it to the History field.
func (o *DataValueContextDto) SetHistory(v []DataValueDto) {
	o.History = v
}

func (o DataValueContextDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataValueContextDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Audits) {
		toSerialize["audits"] = o.Audits
	}
	if !IsNil(o.History) {
		toSerialize["history"] = o.History
	}
	return toSerialize, nil
}

type NullableDataValueContextDto struct {
	value *DataValueContextDto
	isSet bool
}

func (v NullableDataValueContextDto) Get() *DataValueContextDto {
	return v.value
}

func (v *NullableDataValueContextDto) Set(val *DataValueContextDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataValueContextDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataValueContextDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataValueContextDto(val *DataValueContextDto) *NullableDataValueContextDto {
	return &NullableDataValueContextDto{value: val, isSet: true}
}

func (v NullableDataValueContextDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataValueContextDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
