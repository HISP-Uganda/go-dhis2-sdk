/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DataElementDomain the model 'DataElementDomain'
type DataElementDomain string

// List of DataElementDomain
const (
	DATAELEMENTDOMAIN_AGGREGATE DataElementDomain = "AGGREGATE"
	DATAELEMENTDOMAIN_TRACKER   DataElementDomain = "TRACKER"
)

// All allowed values of DataElementDomain enum
var AllowedDataElementDomainEnumValues = []DataElementDomain{
	"AGGREGATE",
	"TRACKER",
}

func (v *DataElementDomain) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataElementDomain(value)
	for _, existing := range AllowedDataElementDomainEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataElementDomain", value)
}

// NewDataElementDomainFromValue returns a pointer to a valid DataElementDomain
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataElementDomainFromValue(v string) (*DataElementDomain, error) {
	ev := DataElementDomain(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataElementDomain: valid values are %v", v, AllowedDataElementDomainEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataElementDomain) IsValid() bool {
	for _, existing := range AllowedDataElementDomainEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataElementDomain value
func (v DataElementDomain) Ptr() *DataElementDomain {
	return &v
}

type NullableDataElementDomain struct {
	value *DataElementDomain
	isSet bool
}

func (v NullableDataElementDomain) Get() *DataElementDomain {
	return v.value
}

func (v *NullableDataElementDomain) Set(val *DataElementDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableDataElementDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableDataElementDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataElementDomain(val *DataElementDomain) *NullableDataElementDomain {
	return &NullableDataElementDomain{value: val, isSet: true}
}

func (v NullableDataElementDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataElementDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
