/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// InterpretationPropertyNames the model 'InterpretationPropertyNames'
type InterpretationPropertyNames string

// List of InterpretationPropertyNames
const (
	INTERPRETATIONPROPERTYNAMES_ACCESS              InterpretationPropertyNames = "access"
	INTERPRETATIONPROPERTYNAMES_ATTRIBUTE_VALUES    InterpretationPropertyNames = "attributeValues"
	INTERPRETATIONPROPERTYNAMES_CODE                InterpretationPropertyNames = "code"
	INTERPRETATIONPROPERTYNAMES_COMMENTS            InterpretationPropertyNames = "comments"
	INTERPRETATIONPROPERTYNAMES_CREATED             InterpretationPropertyNames = "created"
	INTERPRETATIONPROPERTYNAMES_CREATED_BY          InterpretationPropertyNames = "createdBy"
	INTERPRETATIONPROPERTYNAMES_DATA_SET            InterpretationPropertyNames = "dataSet"
	INTERPRETATIONPROPERTYNAMES_DISPLAY_NAME        InterpretationPropertyNames = "displayName"
	INTERPRETATIONPROPERTYNAMES_EVENT_CHART         InterpretationPropertyNames = "eventChart"
	INTERPRETATIONPROPERTYNAMES_EVENT_REPORT        InterpretationPropertyNames = "eventReport"
	INTERPRETATIONPROPERTYNAMES_EVENT_VISUALIZATION InterpretationPropertyNames = "eventVisualization"
	INTERPRETATIONPROPERTYNAMES_FAVORITE            InterpretationPropertyNames = "favorite"
	INTERPRETATIONPROPERTYNAMES_FAVORITES           InterpretationPropertyNames = "favorites"
	INTERPRETATIONPROPERTYNAMES_HREF                InterpretationPropertyNames = "href"
	INTERPRETATIONPROPERTYNAMES_ID                  InterpretationPropertyNames = "id"
	INTERPRETATIONPROPERTYNAMES_LAST_UPDATED        InterpretationPropertyNames = "lastUpdated"
	INTERPRETATIONPROPERTYNAMES_LAST_UPDATED_BY     InterpretationPropertyNames = "lastUpdatedBy"
	INTERPRETATIONPROPERTYNAMES_LIKED_BY            InterpretationPropertyNames = "likedBy"
	INTERPRETATIONPROPERTYNAMES_LIKES               InterpretationPropertyNames = "likes"
	INTERPRETATIONPROPERTYNAMES_MAP                 InterpretationPropertyNames = "map"
	INTERPRETATIONPROPERTYNAMES_MENTIONS            InterpretationPropertyNames = "mentions"
	INTERPRETATIONPROPERTYNAMES_ORGANISATION_UNIT   InterpretationPropertyNames = "organisationUnit"
	INTERPRETATIONPROPERTYNAMES_PERIOD              InterpretationPropertyNames = "period"
	INTERPRETATIONPROPERTYNAMES_SHARING             InterpretationPropertyNames = "sharing"
	INTERPRETATIONPROPERTYNAMES_TEXT                InterpretationPropertyNames = "text"
	INTERPRETATIONPROPERTYNAMES_TRANSLATIONS        InterpretationPropertyNames = "translations"
	INTERPRETATIONPROPERTYNAMES_TYPE                InterpretationPropertyNames = "type"
	INTERPRETATIONPROPERTYNAMES_VISUALIZATION       InterpretationPropertyNames = "visualization"
)

// All allowed values of InterpretationPropertyNames enum
var AllowedInterpretationPropertyNamesEnumValues = []InterpretationPropertyNames{
	"access",
	"attributeValues",
	"code",
	"comments",
	"created",
	"createdBy",
	"dataSet",
	"displayName",
	"eventChart",
	"eventReport",
	"eventVisualization",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"likedBy",
	"likes",
	"map",
	"mentions",
	"organisationUnit",
	"period",
	"sharing",
	"text",
	"translations",
	"type",
	"visualization",
}

func (v *InterpretationPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterpretationPropertyNames(value)
	for _, existing := range AllowedInterpretationPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterpretationPropertyNames", value)
}

// NewInterpretationPropertyNamesFromValue returns a pointer to a valid InterpretationPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterpretationPropertyNamesFromValue(v string) (*InterpretationPropertyNames, error) {
	ev := InterpretationPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterpretationPropertyNames: valid values are %v", v, AllowedInterpretationPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterpretationPropertyNames) IsValid() bool {
	for _, existing := range AllowedInterpretationPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterpretationPropertyNames value
func (v InterpretationPropertyNames) Ptr() *InterpretationPropertyNames {
	return &v
}

type NullableInterpretationPropertyNames struct {
	value *InterpretationPropertyNames
	isSet bool
}

func (v NullableInterpretationPropertyNames) Get() *InterpretationPropertyNames {
	return v.value
}

func (v *NullableInterpretationPropertyNames) Set(val *InterpretationPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableInterpretationPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableInterpretationPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterpretationPropertyNames(val *InterpretationPropertyNames) *NullableInterpretationPropertyNames {
	return &NullableInterpretationPropertyNames{value: val, isSet: true}
}

func (v NullableInterpretationPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterpretationPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
