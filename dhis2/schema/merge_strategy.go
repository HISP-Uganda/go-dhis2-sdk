/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// MergeStrategy the model 'MergeStrategy'
type MergeStrategy string

// List of MergeStrategy
const (
	MERGESTRATEGY_MANUAL MergeStrategy = "MANUAL"
	MERGESTRATEGY_AUTO   MergeStrategy = "AUTO"
)

// All allowed values of MergeStrategy enum
var AllowedMergeStrategyEnumValues = []MergeStrategy{
	"MANUAL",
	"AUTO",
}

func (v *MergeStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MergeStrategy(value)
	for _, existing := range AllowedMergeStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MergeStrategy", value)
}

// NewMergeStrategyFromValue returns a pointer to a valid MergeStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMergeStrategyFromValue(v string) (*MergeStrategy, error) {
	ev := MergeStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MergeStrategy: valid values are %v", v, AllowedMergeStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MergeStrategy) IsValid() bool {
	for _, existing := range AllowedMergeStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MergeStrategy value
func (v MergeStrategy) Ptr() *MergeStrategy {
	return &v
}

type NullableMergeStrategy struct {
	value *MergeStrategy
	isSet bool
}

func (v NullableMergeStrategy) Get() *MergeStrategy {
	return v.value
}

func (v *NullableMergeStrategy) Set(val *MergeStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeStrategy(val *MergeStrategy) *NullableMergeStrategy {
	return &NullableMergeStrategy{value: val, isSet: true}
}

func (v NullableMergeStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
