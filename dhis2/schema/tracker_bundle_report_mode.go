/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TrackerBundleReportMode the model 'TrackerBundleReportMode'
type TrackerBundleReportMode string

// List of TrackerBundleReportMode
const (
	TRACKERBUNDLEREPORTMODE_FULL     TrackerBundleReportMode = "FULL"
	TRACKERBUNDLEREPORTMODE_ERRORS   TrackerBundleReportMode = "ERRORS"
	TRACKERBUNDLEREPORTMODE_WARNINGS TrackerBundleReportMode = "WARNINGS"
)

// All allowed values of TrackerBundleReportMode enum
var AllowedTrackerBundleReportModeEnumValues = []TrackerBundleReportMode{
	"FULL",
	"ERRORS",
	"WARNINGS",
}

func (v *TrackerBundleReportMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackerBundleReportMode(value)
	for _, existing := range AllowedTrackerBundleReportModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackerBundleReportMode", value)
}

// NewTrackerBundleReportModeFromValue returns a pointer to a valid TrackerBundleReportMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackerBundleReportModeFromValue(v string) (*TrackerBundleReportMode, error) {
	ev := TrackerBundleReportMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackerBundleReportMode: valid values are %v", v, AllowedTrackerBundleReportModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackerBundleReportMode) IsValid() bool {
	for _, existing := range AllowedTrackerBundleReportModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackerBundleReportMode value
func (v TrackerBundleReportMode) Ptr() *TrackerBundleReportMode {
	return &v
}

type NullableTrackerBundleReportMode struct {
	value *TrackerBundleReportMode
	isSet bool
}

func (v NullableTrackerBundleReportMode) Get() *TrackerBundleReportMode {
	return v.value
}

func (v *NullableTrackerBundleReportMode) Set(val *TrackerBundleReportMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerBundleReportMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerBundleReportMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerBundleReportMode(val *TrackerBundleReportMode) *NullableTrackerBundleReportMode {
	return &NullableTrackerBundleReportMode{value: val, isSet: true}
}

func (v NullableTrackerBundleReportMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerBundleReportMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
