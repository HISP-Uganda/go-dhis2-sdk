/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ValueTypeRenderingType the model 'ValueTypeRenderingType'
type ValueTypeRenderingType string

// List of ValueTypeRenderingType
const (
	VALUETYPERENDERINGTYPE_DEFAULT                    ValueTypeRenderingType = "DEFAULT"
	VALUETYPERENDERINGTYPE_DROPDOWN                   ValueTypeRenderingType = "DROPDOWN"
	VALUETYPERENDERINGTYPE_VERTICAL_RADIOBUTTONS      ValueTypeRenderingType = "VERTICAL_RADIOBUTTONS"
	VALUETYPERENDERINGTYPE_HORIZONTAL_RADIOBUTTONS    ValueTypeRenderingType = "HORIZONTAL_RADIOBUTTONS"
	VALUETYPERENDERINGTYPE_VERTICAL_CHECKBOXES        ValueTypeRenderingType = "VERTICAL_CHECKBOXES"
	VALUETYPERENDERINGTYPE_HORIZONTAL_CHECKBOXES      ValueTypeRenderingType = "HORIZONTAL_CHECKBOXES"
	VALUETYPERENDERINGTYPE_SHARED_HEADER_RADIOBUTTONS ValueTypeRenderingType = "SHARED_HEADER_RADIOBUTTONS"
	VALUETYPERENDERINGTYPE_ICONS_AS_BUTTONS           ValueTypeRenderingType = "ICONS_AS_BUTTONS"
	VALUETYPERENDERINGTYPE_SPINNER                    ValueTypeRenderingType = "SPINNER"
	VALUETYPERENDERINGTYPE_ICON                       ValueTypeRenderingType = "ICON"
	VALUETYPERENDERINGTYPE_TOGGLE                     ValueTypeRenderingType = "TOGGLE"
	VALUETYPERENDERINGTYPE_VALUE                      ValueTypeRenderingType = "VALUE"
	VALUETYPERENDERINGTYPE_SLIDER                     ValueTypeRenderingType = "SLIDER"
	VALUETYPERENDERINGTYPE_LINEAR_SCALE               ValueTypeRenderingType = "LINEAR_SCALE"
	VALUETYPERENDERINGTYPE_AUTOCOMPLETE               ValueTypeRenderingType = "AUTOCOMPLETE"
	VALUETYPERENDERINGTYPE_QR_CODE                    ValueTypeRenderingType = "QR_CODE"
	VALUETYPERENDERINGTYPE_BAR_CODE                   ValueTypeRenderingType = "BAR_CODE"
	VALUETYPERENDERINGTYPE_GS1_DATAMATRIX             ValueTypeRenderingType = "GS1_DATAMATRIX"
	VALUETYPERENDERINGTYPE_CANVAS                     ValueTypeRenderingType = "CANVAS"
)

// All allowed values of ValueTypeRenderingType enum
var AllowedValueTypeRenderingTypeEnumValues = []ValueTypeRenderingType{
	"DEFAULT",
	"DROPDOWN",
	"VERTICAL_RADIOBUTTONS",
	"HORIZONTAL_RADIOBUTTONS",
	"VERTICAL_CHECKBOXES",
	"HORIZONTAL_CHECKBOXES",
	"SHARED_HEADER_RADIOBUTTONS",
	"ICONS_AS_BUTTONS",
	"SPINNER",
	"ICON",
	"TOGGLE",
	"VALUE",
	"SLIDER",
	"LINEAR_SCALE",
	"AUTOCOMPLETE",
	"QR_CODE",
	"BAR_CODE",
	"GS1_DATAMATRIX",
	"CANVAS",
}

func (v *ValueTypeRenderingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValueTypeRenderingType(value)
	for _, existing := range AllowedValueTypeRenderingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValueTypeRenderingType", value)
}

// NewValueTypeRenderingTypeFromValue returns a pointer to a valid ValueTypeRenderingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValueTypeRenderingTypeFromValue(v string) (*ValueTypeRenderingType, error) {
	ev := ValueTypeRenderingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValueTypeRenderingType: valid values are %v", v, AllowedValueTypeRenderingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValueTypeRenderingType) IsValid() bool {
	for _, existing := range AllowedValueTypeRenderingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValueTypeRenderingType value
func (v ValueTypeRenderingType) Ptr() *ValueTypeRenderingType {
	return &v
}

type NullableValueTypeRenderingType struct {
	value *ValueTypeRenderingType
	isSet bool
}

func (v NullableValueTypeRenderingType) Get() *ValueTypeRenderingType {
	return v.value
}

func (v *NullableValueTypeRenderingType) Set(val *ValueTypeRenderingType) {
	v.value = val
	v.isSet = true
}

func (v NullableValueTypeRenderingType) IsSet() bool {
	return v.isSet
}

func (v *NullableValueTypeRenderingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueTypeRenderingType(val *ValueTypeRenderingType) *NullableValueTypeRenderingType {
	return &NullableValueTypeRenderingType{value: val, isSet: true}
}

func (v NullableValueTypeRenderingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueTypeRenderingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
