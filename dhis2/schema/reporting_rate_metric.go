/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ReportingRateMetric the model 'ReportingRateMetric'
type ReportingRateMetric string

// List of ReportingRateMetric
const (
	REPORTINGRATEMETRIC_REPORTING_RATE         ReportingRateMetric = "REPORTING_RATE"
	REPORTINGRATEMETRIC_REPORTING_RATE_ON_TIME ReportingRateMetric = "REPORTING_RATE_ON_TIME"
	REPORTINGRATEMETRIC_ACTUAL_REPORTS         ReportingRateMetric = "ACTUAL_REPORTS"
	REPORTINGRATEMETRIC_ACTUAL_REPORTS_ON_TIME ReportingRateMetric = "ACTUAL_REPORTS_ON_TIME"
	REPORTINGRATEMETRIC_EXPECTED_REPORTS       ReportingRateMetric = "EXPECTED_REPORTS"
)

// All allowed values of ReportingRateMetric enum
var AllowedReportingRateMetricEnumValues = []ReportingRateMetric{
	"REPORTING_RATE",
	"REPORTING_RATE_ON_TIME",
	"ACTUAL_REPORTS",
	"ACTUAL_REPORTS_ON_TIME",
	"EXPECTED_REPORTS",
}

func (v *ReportingRateMetric) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportingRateMetric(value)
	for _, existing := range AllowedReportingRateMetricEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportingRateMetric", value)
}

// NewReportingRateMetricFromValue returns a pointer to a valid ReportingRateMetric
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportingRateMetricFromValue(v string) (*ReportingRateMetric, error) {
	ev := ReportingRateMetric(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportingRateMetric: valid values are %v", v, AllowedReportingRateMetricEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportingRateMetric) IsValid() bool {
	for _, existing := range AllowedReportingRateMetricEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReportingRateMetric value
func (v ReportingRateMetric) Ptr() *ReportingRateMetric {
	return &v
}

type NullableReportingRateMetric struct {
	value *ReportingRateMetric
	isSet bool
}

func (v NullableReportingRateMetric) Get() *ReportingRateMetric {
	return v.value
}

func (v *NullableReportingRateMetric) Set(val *ReportingRateMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableReportingRateMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableReportingRateMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportingRateMetric(val *ReportingRateMetric) *NullableReportingRateMetric {
	return &NullableReportingRateMetric{value: val, isSet: true}
}

func (v NullableReportingRateMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportingRateMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
