/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RelationshipItemParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipItemParams{}

// RelationshipItemParams struct for RelationshipItemParams
type RelationshipItemParams struct {
	Enrollment    *EnrollmentParams    `json:"enrollment,omitempty"`
	Event         *EventParams         `json:"event,omitempty"`
	Relationship  *RelationshipParams  `json:"relationship,omitempty"`
	TrackedEntity *TrackedEntityParams `json:"trackedEntity,omitempty"`
}

// NewRelationshipItemParams instantiates a new RelationshipItemParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipItemParams() *RelationshipItemParams {
	this := RelationshipItemParams{}
	return &this
}

// NewRelationshipItemParamsWithDefaults instantiates a new RelationshipItemParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipItemParamsWithDefaults() *RelationshipItemParams {
	this := RelationshipItemParams{}
	return &this
}

// GetEnrollment returns the Enrollment field value if set, zero value otherwise.
func (o *RelationshipItemParams) GetEnrollment() EnrollmentParams {
	if o == nil || IsNil(o.Enrollment) {
		var ret EnrollmentParams
		return ret
	}
	return *o.Enrollment
}

// GetEnrollmentOk returns a tuple with the Enrollment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemParams) GetEnrollmentOk() (*EnrollmentParams, bool) {
	if o == nil || IsNil(o.Enrollment) {
		return nil, false
	}
	return o.Enrollment, true
}

// HasEnrollment returns a boolean if a field has been set.
func (o *RelationshipItemParams) HasEnrollment() bool {
	if o != nil && !IsNil(o.Enrollment) {
		return true
	}

	return false
}

// SetEnrollment gets a reference to the given EnrollmentParams and assigns it to the Enrollment field.
func (o *RelationshipItemParams) SetEnrollment(v EnrollmentParams) {
	o.Enrollment = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *RelationshipItemParams) GetEvent() EventParams {
	if o == nil || IsNil(o.Event) {
		var ret EventParams
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemParams) GetEventOk() (*EventParams, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *RelationshipItemParams) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given EventParams and assigns it to the Event field.
func (o *RelationshipItemParams) SetEvent(v EventParams) {
	o.Event = &v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *RelationshipItemParams) GetRelationship() RelationshipParams {
	if o == nil || IsNil(o.Relationship) {
		var ret RelationshipParams
		return ret
	}
	return *o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemParams) GetRelationshipOk() (*RelationshipParams, bool) {
	if o == nil || IsNil(o.Relationship) {
		return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *RelationshipItemParams) HasRelationship() bool {
	if o != nil && !IsNil(o.Relationship) {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given RelationshipParams and assigns it to the Relationship field.
func (o *RelationshipItemParams) SetRelationship(v RelationshipParams) {
	o.Relationship = &v
}

// GetTrackedEntity returns the TrackedEntity field value if set, zero value otherwise.
func (o *RelationshipItemParams) GetTrackedEntity() TrackedEntityParams {
	if o == nil || IsNil(o.TrackedEntity) {
		var ret TrackedEntityParams
		return ret
	}
	return *o.TrackedEntity
}

// GetTrackedEntityOk returns a tuple with the TrackedEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemParams) GetTrackedEntityOk() (*TrackedEntityParams, bool) {
	if o == nil || IsNil(o.TrackedEntity) {
		return nil, false
	}
	return o.TrackedEntity, true
}

// HasTrackedEntity returns a boolean if a field has been set.
func (o *RelationshipItemParams) HasTrackedEntity() bool {
	if o != nil && !IsNil(o.TrackedEntity) {
		return true
	}

	return false
}

// SetTrackedEntity gets a reference to the given TrackedEntityParams and assigns it to the TrackedEntity field.
func (o *RelationshipItemParams) SetTrackedEntity(v TrackedEntityParams) {
	o.TrackedEntity = &v
}

func (o RelationshipItemParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipItemParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enrollment) {
		toSerialize["enrollment"] = o.Enrollment
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.Relationship) {
		toSerialize["relationship"] = o.Relationship
	}
	if !IsNil(o.TrackedEntity) {
		toSerialize["trackedEntity"] = o.TrackedEntity
	}
	return toSerialize, nil
}

type NullableRelationshipItemParams struct {
	value *RelationshipItemParams
	isSet bool
}

func (v NullableRelationshipItemParams) Get() *RelationshipItemParams {
	return v.value
}

func (v *NullableRelationshipItemParams) Set(val *RelationshipItemParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipItemParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipItemParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipItemParams(val *RelationshipItemParams) *NullableRelationshipItemParams {
	return &NullableRelationshipItemParams{value: val, isSet: true}
}

func (v NullableRelationshipItemParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipItemParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
