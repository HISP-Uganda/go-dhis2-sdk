/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ObjectCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectCount{}

// ObjectCount struct for ObjectCount
type ObjectCount struct {
	ObjectCounts *map[string]int64 `json:"objectCounts,omitempty"`
}

// NewObjectCount instantiates a new ObjectCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectCount() *ObjectCount {
	this := ObjectCount{}
	return &this
}

// NewObjectCountWithDefaults instantiates a new ObjectCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectCountWithDefaults() *ObjectCount {
	this := ObjectCount{}
	return &this
}

// GetObjectCounts returns the ObjectCounts field value if set, zero value otherwise.
func (o *ObjectCount) GetObjectCounts() map[string]int64 {
	if o == nil || IsNil(o.ObjectCounts) {
		var ret map[string]int64
		return ret
	}
	return *o.ObjectCounts
}

// GetObjectCountsOk returns a tuple with the ObjectCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectCount) GetObjectCountsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.ObjectCounts) {
		return nil, false
	}
	return o.ObjectCounts, true
}

// HasObjectCounts returns a boolean if a field has been set.
func (o *ObjectCount) HasObjectCounts() bool {
	if o != nil && !IsNil(o.ObjectCounts) {
		return true
	}

	return false
}

// SetObjectCounts gets a reference to the given map[string]int64 and assigns it to the ObjectCounts field.
func (o *ObjectCount) SetObjectCounts(v map[string]int64) {
	o.ObjectCounts = &v
}

func (o ObjectCount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectCounts) {
		toSerialize["objectCounts"] = o.ObjectCounts
	}
	return toSerialize, nil
}

type NullableObjectCount struct {
	value *ObjectCount
	isSet bool
}

func (v NullableObjectCount) Get() *ObjectCount {
	return v.value
}

func (v *NullableObjectCount) Set(val *ObjectCount) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectCount) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectCount(val *ObjectCount) *NullableObjectCount {
	return &NullableObjectCount{value: val, isSet: true}
}

func (v NullableObjectCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
