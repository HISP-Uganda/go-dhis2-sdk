/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// OptionSetPropertyNames the model 'OptionSetPropertyNames'
type OptionSetPropertyNames string

// List of OptionSetPropertyNames
const (
	OPTIONSETPROPERTYNAMES_ACCESS           OptionSetPropertyNames = "access"
	OPTIONSETPROPERTYNAMES_ATTRIBUTE_VALUES OptionSetPropertyNames = "attributeValues"
	OPTIONSETPROPERTYNAMES_CODE             OptionSetPropertyNames = "code"
	OPTIONSETPROPERTYNAMES_CREATED          OptionSetPropertyNames = "created"
	OPTIONSETPROPERTYNAMES_CREATED_BY       OptionSetPropertyNames = "createdBy"
	OPTIONSETPROPERTYNAMES_DESCRIPTION      OptionSetPropertyNames = "description"
	OPTIONSETPROPERTYNAMES_DISPLAY_NAME     OptionSetPropertyNames = "displayName"
	OPTIONSETPROPERTYNAMES_FAVORITE         OptionSetPropertyNames = "favorite"
	OPTIONSETPROPERTYNAMES_FAVORITES        OptionSetPropertyNames = "favorites"
	OPTIONSETPROPERTYNAMES_HREF             OptionSetPropertyNames = "href"
	OPTIONSETPROPERTYNAMES_ID               OptionSetPropertyNames = "id"
	OPTIONSETPROPERTYNAMES_LAST_UPDATED     OptionSetPropertyNames = "lastUpdated"
	OPTIONSETPROPERTYNAMES_LAST_UPDATED_BY  OptionSetPropertyNames = "lastUpdatedBy"
	OPTIONSETPROPERTYNAMES_NAME             OptionSetPropertyNames = "name"
	OPTIONSETPROPERTYNAMES_OPTIONS          OptionSetPropertyNames = "options"
	OPTIONSETPROPERTYNAMES_SHARING          OptionSetPropertyNames = "sharing"
	OPTIONSETPROPERTYNAMES_TRANSLATIONS     OptionSetPropertyNames = "translations"
	OPTIONSETPROPERTYNAMES_VALUE_TYPE       OptionSetPropertyNames = "valueType"
	OPTIONSETPROPERTYNAMES_VERSION          OptionSetPropertyNames = "version"
)

// All allowed values of OptionSetPropertyNames enum
var AllowedOptionSetPropertyNamesEnumValues = []OptionSetPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"options",
	"sharing",
	"translations",
	"valueType",
	"version",
}

func (v *OptionSetPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OptionSetPropertyNames(value)
	for _, existing := range AllowedOptionSetPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OptionSetPropertyNames", value)
}

// NewOptionSetPropertyNamesFromValue returns a pointer to a valid OptionSetPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOptionSetPropertyNamesFromValue(v string) (*OptionSetPropertyNames, error) {
	ev := OptionSetPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OptionSetPropertyNames: valid values are %v", v, AllowedOptionSetPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OptionSetPropertyNames) IsValid() bool {
	for _, existing := range AllowedOptionSetPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OptionSetPropertyNames value
func (v OptionSetPropertyNames) Ptr() *OptionSetPropertyNames {
	return &v
}

type NullableOptionSetPropertyNames struct {
	value *OptionSetPropertyNames
	isSet bool
}

func (v NullableOptionSetPropertyNames) Get() *OptionSetPropertyNames {
	return v.value
}

func (v *NullableOptionSetPropertyNames) Set(val *OptionSetPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionSetPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionSetPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionSetPropertyNames(val *OptionSetPropertyNames) *NullableOptionSetPropertyNames {
	return &NullableOptionSetPropertyNames{value: val, isSet: true}
}

func (v NullableOptionSetPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionSetPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
