/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// Position the model 'Position'
type Position string

// List of Position
const (
	POSITION_START Position = "START"
	POSITION_END   Position = "END"
)

// All allowed values of Position enum
var AllowedPositionEnumValues = []Position{
	"START",
	"END",
}

func (v *Position) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Position(value)
	for _, existing := range AllowedPositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Position", value)
}

// NewPositionFromValue returns a pointer to a valid Position
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPositionFromValue(v string) (*Position, error) {
	ev := Position(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Position: valid values are %v", v, AllowedPositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Position) IsValid() bool {
	for _, existing := range AllowedPositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Position value
func (v Position) Ptr() *Position {
	return &v
}

type NullablePosition struct {
	value *Position
	isSet bool
}

func (v NullablePosition) Get() *Position {
	return v.value
}

func (v *NullablePosition) Set(val *Position) {
	v.value = val
	v.isSet = true
}

func (v NullablePosition) IsSet() bool {
	return v.isSet
}

func (v *NullablePosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePosition(val *Position) *NullablePosition {
	return &NullablePosition{value: val, isSet: true}
}

func (v NullablePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
