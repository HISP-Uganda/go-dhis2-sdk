/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ProgramRulePropertyNames the model 'ProgramRulePropertyNames'
type ProgramRulePropertyNames string

// List of ProgramRulePropertyNames
const (
	PROGRAMRULEPROPERTYNAMES_ACCESS               ProgramRulePropertyNames = "access"
	PROGRAMRULEPROPERTYNAMES_ATTRIBUTE_VALUES     ProgramRulePropertyNames = "attributeValues"
	PROGRAMRULEPROPERTYNAMES_CODE                 ProgramRulePropertyNames = "code"
	PROGRAMRULEPROPERTYNAMES_CONDITION            ProgramRulePropertyNames = "condition"
	PROGRAMRULEPROPERTYNAMES_CREATED              ProgramRulePropertyNames = "created"
	PROGRAMRULEPROPERTYNAMES_CREATED_BY           ProgramRulePropertyNames = "createdBy"
	PROGRAMRULEPROPERTYNAMES_DESCRIPTION          ProgramRulePropertyNames = "description"
	PROGRAMRULEPROPERTYNAMES_DISPLAY_NAME         ProgramRulePropertyNames = "displayName"
	PROGRAMRULEPROPERTYNAMES_FAVORITE             ProgramRulePropertyNames = "favorite"
	PROGRAMRULEPROPERTYNAMES_FAVORITES            ProgramRulePropertyNames = "favorites"
	PROGRAMRULEPROPERTYNAMES_HREF                 ProgramRulePropertyNames = "href"
	PROGRAMRULEPROPERTYNAMES_ID                   ProgramRulePropertyNames = "id"
	PROGRAMRULEPROPERTYNAMES_LAST_UPDATED         ProgramRulePropertyNames = "lastUpdated"
	PROGRAMRULEPROPERTYNAMES_LAST_UPDATED_BY      ProgramRulePropertyNames = "lastUpdatedBy"
	PROGRAMRULEPROPERTYNAMES_NAME                 ProgramRulePropertyNames = "name"
	PROGRAMRULEPROPERTYNAMES_PRIORITY             ProgramRulePropertyNames = "priority"
	PROGRAMRULEPROPERTYNAMES_PROGRAM              ProgramRulePropertyNames = "program"
	PROGRAMRULEPROPERTYNAMES_PROGRAM_RULE_ACTIONS ProgramRulePropertyNames = "programRuleActions"
	PROGRAMRULEPROPERTYNAMES_PROGRAM_STAGE        ProgramRulePropertyNames = "programStage"
	PROGRAMRULEPROPERTYNAMES_SHARING              ProgramRulePropertyNames = "sharing"
	PROGRAMRULEPROPERTYNAMES_TRANSLATIONS         ProgramRulePropertyNames = "translations"
)

// All allowed values of ProgramRulePropertyNames enum
var AllowedProgramRulePropertyNamesEnumValues = []ProgramRulePropertyNames{
	"access",
	"attributeValues",
	"code",
	"condition",
	"created",
	"createdBy",
	"description",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"priority",
	"program",
	"programRuleActions",
	"programStage",
	"sharing",
	"translations",
}

func (v *ProgramRulePropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProgramRulePropertyNames(value)
	for _, existing := range AllowedProgramRulePropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProgramRulePropertyNames", value)
}

// NewProgramRulePropertyNamesFromValue returns a pointer to a valid ProgramRulePropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProgramRulePropertyNamesFromValue(v string) (*ProgramRulePropertyNames, error) {
	ev := ProgramRulePropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProgramRulePropertyNames: valid values are %v", v, AllowedProgramRulePropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProgramRulePropertyNames) IsValid() bool {
	for _, existing := range AllowedProgramRulePropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramRulePropertyNames value
func (v ProgramRulePropertyNames) Ptr() *ProgramRulePropertyNames {
	return &v
}

type NullableProgramRulePropertyNames struct {
	value *ProgramRulePropertyNames
	isSet bool
}

func (v NullableProgramRulePropertyNames) Get() *ProgramRulePropertyNames {
	return v.value
}

func (v *NullableProgramRulePropertyNames) Set(val *ProgramRulePropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramRulePropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramRulePropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramRulePropertyNames(val *ProgramRulePropertyNames) *NullableProgramRulePropertyNames {
	return &NullableProgramRulePropertyNames{value: val, isSet: true}
}

func (v NullableProgramRulePropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramRulePropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
