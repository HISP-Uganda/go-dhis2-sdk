/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ErrorReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorReport{}

// ErrorReport struct for ErrorReport
type ErrorReport struct {
	Args            []string      `json:"args,omitempty"`
	ErrorCode       ErrorCode     `json:"errorCode"`
	ErrorKlass      *string       `json:"errorKlass,omitempty"`
	ErrorProperties []interface{} `json:"errorProperties"`
	ErrorProperty   *string       `json:"errorProperty,omitempty"`
	MainId          *string       `json:"mainId,omitempty"`
	MainKlass       *string       `json:"mainKlass,omitempty"`
	Message         *string       `json:"message,omitempty"`
	// The actual type is unknown.   (Java type was: `class java.lang.Object`)
	Value *Any `json:"value,omitempty"`
}

type _ErrorReport ErrorReport

// NewErrorReport instantiates a new ErrorReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorReport(errorCode ErrorCode, errorProperties []interface{}) *ErrorReport {
	this := ErrorReport{}
	this.ErrorCode = errorCode
	this.ErrorProperties = errorProperties
	return &this
}

// NewErrorReportWithDefaults instantiates a new ErrorReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorReportWithDefaults() *ErrorReport {
	this := ErrorReport{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *ErrorReport) GetArgs() []string {
	if o == nil || IsNil(o.Args) {
		var ret []string
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorReport) GetArgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *ErrorReport) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *ErrorReport) SetArgs(v []string) {
	o.Args = v
}

// GetErrorCode returns the ErrorCode field value
func (o *ErrorReport) GetErrorCode() ErrorCode {
	if o == nil {
		var ret ErrorCode
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *ErrorReport) GetErrorCodeOk() (*ErrorCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *ErrorReport) SetErrorCode(v ErrorCode) {
	o.ErrorCode = v
}

// GetErrorKlass returns the ErrorKlass field value if set, zero value otherwise.
func (o *ErrorReport) GetErrorKlass() string {
	if o == nil || IsNil(o.ErrorKlass) {
		var ret string
		return ret
	}
	return *o.ErrorKlass
}

// GetErrorKlassOk returns a tuple with the ErrorKlass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorReport) GetErrorKlassOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorKlass) {
		return nil, false
	}
	return o.ErrorKlass, true
}

// HasErrorKlass returns a boolean if a field has been set.
func (o *ErrorReport) HasErrorKlass() bool {
	if o != nil && !IsNil(o.ErrorKlass) {
		return true
	}

	return false
}

// SetErrorKlass gets a reference to the given string and assigns it to the ErrorKlass field.
func (o *ErrorReport) SetErrorKlass(v string) {
	o.ErrorKlass = &v
}

// GetErrorProperties returns the ErrorProperties field value
func (o *ErrorReport) GetErrorProperties() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.ErrorProperties
}

// GetErrorPropertiesOk returns a tuple with the ErrorProperties field value
// and a boolean to check if the value has been set.
func (o *ErrorReport) GetErrorPropertiesOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorProperties, true
}

// SetErrorProperties sets field value
func (o *ErrorReport) SetErrorProperties(v []interface{}) {
	o.ErrorProperties = v
}

// GetErrorProperty returns the ErrorProperty field value if set, zero value otherwise.
func (o *ErrorReport) GetErrorProperty() string {
	if o == nil || IsNil(o.ErrorProperty) {
		var ret string
		return ret
	}
	return *o.ErrorProperty
}

// GetErrorPropertyOk returns a tuple with the ErrorProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorReport) GetErrorPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorProperty) {
		return nil, false
	}
	return o.ErrorProperty, true
}

// HasErrorProperty returns a boolean if a field has been set.
func (o *ErrorReport) HasErrorProperty() bool {
	if o != nil && !IsNil(o.ErrorProperty) {
		return true
	}

	return false
}

// SetErrorProperty gets a reference to the given string and assigns it to the ErrorProperty field.
func (o *ErrorReport) SetErrorProperty(v string) {
	o.ErrorProperty = &v
}

// GetMainId returns the MainId field value if set, zero value otherwise.
func (o *ErrorReport) GetMainId() string {
	if o == nil || IsNil(o.MainId) {
		var ret string
		return ret
	}
	return *o.MainId
}

// GetMainIdOk returns a tuple with the MainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorReport) GetMainIdOk() (*string, bool) {
	if o == nil || IsNil(o.MainId) {
		return nil, false
	}
	return o.MainId, true
}

// HasMainId returns a boolean if a field has been set.
func (o *ErrorReport) HasMainId() bool {
	if o != nil && !IsNil(o.MainId) {
		return true
	}

	return false
}

// SetMainId gets a reference to the given string and assigns it to the MainId field.
func (o *ErrorReport) SetMainId(v string) {
	o.MainId = &v
}

// GetMainKlass returns the MainKlass field value if set, zero value otherwise.
func (o *ErrorReport) GetMainKlass() string {
	if o == nil || IsNil(o.MainKlass) {
		var ret string
		return ret
	}
	return *o.MainKlass
}

// GetMainKlassOk returns a tuple with the MainKlass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorReport) GetMainKlassOk() (*string, bool) {
	if o == nil || IsNil(o.MainKlass) {
		return nil, false
	}
	return o.MainKlass, true
}

// HasMainKlass returns a boolean if a field has been set.
func (o *ErrorReport) HasMainKlass() bool {
	if o != nil && !IsNil(o.MainKlass) {
		return true
	}

	return false
}

// SetMainKlass gets a reference to the given string and assigns it to the MainKlass field.
func (o *ErrorReport) SetMainKlass(v string) {
	o.MainKlass = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorReport) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorReport) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorReport) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorReport) SetMessage(v string) {
	o.Message = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ErrorReport) GetValue() Any {
	if o == nil || IsNil(o.Value) {
		var ret Any
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorReport) GetValueOk() (*Any, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ErrorReport) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given Any and assigns it to the Value field.
func (o *ErrorReport) SetValue(v Any) {
	o.Value = &v
}

func (o ErrorReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	toSerialize["errorCode"] = o.ErrorCode
	if !IsNil(o.ErrorKlass) {
		toSerialize["errorKlass"] = o.ErrorKlass
	}
	toSerialize["errorProperties"] = o.ErrorProperties
	if !IsNil(o.ErrorProperty) {
		toSerialize["errorProperty"] = o.ErrorProperty
	}
	if !IsNil(o.MainId) {
		toSerialize["mainId"] = o.MainId
	}
	if !IsNil(o.MainKlass) {
		toSerialize["mainKlass"] = o.MainKlass
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *ErrorReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errorCode",
		"errorProperties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorReport := _ErrorReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorReport)

	if err != nil {
		return err
	}

	*o = ErrorReport(varErrorReport)

	return err
}

type NullableErrorReport struct {
	value *ErrorReport
	isSet bool
}

func (v NullableErrorReport) Get() *ErrorReport {
	return v.value
}

func (v *NullableErrorReport) Set(val *ErrorReport) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorReport) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorReport(val *ErrorReport) *NullableErrorReport {
	return &NullableErrorReport{value: val, isSet: true}
}

func (v NullableErrorReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
