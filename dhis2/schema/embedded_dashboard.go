/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EmbeddedDashboard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddedDashboard{}

// EmbeddedDashboard struct for EmbeddedDashboard
type EmbeddedDashboard struct {
	Id       *string          `json:"id,omitempty"`
	Options  *EmbeddedOptions `json:"options,omitempty"`
	Provider EmbeddedProvider `json:"provider"`
}

type _EmbeddedDashboard EmbeddedDashboard

// NewEmbeddedDashboard instantiates a new EmbeddedDashboard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddedDashboard(provider EmbeddedProvider) *EmbeddedDashboard {
	this := EmbeddedDashboard{}
	this.Provider = provider
	return &this
}

// NewEmbeddedDashboardWithDefaults instantiates a new EmbeddedDashboard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddedDashboardWithDefaults() *EmbeddedDashboard {
	this := EmbeddedDashboard{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmbeddedDashboard) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddedDashboard) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmbeddedDashboard) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EmbeddedDashboard) SetId(v string) {
	o.Id = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *EmbeddedDashboard) GetOptions() EmbeddedOptions {
	if o == nil || IsNil(o.Options) {
		var ret EmbeddedOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddedDashboard) GetOptionsOk() (*EmbeddedOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *EmbeddedDashboard) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given EmbeddedOptions and assigns it to the Options field.
func (o *EmbeddedDashboard) SetOptions(v EmbeddedOptions) {
	o.Options = &v
}

// GetProvider returns the Provider field value
func (o *EmbeddedDashboard) GetProvider() EmbeddedProvider {
	if o == nil {
		var ret EmbeddedProvider
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *EmbeddedDashboard) GetProviderOk() (*EmbeddedProvider, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *EmbeddedDashboard) SetProvider(v EmbeddedProvider) {
	o.Provider = v
}

func (o EmbeddedDashboard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddedDashboard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	toSerialize["provider"] = o.Provider
	return toSerialize, nil
}

func (o *EmbeddedDashboard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddedDashboard := _EmbeddedDashboard{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbeddedDashboard)

	if err != nil {
		return err
	}

	*o = EmbeddedDashboard(varEmbeddedDashboard)

	return err
}

type NullableEmbeddedDashboard struct {
	value *EmbeddedDashboard
	isSet bool
}

func (v NullableEmbeddedDashboard) Get() *EmbeddedDashboard {
	return v.value
}

func (v *NullableEmbeddedDashboard) Set(val *EmbeddedDashboard) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddedDashboard) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddedDashboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddedDashboard(val *EmbeddedDashboard) *NullableEmbeddedDashboard {
	return &NullableEmbeddedDashboard{value: val, isSet: true}
}

func (v NullableEmbeddedDashboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddedDashboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
