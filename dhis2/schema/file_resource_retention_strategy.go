/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// FileResourceRetentionStrategy the model 'FileResourceRetentionStrategy'
type FileResourceRetentionStrategy string

// List of FileResourceRetentionStrategy
const (
	FILERESOURCERETENTIONSTRATEGY_NONE         FileResourceRetentionStrategy = "NONE"
	FILERESOURCERETENTIONSTRATEGY_THREE_MONTHS FileResourceRetentionStrategy = "THREE_MONTHS"
	FILERESOURCERETENTIONSTRATEGY_ONE_YEAR     FileResourceRetentionStrategy = "ONE_YEAR"
	FILERESOURCERETENTIONSTRATEGY_FOREVER      FileResourceRetentionStrategy = "FOREVER"
)

// All allowed values of FileResourceRetentionStrategy enum
var AllowedFileResourceRetentionStrategyEnumValues = []FileResourceRetentionStrategy{
	"NONE",
	"THREE_MONTHS",
	"ONE_YEAR",
	"FOREVER",
}

func (v *FileResourceRetentionStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileResourceRetentionStrategy(value)
	for _, existing := range AllowedFileResourceRetentionStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileResourceRetentionStrategy", value)
}

// NewFileResourceRetentionStrategyFromValue returns a pointer to a valid FileResourceRetentionStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileResourceRetentionStrategyFromValue(v string) (*FileResourceRetentionStrategy, error) {
	ev := FileResourceRetentionStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileResourceRetentionStrategy: valid values are %v", v, AllowedFileResourceRetentionStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileResourceRetentionStrategy) IsValid() bool {
	for _, existing := range AllowedFileResourceRetentionStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileResourceRetentionStrategy value
func (v FileResourceRetentionStrategy) Ptr() *FileResourceRetentionStrategy {
	return &v
}

type NullableFileResourceRetentionStrategy struct {
	value *FileResourceRetentionStrategy
	isSet bool
}

func (v NullableFileResourceRetentionStrategy) Get() *FileResourceRetentionStrategy {
	return v.value
}

func (v *NullableFileResourceRetentionStrategy) Set(val *FileResourceRetentionStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableFileResourceRetentionStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableFileResourceRetentionStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileResourceRetentionStrategy(val *FileResourceRetentionStrategy) *NullableFileResourceRetentionStrategy {
	return &NullableFileResourceRetentionStrategy{value: val, isSet: true}
}

func (v NullableFileResourceRetentionStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileResourceRetentionStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
