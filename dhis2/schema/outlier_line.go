/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the OutlierLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutlierLine{}

// OutlierLine struct for OutlierLine
type OutlierLine struct {
	Enabled *bool    `json:"enabled,omitempty"`
	Value   *float64 `json:"value,omitempty"`
}

// NewOutlierLine instantiates a new OutlierLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutlierLine() *OutlierLine {
	this := OutlierLine{}
	return &this
}

// NewOutlierLineWithDefaults instantiates a new OutlierLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutlierLineWithDefaults() *OutlierLine {
	this := OutlierLine{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *OutlierLine) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierLine) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *OutlierLine) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *OutlierLine) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OutlierLine) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierLine) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OutlierLine) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *OutlierLine) SetValue(v float64) {
	o.Value = &v
}

func (o OutlierLine) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutlierLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableOutlierLine struct {
	value *OutlierLine
	isSet bool
}

func (v NullableOutlierLine) Get() *OutlierLine {
	return v.value
}

func (v *NullableOutlierLine) Set(val *OutlierLine) {
	v.value = val
	v.isSet = true
}

func (v NullableOutlierLine) IsSet() bool {
	return v.isSet
}

func (v *NullableOutlierLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutlierLine(val *OutlierLine) *NullableOutlierLine {
	return &NullableOutlierLine{value: val, isSet: true}
}

func (v NullableOutlierLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutlierLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
