/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesAggregateDataExchange the model 'PropertyNamesAggregateDataExchange'
type PropertyNamesAggregateDataExchange string

// List of PropertyNames_AggregateDataExchange
const (
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_ACCESS              PropertyNamesAggregateDataExchange = "access"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_ATTRIBUTE_VALUES    PropertyNamesAggregateDataExchange = "attributeValues"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_CODE                PropertyNamesAggregateDataExchange = "code"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_CREATED             PropertyNamesAggregateDataExchange = "created"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_CREATED_BY          PropertyNamesAggregateDataExchange = "createdBy"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_DISPLAY_NAME        PropertyNamesAggregateDataExchange = "displayName"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_EXTERNAL_ACCESS     PropertyNamesAggregateDataExchange = "externalAccess"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_FAVORITE            PropertyNamesAggregateDataExchange = "favorite"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_FAVORITES           PropertyNamesAggregateDataExchange = "favorites"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_HREF                PropertyNamesAggregateDataExchange = "href"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_ID                  PropertyNamesAggregateDataExchange = "id"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_LAST_UPDATED        PropertyNamesAggregateDataExchange = "lastUpdated"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_LAST_UPDATED_BY     PropertyNamesAggregateDataExchange = "lastUpdatedBy"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_NAME                PropertyNamesAggregateDataExchange = "name"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_PUBLIC_ACCESS       PropertyNamesAggregateDataExchange = "publicAccess"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_SHARING             PropertyNamesAggregateDataExchange = "sharing"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_SOURCE              PropertyNamesAggregateDataExchange = "source"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_TARGET              PropertyNamesAggregateDataExchange = "target"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_TRANSLATIONS        PropertyNamesAggregateDataExchange = "translations"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_USER                PropertyNamesAggregateDataExchange = "user"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_USER_ACCESSES       PropertyNamesAggregateDataExchange = "userAccesses"
	PROPERTYNAMESAGGREGATEDATAEXCHANGE_USER_GROUP_ACCESSES PropertyNamesAggregateDataExchange = "userGroupAccesses"
)

// All allowed values of PropertyNamesAggregateDataExchange enum
var AllowedPropertyNamesAggregateDataExchangeEnumValues = []PropertyNamesAggregateDataExchange{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"source",
	"target",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesAggregateDataExchange) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesAggregateDataExchange(value)
	for _, existing := range AllowedPropertyNamesAggregateDataExchangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesAggregateDataExchange", value)
}

// NewPropertyNamesAggregateDataExchangeFromValue returns a pointer to a valid PropertyNamesAggregateDataExchange
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesAggregateDataExchangeFromValue(v string) (*PropertyNamesAggregateDataExchange, error) {
	ev := PropertyNamesAggregateDataExchange(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesAggregateDataExchange: valid values are %v", v, AllowedPropertyNamesAggregateDataExchangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesAggregateDataExchange) IsValid() bool {
	for _, existing := range AllowedPropertyNamesAggregateDataExchangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_AggregateDataExchange value
func (v PropertyNamesAggregateDataExchange) Ptr() *PropertyNamesAggregateDataExchange {
	return &v
}

type NullablePropertyNamesAggregateDataExchange struct {
	value *PropertyNamesAggregateDataExchange
	isSet bool
}

func (v NullablePropertyNamesAggregateDataExchange) Get() *PropertyNamesAggregateDataExchange {
	return v.value
}

func (v *NullablePropertyNamesAggregateDataExchange) Set(val *PropertyNamesAggregateDataExchange) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesAggregateDataExchange) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesAggregateDataExchange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesAggregateDataExchange(val *PropertyNamesAggregateDataExchange) *NullablePropertyNamesAggregateDataExchange {
	return &NullablePropertyNamesAggregateDataExchange{value: val, isSet: true}
}

func (v NullablePropertyNamesAggregateDataExchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesAggregateDataExchange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
