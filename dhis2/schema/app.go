/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the App type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &App{}

// App struct for App
type App struct {
	Activities          AppActivities    `json:"activities"`
	AppState            AppStatus        `json:"appState"`
	AppStorageSource    AppStorageSource `json:"appStorageSource"`
	AppType             AppType          `json:"appType"`
	AppHubId            *string          `json:"app_hub_id,omitempty"`
	Authorities         []string         `json:"authorities,omitempty"`
	BasePath            *string          `json:"basePath,omitempty"`
	BaseUrl             *string          `json:"baseUrl,omitempty"`
	Bundled             *bool            `json:"bundled,omitempty"`
	CoreApp             *bool            `json:"core_app,omitempty"`
	DefaultLocale       *string          `json:"default_locale,omitempty"`
	Description         *string          `json:"description,omitempty"`
	Developer           *AppDeveloper    `json:"developer,omitempty"`
	FolderName          *string          `json:"folderName,omitempty"`
	Icons               *AppIcons        `json:"icons,omitempty"`
	InstallsAllowedFrom []string         `json:"installs_allowed_from,omitempty"`
	Key                 *string          `json:"key,omitempty"`
	LaunchUrl           *string          `json:"launchUrl,omitempty"`
	LaunchPath          *string          `json:"launch_path,omitempty"`
	Name                *string          `json:"name,omitempty"`
	PluginLaunchUrl     *string          `json:"pluginLaunchUrl,omitempty"`
	PluginLaunchPath    *string          `json:"plugin_launch_path,omitempty"`
	PluginType          *string          `json:"plugin_type,omitempty"`
	Settings            *AppSettings     `json:"settings,omitempty"`
	ShortName           *string          `json:"short_name,omitempty"`
	Shortcuts           []AppShortcut    `json:"shortcuts,omitempty"`
	Version             *string          `json:"version,omitempty"`
}

type _App App

// NewApp instantiates a new App object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApp(activities AppActivities, appState AppStatus, appStorageSource AppStorageSource, appType AppType) *App {
	this := App{}
	this.Activities = activities
	this.AppState = appState
	this.AppStorageSource = appStorageSource
	this.AppType = appType
	return &this
}

// NewAppWithDefaults instantiates a new App object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppWithDefaults() *App {
	this := App{}
	return &this
}

// GetActivities returns the Activities field value
func (o *App) GetActivities() AppActivities {
	if o == nil {
		var ret AppActivities
		return ret
	}

	return o.Activities
}

// GetActivitiesOk returns a tuple with the Activities field value
// and a boolean to check if the value has been set.
func (o *App) GetActivitiesOk() (*AppActivities, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activities, true
}

// SetActivities sets field value
func (o *App) SetActivities(v AppActivities) {
	o.Activities = v
}

// GetAppState returns the AppState field value
func (o *App) GetAppState() AppStatus {
	if o == nil {
		var ret AppStatus
		return ret
	}

	return o.AppState
}

// GetAppStateOk returns a tuple with the AppState field value
// and a boolean to check if the value has been set.
func (o *App) GetAppStateOk() (*AppStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppState, true
}

// SetAppState sets field value
func (o *App) SetAppState(v AppStatus) {
	o.AppState = v
}

// GetAppStorageSource returns the AppStorageSource field value
func (o *App) GetAppStorageSource() AppStorageSource {
	if o == nil {
		var ret AppStorageSource
		return ret
	}

	return o.AppStorageSource
}

// GetAppStorageSourceOk returns a tuple with the AppStorageSource field value
// and a boolean to check if the value has been set.
func (o *App) GetAppStorageSourceOk() (*AppStorageSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppStorageSource, true
}

// SetAppStorageSource sets field value
func (o *App) SetAppStorageSource(v AppStorageSource) {
	o.AppStorageSource = v
}

// GetAppType returns the AppType field value
func (o *App) GetAppType() AppType {
	if o == nil {
		var ret AppType
		return ret
	}

	return o.AppType
}

// GetAppTypeOk returns a tuple with the AppType field value
// and a boolean to check if the value has been set.
func (o *App) GetAppTypeOk() (*AppType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppType, true
}

// SetAppType sets field value
func (o *App) SetAppType(v AppType) {
	o.AppType = v
}

// GetAppHubId returns the AppHubId field value if set, zero value otherwise.
func (o *App) GetAppHubId() string {
	if o == nil || IsNil(o.AppHubId) {
		var ret string
		return ret
	}
	return *o.AppHubId
}

// GetAppHubIdOk returns a tuple with the AppHubId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetAppHubIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppHubId) {
		return nil, false
	}
	return o.AppHubId, true
}

// HasAppHubId returns a boolean if a field has been set.
func (o *App) HasAppHubId() bool {
	if o != nil && !IsNil(o.AppHubId) {
		return true
	}

	return false
}

// SetAppHubId gets a reference to the given string and assigns it to the AppHubId field.
func (o *App) SetAppHubId(v string) {
	o.AppHubId = &v
}

// GetAuthorities returns the Authorities field value if set, zero value otherwise.
func (o *App) GetAuthorities() []string {
	if o == nil || IsNil(o.Authorities) {
		var ret []string
		return ret
	}
	return o.Authorities
}

// GetAuthoritiesOk returns a tuple with the Authorities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetAuthoritiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Authorities) {
		return nil, false
	}
	return o.Authorities, true
}

// HasAuthorities returns a boolean if a field has been set.
func (o *App) HasAuthorities() bool {
	if o != nil && !IsNil(o.Authorities) {
		return true
	}

	return false
}

// SetAuthorities gets a reference to the given []string and assigns it to the Authorities field.
func (o *App) SetAuthorities(v []string) {
	o.Authorities = v
}

// GetBasePath returns the BasePath field value if set, zero value otherwise.
func (o *App) GetBasePath() string {
	if o == nil || IsNil(o.BasePath) {
		var ret string
		return ret
	}
	return *o.BasePath
}

// GetBasePathOk returns a tuple with the BasePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetBasePathOk() (*string, bool) {
	if o == nil || IsNil(o.BasePath) {
		return nil, false
	}
	return o.BasePath, true
}

// HasBasePath returns a boolean if a field has been set.
func (o *App) HasBasePath() bool {
	if o != nil && !IsNil(o.BasePath) {
		return true
	}

	return false
}

// SetBasePath gets a reference to the given string and assigns it to the BasePath field.
func (o *App) SetBasePath(v string) {
	o.BasePath = &v
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise.
func (o *App) GetBaseUrl() string {
	if o == nil || IsNil(o.BaseUrl) {
		var ret string
		return ret
	}
	return *o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetBaseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BaseUrl) {
		return nil, false
	}
	return o.BaseUrl, true
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *App) HasBaseUrl() bool {
	if o != nil && !IsNil(o.BaseUrl) {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given string and assigns it to the BaseUrl field.
func (o *App) SetBaseUrl(v string) {
	o.BaseUrl = &v
}

// GetBundled returns the Bundled field value if set, zero value otherwise.
func (o *App) GetBundled() bool {
	if o == nil || IsNil(o.Bundled) {
		var ret bool
		return ret
	}
	return *o.Bundled
}

// GetBundledOk returns a tuple with the Bundled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetBundledOk() (*bool, bool) {
	if o == nil || IsNil(o.Bundled) {
		return nil, false
	}
	return o.Bundled, true
}

// HasBundled returns a boolean if a field has been set.
func (o *App) HasBundled() bool {
	if o != nil && !IsNil(o.Bundled) {
		return true
	}

	return false
}

// SetBundled gets a reference to the given bool and assigns it to the Bundled field.
func (o *App) SetBundled(v bool) {
	o.Bundled = &v
}

// GetCoreApp returns the CoreApp field value if set, zero value otherwise.
func (o *App) GetCoreApp() bool {
	if o == nil || IsNil(o.CoreApp) {
		var ret bool
		return ret
	}
	return *o.CoreApp
}

// GetCoreAppOk returns a tuple with the CoreApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetCoreAppOk() (*bool, bool) {
	if o == nil || IsNil(o.CoreApp) {
		return nil, false
	}
	return o.CoreApp, true
}

// HasCoreApp returns a boolean if a field has been set.
func (o *App) HasCoreApp() bool {
	if o != nil && !IsNil(o.CoreApp) {
		return true
	}

	return false
}

// SetCoreApp gets a reference to the given bool and assigns it to the CoreApp field.
func (o *App) SetCoreApp(v bool) {
	o.CoreApp = &v
}

// GetDefaultLocale returns the DefaultLocale field value if set, zero value otherwise.
func (o *App) GetDefaultLocale() string {
	if o == nil || IsNil(o.DefaultLocale) {
		var ret string
		return ret
	}
	return *o.DefaultLocale
}

// GetDefaultLocaleOk returns a tuple with the DefaultLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetDefaultLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultLocale) {
		return nil, false
	}
	return o.DefaultLocale, true
}

// HasDefaultLocale returns a boolean if a field has been set.
func (o *App) HasDefaultLocale() bool {
	if o != nil && !IsNil(o.DefaultLocale) {
		return true
	}

	return false
}

// SetDefaultLocale gets a reference to the given string and assigns it to the DefaultLocale field.
func (o *App) SetDefaultLocale(v string) {
	o.DefaultLocale = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *App) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *App) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *App) SetDescription(v string) {
	o.Description = &v
}

// GetDeveloper returns the Developer field value if set, zero value otherwise.
func (o *App) GetDeveloper() AppDeveloper {
	if o == nil || IsNil(o.Developer) {
		var ret AppDeveloper
		return ret
	}
	return *o.Developer
}

// GetDeveloperOk returns a tuple with the Developer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetDeveloperOk() (*AppDeveloper, bool) {
	if o == nil || IsNil(o.Developer) {
		return nil, false
	}
	return o.Developer, true
}

// HasDeveloper returns a boolean if a field has been set.
func (o *App) HasDeveloper() bool {
	if o != nil && !IsNil(o.Developer) {
		return true
	}

	return false
}

// SetDeveloper gets a reference to the given AppDeveloper and assigns it to the Developer field.
func (o *App) SetDeveloper(v AppDeveloper) {
	o.Developer = &v
}

// GetFolderName returns the FolderName field value if set, zero value otherwise.
func (o *App) GetFolderName() string {
	if o == nil || IsNil(o.FolderName) {
		var ret string
		return ret
	}
	return *o.FolderName
}

// GetFolderNameOk returns a tuple with the FolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetFolderNameOk() (*string, bool) {
	if o == nil || IsNil(o.FolderName) {
		return nil, false
	}
	return o.FolderName, true
}

// HasFolderName returns a boolean if a field has been set.
func (o *App) HasFolderName() bool {
	if o != nil && !IsNil(o.FolderName) {
		return true
	}

	return false
}

// SetFolderName gets a reference to the given string and assigns it to the FolderName field.
func (o *App) SetFolderName(v string) {
	o.FolderName = &v
}

// GetIcons returns the Icons field value if set, zero value otherwise.
func (o *App) GetIcons() AppIcons {
	if o == nil || IsNil(o.Icons) {
		var ret AppIcons
		return ret
	}
	return *o.Icons
}

// GetIconsOk returns a tuple with the Icons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetIconsOk() (*AppIcons, bool) {
	if o == nil || IsNil(o.Icons) {
		return nil, false
	}
	return o.Icons, true
}

// HasIcons returns a boolean if a field has been set.
func (o *App) HasIcons() bool {
	if o != nil && !IsNil(o.Icons) {
		return true
	}

	return false
}

// SetIcons gets a reference to the given AppIcons and assigns it to the Icons field.
func (o *App) SetIcons(v AppIcons) {
	o.Icons = &v
}

// GetInstallsAllowedFrom returns the InstallsAllowedFrom field value if set, zero value otherwise.
func (o *App) GetInstallsAllowedFrom() []string {
	if o == nil || IsNil(o.InstallsAllowedFrom) {
		var ret []string
		return ret
	}
	return o.InstallsAllowedFrom
}

// GetInstallsAllowedFromOk returns a tuple with the InstallsAllowedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetInstallsAllowedFromOk() ([]string, bool) {
	if o == nil || IsNil(o.InstallsAllowedFrom) {
		return nil, false
	}
	return o.InstallsAllowedFrom, true
}

// HasInstallsAllowedFrom returns a boolean if a field has been set.
func (o *App) HasInstallsAllowedFrom() bool {
	if o != nil && !IsNil(o.InstallsAllowedFrom) {
		return true
	}

	return false
}

// SetInstallsAllowedFrom gets a reference to the given []string and assigns it to the InstallsAllowedFrom field.
func (o *App) SetInstallsAllowedFrom(v []string) {
	o.InstallsAllowedFrom = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *App) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *App) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *App) SetKey(v string) {
	o.Key = &v
}

// GetLaunchUrl returns the LaunchUrl field value if set, zero value otherwise.
func (o *App) GetLaunchUrl() string {
	if o == nil || IsNil(o.LaunchUrl) {
		var ret string
		return ret
	}
	return *o.LaunchUrl
}

// GetLaunchUrlOk returns a tuple with the LaunchUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetLaunchUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LaunchUrl) {
		return nil, false
	}
	return o.LaunchUrl, true
}

// HasLaunchUrl returns a boolean if a field has been set.
func (o *App) HasLaunchUrl() bool {
	if o != nil && !IsNil(o.LaunchUrl) {
		return true
	}

	return false
}

// SetLaunchUrl gets a reference to the given string and assigns it to the LaunchUrl field.
func (o *App) SetLaunchUrl(v string) {
	o.LaunchUrl = &v
}

// GetLaunchPath returns the LaunchPath field value if set, zero value otherwise.
func (o *App) GetLaunchPath() string {
	if o == nil || IsNil(o.LaunchPath) {
		var ret string
		return ret
	}
	return *o.LaunchPath
}

// GetLaunchPathOk returns a tuple with the LaunchPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetLaunchPathOk() (*string, bool) {
	if o == nil || IsNil(o.LaunchPath) {
		return nil, false
	}
	return o.LaunchPath, true
}

// HasLaunchPath returns a boolean if a field has been set.
func (o *App) HasLaunchPath() bool {
	if o != nil && !IsNil(o.LaunchPath) {
		return true
	}

	return false
}

// SetLaunchPath gets a reference to the given string and assigns it to the LaunchPath field.
func (o *App) SetLaunchPath(v string) {
	o.LaunchPath = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *App) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *App) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *App) SetName(v string) {
	o.Name = &v
}

// GetPluginLaunchUrl returns the PluginLaunchUrl field value if set, zero value otherwise.
func (o *App) GetPluginLaunchUrl() string {
	if o == nil || IsNil(o.PluginLaunchUrl) {
		var ret string
		return ret
	}
	return *o.PluginLaunchUrl
}

// GetPluginLaunchUrlOk returns a tuple with the PluginLaunchUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetPluginLaunchUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PluginLaunchUrl) {
		return nil, false
	}
	return o.PluginLaunchUrl, true
}

// HasPluginLaunchUrl returns a boolean if a field has been set.
func (o *App) HasPluginLaunchUrl() bool {
	if o != nil && !IsNil(o.PluginLaunchUrl) {
		return true
	}

	return false
}

// SetPluginLaunchUrl gets a reference to the given string and assigns it to the PluginLaunchUrl field.
func (o *App) SetPluginLaunchUrl(v string) {
	o.PluginLaunchUrl = &v
}

// GetPluginLaunchPath returns the PluginLaunchPath field value if set, zero value otherwise.
func (o *App) GetPluginLaunchPath() string {
	if o == nil || IsNil(o.PluginLaunchPath) {
		var ret string
		return ret
	}
	return *o.PluginLaunchPath
}

// GetPluginLaunchPathOk returns a tuple with the PluginLaunchPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetPluginLaunchPathOk() (*string, bool) {
	if o == nil || IsNil(o.PluginLaunchPath) {
		return nil, false
	}
	return o.PluginLaunchPath, true
}

// HasPluginLaunchPath returns a boolean if a field has been set.
func (o *App) HasPluginLaunchPath() bool {
	if o != nil && !IsNil(o.PluginLaunchPath) {
		return true
	}

	return false
}

// SetPluginLaunchPath gets a reference to the given string and assigns it to the PluginLaunchPath field.
func (o *App) SetPluginLaunchPath(v string) {
	o.PluginLaunchPath = &v
}

// GetPluginType returns the PluginType field value if set, zero value otherwise.
func (o *App) GetPluginType() string {
	if o == nil || IsNil(o.PluginType) {
		var ret string
		return ret
	}
	return *o.PluginType
}

// GetPluginTypeOk returns a tuple with the PluginType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetPluginTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PluginType) {
		return nil, false
	}
	return o.PluginType, true
}

// HasPluginType returns a boolean if a field has been set.
func (o *App) HasPluginType() bool {
	if o != nil && !IsNil(o.PluginType) {
		return true
	}

	return false
}

// SetPluginType gets a reference to the given string and assigns it to the PluginType field.
func (o *App) SetPluginType(v string) {
	o.PluginType = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *App) GetSettings() AppSettings {
	if o == nil || IsNil(o.Settings) {
		var ret AppSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetSettingsOk() (*AppSettings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *App) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given AppSettings and assigns it to the Settings field.
func (o *App) SetSettings(v AppSettings) {
	o.Settings = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *App) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *App) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *App) SetShortName(v string) {
	o.ShortName = &v
}

// GetShortcuts returns the Shortcuts field value if set, zero value otherwise.
func (o *App) GetShortcuts() []AppShortcut {
	if o == nil || IsNil(o.Shortcuts) {
		var ret []AppShortcut
		return ret
	}
	return o.Shortcuts
}

// GetShortcutsOk returns a tuple with the Shortcuts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetShortcutsOk() ([]AppShortcut, bool) {
	if o == nil || IsNil(o.Shortcuts) {
		return nil, false
	}
	return o.Shortcuts, true
}

// HasShortcuts returns a boolean if a field has been set.
func (o *App) HasShortcuts() bool {
	if o != nil && !IsNil(o.Shortcuts) {
		return true
	}

	return false
}

// SetShortcuts gets a reference to the given []AppShortcut and assigns it to the Shortcuts field.
func (o *App) SetShortcuts(v []AppShortcut) {
	o.Shortcuts = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *App) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *App) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *App) SetVersion(v string) {
	o.Version = &v
}

func (o App) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o App) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activities"] = o.Activities
	toSerialize["appState"] = o.AppState
	toSerialize["appStorageSource"] = o.AppStorageSource
	toSerialize["appType"] = o.AppType
	if !IsNil(o.AppHubId) {
		toSerialize["app_hub_id"] = o.AppHubId
	}
	if !IsNil(o.Authorities) {
		toSerialize["authorities"] = o.Authorities
	}
	if !IsNil(o.BasePath) {
		toSerialize["basePath"] = o.BasePath
	}
	if !IsNil(o.BaseUrl) {
		toSerialize["baseUrl"] = o.BaseUrl
	}
	if !IsNil(o.Bundled) {
		toSerialize["bundled"] = o.Bundled
	}
	if !IsNil(o.CoreApp) {
		toSerialize["core_app"] = o.CoreApp
	}
	if !IsNil(o.DefaultLocale) {
		toSerialize["default_locale"] = o.DefaultLocale
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Developer) {
		toSerialize["developer"] = o.Developer
	}
	if !IsNil(o.FolderName) {
		toSerialize["folderName"] = o.FolderName
	}
	if !IsNil(o.Icons) {
		toSerialize["icons"] = o.Icons
	}
	if !IsNil(o.InstallsAllowedFrom) {
		toSerialize["installs_allowed_from"] = o.InstallsAllowedFrom
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.LaunchUrl) {
		toSerialize["launchUrl"] = o.LaunchUrl
	}
	if !IsNil(o.LaunchPath) {
		toSerialize["launch_path"] = o.LaunchPath
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PluginLaunchUrl) {
		toSerialize["pluginLaunchUrl"] = o.PluginLaunchUrl
	}
	if !IsNil(o.PluginLaunchPath) {
		toSerialize["plugin_launch_path"] = o.PluginLaunchPath
	}
	if !IsNil(o.PluginType) {
		toSerialize["plugin_type"] = o.PluginType
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.ShortName) {
		toSerialize["short_name"] = o.ShortName
	}
	if !IsNil(o.Shortcuts) {
		toSerialize["shortcuts"] = o.Shortcuts
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *App) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activities",
		"appState",
		"appStorageSource",
		"appType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApp := _App{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApp)

	if err != nil {
		return err
	}

	*o = App(varApp)

	return err
}

type NullableApp struct {
	value *App
	isSet bool
}

func (v NullableApp) Get() *App {
	return v.value
}

func (v *NullableApp) Set(val *App) {
	v.value = val
	v.isSet = true
}

func (v NullableApp) IsSet() bool {
	return v.isSet
}

func (v *NullableApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApp(val *App) *NullableApp {
	return &NullableApp{value: val, isSet: true}
}

func (v NullableApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
