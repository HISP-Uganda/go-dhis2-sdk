/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the TrackerDataView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackerDataView{}

// TrackerDataView struct for TrackerDataView
type TrackerDataView struct {
	Attributes   interface{} `json:"attributes,omitempty"`
	DataElements interface{} `json:"dataElements,omitempty"`
}

// NewTrackerDataView instantiates a new TrackerDataView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackerDataView() *TrackerDataView {
	this := TrackerDataView{}
	return &this
}

// NewTrackerDataViewWithDefaults instantiates a new TrackerDataView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackerDataViewWithDefaults() *TrackerDataView {
	this := TrackerDataView{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrackerDataView) GetAttributes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrackerDataView) GetAttributesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return &o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *TrackerDataView) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given interface{} and assigns it to the Attributes field.
func (o *TrackerDataView) SetAttributes(v interface{}) {
	o.Attributes = v
}

// GetDataElements returns the DataElements field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrackerDataView) GetDataElements() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DataElements
}

// GetDataElementsOk returns a tuple with the DataElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrackerDataView) GetDataElementsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DataElements) {
		return nil, false
	}
	return &o.DataElements, true
}

// HasDataElements returns a boolean if a field has been set.
func (o *TrackerDataView) HasDataElements() bool {
	if o != nil && !IsNil(o.DataElements) {
		return true
	}

	return false
}

// SetDataElements gets a reference to the given interface{} and assigns it to the DataElements field.
func (o *TrackerDataView) SetDataElements(v interface{}) {
	o.DataElements = v
}

func (o TrackerDataView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackerDataView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.DataElements != nil {
		toSerialize["dataElements"] = o.DataElements
	}
	return toSerialize, nil
}

type NullableTrackerDataView struct {
	value *TrackerDataView
	isSet bool
}

func (v NullableTrackerDataView) Get() *TrackerDataView {
	return v.value
}

func (v *NullableTrackerDataView) Set(val *TrackerDataView) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerDataView) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerDataView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerDataView(val *TrackerDataView) *NullableTrackerDataView {
	return &NullableTrackerDataView{value: val, isSet: true}
}

func (v NullableTrackerDataView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerDataView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
