/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TrackerBundleMode the model 'TrackerBundleMode'
type TrackerBundleMode string

// List of TrackerBundleMode
const (
	TRACKERBUNDLEMODE_COMMIT   TrackerBundleMode = "COMMIT"
	TRACKERBUNDLEMODE_VALIDATE TrackerBundleMode = "VALIDATE"
)

// All allowed values of TrackerBundleMode enum
var AllowedTrackerBundleModeEnumValues = []TrackerBundleMode{
	"COMMIT",
	"VALIDATE",
}

func (v *TrackerBundleMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackerBundleMode(value)
	for _, existing := range AllowedTrackerBundleModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackerBundleMode", value)
}

// NewTrackerBundleModeFromValue returns a pointer to a valid TrackerBundleMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackerBundleModeFromValue(v string) (*TrackerBundleMode, error) {
	ev := TrackerBundleMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackerBundleMode: valid values are %v", v, AllowedTrackerBundleModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackerBundleMode) IsValid() bool {
	for _, existing := range AllowedTrackerBundleModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackerBundleMode value
func (v TrackerBundleMode) Ptr() *TrackerBundleMode {
	return &v
}

type NullableTrackerBundleMode struct {
	value *TrackerBundleMode
	isSet bool
}

func (v NullableTrackerBundleMode) Get() *TrackerBundleMode {
	return v.value
}

func (v *NullableTrackerBundleMode) Set(val *TrackerBundleMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerBundleMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerBundleMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerBundleMode(val *TrackerBundleMode) *NullableTrackerBundleMode {
	return &NullableTrackerBundleMode{value: val, isSet: true}
}

func (v NullableTrackerBundleMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerBundleMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
