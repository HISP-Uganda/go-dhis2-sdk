/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// FlushMode the model 'FlushMode'
type FlushMode string

// List of FlushMode
const (
	FLUSHMODE_OBJECT FlushMode = "OBJECT"
	FLUSHMODE_AUTO   FlushMode = "AUTO"
)

// All allowed values of FlushMode enum
var AllowedFlushModeEnumValues = []FlushMode{
	"OBJECT",
	"AUTO",
}

func (v *FlushMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlushMode(value)
	for _, existing := range AllowedFlushModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlushMode", value)
}

// NewFlushModeFromValue returns a pointer to a valid FlushMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlushModeFromValue(v string) (*FlushMode, error) {
	ev := FlushMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlushMode: valid values are %v", v, AllowedFlushModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlushMode) IsValid() bool {
	for _, existing := range AllowedFlushModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlushMode value
func (v FlushMode) Ptr() *FlushMode {
	return &v
}

type NullableFlushMode struct {
	value *FlushMode
	isSet bool
}

func (v NullableFlushMode) Get() *FlushMode {
	return v.value
}

func (v *NullableFlushMode) Set(val *FlushMode) {
	v.value = val
	v.isSet = true
}

func (v NullableFlushMode) IsSet() bool {
	return v.isSet
}

func (v *NullableFlushMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlushMode(val *FlushMode) *NullableFlushMode {
	return &NullableFlushMode{value: val, isSet: true}
}

func (v NullableFlushMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlushMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
