/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OrgUnitMergeQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgUnitMergeQuery{}

// OrgUnitMergeQuery struct for OrgUnitMergeQuery
type OrgUnitMergeQuery struct {
	DataApprovalMergeStrategy string   `json:"dataApprovalMergeStrategy"`
	DataValueMergeStrategy    string   `json:"dataValueMergeStrategy"`
	DeleteSources             *bool    `json:"deleteSources,omitempty"`
	Sources                   []string `json:"sources,omitempty"`
	Target                    *string  `json:"target,omitempty"`
}

type _OrgUnitMergeQuery OrgUnitMergeQuery

// NewOrgUnitMergeQuery instantiates a new OrgUnitMergeQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgUnitMergeQuery(dataApprovalMergeStrategy string, dataValueMergeStrategy string) *OrgUnitMergeQuery {
	this := OrgUnitMergeQuery{}
	this.DataApprovalMergeStrategy = dataApprovalMergeStrategy
	this.DataValueMergeStrategy = dataValueMergeStrategy
	return &this
}

// NewOrgUnitMergeQueryWithDefaults instantiates a new OrgUnitMergeQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgUnitMergeQueryWithDefaults() *OrgUnitMergeQuery {
	this := OrgUnitMergeQuery{}
	return &this
}

// GetDataApprovalMergeStrategy returns the DataApprovalMergeStrategy field value
func (o *OrgUnitMergeQuery) GetDataApprovalMergeStrategy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataApprovalMergeStrategy
}

// GetDataApprovalMergeStrategyOk returns a tuple with the DataApprovalMergeStrategy field value
// and a boolean to check if the value has been set.
func (o *OrgUnitMergeQuery) GetDataApprovalMergeStrategyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataApprovalMergeStrategy, true
}

// SetDataApprovalMergeStrategy sets field value
func (o *OrgUnitMergeQuery) SetDataApprovalMergeStrategy(v string) {
	o.DataApprovalMergeStrategy = v
}

// GetDataValueMergeStrategy returns the DataValueMergeStrategy field value
func (o *OrgUnitMergeQuery) GetDataValueMergeStrategy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataValueMergeStrategy
}

// GetDataValueMergeStrategyOk returns a tuple with the DataValueMergeStrategy field value
// and a boolean to check if the value has been set.
func (o *OrgUnitMergeQuery) GetDataValueMergeStrategyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataValueMergeStrategy, true
}

// SetDataValueMergeStrategy sets field value
func (o *OrgUnitMergeQuery) SetDataValueMergeStrategy(v string) {
	o.DataValueMergeStrategy = v
}

// GetDeleteSources returns the DeleteSources field value if set, zero value otherwise.
func (o *OrgUnitMergeQuery) GetDeleteSources() bool {
	if o == nil || IsNil(o.DeleteSources) {
		var ret bool
		return ret
	}
	return *o.DeleteSources
}

// GetDeleteSourcesOk returns a tuple with the DeleteSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUnitMergeQuery) GetDeleteSourcesOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteSources) {
		return nil, false
	}
	return o.DeleteSources, true
}

// HasDeleteSources returns a boolean if a field has been set.
func (o *OrgUnitMergeQuery) HasDeleteSources() bool {
	if o != nil && !IsNil(o.DeleteSources) {
		return true
	}

	return false
}

// SetDeleteSources gets a reference to the given bool and assigns it to the DeleteSources field.
func (o *OrgUnitMergeQuery) SetDeleteSources(v bool) {
	o.DeleteSources = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *OrgUnitMergeQuery) GetSources() []string {
	if o == nil || IsNil(o.Sources) {
		var ret []string
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUnitMergeQuery) GetSourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *OrgUnitMergeQuery) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []string and assigns it to the Sources field.
func (o *OrgUnitMergeQuery) SetSources(v []string) {
	o.Sources = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *OrgUnitMergeQuery) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUnitMergeQuery) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *OrgUnitMergeQuery) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *OrgUnitMergeQuery) SetTarget(v string) {
	o.Target = &v
}

func (o OrgUnitMergeQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgUnitMergeQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataApprovalMergeStrategy"] = o.DataApprovalMergeStrategy
	toSerialize["dataValueMergeStrategy"] = o.DataValueMergeStrategy
	if !IsNil(o.DeleteSources) {
		toSerialize["deleteSources"] = o.DeleteSources
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	return toSerialize, nil
}

func (o *OrgUnitMergeQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataApprovalMergeStrategy",
		"dataValueMergeStrategy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrgUnitMergeQuery := _OrgUnitMergeQuery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrgUnitMergeQuery)

	if err != nil {
		return err
	}

	*o = OrgUnitMergeQuery(varOrgUnitMergeQuery)

	return err
}

type NullableOrgUnitMergeQuery struct {
	value *OrgUnitMergeQuery
	isSet bool
}

func (v NullableOrgUnitMergeQuery) Get() *OrgUnitMergeQuery {
	return v.value
}

func (v *NullableOrgUnitMergeQuery) Set(val *OrgUnitMergeQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgUnitMergeQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgUnitMergeQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgUnitMergeQuery(val *OrgUnitMergeQuery) *NullableOrgUnitMergeQuery {
	return &NullableOrgUnitMergeQuery{value: val, isSet: true}
}

func (v NullableOrgUnitMergeQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgUnitMergeQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
