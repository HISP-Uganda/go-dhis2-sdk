/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TextAlign the model 'TextAlign'
type TextAlign string

// List of TextAlign
const (
	TEXTALIGN_LEFT   TextAlign = "LEFT"
	TEXTALIGN_CENTER TextAlign = "CENTER"
	TEXTALIGN_RIGHT  TextAlign = "RIGHT"
)

// All allowed values of TextAlign enum
var AllowedTextAlignEnumValues = []TextAlign{
	"LEFT",
	"CENTER",
	"RIGHT",
}

func (v *TextAlign) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TextAlign(value)
	for _, existing := range AllowedTextAlignEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TextAlign", value)
}

// NewTextAlignFromValue returns a pointer to a valid TextAlign
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTextAlignFromValue(v string) (*TextAlign, error) {
	ev := TextAlign(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TextAlign: valid values are %v", v, AllowedTextAlignEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TextAlign) IsValid() bool {
	for _, existing := range AllowedTextAlignEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TextAlign value
func (v TextAlign) Ptr() *TextAlign {
	return &v
}

type NullableTextAlign struct {
	value *TextAlign
	isSet bool
}

func (v NullableTextAlign) Get() *TextAlign {
	return v.value
}

func (v *NullableTextAlign) Set(val *TextAlign) {
	v.value = val
	v.isSet = true
}

func (v NullableTextAlign) IsSet() bool {
	return v.isSet
}

func (v *NullableTextAlign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextAlign(val *TextAlign) *NullableTextAlign {
	return &NullableTextAlign{value: val, isSet: true}
}

func (v NullableTextAlign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextAlign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
