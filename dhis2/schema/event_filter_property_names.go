/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// EventFilterPropertyNames the model 'EventFilterPropertyNames'
type EventFilterPropertyNames string

// List of EventFilterPropertyNames
const (
	EVENTFILTERPROPERTYNAMES_ACCESS               EventFilterPropertyNames = "access"
	EVENTFILTERPROPERTYNAMES_ATTRIBUTE_VALUES     EventFilterPropertyNames = "attributeValues"
	EVENTFILTERPROPERTYNAMES_CODE                 EventFilterPropertyNames = "code"
	EVENTFILTERPROPERTYNAMES_CREATED              EventFilterPropertyNames = "created"
	EVENTFILTERPROPERTYNAMES_CREATED_BY           EventFilterPropertyNames = "createdBy"
	EVENTFILTERPROPERTYNAMES_DESCRIPTION          EventFilterPropertyNames = "description"
	EVENTFILTERPROPERTYNAMES_DISPLAY_DESCRIPTION  EventFilterPropertyNames = "displayDescription"
	EVENTFILTERPROPERTYNAMES_DISPLAY_NAME         EventFilterPropertyNames = "displayName"
	EVENTFILTERPROPERTYNAMES_EVENT_QUERY_CRITERIA EventFilterPropertyNames = "eventQueryCriteria"
	EVENTFILTERPROPERTYNAMES_FAVORITE             EventFilterPropertyNames = "favorite"
	EVENTFILTERPROPERTYNAMES_FAVORITES            EventFilterPropertyNames = "favorites"
	EVENTFILTERPROPERTYNAMES_HREF                 EventFilterPropertyNames = "href"
	EVENTFILTERPROPERTYNAMES_ID                   EventFilterPropertyNames = "id"
	EVENTFILTERPROPERTYNAMES_LAST_UPDATED         EventFilterPropertyNames = "lastUpdated"
	EVENTFILTERPROPERTYNAMES_LAST_UPDATED_BY      EventFilterPropertyNames = "lastUpdatedBy"
	EVENTFILTERPROPERTYNAMES_NAME                 EventFilterPropertyNames = "name"
	EVENTFILTERPROPERTYNAMES_PROGRAM              EventFilterPropertyNames = "program"
	EVENTFILTERPROPERTYNAMES_PROGRAM_STAGE        EventFilterPropertyNames = "programStage"
	EVENTFILTERPROPERTYNAMES_SHARING              EventFilterPropertyNames = "sharing"
	EVENTFILTERPROPERTYNAMES_TRANSLATIONS         EventFilterPropertyNames = "translations"
)

// All allowed values of EventFilterPropertyNames enum
var AllowedEventFilterPropertyNamesEnumValues = []EventFilterPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayDescription",
	"displayName",
	"eventQueryCriteria",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"program",
	"programStage",
	"sharing",
	"translations",
}

func (v *EventFilterPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventFilterPropertyNames(value)
	for _, existing := range AllowedEventFilterPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventFilterPropertyNames", value)
}

// NewEventFilterPropertyNamesFromValue returns a pointer to a valid EventFilterPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventFilterPropertyNamesFromValue(v string) (*EventFilterPropertyNames, error) {
	ev := EventFilterPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventFilterPropertyNames: valid values are %v", v, AllowedEventFilterPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventFilterPropertyNames) IsValid() bool {
	for _, existing := range AllowedEventFilterPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventFilterPropertyNames value
func (v EventFilterPropertyNames) Ptr() *EventFilterPropertyNames {
	return &v
}

type NullableEventFilterPropertyNames struct {
	value *EventFilterPropertyNames
	isSet bool
}

func (v NullableEventFilterPropertyNames) Get() *EventFilterPropertyNames {
	return v.value
}

func (v *NullableEventFilterPropertyNames) Set(val *EventFilterPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableEventFilterPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableEventFilterPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventFilterPropertyNames(val *EventFilterPropertyNames) *NullableEventFilterPropertyNames {
	return &NullableEventFilterPropertyNames{value: val, isSet: true}
}

func (v NullableEventFilterPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventFilterPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
