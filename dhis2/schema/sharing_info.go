/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the SharingInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharingInfo{}

// SharingInfo struct for SharingInfo
type SharingInfo struct {
	Meta   *Meta          `json:"meta,omitempty"`
	Object *SharingObject `json:"object,omitempty"`
}

// NewSharingInfo instantiates a new SharingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharingInfo() *SharingInfo {
	this := SharingInfo{}
	return &this
}

// NewSharingInfoWithDefaults instantiates a new SharingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharingInfoWithDefaults() *SharingInfo {
	this := SharingInfo{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *SharingInfo) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingInfo) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *SharingInfo) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *SharingInfo) SetMeta(v Meta) {
	o.Meta = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *SharingInfo) GetObject() SharingObject {
	if o == nil || IsNil(o.Object) {
		var ret SharingObject
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingInfo) GetObjectOk() (*SharingObject, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *SharingInfo) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given SharingObject and assigns it to the Object field.
func (o *SharingInfo) SetObject(v SharingObject) {
	o.Object = &v
}

func (o SharingInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	return toSerialize, nil
}

type NullableSharingInfo struct {
	value *SharingInfo
	isSet bool
}

func (v NullableSharingInfo) Get() *SharingInfo {
	return v.value
}

func (v *NullableSharingInfo) Set(val *SharingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSharingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSharingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharingInfo(val *SharingInfo) *NullableSharingInfo {
	return &NullableSharingInfo{value: val, isSet: true}
}

func (v NullableSharingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
