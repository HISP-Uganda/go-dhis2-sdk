/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SchedulerQueue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchedulerQueue{}

// SchedulerQueue struct for SchedulerQueue
type SchedulerQueue struct {
	CronExpression string   `json:"cronExpression"`
	Name           *string  `json:"name,omitempty"`
	Sequence       []string `json:"sequence"`
}

type _SchedulerQueue SchedulerQueue

// NewSchedulerQueue instantiates a new SchedulerQueue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulerQueue(cronExpression string, sequence []string) *SchedulerQueue {
	this := SchedulerQueue{}
	this.CronExpression = cronExpression
	this.Sequence = sequence
	return &this
}

// NewSchedulerQueueWithDefaults instantiates a new SchedulerQueue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulerQueueWithDefaults() *SchedulerQueue {
	this := SchedulerQueue{}
	return &this
}

// GetCronExpression returns the CronExpression field value
func (o *SchedulerQueue) GetCronExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CronExpression
}

// GetCronExpressionOk returns a tuple with the CronExpression field value
// and a boolean to check if the value has been set.
func (o *SchedulerQueue) GetCronExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CronExpression, true
}

// SetCronExpression sets field value
func (o *SchedulerQueue) SetCronExpression(v string) {
	o.CronExpression = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchedulerQueue) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerQueue) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchedulerQueue) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchedulerQueue) SetName(v string) {
	o.Name = &v
}

// GetSequence returns the Sequence field value
func (o *SchedulerQueue) GetSequence() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value
// and a boolean to check if the value has been set.
func (o *SchedulerQueue) GetSequenceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sequence, true
}

// SetSequence sets field value
func (o *SchedulerQueue) SetSequence(v []string) {
	o.Sequence = v
}

func (o SchedulerQueue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchedulerQueue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cronExpression"] = o.CronExpression
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["sequence"] = o.Sequence
	return toSerialize, nil
}

func (o *SchedulerQueue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cronExpression",
		"sequence",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchedulerQueue := _SchedulerQueue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchedulerQueue)

	if err != nil {
		return err
	}

	*o = SchedulerQueue(varSchedulerQueue)

	return err
}

type NullableSchedulerQueue struct {
	value *SchedulerQueue
	isSet bool
}

func (v NullableSchedulerQueue) Get() *SchedulerQueue {
	return v.value
}

func (v *NullableSchedulerQueue) Set(val *SchedulerQueue) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulerQueue) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulerQueue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulerQueue(val *SchedulerQueue) *NullableSchedulerQueue {
	return &NullableSchedulerQueue{value: val, isSet: true}
}

func (v NullableSchedulerQueue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulerQueue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
