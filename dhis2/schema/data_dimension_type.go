/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DataDimensionType the model 'DataDimensionType'
type DataDimensionType string

// List of DataDimensionType
const (
	DATADIMENSIONTYPE_DISAGGREGATION DataDimensionType = "DISAGGREGATION"
	DATADIMENSIONTYPE_ATTRIBUTE      DataDimensionType = "ATTRIBUTE"
)

// All allowed values of DataDimensionType enum
var AllowedDataDimensionTypeEnumValues = []DataDimensionType{
	"DISAGGREGATION",
	"ATTRIBUTE",
}

func (v *DataDimensionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataDimensionType(value)
	for _, existing := range AllowedDataDimensionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataDimensionType", value)
}

// NewDataDimensionTypeFromValue returns a pointer to a valid DataDimensionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataDimensionTypeFromValue(v string) (*DataDimensionType, error) {
	ev := DataDimensionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataDimensionType: valid values are %v", v, AllowedDataDimensionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataDimensionType) IsValid() bool {
	for _, existing := range AllowedDataDimensionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataDimensionType value
func (v DataDimensionType) Ptr() *DataDimensionType {
	return &v
}

type NullableDataDimensionType struct {
	value *DataDimensionType
	isSet bool
}

func (v NullableDataDimensionType) Get() *DataDimensionType {
	return v.value
}

func (v *NullableDataDimensionType) Set(val *DataDimensionType) {
	v.value = val
	v.isSet = true
}

func (v NullableDataDimensionType) IsSet() bool {
	return v.isSet
}

func (v *NullableDataDimensionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataDimensionType(val *DataDimensionType) *NullableDataDimensionType {
	return &NullableDataDimensionType{value: val, isSet: true}
}

func (v NullableDataDimensionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataDimensionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
