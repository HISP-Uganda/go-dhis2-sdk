/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the InterpretationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterpretationParams{}

// InterpretationParams struct for InterpretationParams
type InterpretationParams struct {
	AttributeValues    []AttributeValueParams                 `json:"attributeValues,omitempty"`
	Code               *string                                `json:"code,omitempty"`
	Comments           []InterpretationParamsCommentsInner    `json:"comments,omitempty"`
	Created            *time.Time                             `json:"created,omitempty"`
	CreatedBy          *AggregateDataExchangeParamsCreatedBy  `json:"createdBy,omitempty"`
	DataSet            *DataSetParams                         `json:"dataSet,omitempty"`
	DisplayName        *string                                `json:"displayName,omitempty"`
	EventChart         *EventChartParams                      `json:"eventChart,omitempty"`
	EventReport        *EventReportParams                     `json:"eventReport,omitempty"`
	EventVisualization *EventVisualizationParams              `json:"eventVisualization,omitempty"`
	Favorite           *bool                                  `json:"favorite,omitempty"`
	Favorites          []string                               `json:"favorites,omitempty"`
	Id                 *string                                `json:"id,omitempty"`
	LastUpdated        *time.Time                             `json:"lastUpdated,omitempty"`
	LastUpdatedBy      *AggregateDataExchangeParamsCreatedBy  `json:"lastUpdatedBy,omitempty"`
	LikedBy            []AggregateDataExchangeParamsCreatedBy `json:"likedBy,omitempty"`
	Likes              int32                                  `json:"likes"`
	Map                *MapParams                             `json:"map,omitempty"`
	Mentions           []Mention                              `json:"mentions,omitempty"`
	OrganisationUnit   *OrganisationUnitParams                `json:"organisationUnit,omitempty"`
	Period             *string                                `json:"period,omitempty"`
	Sharing            *Sharing                               `json:"sharing,omitempty"`
	Text               *string                                `json:"text,omitempty"`
	Translations       []Translation                          `json:"translations,omitempty"`
	Type               AnalyticsFavoriteType                  `json:"type"`
	Visualization      *VisualizationParams                   `json:"visualization,omitempty"`
}

type _InterpretationParams InterpretationParams

// NewInterpretationParams instantiates a new InterpretationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterpretationParams(likes int32, type_ AnalyticsFavoriteType) *InterpretationParams {
	this := InterpretationParams{}
	this.Likes = likes
	this.Type = type_
	return &this
}

// NewInterpretationParamsWithDefaults instantiates a new InterpretationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterpretationParamsWithDefaults() *InterpretationParams {
	this := InterpretationParams{}
	return &this
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *InterpretationParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *InterpretationParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *InterpretationParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *InterpretationParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *InterpretationParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *InterpretationParams) SetCode(v string) {
	o.Code = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *InterpretationParams) GetComments() []InterpretationParamsCommentsInner {
	if o == nil || IsNil(o.Comments) {
		var ret []InterpretationParamsCommentsInner
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetCommentsOk() ([]InterpretationParamsCommentsInner, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *InterpretationParams) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []InterpretationParamsCommentsInner and assigns it to the Comments field.
func (o *InterpretationParams) SetComments(v []InterpretationParamsCommentsInner) {
	o.Comments = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *InterpretationParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *InterpretationParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *InterpretationParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *InterpretationParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *InterpretationParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *InterpretationParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetDataSet returns the DataSet field value if set, zero value otherwise.
func (o *InterpretationParams) GetDataSet() DataSetParams {
	if o == nil || IsNil(o.DataSet) {
		var ret DataSetParams
		return ret
	}
	return *o.DataSet
}

// GetDataSetOk returns a tuple with the DataSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetDataSetOk() (*DataSetParams, bool) {
	if o == nil || IsNil(o.DataSet) {
		return nil, false
	}
	return o.DataSet, true
}

// HasDataSet returns a boolean if a field has been set.
func (o *InterpretationParams) HasDataSet() bool {
	if o != nil && !IsNil(o.DataSet) {
		return true
	}

	return false
}

// SetDataSet gets a reference to the given DataSetParams and assigns it to the DataSet field.
func (o *InterpretationParams) SetDataSet(v DataSetParams) {
	o.DataSet = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *InterpretationParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *InterpretationParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *InterpretationParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEventChart returns the EventChart field value if set, zero value otherwise.
func (o *InterpretationParams) GetEventChart() EventChartParams {
	if o == nil || IsNil(o.EventChart) {
		var ret EventChartParams
		return ret
	}
	return *o.EventChart
}

// GetEventChartOk returns a tuple with the EventChart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetEventChartOk() (*EventChartParams, bool) {
	if o == nil || IsNil(o.EventChart) {
		return nil, false
	}
	return o.EventChart, true
}

// HasEventChart returns a boolean if a field has been set.
func (o *InterpretationParams) HasEventChart() bool {
	if o != nil && !IsNil(o.EventChart) {
		return true
	}

	return false
}

// SetEventChart gets a reference to the given EventChartParams and assigns it to the EventChart field.
func (o *InterpretationParams) SetEventChart(v EventChartParams) {
	o.EventChart = &v
}

// GetEventReport returns the EventReport field value if set, zero value otherwise.
func (o *InterpretationParams) GetEventReport() EventReportParams {
	if o == nil || IsNil(o.EventReport) {
		var ret EventReportParams
		return ret
	}
	return *o.EventReport
}

// GetEventReportOk returns a tuple with the EventReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetEventReportOk() (*EventReportParams, bool) {
	if o == nil || IsNil(o.EventReport) {
		return nil, false
	}
	return o.EventReport, true
}

// HasEventReport returns a boolean if a field has been set.
func (o *InterpretationParams) HasEventReport() bool {
	if o != nil && !IsNil(o.EventReport) {
		return true
	}

	return false
}

// SetEventReport gets a reference to the given EventReportParams and assigns it to the EventReport field.
func (o *InterpretationParams) SetEventReport(v EventReportParams) {
	o.EventReport = &v
}

// GetEventVisualization returns the EventVisualization field value if set, zero value otherwise.
func (o *InterpretationParams) GetEventVisualization() EventVisualizationParams {
	if o == nil || IsNil(o.EventVisualization) {
		var ret EventVisualizationParams
		return ret
	}
	return *o.EventVisualization
}

// GetEventVisualizationOk returns a tuple with the EventVisualization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetEventVisualizationOk() (*EventVisualizationParams, bool) {
	if o == nil || IsNil(o.EventVisualization) {
		return nil, false
	}
	return o.EventVisualization, true
}

// HasEventVisualization returns a boolean if a field has been set.
func (o *InterpretationParams) HasEventVisualization() bool {
	if o != nil && !IsNil(o.EventVisualization) {
		return true
	}

	return false
}

// SetEventVisualization gets a reference to the given EventVisualizationParams and assigns it to the EventVisualization field.
func (o *InterpretationParams) SetEventVisualization(v EventVisualizationParams) {
	o.EventVisualization = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *InterpretationParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *InterpretationParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *InterpretationParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *InterpretationParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *InterpretationParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *InterpretationParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InterpretationParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InterpretationParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InterpretationParams) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *InterpretationParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *InterpretationParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *InterpretationParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *InterpretationParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *InterpretationParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *InterpretationParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLikedBy returns the LikedBy field value if set, zero value otherwise.
func (o *InterpretationParams) GetLikedBy() []AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LikedBy) {
		var ret []AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return o.LikedBy
}

// GetLikedByOk returns a tuple with the LikedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetLikedByOk() ([]AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LikedBy) {
		return nil, false
	}
	return o.LikedBy, true
}

// HasLikedBy returns a boolean if a field has been set.
func (o *InterpretationParams) HasLikedBy() bool {
	if o != nil && !IsNil(o.LikedBy) {
		return true
	}

	return false
}

// SetLikedBy gets a reference to the given []AggregateDataExchangeParamsCreatedBy and assigns it to the LikedBy field.
func (o *InterpretationParams) SetLikedBy(v []AggregateDataExchangeParamsCreatedBy) {
	o.LikedBy = v
}

// GetLikes returns the Likes field value
func (o *InterpretationParams) GetLikes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Likes
}

// GetLikesOk returns a tuple with the Likes field value
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetLikesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Likes, true
}

// SetLikes sets field value
func (o *InterpretationParams) SetLikes(v int32) {
	o.Likes = v
}

// GetMap returns the Map field value if set, zero value otherwise.
func (o *InterpretationParams) GetMap() MapParams {
	if o == nil || IsNil(o.Map) {
		var ret MapParams
		return ret
	}
	return *o.Map
}

// GetMapOk returns a tuple with the Map field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetMapOk() (*MapParams, bool) {
	if o == nil || IsNil(o.Map) {
		return nil, false
	}
	return o.Map, true
}

// HasMap returns a boolean if a field has been set.
func (o *InterpretationParams) HasMap() bool {
	if o != nil && !IsNil(o.Map) {
		return true
	}

	return false
}

// SetMap gets a reference to the given MapParams and assigns it to the Map field.
func (o *InterpretationParams) SetMap(v MapParams) {
	o.Map = &v
}

// GetMentions returns the Mentions field value if set, zero value otherwise.
func (o *InterpretationParams) GetMentions() []Mention {
	if o == nil || IsNil(o.Mentions) {
		var ret []Mention
		return ret
	}
	return o.Mentions
}

// GetMentionsOk returns a tuple with the Mentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetMentionsOk() ([]Mention, bool) {
	if o == nil || IsNil(o.Mentions) {
		return nil, false
	}
	return o.Mentions, true
}

// HasMentions returns a boolean if a field has been set.
func (o *InterpretationParams) HasMentions() bool {
	if o != nil && !IsNil(o.Mentions) {
		return true
	}

	return false
}

// SetMentions gets a reference to the given []Mention and assigns it to the Mentions field.
func (o *InterpretationParams) SetMentions(v []Mention) {
	o.Mentions = v
}

// GetOrganisationUnit returns the OrganisationUnit field value if set, zero value otherwise.
func (o *InterpretationParams) GetOrganisationUnit() OrganisationUnitParams {
	if o == nil || IsNil(o.OrganisationUnit) {
		var ret OrganisationUnitParams
		return ret
	}
	return *o.OrganisationUnit
}

// GetOrganisationUnitOk returns a tuple with the OrganisationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetOrganisationUnitOk() (*OrganisationUnitParams, bool) {
	if o == nil || IsNil(o.OrganisationUnit) {
		return nil, false
	}
	return o.OrganisationUnit, true
}

// HasOrganisationUnit returns a boolean if a field has been set.
func (o *InterpretationParams) HasOrganisationUnit() bool {
	if o != nil && !IsNil(o.OrganisationUnit) {
		return true
	}

	return false
}

// SetOrganisationUnit gets a reference to the given OrganisationUnitParams and assigns it to the OrganisationUnit field.
func (o *InterpretationParams) SetOrganisationUnit(v OrganisationUnitParams) {
	o.OrganisationUnit = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *InterpretationParams) GetPeriod() string {
	if o == nil || IsNil(o.Period) {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *InterpretationParams) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *InterpretationParams) SetPeriod(v string) {
	o.Period = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *InterpretationParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *InterpretationParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *InterpretationParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *InterpretationParams) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *InterpretationParams) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *InterpretationParams) SetText(v string) {
	o.Text = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *InterpretationParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *InterpretationParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *InterpretationParams) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetType returns the Type field value
func (o *InterpretationParams) GetType() AnalyticsFavoriteType {
	if o == nil {
		var ret AnalyticsFavoriteType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetTypeOk() (*AnalyticsFavoriteType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InterpretationParams) SetType(v AnalyticsFavoriteType) {
	o.Type = v
}

// GetVisualization returns the Visualization field value if set, zero value otherwise.
func (o *InterpretationParams) GetVisualization() VisualizationParams {
	if o == nil || IsNil(o.Visualization) {
		var ret VisualizationParams
		return ret
	}
	return *o.Visualization
}

// GetVisualizationOk returns a tuple with the Visualization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterpretationParams) GetVisualizationOk() (*VisualizationParams, bool) {
	if o == nil || IsNil(o.Visualization) {
		return nil, false
	}
	return o.Visualization, true
}

// HasVisualization returns a boolean if a field has been set.
func (o *InterpretationParams) HasVisualization() bool {
	if o != nil && !IsNil(o.Visualization) {
		return true
	}

	return false
}

// SetVisualization gets a reference to the given VisualizationParams and assigns it to the Visualization field.
func (o *InterpretationParams) SetVisualization(v VisualizationParams) {
	o.Visualization = &v
}

func (o InterpretationParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterpretationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DataSet) {
		toSerialize["dataSet"] = o.DataSet
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EventChart) {
		toSerialize["eventChart"] = o.EventChart
	}
	if !IsNil(o.EventReport) {
		toSerialize["eventReport"] = o.EventReport
	}
	if !IsNil(o.EventVisualization) {
		toSerialize["eventVisualization"] = o.EventVisualization
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LikedBy) {
		toSerialize["likedBy"] = o.LikedBy
	}
	toSerialize["likes"] = o.Likes
	if !IsNil(o.Map) {
		toSerialize["map"] = o.Map
	}
	if !IsNil(o.Mentions) {
		toSerialize["mentions"] = o.Mentions
	}
	if !IsNil(o.OrganisationUnit) {
		toSerialize["organisationUnit"] = o.OrganisationUnit
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Visualization) {
		toSerialize["visualization"] = o.Visualization
	}
	return toSerialize, nil
}

func (o *InterpretationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"likes",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInterpretationParams := _InterpretationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInterpretationParams)

	if err != nil {
		return err
	}

	*o = InterpretationParams(varInterpretationParams)

	return err
}

type NullableInterpretationParams struct {
	value *InterpretationParams
	isSet bool
}

func (v NullableInterpretationParams) Get() *InterpretationParams {
	return v.value
}

func (v *NullableInterpretationParams) Set(val *InterpretationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableInterpretationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableInterpretationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterpretationParams(val *InterpretationParams) *NullableInterpretationParams {
	return &NullableInterpretationParams{value: val, isSet: true}
}

func (v NullableInterpretationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterpretationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
