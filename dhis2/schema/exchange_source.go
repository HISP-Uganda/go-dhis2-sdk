/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ExchangeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeSource{}

// ExchangeSource struct for ExchangeSource
type ExchangeSource struct {
	Params   *SourceParams   `json:"params,omitempty"`
	Requests []SourceRequest `json:"requests,omitempty"`
}

// NewExchangeSource instantiates a new ExchangeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeSource() *ExchangeSource {
	this := ExchangeSource{}
	return &this
}

// NewExchangeSourceWithDefaults instantiates a new ExchangeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeSourceWithDefaults() *ExchangeSource {
	this := ExchangeSource{}
	return &this
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *ExchangeSource) GetParams() SourceParams {
	if o == nil || IsNil(o.Params) {
		var ret SourceParams
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeSource) GetParamsOk() (*SourceParams, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *ExchangeSource) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given SourceParams and assigns it to the Params field.
func (o *ExchangeSource) SetParams(v SourceParams) {
	o.Params = &v
}

// GetRequests returns the Requests field value if set, zero value otherwise.
func (o *ExchangeSource) GetRequests() []SourceRequest {
	if o == nil || IsNil(o.Requests) {
		var ret []SourceRequest
		return ret
	}
	return o.Requests
}

// GetRequestsOk returns a tuple with the Requests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeSource) GetRequestsOk() ([]SourceRequest, bool) {
	if o == nil || IsNil(o.Requests) {
		return nil, false
	}
	return o.Requests, true
}

// HasRequests returns a boolean if a field has been set.
func (o *ExchangeSource) HasRequests() bool {
	if o != nil && !IsNil(o.Requests) {
		return true
	}

	return false
}

// SetRequests gets a reference to the given []SourceRequest and assigns it to the Requests field.
func (o *ExchangeSource) SetRequests(v []SourceRequest) {
	o.Requests = v
}

func (o ExchangeSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.Requests) {
		toSerialize["requests"] = o.Requests
	}
	return toSerialize, nil
}

type NullableExchangeSource struct {
	value *ExchangeSource
	isSet bool
}

func (v NullableExchangeSource) Get() *ExchangeSource {
	return v.value
}

func (v *NullableExchangeSource) Set(val *ExchangeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeSource(val *ExchangeSource) *NullableExchangeSource {
	return &NullableExchangeSource{value: val, isSet: true}
}

func (v NullableExchangeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
