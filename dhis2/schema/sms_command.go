/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SMSCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SMSCommand{}

// SMSCommand struct for SMSCommand
type SMSCommand struct {
	Access                        *Access                            `json:"access,omitempty"`
	AttributeValues               []AttributeValue                   `json:"attributeValues,omitempty"`
	Code                          *string                            `json:"code,omitempty"`
	CodeValueSeparator            *string                            `json:"codeValueSeparator,omitempty"`
	CompletenessMethod            string                             `json:"completenessMethod"`
	Created                       *time.Time                         `json:"created,omitempty"`
	CreatedBy                     *AggregateDataExchangeCreatedBy    `json:"createdBy,omitempty"`
	CurrentPeriodUsedForReporting *bool                              `json:"currentPeriodUsedForReporting,omitempty"`
	Dataset                       *DataApprovalWorkflowDataSetsInner `json:"dataset,omitempty"`
	DefaultMessage                *string                            `json:"defaultMessage,omitempty"`
	DisplayName                   *string                            `json:"displayName,omitempty"`
	ExternalAccess                *bool                              `json:"externalAccess,omitempty"`
	Favorite                      *bool                              `json:"favorite,omitempty"`
	Favorites                     []string                           `json:"favorites,omitempty"`
	Href                          *string                            `json:"href,omitempty"`
	Id                            *string                            `json:"id,omitempty"`
	LastUpdated                   *time.Time                         `json:"lastUpdated,omitempty"`
	LastUpdatedBy                 *AggregateDataExchangeCreatedBy    `json:"lastUpdatedBy,omitempty"`
	MoreThanOneOrgUnitMessage     *string                            `json:"moreThanOneOrgUnitMessage,omitempty"`
	Name                          *string                            `json:"name,omitempty"`
	NoUserMessage                 *string                            `json:"noUserMessage,omitempty"`
	ParserType                    string                             `json:"parserType"`
	Program                       *EventVisualizationProgram         `json:"program,omitempty"`
	ProgramStage                  *CategoryProgramStage              `json:"programStage,omitempty"`
	PublicAccess                  *string                            `json:"publicAccess,omitempty"`
	ReceivedMessage               *string                            `json:"receivedMessage,omitempty"`
	Separator                     *string                            `json:"separator,omitempty"`
	Sharing                       *Sharing                           `json:"sharing,omitempty"`
	SmsCodes                      []SMSCode                          `json:"smsCodes,omitempty"`
	SpecialCharacters             []SMSSpecialCharacter              `json:"specialCharacters,omitempty"`
	SuccessMessage                *string                            `json:"successMessage,omitempty"`
	Translations                  []Translation                      `json:"translations,omitempty"`
	User                          *AggregateDataExchangeCreatedBy    `json:"user,omitempty"`
	UserAccesses                  []LegacyUserAccess                 `json:"userAccesses,omitempty"`
	UserGroup                     *ConfigurationFeedbackRecipients   `json:"userGroup,omitempty"`
	UserGroupAccesses             []LegacyUserGroupAccess            `json:"userGroupAccesses,omitempty"`
	WrongFormatMessage            *string                            `json:"wrongFormatMessage,omitempty"`
}

type _SMSCommand SMSCommand

// NewSMSCommand instantiates a new SMSCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMSCommand(completenessMethod string, parserType string) *SMSCommand {
	this := SMSCommand{}
	this.CompletenessMethod = completenessMethod
	this.ParserType = parserType
	return &this
}

// NewSMSCommandWithDefaults instantiates a new SMSCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMSCommandWithDefaults() *SMSCommand {
	this := SMSCommand{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *SMSCommand) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *SMSCommand) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *SMSCommand) SetAccess(v Access) {
	o.Access = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *SMSCommand) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *SMSCommand) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *SMSCommand) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SMSCommand) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SMSCommand) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SMSCommand) SetCode(v string) {
	o.Code = &v
}

// GetCodeValueSeparator returns the CodeValueSeparator field value if set, zero value otherwise.
func (o *SMSCommand) GetCodeValueSeparator() string {
	if o == nil || IsNil(o.CodeValueSeparator) {
		var ret string
		return ret
	}
	return *o.CodeValueSeparator
}

// GetCodeValueSeparatorOk returns a tuple with the CodeValueSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetCodeValueSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.CodeValueSeparator) {
		return nil, false
	}
	return o.CodeValueSeparator, true
}

// HasCodeValueSeparator returns a boolean if a field has been set.
func (o *SMSCommand) HasCodeValueSeparator() bool {
	if o != nil && !IsNil(o.CodeValueSeparator) {
		return true
	}

	return false
}

// SetCodeValueSeparator gets a reference to the given string and assigns it to the CodeValueSeparator field.
func (o *SMSCommand) SetCodeValueSeparator(v string) {
	o.CodeValueSeparator = &v
}

// GetCompletenessMethod returns the CompletenessMethod field value
func (o *SMSCommand) GetCompletenessMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompletenessMethod
}

// GetCompletenessMethodOk returns a tuple with the CompletenessMethod field value
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetCompletenessMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletenessMethod, true
}

// SetCompletenessMethod sets field value
func (o *SMSCommand) SetCompletenessMethod(v string) {
	o.CompletenessMethod = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *SMSCommand) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *SMSCommand) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *SMSCommand) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *SMSCommand) GetCreatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetCreatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *SMSCommand) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the CreatedBy field.
func (o *SMSCommand) SetCreatedBy(v AggregateDataExchangeCreatedBy) {
	o.CreatedBy = &v
}

// GetCurrentPeriodUsedForReporting returns the CurrentPeriodUsedForReporting field value if set, zero value otherwise.
func (o *SMSCommand) GetCurrentPeriodUsedForReporting() bool {
	if o == nil || IsNil(o.CurrentPeriodUsedForReporting) {
		var ret bool
		return ret
	}
	return *o.CurrentPeriodUsedForReporting
}

// GetCurrentPeriodUsedForReportingOk returns a tuple with the CurrentPeriodUsedForReporting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetCurrentPeriodUsedForReportingOk() (*bool, bool) {
	if o == nil || IsNil(o.CurrentPeriodUsedForReporting) {
		return nil, false
	}
	return o.CurrentPeriodUsedForReporting, true
}

// HasCurrentPeriodUsedForReporting returns a boolean if a field has been set.
func (o *SMSCommand) HasCurrentPeriodUsedForReporting() bool {
	if o != nil && !IsNil(o.CurrentPeriodUsedForReporting) {
		return true
	}

	return false
}

// SetCurrentPeriodUsedForReporting gets a reference to the given bool and assigns it to the CurrentPeriodUsedForReporting field.
func (o *SMSCommand) SetCurrentPeriodUsedForReporting(v bool) {
	o.CurrentPeriodUsedForReporting = &v
}

// GetDataset returns the Dataset field value if set, zero value otherwise.
func (o *SMSCommand) GetDataset() DataApprovalWorkflowDataSetsInner {
	if o == nil || IsNil(o.Dataset) {
		var ret DataApprovalWorkflowDataSetsInner
		return ret
	}
	return *o.Dataset
}

// GetDatasetOk returns a tuple with the Dataset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetDatasetOk() (*DataApprovalWorkflowDataSetsInner, bool) {
	if o == nil || IsNil(o.Dataset) {
		return nil, false
	}
	return o.Dataset, true
}

// HasDataset returns a boolean if a field has been set.
func (o *SMSCommand) HasDataset() bool {
	if o != nil && !IsNil(o.Dataset) {
		return true
	}

	return false
}

// SetDataset gets a reference to the given DataApprovalWorkflowDataSetsInner and assigns it to the Dataset field.
func (o *SMSCommand) SetDataset(v DataApprovalWorkflowDataSetsInner) {
	o.Dataset = &v
}

// GetDefaultMessage returns the DefaultMessage field value if set, zero value otherwise.
func (o *SMSCommand) GetDefaultMessage() string {
	if o == nil || IsNil(o.DefaultMessage) {
		var ret string
		return ret
	}
	return *o.DefaultMessage
}

// GetDefaultMessageOk returns a tuple with the DefaultMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetDefaultMessageOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultMessage) {
		return nil, false
	}
	return o.DefaultMessage, true
}

// HasDefaultMessage returns a boolean if a field has been set.
func (o *SMSCommand) HasDefaultMessage() bool {
	if o != nil && !IsNil(o.DefaultMessage) {
		return true
	}

	return false
}

// SetDefaultMessage gets a reference to the given string and assigns it to the DefaultMessage field.
func (o *SMSCommand) SetDefaultMessage(v string) {
	o.DefaultMessage = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SMSCommand) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SMSCommand) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SMSCommand) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExternalAccess returns the ExternalAccess field value if set, zero value otherwise.
func (o *SMSCommand) GetExternalAccess() bool {
	if o == nil || IsNil(o.ExternalAccess) {
		var ret bool
		return ret
	}
	return *o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetExternalAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAccess) {
		return nil, false
	}
	return o.ExternalAccess, true
}

// HasExternalAccess returns a boolean if a field has been set.
func (o *SMSCommand) HasExternalAccess() bool {
	if o != nil && !IsNil(o.ExternalAccess) {
		return true
	}

	return false
}

// SetExternalAccess gets a reference to the given bool and assigns it to the ExternalAccess field.
func (o *SMSCommand) SetExternalAccess(v bool) {
	o.ExternalAccess = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *SMSCommand) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *SMSCommand) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *SMSCommand) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *SMSCommand) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *SMSCommand) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *SMSCommand) SetFavorites(v []string) {
	o.Favorites = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *SMSCommand) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *SMSCommand) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *SMSCommand) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SMSCommand) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SMSCommand) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SMSCommand) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *SMSCommand) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *SMSCommand) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *SMSCommand) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *SMSCommand) GetLastUpdatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetLastUpdatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *SMSCommand) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the LastUpdatedBy field.
func (o *SMSCommand) SetLastUpdatedBy(v AggregateDataExchangeCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetMoreThanOneOrgUnitMessage returns the MoreThanOneOrgUnitMessage field value if set, zero value otherwise.
func (o *SMSCommand) GetMoreThanOneOrgUnitMessage() string {
	if o == nil || IsNil(o.MoreThanOneOrgUnitMessage) {
		var ret string
		return ret
	}
	return *o.MoreThanOneOrgUnitMessage
}

// GetMoreThanOneOrgUnitMessageOk returns a tuple with the MoreThanOneOrgUnitMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetMoreThanOneOrgUnitMessageOk() (*string, bool) {
	if o == nil || IsNil(o.MoreThanOneOrgUnitMessage) {
		return nil, false
	}
	return o.MoreThanOneOrgUnitMessage, true
}

// HasMoreThanOneOrgUnitMessage returns a boolean if a field has been set.
func (o *SMSCommand) HasMoreThanOneOrgUnitMessage() bool {
	if o != nil && !IsNil(o.MoreThanOneOrgUnitMessage) {
		return true
	}

	return false
}

// SetMoreThanOneOrgUnitMessage gets a reference to the given string and assigns it to the MoreThanOneOrgUnitMessage field.
func (o *SMSCommand) SetMoreThanOneOrgUnitMessage(v string) {
	o.MoreThanOneOrgUnitMessage = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SMSCommand) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SMSCommand) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SMSCommand) SetName(v string) {
	o.Name = &v
}

// GetNoUserMessage returns the NoUserMessage field value if set, zero value otherwise.
func (o *SMSCommand) GetNoUserMessage() string {
	if o == nil || IsNil(o.NoUserMessage) {
		var ret string
		return ret
	}
	return *o.NoUserMessage
}

// GetNoUserMessageOk returns a tuple with the NoUserMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetNoUserMessageOk() (*string, bool) {
	if o == nil || IsNil(o.NoUserMessage) {
		return nil, false
	}
	return o.NoUserMessage, true
}

// HasNoUserMessage returns a boolean if a field has been set.
func (o *SMSCommand) HasNoUserMessage() bool {
	if o != nil && !IsNil(o.NoUserMessage) {
		return true
	}

	return false
}

// SetNoUserMessage gets a reference to the given string and assigns it to the NoUserMessage field.
func (o *SMSCommand) SetNoUserMessage(v string) {
	o.NoUserMessage = &v
}

// GetParserType returns the ParserType field value
func (o *SMSCommand) GetParserType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParserType
}

// GetParserTypeOk returns a tuple with the ParserType field value
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetParserTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParserType, true
}

// SetParserType sets field value
func (o *SMSCommand) SetParserType(v string) {
	o.ParserType = v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *SMSCommand) GetProgram() EventVisualizationProgram {
	if o == nil || IsNil(o.Program) {
		var ret EventVisualizationProgram
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetProgramOk() (*EventVisualizationProgram, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *SMSCommand) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given EventVisualizationProgram and assigns it to the Program field.
func (o *SMSCommand) SetProgram(v EventVisualizationProgram) {
	o.Program = &v
}

// GetProgramStage returns the ProgramStage field value if set, zero value otherwise.
func (o *SMSCommand) GetProgramStage() CategoryProgramStage {
	if o == nil || IsNil(o.ProgramStage) {
		var ret CategoryProgramStage
		return ret
	}
	return *o.ProgramStage
}

// GetProgramStageOk returns a tuple with the ProgramStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetProgramStageOk() (*CategoryProgramStage, bool) {
	if o == nil || IsNil(o.ProgramStage) {
		return nil, false
	}
	return o.ProgramStage, true
}

// HasProgramStage returns a boolean if a field has been set.
func (o *SMSCommand) HasProgramStage() bool {
	if o != nil && !IsNil(o.ProgramStage) {
		return true
	}

	return false
}

// SetProgramStage gets a reference to the given CategoryProgramStage and assigns it to the ProgramStage field.
func (o *SMSCommand) SetProgramStage(v CategoryProgramStage) {
	o.ProgramStage = &v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *SMSCommand) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *SMSCommand) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *SMSCommand) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetReceivedMessage returns the ReceivedMessage field value if set, zero value otherwise.
func (o *SMSCommand) GetReceivedMessage() string {
	if o == nil || IsNil(o.ReceivedMessage) {
		var ret string
		return ret
	}
	return *o.ReceivedMessage
}

// GetReceivedMessageOk returns a tuple with the ReceivedMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetReceivedMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ReceivedMessage) {
		return nil, false
	}
	return o.ReceivedMessage, true
}

// HasReceivedMessage returns a boolean if a field has been set.
func (o *SMSCommand) HasReceivedMessage() bool {
	if o != nil && !IsNil(o.ReceivedMessage) {
		return true
	}

	return false
}

// SetReceivedMessage gets a reference to the given string and assigns it to the ReceivedMessage field.
func (o *SMSCommand) SetReceivedMessage(v string) {
	o.ReceivedMessage = &v
}

// GetSeparator returns the Separator field value if set, zero value otherwise.
func (o *SMSCommand) GetSeparator() string {
	if o == nil || IsNil(o.Separator) {
		var ret string
		return ret
	}
	return *o.Separator
}

// GetSeparatorOk returns a tuple with the Separator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.Separator) {
		return nil, false
	}
	return o.Separator, true
}

// HasSeparator returns a boolean if a field has been set.
func (o *SMSCommand) HasSeparator() bool {
	if o != nil && !IsNil(o.Separator) {
		return true
	}

	return false
}

// SetSeparator gets a reference to the given string and assigns it to the Separator field.
func (o *SMSCommand) SetSeparator(v string) {
	o.Separator = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *SMSCommand) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *SMSCommand) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *SMSCommand) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetSmsCodes returns the SmsCodes field value if set, zero value otherwise.
func (o *SMSCommand) GetSmsCodes() []SMSCode {
	if o == nil || IsNil(o.SmsCodes) {
		var ret []SMSCode
		return ret
	}
	return o.SmsCodes
}

// GetSmsCodesOk returns a tuple with the SmsCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetSmsCodesOk() ([]SMSCode, bool) {
	if o == nil || IsNil(o.SmsCodes) {
		return nil, false
	}
	return o.SmsCodes, true
}

// HasSmsCodes returns a boolean if a field has been set.
func (o *SMSCommand) HasSmsCodes() bool {
	if o != nil && !IsNil(o.SmsCodes) {
		return true
	}

	return false
}

// SetSmsCodes gets a reference to the given []SMSCode and assigns it to the SmsCodes field.
func (o *SMSCommand) SetSmsCodes(v []SMSCode) {
	o.SmsCodes = v
}

// GetSpecialCharacters returns the SpecialCharacters field value if set, zero value otherwise.
func (o *SMSCommand) GetSpecialCharacters() []SMSSpecialCharacter {
	if o == nil || IsNil(o.SpecialCharacters) {
		var ret []SMSSpecialCharacter
		return ret
	}
	return o.SpecialCharacters
}

// GetSpecialCharactersOk returns a tuple with the SpecialCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetSpecialCharactersOk() ([]SMSSpecialCharacter, bool) {
	if o == nil || IsNil(o.SpecialCharacters) {
		return nil, false
	}
	return o.SpecialCharacters, true
}

// HasSpecialCharacters returns a boolean if a field has been set.
func (o *SMSCommand) HasSpecialCharacters() bool {
	if o != nil && !IsNil(o.SpecialCharacters) {
		return true
	}

	return false
}

// SetSpecialCharacters gets a reference to the given []SMSSpecialCharacter and assigns it to the SpecialCharacters field.
func (o *SMSCommand) SetSpecialCharacters(v []SMSSpecialCharacter) {
	o.SpecialCharacters = v
}

// GetSuccessMessage returns the SuccessMessage field value if set, zero value otherwise.
func (o *SMSCommand) GetSuccessMessage() string {
	if o == nil || IsNil(o.SuccessMessage) {
		var ret string
		return ret
	}
	return *o.SuccessMessage
}

// GetSuccessMessageOk returns a tuple with the SuccessMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetSuccessMessageOk() (*string, bool) {
	if o == nil || IsNil(o.SuccessMessage) {
		return nil, false
	}
	return o.SuccessMessage, true
}

// HasSuccessMessage returns a boolean if a field has been set.
func (o *SMSCommand) HasSuccessMessage() bool {
	if o != nil && !IsNil(o.SuccessMessage) {
		return true
	}

	return false
}

// SetSuccessMessage gets a reference to the given string and assigns it to the SuccessMessage field.
func (o *SMSCommand) SetSuccessMessage(v string) {
	o.SuccessMessage = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *SMSCommand) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *SMSCommand) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *SMSCommand) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SMSCommand) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SMSCommand) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *SMSCommand) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *SMSCommand) GetUserAccesses() []LegacyUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []LegacyUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetUserAccessesOk() ([]LegacyUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *SMSCommand) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []LegacyUserAccess and assigns it to the UserAccesses field.
func (o *SMSCommand) SetUserAccesses(v []LegacyUserAccess) {
	o.UserAccesses = v
}

// GetUserGroup returns the UserGroup field value if set, zero value otherwise.
func (o *SMSCommand) GetUserGroup() ConfigurationFeedbackRecipients {
	if o == nil || IsNil(o.UserGroup) {
		var ret ConfigurationFeedbackRecipients
		return ret
	}
	return *o.UserGroup
}

// GetUserGroupOk returns a tuple with the UserGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetUserGroupOk() (*ConfigurationFeedbackRecipients, bool) {
	if o == nil || IsNil(o.UserGroup) {
		return nil, false
	}
	return o.UserGroup, true
}

// HasUserGroup returns a boolean if a field has been set.
func (o *SMSCommand) HasUserGroup() bool {
	if o != nil && !IsNil(o.UserGroup) {
		return true
	}

	return false
}

// SetUserGroup gets a reference to the given ConfigurationFeedbackRecipients and assigns it to the UserGroup field.
func (o *SMSCommand) SetUserGroup(v ConfigurationFeedbackRecipients) {
	o.UserGroup = &v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *SMSCommand) GetUserGroupAccesses() []LegacyUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []LegacyUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetUserGroupAccessesOk() ([]LegacyUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *SMSCommand) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []LegacyUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *SMSCommand) SetUserGroupAccesses(v []LegacyUserGroupAccess) {
	o.UserGroupAccesses = v
}

// GetWrongFormatMessage returns the WrongFormatMessage field value if set, zero value otherwise.
func (o *SMSCommand) GetWrongFormatMessage() string {
	if o == nil || IsNil(o.WrongFormatMessage) {
		var ret string
		return ret
	}
	return *o.WrongFormatMessage
}

// GetWrongFormatMessageOk returns a tuple with the WrongFormatMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCommand) GetWrongFormatMessageOk() (*string, bool) {
	if o == nil || IsNil(o.WrongFormatMessage) {
		return nil, false
	}
	return o.WrongFormatMessage, true
}

// HasWrongFormatMessage returns a boolean if a field has been set.
func (o *SMSCommand) HasWrongFormatMessage() bool {
	if o != nil && !IsNil(o.WrongFormatMessage) {
		return true
	}

	return false
}

// SetWrongFormatMessage gets a reference to the given string and assigns it to the WrongFormatMessage field.
func (o *SMSCommand) SetWrongFormatMessage(v string) {
	o.WrongFormatMessage = &v
}

func (o SMSCommand) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SMSCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CodeValueSeparator) {
		toSerialize["codeValueSeparator"] = o.CodeValueSeparator
	}
	toSerialize["completenessMethod"] = o.CompletenessMethod
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CurrentPeriodUsedForReporting) {
		toSerialize["currentPeriodUsedForReporting"] = o.CurrentPeriodUsedForReporting
	}
	if !IsNil(o.Dataset) {
		toSerialize["dataset"] = o.Dataset
	}
	if !IsNil(o.DefaultMessage) {
		toSerialize["defaultMessage"] = o.DefaultMessage
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.ExternalAccess) {
		toSerialize["externalAccess"] = o.ExternalAccess
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.MoreThanOneOrgUnitMessage) {
		toSerialize["moreThanOneOrgUnitMessage"] = o.MoreThanOneOrgUnitMessage
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NoUserMessage) {
		toSerialize["noUserMessage"] = o.NoUserMessage
	}
	toSerialize["parserType"] = o.ParserType
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.ProgramStage) {
		toSerialize["programStage"] = o.ProgramStage
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	if !IsNil(o.ReceivedMessage) {
		toSerialize["receivedMessage"] = o.ReceivedMessage
	}
	if !IsNil(o.Separator) {
		toSerialize["separator"] = o.Separator
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.SmsCodes) {
		toSerialize["smsCodes"] = o.SmsCodes
	}
	if !IsNil(o.SpecialCharacters) {
		toSerialize["specialCharacters"] = o.SpecialCharacters
	}
	if !IsNil(o.SuccessMessage) {
		toSerialize["successMessage"] = o.SuccessMessage
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserGroup) {
		toSerialize["userGroup"] = o.UserGroup
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	if !IsNil(o.WrongFormatMessage) {
		toSerialize["wrongFormatMessage"] = o.WrongFormatMessage
	}
	return toSerialize, nil
}

func (o *SMSCommand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"completenessMethod",
		"parserType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSMSCommand := _SMSCommand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSMSCommand)

	if err != nil {
		return err
	}

	*o = SMSCommand(varSMSCommand)

	return err
}

type NullableSMSCommand struct {
	value *SMSCommand
	isSet bool
}

func (v NullableSMSCommand) Get() *SMSCommand {
	return v.value
}

func (v *NullableSMSCommand) Set(val *SMSCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableSMSCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableSMSCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMSCommand(val *SMSCommand) *NullableSMSCommand {
	return &NullableSMSCommand{value: val, isSet: true}
}

func (v NullableSMSCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMSCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
