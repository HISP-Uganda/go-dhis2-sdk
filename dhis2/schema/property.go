/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Property type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Property{}

// Property struct for Property
type Property struct {
	AnalyticalObject   *bool    `json:"analyticalObject,omitempty"`
	ApiEndpoint        *string  `json:"apiEndpoint,omitempty"`
	Attribute          *bool    `json:"attribute,omitempty"`
	Cascade            *string  `json:"cascade,omitempty"`
	Collection         *bool    `json:"collection,omitempty"`
	CollectionName     *string  `json:"collectionName,omitempty"`
	CollectionWrapping *bool    `json:"collectionWrapping,omitempty"`
	Constants          []string `json:"constants,omitempty"`
	// The actual type is unknown.   (Java type was: `class java.lang.Object`)
	DefaultValue        *any             `json:"defaultValue,omitempty"`
	Description         *string          `json:"description,omitempty"`
	EmbeddedObject      *bool            `json:"embeddedObject,omitempty"`
	FieldName           *string          `json:"fieldName,omitempty"`
	GistPreferences     *GistPreferences `json:"gistPreferences,omitempty"`
	Href                *string          `json:"href,omitempty"`
	I18nTranslationKey  *string          `json:"i18nTranslationKey,omitempty"`
	IdentifiableObject  *bool            `json:"identifiableObject,omitempty"`
	InverseRole         *string          `json:"inverseRole,omitempty"`
	ItemKlass           *string          `json:"itemKlass,omitempty"`
	ItemPropertyType    PropertyType     `json:"itemPropertyType"`
	Klass               *string          `json:"klass,omitempty"`
	Length              *int32           `json:"length,omitempty"`
	ManyToMany          *bool            `json:"manyToMany,omitempty"`
	ManyToOne           *bool            `json:"manyToOne,omitempty"`
	Max                 *float64         `json:"max,omitempty"`
	Min                 *float64         `json:"min,omitempty"`
	Name                *string          `json:"name,omitempty"`
	NameableObject      *bool            `json:"nameableObject,omitempty"`
	Namespace           *string          `json:"namespace,omitempty"`
	OneToMany           *bool            `json:"oneToMany,omitempty"`
	OneToOne            *bool            `json:"oneToOne,omitempty"`
	Ordered             *bool            `json:"ordered,omitempty"`
	Owner               *bool            `json:"owner,omitempty"`
	OwningRole          *string          `json:"owningRole,omitempty"`
	Persisted           *bool            `json:"persisted,omitempty"`
	PropertyTransformer *bool            `json:"propertyTransformer,omitempty"`
	PropertyType        PropertyType     `json:"propertyType"`
	Readable            *bool            `json:"readable,omitempty"`
	RelativeApiEndpoint *string          `json:"relativeApiEndpoint,omitempty"`
	Required            *bool            `json:"required,omitempty"`
	Simple              *bool            `json:"simple,omitempty"`
	Sortable            *bool            `json:"sortable,omitempty"`
	Translatable        *bool            `json:"translatable,omitempty"`
	TranslationKey      *string          `json:"translationKey,omitempty"`
	Unique              *bool            `json:"unique,omitempty"`
	Writable            *bool            `json:"writable,omitempty"`
}

type _Property Property

// NewProperty instantiates a new Property object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProperty(itemPropertyType PropertyType, propertyType PropertyType) *Property {
	this := Property{}
	this.ItemPropertyType = itemPropertyType
	this.PropertyType = propertyType
	return &this
}

// NewPropertyWithDefaults instantiates a new Property object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyWithDefaults() *Property {
	this := Property{}
	return &this
}

// GetAnalyticalObject returns the AnalyticalObject field value if set, zero value otherwise.
func (o *Property) GetAnalyticalObject() bool {
	if o == nil || IsNil(o.AnalyticalObject) {
		var ret bool
		return ret
	}
	return *o.AnalyticalObject
}

// GetAnalyticalObjectOk returns a tuple with the AnalyticalObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetAnalyticalObjectOk() (*bool, bool) {
	if o == nil || IsNil(o.AnalyticalObject) {
		return nil, false
	}
	return o.AnalyticalObject, true
}

// HasAnalyticalObject returns a boolean if a field has been set.
func (o *Property) HasAnalyticalObject() bool {
	if o != nil && !IsNil(o.AnalyticalObject) {
		return true
	}

	return false
}

// SetAnalyticalObject gets a reference to the given bool and assigns it to the AnalyticalObject field.
func (o *Property) SetAnalyticalObject(v bool) {
	o.AnalyticalObject = &v
}

// GetApiEndpoint returns the ApiEndpoint field value if set, zero value otherwise.
func (o *Property) GetApiEndpoint() string {
	if o == nil || IsNil(o.ApiEndpoint) {
		var ret string
		return ret
	}
	return *o.ApiEndpoint
}

// GetApiEndpointOk returns a tuple with the ApiEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetApiEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.ApiEndpoint) {
		return nil, false
	}
	return o.ApiEndpoint, true
}

// HasApiEndpoint returns a boolean if a field has been set.
func (o *Property) HasApiEndpoint() bool {
	if o != nil && !IsNil(o.ApiEndpoint) {
		return true
	}

	return false
}

// SetApiEndpoint gets a reference to the given string and assigns it to the ApiEndpoint field.
func (o *Property) SetApiEndpoint(v string) {
	o.ApiEndpoint = &v
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *Property) GetAttribute() bool {
	if o == nil || IsNil(o.Attribute) {
		var ret bool
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetAttributeOk() (*bool, bool) {
	if o == nil || IsNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *Property) HasAttribute() bool {
	if o != nil && !IsNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given bool and assigns it to the Attribute field.
func (o *Property) SetAttribute(v bool) {
	o.Attribute = &v
}

// GetCascade returns the Cascade field value if set, zero value otherwise.
func (o *Property) GetCascade() string {
	if o == nil || IsNil(o.Cascade) {
		var ret string
		return ret
	}
	return *o.Cascade
}

// GetCascadeOk returns a tuple with the Cascade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetCascadeOk() (*string, bool) {
	if o == nil || IsNil(o.Cascade) {
		return nil, false
	}
	return o.Cascade, true
}

// HasCascade returns a boolean if a field has been set.
func (o *Property) HasCascade() bool {
	if o != nil && !IsNil(o.Cascade) {
		return true
	}

	return false
}

// SetCascade gets a reference to the given string and assigns it to the Cascade field.
func (o *Property) SetCascade(v string) {
	o.Cascade = &v
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *Property) GetCollection() bool {
	if o == nil || IsNil(o.Collection) {
		var ret bool
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetCollectionOk() (*bool, bool) {
	if o == nil || IsNil(o.Collection) {
		return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *Property) HasCollection() bool {
	if o != nil && !IsNil(o.Collection) {
		return true
	}

	return false
}

// SetCollection gets a reference to the given bool and assigns it to the Collection field.
func (o *Property) SetCollection(v bool) {
	o.Collection = &v
}

// GetCollectionName returns the CollectionName field value if set, zero value otherwise.
func (o *Property) GetCollectionName() string {
	if o == nil || IsNil(o.CollectionName) {
		var ret string
		return ret
	}
	return *o.CollectionName
}

// GetCollectionNameOk returns a tuple with the CollectionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetCollectionNameOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionName) {
		return nil, false
	}
	return o.CollectionName, true
}

// HasCollectionName returns a boolean if a field has been set.
func (o *Property) HasCollectionName() bool {
	if o != nil && !IsNil(o.CollectionName) {
		return true
	}

	return false
}

// SetCollectionName gets a reference to the given string and assigns it to the CollectionName field.
func (o *Property) SetCollectionName(v string) {
	o.CollectionName = &v
}

// GetCollectionWrapping returns the CollectionWrapping field value if set, zero value otherwise.
func (o *Property) GetCollectionWrapping() bool {
	if o == nil || IsNil(o.CollectionWrapping) {
		var ret bool
		return ret
	}
	return *o.CollectionWrapping
}

// GetCollectionWrappingOk returns a tuple with the CollectionWrapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetCollectionWrappingOk() (*bool, bool) {
	if o == nil || IsNil(o.CollectionWrapping) {
		return nil, false
	}
	return o.CollectionWrapping, true
}

// HasCollectionWrapping returns a boolean if a field has been set.
func (o *Property) HasCollectionWrapping() bool {
	if o != nil && !IsNil(o.CollectionWrapping) {
		return true
	}

	return false
}

// SetCollectionWrapping gets a reference to the given bool and assigns it to the CollectionWrapping field.
func (o *Property) SetCollectionWrapping(v bool) {
	o.CollectionWrapping = &v
}

// GetConstants returns the Constants field value if set, zero value otherwise.
func (o *Property) GetConstants() []string {
	if o == nil || IsNil(o.Constants) {
		var ret []string
		return ret
	}
	return o.Constants
}

// GetConstantsOk returns a tuple with the Constants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetConstantsOk() ([]string, bool) {
	if o == nil || IsNil(o.Constants) {
		return nil, false
	}
	return o.Constants, true
}

// HasConstants returns a boolean if a field has been set.
func (o *Property) HasConstants() bool {
	if o != nil && !IsNil(o.Constants) {
		return true
	}

	return false
}

// SetConstants gets a reference to the given []string and assigns it to the Constants field.
func (o *Property) SetConstants(v []string) {
	o.Constants = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *Property) GetDefaultValue() any {
	if o == nil || IsNil(o.DefaultValue) {
		var ret any
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetDefaultValueOk() (*any, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *Property) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given any and assigns it to the DefaultValue field.
func (o *Property) SetDefaultValue(v any) {
	o.DefaultValue = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Property) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Property) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Property) SetDescription(v string) {
	o.Description = &v
}

// GetEmbeddedObject returns the EmbeddedObject field value if set, zero value otherwise.
func (o *Property) GetEmbeddedObject() bool {
	if o == nil || IsNil(o.EmbeddedObject) {
		var ret bool
		return ret
	}
	return *o.EmbeddedObject
}

// GetEmbeddedObjectOk returns a tuple with the EmbeddedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetEmbeddedObjectOk() (*bool, bool) {
	if o == nil || IsNil(o.EmbeddedObject) {
		return nil, false
	}
	return o.EmbeddedObject, true
}

// HasEmbeddedObject returns a boolean if a field has been set.
func (o *Property) HasEmbeddedObject() bool {
	if o != nil && !IsNil(o.EmbeddedObject) {
		return true
	}

	return false
}

// SetEmbeddedObject gets a reference to the given bool and assigns it to the EmbeddedObject field.
func (o *Property) SetEmbeddedObject(v bool) {
	o.EmbeddedObject = &v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *Property) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *Property) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *Property) SetFieldName(v string) {
	o.FieldName = &v
}

// GetGistPreferences returns the GistPreferences field value if set, zero value otherwise.
func (o *Property) GetGistPreferences() GistPreferences {
	if o == nil || IsNil(o.GistPreferences) {
		var ret GistPreferences
		return ret
	}
	return *o.GistPreferences
}

// GetGistPreferencesOk returns a tuple with the GistPreferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetGistPreferencesOk() (*GistPreferences, bool) {
	if o == nil || IsNil(o.GistPreferences) {
		return nil, false
	}
	return o.GistPreferences, true
}

// HasGistPreferences returns a boolean if a field has been set.
func (o *Property) HasGistPreferences() bool {
	if o != nil && !IsNil(o.GistPreferences) {
		return true
	}

	return false
}

// SetGistPreferences gets a reference to the given GistPreferences and assigns it to the GistPreferences field.
func (o *Property) SetGistPreferences(v GistPreferences) {
	o.GistPreferences = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Property) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Property) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Property) SetHref(v string) {
	o.Href = &v
}

// GetI18nTranslationKey returns the I18nTranslationKey field value if set, zero value otherwise.
func (o *Property) GetI18nTranslationKey() string {
	if o == nil || IsNil(o.I18nTranslationKey) {
		var ret string
		return ret
	}
	return *o.I18nTranslationKey
}

// GetI18nTranslationKeyOk returns a tuple with the I18nTranslationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetI18nTranslationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.I18nTranslationKey) {
		return nil, false
	}
	return o.I18nTranslationKey, true
}

// HasI18nTranslationKey returns a boolean if a field has been set.
func (o *Property) HasI18nTranslationKey() bool {
	if o != nil && !IsNil(o.I18nTranslationKey) {
		return true
	}

	return false
}

// SetI18nTranslationKey gets a reference to the given string and assigns it to the I18nTranslationKey field.
func (o *Property) SetI18nTranslationKey(v string) {
	o.I18nTranslationKey = &v
}

// GetIdentifiableObject returns the IdentifiableObject field value if set, zero value otherwise.
func (o *Property) GetIdentifiableObject() bool {
	if o == nil || IsNil(o.IdentifiableObject) {
		var ret bool
		return ret
	}
	return *o.IdentifiableObject
}

// GetIdentifiableObjectOk returns a tuple with the IdentifiableObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetIdentifiableObjectOk() (*bool, bool) {
	if o == nil || IsNil(o.IdentifiableObject) {
		return nil, false
	}
	return o.IdentifiableObject, true
}

// HasIdentifiableObject returns a boolean if a field has been set.
func (o *Property) HasIdentifiableObject() bool {
	if o != nil && !IsNil(o.IdentifiableObject) {
		return true
	}

	return false
}

// SetIdentifiableObject gets a reference to the given bool and assigns it to the IdentifiableObject field.
func (o *Property) SetIdentifiableObject(v bool) {
	o.IdentifiableObject = &v
}

// GetInverseRole returns the InverseRole field value if set, zero value otherwise.
func (o *Property) GetInverseRole() string {
	if o == nil || IsNil(o.InverseRole) {
		var ret string
		return ret
	}
	return *o.InverseRole
}

// GetInverseRoleOk returns a tuple with the InverseRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetInverseRoleOk() (*string, bool) {
	if o == nil || IsNil(o.InverseRole) {
		return nil, false
	}
	return o.InverseRole, true
}

// HasInverseRole returns a boolean if a field has been set.
func (o *Property) HasInverseRole() bool {
	if o != nil && !IsNil(o.InverseRole) {
		return true
	}

	return false
}

// SetInverseRole gets a reference to the given string and assigns it to the InverseRole field.
func (o *Property) SetInverseRole(v string) {
	o.InverseRole = &v
}

// GetItemKlass returns the ItemKlass field value if set, zero value otherwise.
func (o *Property) GetItemKlass() string {
	if o == nil || IsNil(o.ItemKlass) {
		var ret string
		return ret
	}
	return *o.ItemKlass
}

// GetItemKlassOk returns a tuple with the ItemKlass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetItemKlassOk() (*string, bool) {
	if o == nil || IsNil(o.ItemKlass) {
		return nil, false
	}
	return o.ItemKlass, true
}

// HasItemKlass returns a boolean if a field has been set.
func (o *Property) HasItemKlass() bool {
	if o != nil && !IsNil(o.ItemKlass) {
		return true
	}

	return false
}

// SetItemKlass gets a reference to the given string and assigns it to the ItemKlass field.
func (o *Property) SetItemKlass(v string) {
	o.ItemKlass = &v
}

// GetItemPropertyType returns the ItemPropertyType field value
func (o *Property) GetItemPropertyType() PropertyType {
	if o == nil {
		var ret PropertyType
		return ret
	}

	return o.ItemPropertyType
}

// GetItemPropertyTypeOk returns a tuple with the ItemPropertyType field value
// and a boolean to check if the value has been set.
func (o *Property) GetItemPropertyTypeOk() (*PropertyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemPropertyType, true
}

// SetItemPropertyType sets field value
func (o *Property) SetItemPropertyType(v PropertyType) {
	o.ItemPropertyType = v
}

// GetKlass returns the Klass field value if set, zero value otherwise.
func (o *Property) GetKlass() string {
	if o == nil || IsNil(o.Klass) {
		var ret string
		return ret
	}
	return *o.Klass
}

// GetKlassOk returns a tuple with the Klass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetKlassOk() (*string, bool) {
	if o == nil || IsNil(o.Klass) {
		return nil, false
	}
	return o.Klass, true
}

// HasKlass returns a boolean if a field has been set.
func (o *Property) HasKlass() bool {
	if o != nil && !IsNil(o.Klass) {
		return true
	}

	return false
}

// SetKlass gets a reference to the given string and assigns it to the Klass field.
func (o *Property) SetKlass(v string) {
	o.Klass = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *Property) GetLength() int32 {
	if o == nil || IsNil(o.Length) {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *Property) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *Property) SetLength(v int32) {
	o.Length = &v
}

// GetManyToMany returns the ManyToMany field value if set, zero value otherwise.
func (o *Property) GetManyToMany() bool {
	if o == nil || IsNil(o.ManyToMany) {
		var ret bool
		return ret
	}
	return *o.ManyToMany
}

// GetManyToManyOk returns a tuple with the ManyToMany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetManyToManyOk() (*bool, bool) {
	if o == nil || IsNil(o.ManyToMany) {
		return nil, false
	}
	return o.ManyToMany, true
}

// HasManyToMany returns a boolean if a field has been set.
func (o *Property) HasManyToMany() bool {
	if o != nil && !IsNil(o.ManyToMany) {
		return true
	}

	return false
}

// SetManyToMany gets a reference to the given bool and assigns it to the ManyToMany field.
func (o *Property) SetManyToMany(v bool) {
	o.ManyToMany = &v
}

// GetManyToOne returns the ManyToOne field value if set, zero value otherwise.
func (o *Property) GetManyToOne() bool {
	if o == nil || IsNil(o.ManyToOne) {
		var ret bool
		return ret
	}
	return *o.ManyToOne
}

// GetManyToOneOk returns a tuple with the ManyToOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetManyToOneOk() (*bool, bool) {
	if o == nil || IsNil(o.ManyToOne) {
		return nil, false
	}
	return o.ManyToOne, true
}

// HasManyToOne returns a boolean if a field has been set.
func (o *Property) HasManyToOne() bool {
	if o != nil && !IsNil(o.ManyToOne) {
		return true
	}

	return false
}

// SetManyToOne gets a reference to the given bool and assigns it to the ManyToOne field.
func (o *Property) SetManyToOne(v bool) {
	o.ManyToOne = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *Property) GetMax() float64 {
	if o == nil || IsNil(o.Max) {
		var ret float64
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetMaxOk() (*float64, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *Property) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given float64 and assigns it to the Max field.
func (o *Property) SetMax(v float64) {
	o.Max = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *Property) GetMin() float64 {
	if o == nil || IsNil(o.Min) {
		var ret float64
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetMinOk() (*float64, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *Property) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float64 and assigns it to the Min field.
func (o *Property) SetMin(v float64) {
	o.Min = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Property) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Property) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Property) SetName(v string) {
	o.Name = &v
}

// GetNameableObject returns the NameableObject field value if set, zero value otherwise.
func (o *Property) GetNameableObject() bool {
	if o == nil || IsNil(o.NameableObject) {
		var ret bool
		return ret
	}
	return *o.NameableObject
}

// GetNameableObjectOk returns a tuple with the NameableObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetNameableObjectOk() (*bool, bool) {
	if o == nil || IsNil(o.NameableObject) {
		return nil, false
	}
	return o.NameableObject, true
}

// HasNameableObject returns a boolean if a field has been set.
func (o *Property) HasNameableObject() bool {
	if o != nil && !IsNil(o.NameableObject) {
		return true
	}

	return false
}

// SetNameableObject gets a reference to the given bool and assigns it to the NameableObject field.
func (o *Property) SetNameableObject(v bool) {
	o.NameableObject = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Property) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Property) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *Property) SetNamespace(v string) {
	o.Namespace = &v
}

// GetOneToMany returns the OneToMany field value if set, zero value otherwise.
func (o *Property) GetOneToMany() bool {
	if o == nil || IsNil(o.OneToMany) {
		var ret bool
		return ret
	}
	return *o.OneToMany
}

// GetOneToManyOk returns a tuple with the OneToMany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetOneToManyOk() (*bool, bool) {
	if o == nil || IsNil(o.OneToMany) {
		return nil, false
	}
	return o.OneToMany, true
}

// HasOneToMany returns a boolean if a field has been set.
func (o *Property) HasOneToMany() bool {
	if o != nil && !IsNil(o.OneToMany) {
		return true
	}

	return false
}

// SetOneToMany gets a reference to the given bool and assigns it to the OneToMany field.
func (o *Property) SetOneToMany(v bool) {
	o.OneToMany = &v
}

// GetOneToOne returns the OneToOne field value if set, zero value otherwise.
func (o *Property) GetOneToOne() bool {
	if o == nil || IsNil(o.OneToOne) {
		var ret bool
		return ret
	}
	return *o.OneToOne
}

// GetOneToOneOk returns a tuple with the OneToOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetOneToOneOk() (*bool, bool) {
	if o == nil || IsNil(o.OneToOne) {
		return nil, false
	}
	return o.OneToOne, true
}

// HasOneToOne returns a boolean if a field has been set.
func (o *Property) HasOneToOne() bool {
	if o != nil && !IsNil(o.OneToOne) {
		return true
	}

	return false
}

// SetOneToOne gets a reference to the given bool and assigns it to the OneToOne field.
func (o *Property) SetOneToOne(v bool) {
	o.OneToOne = &v
}

// GetOrdered returns the Ordered field value if set, zero value otherwise.
func (o *Property) GetOrdered() bool {
	if o == nil || IsNil(o.Ordered) {
		var ret bool
		return ret
	}
	return *o.Ordered
}

// GetOrderedOk returns a tuple with the Ordered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetOrderedOk() (*bool, bool) {
	if o == nil || IsNil(o.Ordered) {
		return nil, false
	}
	return o.Ordered, true
}

// HasOrdered returns a boolean if a field has been set.
func (o *Property) HasOrdered() bool {
	if o != nil && !IsNil(o.Ordered) {
		return true
	}

	return false
}

// SetOrdered gets a reference to the given bool and assigns it to the Ordered field.
func (o *Property) SetOrdered(v bool) {
	o.Ordered = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Property) GetOwner() bool {
	if o == nil || IsNil(o.Owner) {
		var ret bool
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetOwnerOk() (*bool, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Property) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given bool and assigns it to the Owner field.
func (o *Property) SetOwner(v bool) {
	o.Owner = &v
}

// GetOwningRole returns the OwningRole field value if set, zero value otherwise.
func (o *Property) GetOwningRole() string {
	if o == nil || IsNil(o.OwningRole) {
		var ret string
		return ret
	}
	return *o.OwningRole
}

// GetOwningRoleOk returns a tuple with the OwningRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetOwningRoleOk() (*string, bool) {
	if o == nil || IsNil(o.OwningRole) {
		return nil, false
	}
	return o.OwningRole, true
}

// HasOwningRole returns a boolean if a field has been set.
func (o *Property) HasOwningRole() bool {
	if o != nil && !IsNil(o.OwningRole) {
		return true
	}

	return false
}

// SetOwningRole gets a reference to the given string and assigns it to the OwningRole field.
func (o *Property) SetOwningRole(v string) {
	o.OwningRole = &v
}

// GetPersisted returns the Persisted field value if set, zero value otherwise.
func (o *Property) GetPersisted() bool {
	if o == nil || IsNil(o.Persisted) {
		var ret bool
		return ret
	}
	return *o.Persisted
}

// GetPersistedOk returns a tuple with the Persisted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetPersistedOk() (*bool, bool) {
	if o == nil || IsNil(o.Persisted) {
		return nil, false
	}
	return o.Persisted, true
}

// HasPersisted returns a boolean if a field has been set.
func (o *Property) HasPersisted() bool {
	if o != nil && !IsNil(o.Persisted) {
		return true
	}

	return false
}

// SetPersisted gets a reference to the given bool and assigns it to the Persisted field.
func (o *Property) SetPersisted(v bool) {
	o.Persisted = &v
}

// GetPropertyTransformer returns the PropertyTransformer field value if set, zero value otherwise.
func (o *Property) GetPropertyTransformer() bool {
	if o == nil || IsNil(o.PropertyTransformer) {
		var ret bool
		return ret
	}
	return *o.PropertyTransformer
}

// GetPropertyTransformerOk returns a tuple with the PropertyTransformer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetPropertyTransformerOk() (*bool, bool) {
	if o == nil || IsNil(o.PropertyTransformer) {
		return nil, false
	}
	return o.PropertyTransformer, true
}

// HasPropertyTransformer returns a boolean if a field has been set.
func (o *Property) HasPropertyTransformer() bool {
	if o != nil && !IsNil(o.PropertyTransformer) {
		return true
	}

	return false
}

// SetPropertyTransformer gets a reference to the given bool and assigns it to the PropertyTransformer field.
func (o *Property) SetPropertyTransformer(v bool) {
	o.PropertyTransformer = &v
}

// GetPropertyType returns the PropertyType field value
func (o *Property) GetPropertyType() PropertyType {
	if o == nil {
		var ret PropertyType
		return ret
	}

	return o.PropertyType
}

// GetPropertyTypeOk returns a tuple with the PropertyType field value
// and a boolean to check if the value has been set.
func (o *Property) GetPropertyTypeOk() (*PropertyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PropertyType, true
}

// SetPropertyType sets field value
func (o *Property) SetPropertyType(v PropertyType) {
	o.PropertyType = v
}

// GetReadable returns the Readable field value if set, zero value otherwise.
func (o *Property) GetReadable() bool {
	if o == nil || IsNil(o.Readable) {
		var ret bool
		return ret
	}
	return *o.Readable
}

// GetReadableOk returns a tuple with the Readable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetReadableOk() (*bool, bool) {
	if o == nil || IsNil(o.Readable) {
		return nil, false
	}
	return o.Readable, true
}

// HasReadable returns a boolean if a field has been set.
func (o *Property) HasReadable() bool {
	if o != nil && !IsNil(o.Readable) {
		return true
	}

	return false
}

// SetReadable gets a reference to the given bool and assigns it to the Readable field.
func (o *Property) SetReadable(v bool) {
	o.Readable = &v
}

// GetRelativeApiEndpoint returns the RelativeApiEndpoint field value if set, zero value otherwise.
func (o *Property) GetRelativeApiEndpoint() string {
	if o == nil || IsNil(o.RelativeApiEndpoint) {
		var ret string
		return ret
	}
	return *o.RelativeApiEndpoint
}

// GetRelativeApiEndpointOk returns a tuple with the RelativeApiEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetRelativeApiEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.RelativeApiEndpoint) {
		return nil, false
	}
	return o.RelativeApiEndpoint, true
}

// HasRelativeApiEndpoint returns a boolean if a field has been set.
func (o *Property) HasRelativeApiEndpoint() bool {
	if o != nil && !IsNil(o.RelativeApiEndpoint) {
		return true
	}

	return false
}

// SetRelativeApiEndpoint gets a reference to the given string and assigns it to the RelativeApiEndpoint field.
func (o *Property) SetRelativeApiEndpoint(v string) {
	o.RelativeApiEndpoint = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *Property) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *Property) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *Property) SetRequired(v bool) {
	o.Required = &v
}

// GetSimple returns the Simple field value if set, zero value otherwise.
func (o *Property) GetSimple() bool {
	if o == nil || IsNil(o.Simple) {
		var ret bool
		return ret
	}
	return *o.Simple
}

// GetSimpleOk returns a tuple with the Simple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetSimpleOk() (*bool, bool) {
	if o == nil || IsNil(o.Simple) {
		return nil, false
	}
	return o.Simple, true
}

// HasSimple returns a boolean if a field has been set.
func (o *Property) HasSimple() bool {
	if o != nil && !IsNil(o.Simple) {
		return true
	}

	return false
}

// SetSimple gets a reference to the given bool and assigns it to the Simple field.
func (o *Property) SetSimple(v bool) {
	o.Simple = &v
}

// GetSortable returns the Sortable field value if set, zero value otherwise.
func (o *Property) GetSortable() bool {
	if o == nil || IsNil(o.Sortable) {
		var ret bool
		return ret
	}
	return *o.Sortable
}

// GetSortableOk returns a tuple with the Sortable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetSortableOk() (*bool, bool) {
	if o == nil || IsNil(o.Sortable) {
		return nil, false
	}
	return o.Sortable, true
}

// HasSortable returns a boolean if a field has been set.
func (o *Property) HasSortable() bool {
	if o != nil && !IsNil(o.Sortable) {
		return true
	}

	return false
}

// SetSortable gets a reference to the given bool and assigns it to the Sortable field.
func (o *Property) SetSortable(v bool) {
	o.Sortable = &v
}

// GetTranslatable returns the Translatable field value if set, zero value otherwise.
func (o *Property) GetTranslatable() bool {
	if o == nil || IsNil(o.Translatable) {
		var ret bool
		return ret
	}
	return *o.Translatable
}

// GetTranslatableOk returns a tuple with the Translatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetTranslatableOk() (*bool, bool) {
	if o == nil || IsNil(o.Translatable) {
		return nil, false
	}
	return o.Translatable, true
}

// HasTranslatable returns a boolean if a field has been set.
func (o *Property) HasTranslatable() bool {
	if o != nil && !IsNil(o.Translatable) {
		return true
	}

	return false
}

// SetTranslatable gets a reference to the given bool and assigns it to the Translatable field.
func (o *Property) SetTranslatable(v bool) {
	o.Translatable = &v
}

// GetTranslationKey returns the TranslationKey field value if set, zero value otherwise.
func (o *Property) GetTranslationKey() string {
	if o == nil || IsNil(o.TranslationKey) {
		var ret string
		return ret
	}
	return *o.TranslationKey
}

// GetTranslationKeyOk returns a tuple with the TranslationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetTranslationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.TranslationKey) {
		return nil, false
	}
	return o.TranslationKey, true
}

// HasTranslationKey returns a boolean if a field has been set.
func (o *Property) HasTranslationKey() bool {
	if o != nil && !IsNil(o.TranslationKey) {
		return true
	}

	return false
}

// SetTranslationKey gets a reference to the given string and assigns it to the TranslationKey field.
func (o *Property) SetTranslationKey(v string) {
	o.TranslationKey = &v
}

// GetUnique returns the Unique field value if set, zero value otherwise.
func (o *Property) GetUnique() bool {
	if o == nil || IsNil(o.Unique) {
		var ret bool
		return ret
	}
	return *o.Unique
}

// GetUniqueOk returns a tuple with the Unique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetUniqueOk() (*bool, bool) {
	if o == nil || IsNil(o.Unique) {
		return nil, false
	}
	return o.Unique, true
}

// HasUnique returns a boolean if a field has been set.
func (o *Property) HasUnique() bool {
	if o != nil && !IsNil(o.Unique) {
		return true
	}

	return false
}

// SetUnique gets a reference to the given bool and assigns it to the Unique field.
func (o *Property) SetUnique(v bool) {
	o.Unique = &v
}

// GetWritable returns the Writable field value if set, zero value otherwise.
func (o *Property) GetWritable() bool {
	if o == nil || IsNil(o.Writable) {
		var ret bool
		return ret
	}
	return *o.Writable
}

// GetWritableOk returns a tuple with the Writable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Property) GetWritableOk() (*bool, bool) {
	if o == nil || IsNil(o.Writable) {
		return nil, false
	}
	return o.Writable, true
}

// HasWritable returns a boolean if a field has been set.
func (o *Property) HasWritable() bool {
	if o != nil && !IsNil(o.Writable) {
		return true
	}

	return false
}

// SetWritable gets a reference to the given bool and assigns it to the Writable field.
func (o *Property) SetWritable(v bool) {
	o.Writable = &v
}

func (o Property) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Property) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnalyticalObject) {
		toSerialize["analyticalObject"] = o.AnalyticalObject
	}
	if !IsNil(o.ApiEndpoint) {
		toSerialize["apiEndpoint"] = o.ApiEndpoint
	}
	if !IsNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}
	if !IsNil(o.Cascade) {
		toSerialize["cascade"] = o.Cascade
	}
	if !IsNil(o.Collection) {
		toSerialize["collection"] = o.Collection
	}
	if !IsNil(o.CollectionName) {
		toSerialize["collectionName"] = o.CollectionName
	}
	if !IsNil(o.CollectionWrapping) {
		toSerialize["collectionWrapping"] = o.CollectionWrapping
	}
	if !IsNil(o.Constants) {
		toSerialize["constants"] = o.Constants
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EmbeddedObject) {
		toSerialize["embeddedObject"] = o.EmbeddedObject
	}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !IsNil(o.GistPreferences) {
		toSerialize["gistPreferences"] = o.GistPreferences
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.I18nTranslationKey) {
		toSerialize["i18nTranslationKey"] = o.I18nTranslationKey
	}
	if !IsNil(o.IdentifiableObject) {
		toSerialize["identifiableObject"] = o.IdentifiableObject
	}
	if !IsNil(o.InverseRole) {
		toSerialize["inverseRole"] = o.InverseRole
	}
	if !IsNil(o.ItemKlass) {
		toSerialize["itemKlass"] = o.ItemKlass
	}
	toSerialize["itemPropertyType"] = o.ItemPropertyType
	if !IsNil(o.Klass) {
		toSerialize["klass"] = o.Klass
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.ManyToMany) {
		toSerialize["manyToMany"] = o.ManyToMany
	}
	if !IsNil(o.ManyToOne) {
		toSerialize["manyToOne"] = o.ManyToOne
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NameableObject) {
		toSerialize["nameableObject"] = o.NameableObject
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.OneToMany) {
		toSerialize["oneToMany"] = o.OneToMany
	}
	if !IsNil(o.OneToOne) {
		toSerialize["oneToOne"] = o.OneToOne
	}
	if !IsNil(o.Ordered) {
		toSerialize["ordered"] = o.Ordered
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.OwningRole) {
		toSerialize["owningRole"] = o.OwningRole
	}
	if !IsNil(o.Persisted) {
		toSerialize["persisted"] = o.Persisted
	}
	if !IsNil(o.PropertyTransformer) {
		toSerialize["propertyTransformer"] = o.PropertyTransformer
	}
	toSerialize["propertyType"] = o.PropertyType
	if !IsNil(o.Readable) {
		toSerialize["readable"] = o.Readable
	}
	if !IsNil(o.RelativeApiEndpoint) {
		toSerialize["relativeApiEndpoint"] = o.RelativeApiEndpoint
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Simple) {
		toSerialize["simple"] = o.Simple
	}
	if !IsNil(o.Sortable) {
		toSerialize["sortable"] = o.Sortable
	}
	if !IsNil(o.Translatable) {
		toSerialize["translatable"] = o.Translatable
	}
	if !IsNil(o.TranslationKey) {
		toSerialize["translationKey"] = o.TranslationKey
	}
	if !IsNil(o.Unique) {
		toSerialize["unique"] = o.Unique
	}
	if !IsNil(o.Writable) {
		toSerialize["writable"] = o.Writable
	}
	return toSerialize, nil
}

func (o *Property) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"itemPropertyType",
		"propertyType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProperty := _Property{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProperty)

	if err != nil {
		return err
	}

	*o = Property(varProperty)

	return err
}

type NullableProperty struct {
	value *Property
	isSet bool
}

func (v NullableProperty) Get() *Property {
	return v.value
}

func (v *NullableProperty) Set(val *Property) {
	v.value = val
	v.isSet = true
}

func (v NullableProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProperty(val *Property) *NullableProperty {
	return &NullableProperty{value: val, isSet: true}
}

func (v NullableProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
