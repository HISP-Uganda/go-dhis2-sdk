/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the AccessData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessData{}

// AccessData struct for AccessData
type AccessData struct {
	Read  *bool `json:"read,omitempty"`
	Write *bool `json:"write,omitempty"`
}

// NewAccessData instantiates a new AccessData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessData() *AccessData {
	this := AccessData{}
	return &this
}

// NewAccessDataWithDefaults instantiates a new AccessData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessDataWithDefaults() *AccessData {
	this := AccessData{}
	return &this
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *AccessData) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessData) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *AccessData) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *AccessData) SetRead(v bool) {
	o.Read = &v
}

// GetWrite returns the Write field value if set, zero value otherwise.
func (o *AccessData) GetWrite() bool {
	if o == nil || IsNil(o.Write) {
		var ret bool
		return ret
	}
	return *o.Write
}

// GetWriteOk returns a tuple with the Write field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessData) GetWriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Write) {
		return nil, false
	}
	return o.Write, true
}

// HasWrite returns a boolean if a field has been set.
func (o *AccessData) HasWrite() bool {
	if o != nil && !IsNil(o.Write) {
		return true
	}

	return false
}

// SetWrite gets a reference to the given bool and assigns it to the Write field.
func (o *AccessData) SetWrite(v bool) {
	o.Write = &v
}

func (o AccessData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.Write) {
		toSerialize["write"] = o.Write
	}
	return toSerialize, nil
}

type NullableAccessData struct {
	value *AccessData
	isSet bool
}

func (v NullableAccessData) Get() *AccessData {
	return v.value
}

func (v *NullableAccessData) Set(val *AccessData) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessData) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessData(val *AccessData) *NullableAccessData {
	return &NullableAccessData{value: val, isSet: true}
}

func (v NullableAccessData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
