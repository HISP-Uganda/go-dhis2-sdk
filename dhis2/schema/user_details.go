/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDetails{}

// UserDetails struct for UserDetails
type UserDetails struct {
	AccountNonExpired             *bool              `json:"accountNonExpired,omitempty"`
	AccountNonLocked              *bool              `json:"accountNonLocked,omitempty"`
	AllAuthorities                []string           `json:"allAuthorities"`
	Authorities                   []GrantedAuthority `json:"authorities"`
	Code                          *string            `json:"code,omitempty"`
	CredentialsNonExpired         *bool              `json:"credentialsNonExpired,omitempty"`
	EmailVerified                 *bool              `json:"emailVerified,omitempty"`
	Enabled                       *bool              `json:"enabled,omitempty"`
	ExternalAuth                  *bool              `json:"externalAuth,omitempty"`
	FirstName                     *string            `json:"firstName,omitempty"`
	Id                            *int64             `json:"id,omitempty"`
	Password                      *string            `json:"password,omitempty"`
	Secret                        *string            `json:"secret,omitempty"`
	Super                         *bool              `json:"super,omitempty"`
	Surname                       *string            `json:"surname,omitempty"`
	TwoFactorEnabled              *bool              `json:"twoFactorEnabled,omitempty"`
	TwoFactorType                 TwoFactorType      `json:"twoFactorType"`
	Uid                           *string            `json:"uid,omitempty"`
	UserDataOrgUnitIds            []string           `json:"userDataOrgUnitIds"`
	UserEffectiveSearchOrgUnitIds []string           `json:"userEffectiveSearchOrgUnitIds"`
	UserGroupIds                  []string           `json:"userGroupIds"`
	UserOrgUnitIds                []string           `json:"userOrgUnitIds"`
	UserRoleIds                   []string           `json:"userRoleIds"`
	UserSearchOrgUnitIds          []string           `json:"userSearchOrgUnitIds"`
	Username                      *string            `json:"username,omitempty"`
}

type _UserDetails UserDetails

// NewUserDetails instantiates a new UserDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDetails(allAuthorities []string, authorities []GrantedAuthority, twoFactorType TwoFactorType, userDataOrgUnitIds []string, userEffectiveSearchOrgUnitIds []string, userGroupIds []string, userOrgUnitIds []string, userRoleIds []string, userSearchOrgUnitIds []string) *UserDetails {
	this := UserDetails{}
	this.AllAuthorities = allAuthorities
	this.Authorities = authorities
	this.TwoFactorType = twoFactorType
	this.UserDataOrgUnitIds = userDataOrgUnitIds
	this.UserEffectiveSearchOrgUnitIds = userEffectiveSearchOrgUnitIds
	this.UserGroupIds = userGroupIds
	this.UserOrgUnitIds = userOrgUnitIds
	this.UserRoleIds = userRoleIds
	this.UserSearchOrgUnitIds = userSearchOrgUnitIds
	return &this
}

// NewUserDetailsWithDefaults instantiates a new UserDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDetailsWithDefaults() *UserDetails {
	this := UserDetails{}
	return &this
}

// GetAccountNonExpired returns the AccountNonExpired field value if set, zero value otherwise.
func (o *UserDetails) GetAccountNonExpired() bool {
	if o == nil || IsNil(o.AccountNonExpired) {
		var ret bool
		return ret
	}
	return *o.AccountNonExpired
}

// GetAccountNonExpiredOk returns a tuple with the AccountNonExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetAccountNonExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.AccountNonExpired) {
		return nil, false
	}
	return o.AccountNonExpired, true
}

// HasAccountNonExpired returns a boolean if a field has been set.
func (o *UserDetails) HasAccountNonExpired() bool {
	if o != nil && !IsNil(o.AccountNonExpired) {
		return true
	}

	return false
}

// SetAccountNonExpired gets a reference to the given bool and assigns it to the AccountNonExpired field.
func (o *UserDetails) SetAccountNonExpired(v bool) {
	o.AccountNonExpired = &v
}

// GetAccountNonLocked returns the AccountNonLocked field value if set, zero value otherwise.
func (o *UserDetails) GetAccountNonLocked() bool {
	if o == nil || IsNil(o.AccountNonLocked) {
		var ret bool
		return ret
	}
	return *o.AccountNonLocked
}

// GetAccountNonLockedOk returns a tuple with the AccountNonLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetAccountNonLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.AccountNonLocked) {
		return nil, false
	}
	return o.AccountNonLocked, true
}

// HasAccountNonLocked returns a boolean if a field has been set.
func (o *UserDetails) HasAccountNonLocked() bool {
	if o != nil && !IsNil(o.AccountNonLocked) {
		return true
	}

	return false
}

// SetAccountNonLocked gets a reference to the given bool and assigns it to the AccountNonLocked field.
func (o *UserDetails) SetAccountNonLocked(v bool) {
	o.AccountNonLocked = &v
}

// GetAllAuthorities returns the AllAuthorities field value
func (o *UserDetails) GetAllAuthorities() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllAuthorities
}

// GetAllAuthoritiesOk returns a tuple with the AllAuthorities field value
// and a boolean to check if the value has been set.
func (o *UserDetails) GetAllAuthoritiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllAuthorities, true
}

// SetAllAuthorities sets field value
func (o *UserDetails) SetAllAuthorities(v []string) {
	o.AllAuthorities = v
}

// GetAuthorities returns the Authorities field value
func (o *UserDetails) GetAuthorities() []GrantedAuthority {
	if o == nil {
		var ret []GrantedAuthority
		return ret
	}

	return o.Authorities
}

// GetAuthoritiesOk returns a tuple with the Authorities field value
// and a boolean to check if the value has been set.
func (o *UserDetails) GetAuthoritiesOk() ([]GrantedAuthority, bool) {
	if o == nil {
		return nil, false
	}
	return o.Authorities, true
}

// SetAuthorities sets field value
func (o *UserDetails) SetAuthorities(v []GrantedAuthority) {
	o.Authorities = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UserDetails) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UserDetails) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *UserDetails) SetCode(v string) {
	o.Code = &v
}

// GetCredentialsNonExpired returns the CredentialsNonExpired field value if set, zero value otherwise.
func (o *UserDetails) GetCredentialsNonExpired() bool {
	if o == nil || IsNil(o.CredentialsNonExpired) {
		var ret bool
		return ret
	}
	return *o.CredentialsNonExpired
}

// GetCredentialsNonExpiredOk returns a tuple with the CredentialsNonExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetCredentialsNonExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.CredentialsNonExpired) {
		return nil, false
	}
	return o.CredentialsNonExpired, true
}

// HasCredentialsNonExpired returns a boolean if a field has been set.
func (o *UserDetails) HasCredentialsNonExpired() bool {
	if o != nil && !IsNil(o.CredentialsNonExpired) {
		return true
	}

	return false
}

// SetCredentialsNonExpired gets a reference to the given bool and assigns it to the CredentialsNonExpired field.
func (o *UserDetails) SetCredentialsNonExpired(v bool) {
	o.CredentialsNonExpired = &v
}

// GetEmailVerified returns the EmailVerified field value if set, zero value otherwise.
func (o *UserDetails) GetEmailVerified() bool {
	if o == nil || IsNil(o.EmailVerified) {
		var ret bool
		return ret
	}
	return *o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailVerified) {
		return nil, false
	}
	return o.EmailVerified, true
}

// HasEmailVerified returns a boolean if a field has been set.
func (o *UserDetails) HasEmailVerified() bool {
	if o != nil && !IsNil(o.EmailVerified) {
		return true
	}

	return false
}

// SetEmailVerified gets a reference to the given bool and assigns it to the EmailVerified field.
func (o *UserDetails) SetEmailVerified(v bool) {
	o.EmailVerified = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UserDetails) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UserDetails) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UserDetails) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExternalAuth returns the ExternalAuth field value if set, zero value otherwise.
func (o *UserDetails) GetExternalAuth() bool {
	if o == nil || IsNil(o.ExternalAuth) {
		var ret bool
		return ret
	}
	return *o.ExternalAuth
}

// GetExternalAuthOk returns a tuple with the ExternalAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetExternalAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAuth) {
		return nil, false
	}
	return o.ExternalAuth, true
}

// HasExternalAuth returns a boolean if a field has been set.
func (o *UserDetails) HasExternalAuth() bool {
	if o != nil && !IsNil(o.ExternalAuth) {
		return true
	}

	return false
}

// SetExternalAuth gets a reference to the given bool and assigns it to the ExternalAuth field.
func (o *UserDetails) SetExternalAuth(v bool) {
	o.ExternalAuth = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserDetails) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserDetails) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserDetails) SetFirstName(v string) {
	o.FirstName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserDetails) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserDetails) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *UserDetails) SetId(v int64) {
	o.Id = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserDetails) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserDetails) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserDetails) SetPassword(v string) {
	o.Password = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *UserDetails) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *UserDetails) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *UserDetails) SetSecret(v string) {
	o.Secret = &v
}

// GetSuper returns the Super field value if set, zero value otherwise.
func (o *UserDetails) GetSuper() bool {
	if o == nil || IsNil(o.Super) {
		var ret bool
		return ret
	}
	return *o.Super
}

// GetSuperOk returns a tuple with the Super field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetSuperOk() (*bool, bool) {
	if o == nil || IsNil(o.Super) {
		return nil, false
	}
	return o.Super, true
}

// HasSuper returns a boolean if a field has been set.
func (o *UserDetails) HasSuper() bool {
	if o != nil && !IsNil(o.Super) {
		return true
	}

	return false
}

// SetSuper gets a reference to the given bool and assigns it to the Super field.
func (o *UserDetails) SetSuper(v bool) {
	o.Super = &v
}

// GetSurname returns the Surname field value if set, zero value otherwise.
func (o *UserDetails) GetSurname() string {
	if o == nil || IsNil(o.Surname) {
		var ret string
		return ret
	}
	return *o.Surname
}

// GetSurnameOk returns a tuple with the Surname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetSurnameOk() (*string, bool) {
	if o == nil || IsNil(o.Surname) {
		return nil, false
	}
	return o.Surname, true
}

// HasSurname returns a boolean if a field has been set.
func (o *UserDetails) HasSurname() bool {
	if o != nil && !IsNil(o.Surname) {
		return true
	}

	return false
}

// SetSurname gets a reference to the given string and assigns it to the Surname field.
func (o *UserDetails) SetSurname(v string) {
	o.Surname = &v
}

// GetTwoFactorEnabled returns the TwoFactorEnabled field value if set, zero value otherwise.
func (o *UserDetails) GetTwoFactorEnabled() bool {
	if o == nil || IsNil(o.TwoFactorEnabled) {
		var ret bool
		return ret
	}
	return *o.TwoFactorEnabled
}

// GetTwoFactorEnabledOk returns a tuple with the TwoFactorEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetTwoFactorEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TwoFactorEnabled) {
		return nil, false
	}
	return o.TwoFactorEnabled, true
}

// HasTwoFactorEnabled returns a boolean if a field has been set.
func (o *UserDetails) HasTwoFactorEnabled() bool {
	if o != nil && !IsNil(o.TwoFactorEnabled) {
		return true
	}

	return false
}

// SetTwoFactorEnabled gets a reference to the given bool and assigns it to the TwoFactorEnabled field.
func (o *UserDetails) SetTwoFactorEnabled(v bool) {
	o.TwoFactorEnabled = &v
}

// GetTwoFactorType returns the TwoFactorType field value
func (o *UserDetails) GetTwoFactorType() TwoFactorType {
	if o == nil {
		var ret TwoFactorType
		return ret
	}

	return o.TwoFactorType
}

// GetTwoFactorTypeOk returns a tuple with the TwoFactorType field value
// and a boolean to check if the value has been set.
func (o *UserDetails) GetTwoFactorTypeOk() (*TwoFactorType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TwoFactorType, true
}

// SetTwoFactorType sets field value
func (o *UserDetails) SetTwoFactorType(v TwoFactorType) {
	o.TwoFactorType = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *UserDetails) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *UserDetails) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *UserDetails) SetUid(v string) {
	o.Uid = &v
}

// GetUserDataOrgUnitIds returns the UserDataOrgUnitIds field value
func (o *UserDetails) GetUserDataOrgUnitIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserDataOrgUnitIds
}

// GetUserDataOrgUnitIdsOk returns a tuple with the UserDataOrgUnitIds field value
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUserDataOrgUnitIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserDataOrgUnitIds, true
}

// SetUserDataOrgUnitIds sets field value
func (o *UserDetails) SetUserDataOrgUnitIds(v []string) {
	o.UserDataOrgUnitIds = v
}

// GetUserEffectiveSearchOrgUnitIds returns the UserEffectiveSearchOrgUnitIds field value
func (o *UserDetails) GetUserEffectiveSearchOrgUnitIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserEffectiveSearchOrgUnitIds
}

// GetUserEffectiveSearchOrgUnitIdsOk returns a tuple with the UserEffectiveSearchOrgUnitIds field value
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUserEffectiveSearchOrgUnitIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserEffectiveSearchOrgUnitIds, true
}

// SetUserEffectiveSearchOrgUnitIds sets field value
func (o *UserDetails) SetUserEffectiveSearchOrgUnitIds(v []string) {
	o.UserEffectiveSearchOrgUnitIds = v
}

// GetUserGroupIds returns the UserGroupIds field value
func (o *UserDetails) GetUserGroupIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserGroupIds
}

// GetUserGroupIdsOk returns a tuple with the UserGroupIds field value
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUserGroupIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserGroupIds, true
}

// SetUserGroupIds sets field value
func (o *UserDetails) SetUserGroupIds(v []string) {
	o.UserGroupIds = v
}

// GetUserOrgUnitIds returns the UserOrgUnitIds field value
func (o *UserDetails) GetUserOrgUnitIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserOrgUnitIds
}

// GetUserOrgUnitIdsOk returns a tuple with the UserOrgUnitIds field value
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUserOrgUnitIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserOrgUnitIds, true
}

// SetUserOrgUnitIds sets field value
func (o *UserDetails) SetUserOrgUnitIds(v []string) {
	o.UserOrgUnitIds = v
}

// GetUserRoleIds returns the UserRoleIds field value
func (o *UserDetails) GetUserRoleIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserRoleIds
}

// GetUserRoleIdsOk returns a tuple with the UserRoleIds field value
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUserRoleIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserRoleIds, true
}

// SetUserRoleIds sets field value
func (o *UserDetails) SetUserRoleIds(v []string) {
	o.UserRoleIds = v
}

// GetUserSearchOrgUnitIds returns the UserSearchOrgUnitIds field value
func (o *UserDetails) GetUserSearchOrgUnitIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserSearchOrgUnitIds
}

// GetUserSearchOrgUnitIdsOk returns a tuple with the UserSearchOrgUnitIds field value
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUserSearchOrgUnitIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserSearchOrgUnitIds, true
}

// SetUserSearchOrgUnitIds sets field value
func (o *UserDetails) SetUserSearchOrgUnitIds(v []string) {
	o.UserSearchOrgUnitIds = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserDetails) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetails) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserDetails) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserDetails) SetUsername(v string) {
	o.Username = &v
}

func (o UserDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNonExpired) {
		toSerialize["accountNonExpired"] = o.AccountNonExpired
	}
	if !IsNil(o.AccountNonLocked) {
		toSerialize["accountNonLocked"] = o.AccountNonLocked
	}
	toSerialize["allAuthorities"] = o.AllAuthorities
	toSerialize["authorities"] = o.Authorities
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CredentialsNonExpired) {
		toSerialize["credentialsNonExpired"] = o.CredentialsNonExpired
	}
	if !IsNil(o.EmailVerified) {
		toSerialize["emailVerified"] = o.EmailVerified
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExternalAuth) {
		toSerialize["externalAuth"] = o.ExternalAuth
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.Super) {
		toSerialize["super"] = o.Super
	}
	if !IsNil(o.Surname) {
		toSerialize["surname"] = o.Surname
	}
	if !IsNil(o.TwoFactorEnabled) {
		toSerialize["twoFactorEnabled"] = o.TwoFactorEnabled
	}
	toSerialize["twoFactorType"] = o.TwoFactorType
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	toSerialize["userDataOrgUnitIds"] = o.UserDataOrgUnitIds
	toSerialize["userEffectiveSearchOrgUnitIds"] = o.UserEffectiveSearchOrgUnitIds
	toSerialize["userGroupIds"] = o.UserGroupIds
	toSerialize["userOrgUnitIds"] = o.UserOrgUnitIds
	toSerialize["userRoleIds"] = o.UserRoleIds
	toSerialize["userSearchOrgUnitIds"] = o.UserSearchOrgUnitIds
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

func (o *UserDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allAuthorities",
		"authorities",
		"twoFactorType",
		"userDataOrgUnitIds",
		"userEffectiveSearchOrgUnitIds",
		"userGroupIds",
		"userOrgUnitIds",
		"userRoleIds",
		"userSearchOrgUnitIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserDetails := _UserDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserDetails)

	if err != nil {
		return err
	}

	*o = UserDetails(varUserDetails)

	return err
}

type NullableUserDetails struct {
	value *UserDetails
	isSet bool
}

func (v NullableUserDetails) Get() *UserDetails {
	return v.value
}

func (v *NullableUserDetails) Set(val *UserDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDetails(val *UserDetails) *NullableUserDetails {
	return &NullableUserDetails{value: val, isSet: true}
}

func (v NullableUserDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
