/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DataSetNotificationTemplateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSetNotificationTemplateParams{}

// DataSetNotificationTemplateParams struct for DataSetNotificationTemplateParams
type DataSetNotificationTemplateParams struct {
	AttributeValues                  []AttributeValueParams                               `json:"attributeValues,omitempty"`
	Code                             *string                                              `json:"code,omitempty"`
	Created                          *time.Time                                           `json:"created,omitempty"`
	CreatedBy                        *AggregateDataExchangeParamsCreatedBy                `json:"createdBy,omitempty"`
	DataSetNotificationTrigger       DataSetNotificationTrigger                           `json:"dataSetNotificationTrigger"`
	DataSets                         []DataApprovalWorkflowParamsDataSetsInner            `json:"dataSets,omitempty"`
	DeliveryChannels                 []DeliveryChannel                                    `json:"deliveryChannels,omitempty"`
	DisplayMessageTemplate           *string                                              `json:"displayMessageTemplate,omitempty"`
	DisplayName                      *string                                              `json:"displayName,omitempty"`
	DisplaySubjectTemplate           *string                                              `json:"displaySubjectTemplate,omitempty"`
	Favorite                         *bool                                                `json:"favorite,omitempty"`
	Favorites                        []string                                             `json:"favorites,omitempty"`
	Id                               *string                                              `json:"id,omitempty"`
	LastUpdated                      *time.Time                                           `json:"lastUpdated,omitempty"`
	LastUpdatedBy                    *AggregateDataExchangeParamsCreatedBy                `json:"lastUpdatedBy,omitempty"`
	MessageTemplate                  *string                                              `json:"messageTemplate,omitempty"`
	Name                             *string                                              `json:"name,omitempty"`
	NotificationRecipient            DataSetNotificationRecipient                         `json:"notificationRecipient"`
	NotifyParentOrganisationUnitOnly *bool                                                `json:"notifyParentOrganisationUnitOnly,omitempty"`
	NotifyUsersInHierarchyOnly       *bool                                                `json:"notifyUsersInHierarchyOnly,omitempty"`
	RecipientUserGroup               *DataSetNotificationTemplateParamsRecipientUserGroup `json:"recipientUserGroup,omitempty"`
	RelativeScheduledDays            *int32                                               `json:"relativeScheduledDays,omitempty"`
	SendStrategy                     SendStrategy                                         `json:"sendStrategy"`
	Sharing                          *Sharing                                             `json:"sharing,omitempty"`
	SubjectTemplate                  *string                                              `json:"subjectTemplate,omitempty"`
	Translations                     []Translation                                        `json:"translations,omitempty"`
}

type _DataSetNotificationTemplateParams DataSetNotificationTemplateParams

// NewDataSetNotificationTemplateParams instantiates a new DataSetNotificationTemplateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSetNotificationTemplateParams(dataSetNotificationTrigger DataSetNotificationTrigger, notificationRecipient DataSetNotificationRecipient, sendStrategy SendStrategy) *DataSetNotificationTemplateParams {
	this := DataSetNotificationTemplateParams{}
	this.DataSetNotificationTrigger = dataSetNotificationTrigger
	this.NotificationRecipient = notificationRecipient
	this.SendStrategy = sendStrategy
	return &this
}

// NewDataSetNotificationTemplateParamsWithDefaults instantiates a new DataSetNotificationTemplateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSetNotificationTemplateParamsWithDefaults() *DataSetNotificationTemplateParams {
	this := DataSetNotificationTemplateParams{}
	return &this
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *DataSetNotificationTemplateParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *DataSetNotificationTemplateParams) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *DataSetNotificationTemplateParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *DataSetNotificationTemplateParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetDataSetNotificationTrigger returns the DataSetNotificationTrigger field value
func (o *DataSetNotificationTemplateParams) GetDataSetNotificationTrigger() DataSetNotificationTrigger {
	if o == nil {
		var ret DataSetNotificationTrigger
		return ret
	}

	return o.DataSetNotificationTrigger
}

// GetDataSetNotificationTriggerOk returns a tuple with the DataSetNotificationTrigger field value
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetDataSetNotificationTriggerOk() (*DataSetNotificationTrigger, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSetNotificationTrigger, true
}

// SetDataSetNotificationTrigger sets field value
func (o *DataSetNotificationTemplateParams) SetDataSetNotificationTrigger(v DataSetNotificationTrigger) {
	o.DataSetNotificationTrigger = v
}

// GetDataSets returns the DataSets field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetDataSets() []DataApprovalWorkflowParamsDataSetsInner {
	if o == nil || IsNil(o.DataSets) {
		var ret []DataApprovalWorkflowParamsDataSetsInner
		return ret
	}
	return o.DataSets
}

// GetDataSetsOk returns a tuple with the DataSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetDataSetsOk() ([]DataApprovalWorkflowParamsDataSetsInner, bool) {
	if o == nil || IsNil(o.DataSets) {
		return nil, false
	}
	return o.DataSets, true
}

// HasDataSets returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasDataSets() bool {
	if o != nil && !IsNil(o.DataSets) {
		return true
	}

	return false
}

// SetDataSets gets a reference to the given []DataApprovalWorkflowParamsDataSetsInner and assigns it to the DataSets field.
func (o *DataSetNotificationTemplateParams) SetDataSets(v []DataApprovalWorkflowParamsDataSetsInner) {
	o.DataSets = v
}

// GetDeliveryChannels returns the DeliveryChannels field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetDeliveryChannels() []DeliveryChannel {
	if o == nil || IsNil(o.DeliveryChannels) {
		var ret []DeliveryChannel
		return ret
	}
	return o.DeliveryChannels
}

// GetDeliveryChannelsOk returns a tuple with the DeliveryChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetDeliveryChannelsOk() ([]DeliveryChannel, bool) {
	if o == nil || IsNil(o.DeliveryChannels) {
		return nil, false
	}
	return o.DeliveryChannels, true
}

// HasDeliveryChannels returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasDeliveryChannels() bool {
	if o != nil && !IsNil(o.DeliveryChannels) {
		return true
	}

	return false
}

// SetDeliveryChannels gets a reference to the given []DeliveryChannel and assigns it to the DeliveryChannels field.
func (o *DataSetNotificationTemplateParams) SetDeliveryChannels(v []DeliveryChannel) {
	o.DeliveryChannels = v
}

// GetDisplayMessageTemplate returns the DisplayMessageTemplate field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetDisplayMessageTemplate() string {
	if o == nil || IsNil(o.DisplayMessageTemplate) {
		var ret string
		return ret
	}
	return *o.DisplayMessageTemplate
}

// GetDisplayMessageTemplateOk returns a tuple with the DisplayMessageTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetDisplayMessageTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayMessageTemplate) {
		return nil, false
	}
	return o.DisplayMessageTemplate, true
}

// HasDisplayMessageTemplate returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasDisplayMessageTemplate() bool {
	if o != nil && !IsNil(o.DisplayMessageTemplate) {
		return true
	}

	return false
}

// SetDisplayMessageTemplate gets a reference to the given string and assigns it to the DisplayMessageTemplate field.
func (o *DataSetNotificationTemplateParams) SetDisplayMessageTemplate(v string) {
	o.DisplayMessageTemplate = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DataSetNotificationTemplateParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplaySubjectTemplate returns the DisplaySubjectTemplate field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetDisplaySubjectTemplate() string {
	if o == nil || IsNil(o.DisplaySubjectTemplate) {
		var ret string
		return ret
	}
	return *o.DisplaySubjectTemplate
}

// GetDisplaySubjectTemplateOk returns a tuple with the DisplaySubjectTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetDisplaySubjectTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.DisplaySubjectTemplate) {
		return nil, false
	}
	return o.DisplaySubjectTemplate, true
}

// HasDisplaySubjectTemplate returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasDisplaySubjectTemplate() bool {
	if o != nil && !IsNil(o.DisplaySubjectTemplate) {
		return true
	}

	return false
}

// SetDisplaySubjectTemplate gets a reference to the given string and assigns it to the DisplaySubjectTemplate field.
func (o *DataSetNotificationTemplateParams) SetDisplaySubjectTemplate(v string) {
	o.DisplaySubjectTemplate = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *DataSetNotificationTemplateParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *DataSetNotificationTemplateParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataSetNotificationTemplateParams) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *DataSetNotificationTemplateParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *DataSetNotificationTemplateParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetMessageTemplate returns the MessageTemplate field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetMessageTemplate() string {
	if o == nil || IsNil(o.MessageTemplate) {
		var ret string
		return ret
	}
	return *o.MessageTemplate
}

// GetMessageTemplateOk returns a tuple with the MessageTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetMessageTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.MessageTemplate) {
		return nil, false
	}
	return o.MessageTemplate, true
}

// HasMessageTemplate returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasMessageTemplate() bool {
	if o != nil && !IsNil(o.MessageTemplate) {
		return true
	}

	return false
}

// SetMessageTemplate gets a reference to the given string and assigns it to the MessageTemplate field.
func (o *DataSetNotificationTemplateParams) SetMessageTemplate(v string) {
	o.MessageTemplate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataSetNotificationTemplateParams) SetName(v string) {
	o.Name = &v
}

// GetNotificationRecipient returns the NotificationRecipient field value
func (o *DataSetNotificationTemplateParams) GetNotificationRecipient() DataSetNotificationRecipient {
	if o == nil {
		var ret DataSetNotificationRecipient
		return ret
	}

	return o.NotificationRecipient
}

// GetNotificationRecipientOk returns a tuple with the NotificationRecipient field value
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetNotificationRecipientOk() (*DataSetNotificationRecipient, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationRecipient, true
}

// SetNotificationRecipient sets field value
func (o *DataSetNotificationTemplateParams) SetNotificationRecipient(v DataSetNotificationRecipient) {
	o.NotificationRecipient = v
}

// GetNotifyParentOrganisationUnitOnly returns the NotifyParentOrganisationUnitOnly field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetNotifyParentOrganisationUnitOnly() bool {
	if o == nil || IsNil(o.NotifyParentOrganisationUnitOnly) {
		var ret bool
		return ret
	}
	return *o.NotifyParentOrganisationUnitOnly
}

// GetNotifyParentOrganisationUnitOnlyOk returns a tuple with the NotifyParentOrganisationUnitOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetNotifyParentOrganisationUnitOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyParentOrganisationUnitOnly) {
		return nil, false
	}
	return o.NotifyParentOrganisationUnitOnly, true
}

// HasNotifyParentOrganisationUnitOnly returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasNotifyParentOrganisationUnitOnly() bool {
	if o != nil && !IsNil(o.NotifyParentOrganisationUnitOnly) {
		return true
	}

	return false
}

// SetNotifyParentOrganisationUnitOnly gets a reference to the given bool and assigns it to the NotifyParentOrganisationUnitOnly field.
func (o *DataSetNotificationTemplateParams) SetNotifyParentOrganisationUnitOnly(v bool) {
	o.NotifyParentOrganisationUnitOnly = &v
}

// GetNotifyUsersInHierarchyOnly returns the NotifyUsersInHierarchyOnly field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetNotifyUsersInHierarchyOnly() bool {
	if o == nil || IsNil(o.NotifyUsersInHierarchyOnly) {
		var ret bool
		return ret
	}
	return *o.NotifyUsersInHierarchyOnly
}

// GetNotifyUsersInHierarchyOnlyOk returns a tuple with the NotifyUsersInHierarchyOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetNotifyUsersInHierarchyOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyUsersInHierarchyOnly) {
		return nil, false
	}
	return o.NotifyUsersInHierarchyOnly, true
}

// HasNotifyUsersInHierarchyOnly returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasNotifyUsersInHierarchyOnly() bool {
	if o != nil && !IsNil(o.NotifyUsersInHierarchyOnly) {
		return true
	}

	return false
}

// SetNotifyUsersInHierarchyOnly gets a reference to the given bool and assigns it to the NotifyUsersInHierarchyOnly field.
func (o *DataSetNotificationTemplateParams) SetNotifyUsersInHierarchyOnly(v bool) {
	o.NotifyUsersInHierarchyOnly = &v
}

// GetRecipientUserGroup returns the RecipientUserGroup field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetRecipientUserGroup() DataSetNotificationTemplateParamsRecipientUserGroup {
	if o == nil || IsNil(o.RecipientUserGroup) {
		var ret DataSetNotificationTemplateParamsRecipientUserGroup
		return ret
	}
	return *o.RecipientUserGroup
}

// GetRecipientUserGroupOk returns a tuple with the RecipientUserGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetRecipientUserGroupOk() (*DataSetNotificationTemplateParamsRecipientUserGroup, bool) {
	if o == nil || IsNil(o.RecipientUserGroup) {
		return nil, false
	}
	return o.RecipientUserGroup, true
}

// HasRecipientUserGroup returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasRecipientUserGroup() bool {
	if o != nil && !IsNil(o.RecipientUserGroup) {
		return true
	}

	return false
}

// SetRecipientUserGroup gets a reference to the given DataSetNotificationTemplateParamsRecipientUserGroup and assigns it to the RecipientUserGroup field.
func (o *DataSetNotificationTemplateParams) SetRecipientUserGroup(v DataSetNotificationTemplateParamsRecipientUserGroup) {
	o.RecipientUserGroup = &v
}

// GetRelativeScheduledDays returns the RelativeScheduledDays field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetRelativeScheduledDays() int32 {
	if o == nil || IsNil(o.RelativeScheduledDays) {
		var ret int32
		return ret
	}
	return *o.RelativeScheduledDays
}

// GetRelativeScheduledDaysOk returns a tuple with the RelativeScheduledDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetRelativeScheduledDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.RelativeScheduledDays) {
		return nil, false
	}
	return o.RelativeScheduledDays, true
}

// HasRelativeScheduledDays returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasRelativeScheduledDays() bool {
	if o != nil && !IsNil(o.RelativeScheduledDays) {
		return true
	}

	return false
}

// SetRelativeScheduledDays gets a reference to the given int32 and assigns it to the RelativeScheduledDays field.
func (o *DataSetNotificationTemplateParams) SetRelativeScheduledDays(v int32) {
	o.RelativeScheduledDays = &v
}

// GetSendStrategy returns the SendStrategy field value
func (o *DataSetNotificationTemplateParams) GetSendStrategy() SendStrategy {
	if o == nil {
		var ret SendStrategy
		return ret
	}

	return o.SendStrategy
}

// GetSendStrategyOk returns a tuple with the SendStrategy field value
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetSendStrategyOk() (*SendStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SendStrategy, true
}

// SetSendStrategy sets field value
func (o *DataSetNotificationTemplateParams) SetSendStrategy(v SendStrategy) {
	o.SendStrategy = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *DataSetNotificationTemplateParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetSubjectTemplate returns the SubjectTemplate field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetSubjectTemplate() string {
	if o == nil || IsNil(o.SubjectTemplate) {
		var ret string
		return ret
	}
	return *o.SubjectTemplate
}

// GetSubjectTemplateOk returns a tuple with the SubjectTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetSubjectTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectTemplate) {
		return nil, false
	}
	return o.SubjectTemplate, true
}

// HasSubjectTemplate returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasSubjectTemplate() bool {
	if o != nil && !IsNil(o.SubjectTemplate) {
		return true
	}

	return false
}

// SetSubjectTemplate gets a reference to the given string and assigns it to the SubjectTemplate field.
func (o *DataSetNotificationTemplateParams) SetSubjectTemplate(v string) {
	o.SubjectTemplate = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *DataSetNotificationTemplateParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetNotificationTemplateParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *DataSetNotificationTemplateParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *DataSetNotificationTemplateParams) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o DataSetNotificationTemplateParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSetNotificationTemplateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	toSerialize["dataSetNotificationTrigger"] = o.DataSetNotificationTrigger
	if !IsNil(o.DataSets) {
		toSerialize["dataSets"] = o.DataSets
	}
	if !IsNil(o.DeliveryChannels) {
		toSerialize["deliveryChannels"] = o.DeliveryChannels
	}
	if !IsNil(o.DisplayMessageTemplate) {
		toSerialize["displayMessageTemplate"] = o.DisplayMessageTemplate
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplaySubjectTemplate) {
		toSerialize["displaySubjectTemplate"] = o.DisplaySubjectTemplate
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.MessageTemplate) {
		toSerialize["messageTemplate"] = o.MessageTemplate
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["notificationRecipient"] = o.NotificationRecipient
	if !IsNil(o.NotifyParentOrganisationUnitOnly) {
		toSerialize["notifyParentOrganisationUnitOnly"] = o.NotifyParentOrganisationUnitOnly
	}
	if !IsNil(o.NotifyUsersInHierarchyOnly) {
		toSerialize["notifyUsersInHierarchyOnly"] = o.NotifyUsersInHierarchyOnly
	}
	if !IsNil(o.RecipientUserGroup) {
		toSerialize["recipientUserGroup"] = o.RecipientUserGroup
	}
	if !IsNil(o.RelativeScheduledDays) {
		toSerialize["relativeScheduledDays"] = o.RelativeScheduledDays
	}
	toSerialize["sendStrategy"] = o.SendStrategy
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.SubjectTemplate) {
		toSerialize["subjectTemplate"] = o.SubjectTemplate
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

func (o *DataSetNotificationTemplateParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataSetNotificationTrigger",
		"notificationRecipient",
		"sendStrategy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataSetNotificationTemplateParams := _DataSetNotificationTemplateParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataSetNotificationTemplateParams)

	if err != nil {
		return err
	}

	*o = DataSetNotificationTemplateParams(varDataSetNotificationTemplateParams)

	return err
}

type NullableDataSetNotificationTemplateParams struct {
	value *DataSetNotificationTemplateParams
	isSet bool
}

func (v NullableDataSetNotificationTemplateParams) Get() *DataSetNotificationTemplateParams {
	return v.value
}

func (v *NullableDataSetNotificationTemplateParams) Set(val *DataSetNotificationTemplateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSetNotificationTemplateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSetNotificationTemplateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSetNotificationTemplateParams(val *DataSetNotificationTemplateParams) *NullableDataSetNotificationTemplateParams {
	return &NullableDataSetNotificationTemplateParams{value: val, isSet: true}
}

func (v NullableDataSetNotificationTemplateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSetNotificationTemplateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
