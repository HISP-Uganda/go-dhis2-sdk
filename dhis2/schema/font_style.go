/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FontStyle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FontStyle{}

// FontStyle struct for FontStyle
type FontStyle struct {
	Bold      *bool   `json:"bold,omitempty"`
	Font      string  `json:"font"`
	FontSize  *int32  `json:"fontSize,omitempty"`
	Italic    *bool   `json:"italic,omitempty"`
	TextAlign string  `json:"textAlign"`
	TextColor *string `json:"textColor,omitempty"`
	Underline *bool   `json:"underline,omitempty"`
}

type _FontStyle FontStyle

// NewFontStyle instantiates a new FontStyle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFontStyle(font string, textAlign string) *FontStyle {
	this := FontStyle{}
	this.Font = font
	this.TextAlign = textAlign
	return &this
}

// NewFontStyleWithDefaults instantiates a new FontStyle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFontStyleWithDefaults() *FontStyle {
	this := FontStyle{}
	return &this
}

// GetBold returns the Bold field value if set, zero value otherwise.
func (o *FontStyle) GetBold() bool {
	if o == nil || IsNil(o.Bold) {
		var ret bool
		return ret
	}
	return *o.Bold
}

// GetBoldOk returns a tuple with the Bold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FontStyle) GetBoldOk() (*bool, bool) {
	if o == nil || IsNil(o.Bold) {
		return nil, false
	}
	return o.Bold, true
}

// HasBold returns a boolean if a field has been set.
func (o *FontStyle) HasBold() bool {
	if o != nil && !IsNil(o.Bold) {
		return true
	}

	return false
}

// SetBold gets a reference to the given bool and assigns it to the Bold field.
func (o *FontStyle) SetBold(v bool) {
	o.Bold = &v
}

// GetFont returns the Font field value
func (o *FontStyle) GetFont() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Font
}

// GetFontOk returns a tuple with the Font field value
// and a boolean to check if the value has been set.
func (o *FontStyle) GetFontOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Font, true
}

// SetFont sets field value
func (o *FontStyle) SetFont(v string) {
	o.Font = v
}

// GetFontSize returns the FontSize field value if set, zero value otherwise.
func (o *FontStyle) GetFontSize() int32 {
	if o == nil || IsNil(o.FontSize) {
		var ret int32
		return ret
	}
	return *o.FontSize
}

// GetFontSizeOk returns a tuple with the FontSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FontStyle) GetFontSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.FontSize) {
		return nil, false
	}
	return o.FontSize, true
}

// HasFontSize returns a boolean if a field has been set.
func (o *FontStyle) HasFontSize() bool {
	if o != nil && !IsNil(o.FontSize) {
		return true
	}

	return false
}

// SetFontSize gets a reference to the given int32 and assigns it to the FontSize field.
func (o *FontStyle) SetFontSize(v int32) {
	o.FontSize = &v
}

// GetItalic returns the Italic field value if set, zero value otherwise.
func (o *FontStyle) GetItalic() bool {
	if o == nil || IsNil(o.Italic) {
		var ret bool
		return ret
	}
	return *o.Italic
}

// GetItalicOk returns a tuple with the Italic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FontStyle) GetItalicOk() (*bool, bool) {
	if o == nil || IsNil(o.Italic) {
		return nil, false
	}
	return o.Italic, true
}

// HasItalic returns a boolean if a field has been set.
func (o *FontStyle) HasItalic() bool {
	if o != nil && !IsNil(o.Italic) {
		return true
	}

	return false
}

// SetItalic gets a reference to the given bool and assigns it to the Italic field.
func (o *FontStyle) SetItalic(v bool) {
	o.Italic = &v
}

// GetTextAlign returns the TextAlign field value
func (o *FontStyle) GetTextAlign() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TextAlign
}

// GetTextAlignOk returns a tuple with the TextAlign field value
// and a boolean to check if the value has been set.
func (o *FontStyle) GetTextAlignOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TextAlign, true
}

// SetTextAlign sets field value
func (o *FontStyle) SetTextAlign(v string) {
	o.TextAlign = v
}

// GetTextColor returns the TextColor field value if set, zero value otherwise.
func (o *FontStyle) GetTextColor() string {
	if o == nil || IsNil(o.TextColor) {
		var ret string
		return ret
	}
	return *o.TextColor
}

// GetTextColorOk returns a tuple with the TextColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FontStyle) GetTextColorOk() (*string, bool) {
	if o == nil || IsNil(o.TextColor) {
		return nil, false
	}
	return o.TextColor, true
}

// HasTextColor returns a boolean if a field has been set.
func (o *FontStyle) HasTextColor() bool {
	if o != nil && !IsNil(o.TextColor) {
		return true
	}

	return false
}

// SetTextColor gets a reference to the given string and assigns it to the TextColor field.
func (o *FontStyle) SetTextColor(v string) {
	o.TextColor = &v
}

// GetUnderline returns the Underline field value if set, zero value otherwise.
func (o *FontStyle) GetUnderline() bool {
	if o == nil || IsNil(o.Underline) {
		var ret bool
		return ret
	}
	return *o.Underline
}

// GetUnderlineOk returns a tuple with the Underline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FontStyle) GetUnderlineOk() (*bool, bool) {
	if o == nil || IsNil(o.Underline) {
		return nil, false
	}
	return o.Underline, true
}

// HasUnderline returns a boolean if a field has been set.
func (o *FontStyle) HasUnderline() bool {
	if o != nil && !IsNil(o.Underline) {
		return true
	}

	return false
}

// SetUnderline gets a reference to the given bool and assigns it to the Underline field.
func (o *FontStyle) SetUnderline(v bool) {
	o.Underline = &v
}

func (o FontStyle) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FontStyle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bold) {
		toSerialize["bold"] = o.Bold
	}
	toSerialize["font"] = o.Font
	if !IsNil(o.FontSize) {
		toSerialize["fontSize"] = o.FontSize
	}
	if !IsNil(o.Italic) {
		toSerialize["italic"] = o.Italic
	}
	toSerialize["textAlign"] = o.TextAlign
	if !IsNil(o.TextColor) {
		toSerialize["textColor"] = o.TextColor
	}
	if !IsNil(o.Underline) {
		toSerialize["underline"] = o.Underline
	}
	return toSerialize, nil
}

func (o *FontStyle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"font",
		"textAlign",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFontStyle := _FontStyle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFontStyle)

	if err != nil {
		return err
	}

	*o = FontStyle(varFontStyle)

	return err
}

type NullableFontStyle struct {
	value *FontStyle
	isSet bool
}

func (v NullableFontStyle) Get() *FontStyle {
	return v.value
}

func (v *NullableFontStyle) Set(val *FontStyle) {
	v.value = val
	v.isSet = true
}

func (v NullableFontStyle) IsSet() bool {
	return v.isSet
}

func (v *NullableFontStyle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFontStyle(val *FontStyle) *NullableFontStyle {
	return &NullableFontStyle{value: val, isSet: true}
}

func (v NullableFontStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFontStyle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
