/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ProgramRuleVariableSourceType the model 'ProgramRuleVariableSourceType'
type ProgramRuleVariableSourceType string

// List of ProgramRuleVariableSourceType
const (
	PROGRAMRULEVARIABLESOURCETYPE_DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE ProgramRuleVariableSourceType = "DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE"
	PROGRAMRULEVARIABLESOURCETYPE_DATAELEMENT_NEWEST_EVENT_PROGRAM       ProgramRuleVariableSourceType = "DATAELEMENT_NEWEST_EVENT_PROGRAM"
	PROGRAMRULEVARIABLESOURCETYPE_DATAELEMENT_CURRENT_EVENT              ProgramRuleVariableSourceType = "DATAELEMENT_CURRENT_EVENT"
	PROGRAMRULEVARIABLESOURCETYPE_DATAELEMENT_PREVIOUS_EVENT             ProgramRuleVariableSourceType = "DATAELEMENT_PREVIOUS_EVENT"
	PROGRAMRULEVARIABLESOURCETYPE_CALCULATED_VALUE                       ProgramRuleVariableSourceType = "CALCULATED_VALUE"
	PROGRAMRULEVARIABLESOURCETYPE_TEI_ATTRIBUTE                          ProgramRuleVariableSourceType = "TEI_ATTRIBUTE"
)

// All allowed values of ProgramRuleVariableSourceType enum
var AllowedProgramRuleVariableSourceTypeEnumValues = []ProgramRuleVariableSourceType{
	"DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE",
	"DATAELEMENT_NEWEST_EVENT_PROGRAM",
	"DATAELEMENT_CURRENT_EVENT",
	"DATAELEMENT_PREVIOUS_EVENT",
	"CALCULATED_VALUE",
	"TEI_ATTRIBUTE",
}

func (v *ProgramRuleVariableSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProgramRuleVariableSourceType(value)
	for _, existing := range AllowedProgramRuleVariableSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProgramRuleVariableSourceType", value)
}

// NewProgramRuleVariableSourceTypeFromValue returns a pointer to a valid ProgramRuleVariableSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProgramRuleVariableSourceTypeFromValue(v string) (*ProgramRuleVariableSourceType, error) {
	ev := ProgramRuleVariableSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProgramRuleVariableSourceType: valid values are %v", v, AllowedProgramRuleVariableSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProgramRuleVariableSourceType) IsValid() bool {
	for _, existing := range AllowedProgramRuleVariableSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramRuleVariableSourceType value
func (v ProgramRuleVariableSourceType) Ptr() *ProgramRuleVariableSourceType {
	return &v
}

type NullableProgramRuleVariableSourceType struct {
	value *ProgramRuleVariableSourceType
	isSet bool
}

func (v NullableProgramRuleVariableSourceType) Get() *ProgramRuleVariableSourceType {
	return v.value
}

func (v *NullableProgramRuleVariableSourceType) Set(val *ProgramRuleVariableSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramRuleVariableSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramRuleVariableSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramRuleVariableSourceType(val *ProgramRuleVariableSourceType) *NullableProgramRuleVariableSourceType {
	return &NullableProgramRuleVariableSourceType{value: val, isSet: true}
}

func (v NullableProgramRuleVariableSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramRuleVariableSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
