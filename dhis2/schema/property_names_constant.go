/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesConstant the model 'PropertyNamesConstant'
type PropertyNamesConstant string

// List of PropertyNames_Constant
const (
	PROPERTYNAMESCONSTANT_ACCESS              PropertyNamesConstant = "access"
	PROPERTYNAMESCONSTANT_ATTRIBUTE_VALUES    PropertyNamesConstant = "attributeValues"
	PROPERTYNAMESCONSTANT_CODE                PropertyNamesConstant = "code"
	PROPERTYNAMESCONSTANT_CREATED             PropertyNamesConstant = "created"
	PROPERTYNAMESCONSTANT_CREATED_BY          PropertyNamesConstant = "createdBy"
	PROPERTYNAMESCONSTANT_DESCRIPTION         PropertyNamesConstant = "description"
	PROPERTYNAMESCONSTANT_DISPLAY_DESCRIPTION PropertyNamesConstant = "displayDescription"
	PROPERTYNAMESCONSTANT_DISPLAY_FORM_NAME   PropertyNamesConstant = "displayFormName"
	PROPERTYNAMESCONSTANT_DISPLAY_NAME        PropertyNamesConstant = "displayName"
	PROPERTYNAMESCONSTANT_DISPLAY_SHORT_NAME  PropertyNamesConstant = "displayShortName"
	PROPERTYNAMESCONSTANT_EXTERNAL_ACCESS     PropertyNamesConstant = "externalAccess"
	PROPERTYNAMESCONSTANT_FAVORITE            PropertyNamesConstant = "favorite"
	PROPERTYNAMESCONSTANT_FAVORITES           PropertyNamesConstant = "favorites"
	PROPERTYNAMESCONSTANT_FORM_NAME           PropertyNamesConstant = "formName"
	PROPERTYNAMESCONSTANT_HREF                PropertyNamesConstant = "href"
	PROPERTYNAMESCONSTANT_ID                  PropertyNamesConstant = "id"
	PROPERTYNAMESCONSTANT_LAST_UPDATED        PropertyNamesConstant = "lastUpdated"
	PROPERTYNAMESCONSTANT_LAST_UPDATED_BY     PropertyNamesConstant = "lastUpdatedBy"
	PROPERTYNAMESCONSTANT_NAME                PropertyNamesConstant = "name"
	PROPERTYNAMESCONSTANT_PUBLIC_ACCESS       PropertyNamesConstant = "publicAccess"
	PROPERTYNAMESCONSTANT_SHARING             PropertyNamesConstant = "sharing"
	PROPERTYNAMESCONSTANT_SHORT_NAME          PropertyNamesConstant = "shortName"
	PROPERTYNAMESCONSTANT_TRANSLATIONS        PropertyNamesConstant = "translations"
	PROPERTYNAMESCONSTANT_USER                PropertyNamesConstant = "user"
	PROPERTYNAMESCONSTANT_USER_ACCESSES       PropertyNamesConstant = "userAccesses"
	PROPERTYNAMESCONSTANT_USER_GROUP_ACCESSES PropertyNamesConstant = "userGroupAccesses"
	PROPERTYNAMESCONSTANT_VALUE               PropertyNamesConstant = "value"
)

// All allowed values of PropertyNamesConstant enum
var AllowedPropertyNamesConstantEnumValues = []PropertyNamesConstant{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"externalAccess",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"shortName",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"value",
}

func (v *PropertyNamesConstant) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesConstant(value)
	for _, existing := range AllowedPropertyNamesConstantEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesConstant", value)
}

// NewPropertyNamesConstantFromValue returns a pointer to a valid PropertyNamesConstant
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesConstantFromValue(v string) (*PropertyNamesConstant, error) {
	ev := PropertyNamesConstant(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesConstant: valid values are %v", v, AllowedPropertyNamesConstantEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesConstant) IsValid() bool {
	for _, existing := range AllowedPropertyNamesConstantEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Constant value
func (v PropertyNamesConstant) Ptr() *PropertyNamesConstant {
	return &v
}

type NullablePropertyNamesConstant struct {
	value *PropertyNamesConstant
	isSet bool
}

func (v NullablePropertyNamesConstant) Get() *PropertyNamesConstant {
	return v.value
}

func (v *NullablePropertyNamesConstant) Set(val *PropertyNamesConstant) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesConstant) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesConstant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesConstant(val *PropertyNamesConstant) *NullablePropertyNamesConstant {
	return &NullablePropertyNamesConstant{value: val, isSet: true}
}

func (v NullablePropertyNamesConstant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesConstant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
