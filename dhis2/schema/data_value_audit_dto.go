/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DataValueAuditDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataValueAuditDto{}

// DataValueAuditDto struct for DataValueAuditDto
type DataValueAuditDto struct {
	// A UID for an CategoryOptionCombo object   (Java name `org.hisp.dhis.category.CategoryOptionCombo`)
	AttributeOptionCombo *string            `json:"attributeOptionCombo,omitempty"`
	AuditType            AuditOperationType `json:"auditType"`
	// A UID for an CategoryOptionCombo object   (Java name `org.hisp.dhis.category.CategoryOptionCombo`)
	CategoryOptionCombo *string    `json:"categoryOptionCombo,omitempty"`
	Created             *time.Time `json:"created,omitempty"`
	// A UID for an DataElement object   (Java name `org.hisp.dhis.dataelement.DataElement`)
	DataElement *string `json:"dataElement,omitempty"`
	ModifiedBy  *string `json:"modifiedBy,omitempty"`
	// A UID for an OrganisationUnit object   (Java name `org.hisp.dhis.organisationunit.OrganisationUnit`)
	OrgUnit *string `json:"orgUnit,omitempty"`
	Period  *string `json:"period,omitempty"`
	Value   *string `json:"value,omitempty"`
}

type _DataValueAuditDto DataValueAuditDto

// NewDataValueAuditDto instantiates a new DataValueAuditDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataValueAuditDto(auditType AuditOperationType) *DataValueAuditDto {
	this := DataValueAuditDto{}
	this.AuditType = auditType
	return &this
}

// NewDataValueAuditDtoWithDefaults instantiates a new DataValueAuditDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataValueAuditDtoWithDefaults() *DataValueAuditDto {
	this := DataValueAuditDto{}
	return &this
}

// GetAttributeOptionCombo returns the AttributeOptionCombo field value if set, zero value otherwise.
func (o *DataValueAuditDto) GetAttributeOptionCombo() string {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		var ret string
		return ret
	}
	return *o.AttributeOptionCombo
}

// GetAttributeOptionComboOk returns a tuple with the AttributeOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueAuditDto) GetAttributeOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		return nil, false
	}
	return o.AttributeOptionCombo, true
}

// HasAttributeOptionCombo returns a boolean if a field has been set.
func (o *DataValueAuditDto) HasAttributeOptionCombo() bool {
	if o != nil && !IsNil(o.AttributeOptionCombo) {
		return true
	}

	return false
}

// SetAttributeOptionCombo gets a reference to the given string and assigns it to the AttributeOptionCombo field.
func (o *DataValueAuditDto) SetAttributeOptionCombo(v string) {
	o.AttributeOptionCombo = &v
}

// GetAuditType returns the AuditType field value
func (o *DataValueAuditDto) GetAuditType() AuditOperationType {
	if o == nil {
		var ret AuditOperationType
		return ret
	}

	return o.AuditType
}

// GetAuditTypeOk returns a tuple with the AuditType field value
// and a boolean to check if the value has been set.
func (o *DataValueAuditDto) GetAuditTypeOk() (*AuditOperationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuditType, true
}

// SetAuditType sets field value
func (o *DataValueAuditDto) SetAuditType(v AuditOperationType) {
	o.AuditType = v
}

// GetCategoryOptionCombo returns the CategoryOptionCombo field value if set, zero value otherwise.
func (o *DataValueAuditDto) GetCategoryOptionCombo() string {
	if o == nil || IsNil(o.CategoryOptionCombo) {
		var ret string
		return ret
	}
	return *o.CategoryOptionCombo
}

// GetCategoryOptionComboOk returns a tuple with the CategoryOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueAuditDto) GetCategoryOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryOptionCombo) {
		return nil, false
	}
	return o.CategoryOptionCombo, true
}

// HasCategoryOptionCombo returns a boolean if a field has been set.
func (o *DataValueAuditDto) HasCategoryOptionCombo() bool {
	if o != nil && !IsNil(o.CategoryOptionCombo) {
		return true
	}

	return false
}

// SetCategoryOptionCombo gets a reference to the given string and assigns it to the CategoryOptionCombo field.
func (o *DataValueAuditDto) SetCategoryOptionCombo(v string) {
	o.CategoryOptionCombo = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DataValueAuditDto) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueAuditDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DataValueAuditDto) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *DataValueAuditDto) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDataElement returns the DataElement field value if set, zero value otherwise.
func (o *DataValueAuditDto) GetDataElement() string {
	if o == nil || IsNil(o.DataElement) {
		var ret string
		return ret
	}
	return *o.DataElement
}

// GetDataElementOk returns a tuple with the DataElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueAuditDto) GetDataElementOk() (*string, bool) {
	if o == nil || IsNil(o.DataElement) {
		return nil, false
	}
	return o.DataElement, true
}

// HasDataElement returns a boolean if a field has been set.
func (o *DataValueAuditDto) HasDataElement() bool {
	if o != nil && !IsNil(o.DataElement) {
		return true
	}

	return false
}

// SetDataElement gets a reference to the given string and assigns it to the DataElement field.
func (o *DataValueAuditDto) SetDataElement(v string) {
	o.DataElement = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *DataValueAuditDto) GetModifiedBy() string {
	if o == nil || IsNil(o.ModifiedBy) {
		var ret string
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueAuditDto) GetModifiedByOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *DataValueAuditDto) HasModifiedBy() bool {
	if o != nil && !IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given string and assigns it to the ModifiedBy field.
func (o *DataValueAuditDto) SetModifiedBy(v string) {
	o.ModifiedBy = &v
}

// GetOrgUnit returns the OrgUnit field value if set, zero value otherwise.
func (o *DataValueAuditDto) GetOrgUnit() string {
	if o == nil || IsNil(o.OrgUnit) {
		var ret string
		return ret
	}
	return *o.OrgUnit
}

// GetOrgUnitOk returns a tuple with the OrgUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueAuditDto) GetOrgUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnit) {
		return nil, false
	}
	return o.OrgUnit, true
}

// HasOrgUnit returns a boolean if a field has been set.
func (o *DataValueAuditDto) HasOrgUnit() bool {
	if o != nil && !IsNil(o.OrgUnit) {
		return true
	}

	return false
}

// SetOrgUnit gets a reference to the given string and assigns it to the OrgUnit field.
func (o *DataValueAuditDto) SetOrgUnit(v string) {
	o.OrgUnit = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *DataValueAuditDto) GetPeriod() string {
	if o == nil || IsNil(o.Period) {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueAuditDto) GetPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *DataValueAuditDto) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *DataValueAuditDto) SetPeriod(v string) {
	o.Period = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DataValueAuditDto) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueAuditDto) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DataValueAuditDto) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DataValueAuditDto) SetValue(v string) {
	o.Value = &v
}

func (o DataValueAuditDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataValueAuditDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeOptionCombo) {
		toSerialize["attributeOptionCombo"] = o.AttributeOptionCombo
	}
	toSerialize["auditType"] = o.AuditType
	if !IsNil(o.CategoryOptionCombo) {
		toSerialize["categoryOptionCombo"] = o.CategoryOptionCombo
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.DataElement) {
		toSerialize["dataElement"] = o.DataElement
	}
	if !IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if !IsNil(o.OrgUnit) {
		toSerialize["orgUnit"] = o.OrgUnit
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *DataValueAuditDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auditType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataValueAuditDto := _DataValueAuditDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataValueAuditDto)

	if err != nil {
		return err
	}

	*o = DataValueAuditDto(varDataValueAuditDto)

	return err
}

type NullableDataValueAuditDto struct {
	value *DataValueAuditDto
	isSet bool
}

func (v NullableDataValueAuditDto) Get() *DataValueAuditDto {
	return v.value
}

func (v *NullableDataValueAuditDto) Set(val *DataValueAuditDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataValueAuditDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataValueAuditDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataValueAuditDto(val *DataValueAuditDto) *NullableDataValueAuditDto {
	return &NullableDataValueAuditDto{value: val, isSet: true}
}

func (v NullableDataValueAuditDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataValueAuditDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
