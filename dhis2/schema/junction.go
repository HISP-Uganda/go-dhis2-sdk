/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// Junction the model 'Junction'
type Junction string

// List of Junction
const (
	JUNCTION_AND Junction = "AND"
	JUNCTION_OR  Junction = "OR"
)

// All allowed values of Junction enum
var AllowedJunctionEnumValues = []Junction{
	"AND",
	"OR",
}

func (v *Junction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Junction(value)
	for _, existing := range AllowedJunctionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Junction", value)
}

// NewJunctionFromValue returns a pointer to a valid Junction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJunctionFromValue(v string) (*Junction, error) {
	ev := Junction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Junction: valid values are %v", v, AllowedJunctionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Junction) IsValid() bool {
	for _, existing := range AllowedJunctionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Junction value
func (v Junction) Ptr() *Junction {
	return &v
}

type NullableJunction struct {
	value *Junction
	isSet bool
}

func (v NullableJunction) Get() *Junction {
	return v.value
}

func (v *NullableJunction) Set(val *Junction) {
	v.value = val
	v.isSet = true
}

func (v NullableJunction) IsSet() bool {
	return v.isSet
}

func (v *NullableJunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJunction(val *Junction) *NullableJunction {
	return &NullableJunction{value: val, isSet: true}
}

func (v NullableJunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
