/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DocumentPropertyNames the model 'DocumentPropertyNames'
type DocumentPropertyNames string

// List of DocumentPropertyNames
const (
	DOCUMENTPROPERTYNAMES_ACCESS           DocumentPropertyNames = "access"
	DOCUMENTPROPERTYNAMES_ATTACHMENT       DocumentPropertyNames = "attachment"
	DOCUMENTPROPERTYNAMES_ATTRIBUTE_VALUES DocumentPropertyNames = "attributeValues"
	DOCUMENTPROPERTYNAMES_CODE             DocumentPropertyNames = "code"
	DOCUMENTPROPERTYNAMES_CONTENT_TYPE     DocumentPropertyNames = "contentType"
	DOCUMENTPROPERTYNAMES_CREATED          DocumentPropertyNames = "created"
	DOCUMENTPROPERTYNAMES_CREATED_BY       DocumentPropertyNames = "createdBy"
	DOCUMENTPROPERTYNAMES_DISPLAY_NAME     DocumentPropertyNames = "displayName"
	DOCUMENTPROPERTYNAMES_EXTERNAL         DocumentPropertyNames = "external"
	DOCUMENTPROPERTYNAMES_FAVORITE         DocumentPropertyNames = "favorite"
	DOCUMENTPROPERTYNAMES_FAVORITES        DocumentPropertyNames = "favorites"
	DOCUMENTPROPERTYNAMES_HREF             DocumentPropertyNames = "href"
	DOCUMENTPROPERTYNAMES_ID               DocumentPropertyNames = "id"
	DOCUMENTPROPERTYNAMES_LAST_UPDATED     DocumentPropertyNames = "lastUpdated"
	DOCUMENTPROPERTYNAMES_LAST_UPDATED_BY  DocumentPropertyNames = "lastUpdatedBy"
	DOCUMENTPROPERTYNAMES_NAME             DocumentPropertyNames = "name"
	DOCUMENTPROPERTYNAMES_SHARING          DocumentPropertyNames = "sharing"
	DOCUMENTPROPERTYNAMES_TRANSLATIONS     DocumentPropertyNames = "translations"
	DOCUMENTPROPERTYNAMES_URL              DocumentPropertyNames = "url"
)

// All allowed values of DocumentPropertyNames enum
var AllowedDocumentPropertyNamesEnumValues = []DocumentPropertyNames{
	"access",
	"attachment",
	"attributeValues",
	"code",
	"contentType",
	"created",
	"createdBy",
	"displayName",
	"external",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"sharing",
	"translations",
	"url",
}

func (v *DocumentPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DocumentPropertyNames(value)
	for _, existing := range AllowedDocumentPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DocumentPropertyNames", value)
}

// NewDocumentPropertyNamesFromValue returns a pointer to a valid DocumentPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDocumentPropertyNamesFromValue(v string) (*DocumentPropertyNames, error) {
	ev := DocumentPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DocumentPropertyNames: valid values are %v", v, AllowedDocumentPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DocumentPropertyNames) IsValid() bool {
	for _, existing := range AllowedDocumentPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DocumentPropertyNames value
func (v DocumentPropertyNames) Ptr() *DocumentPropertyNames {
	return &v
}

type NullableDocumentPropertyNames struct {
	value *DocumentPropertyNames
	isSet bool
}

func (v NullableDocumentPropertyNames) Get() *DocumentPropertyNames {
	return v.value
}

func (v *NullableDocumentPropertyNames) Set(val *DocumentPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentPropertyNames(val *DocumentPropertyNames) *NullableDocumentPropertyNames {
	return &NullableDocumentPropertyNames{value: val, isSet: true}
}

func (v NullableDocumentPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
