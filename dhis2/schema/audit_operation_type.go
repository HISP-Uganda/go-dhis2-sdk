/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// AuditOperationType the model 'AuditOperationType'
type AuditOperationType string

// List of AuditOperationType
const (
	AUDITOPERATIONTYPE_CREATE AuditOperationType = "CREATE"
	AUDITOPERATIONTYPE_UPDATE AuditOperationType = "UPDATE"
	AUDITOPERATIONTYPE_DELETE AuditOperationType = "DELETE"
	AUDITOPERATIONTYPE_READ   AuditOperationType = "READ"
	AUDITOPERATIONTYPE_SEARCH AuditOperationType = "SEARCH"
)

// All allowed values of AuditOperationType enum
var AllowedAuditOperationTypeEnumValues = []AuditOperationType{
	"CREATE",
	"UPDATE",
	"DELETE",
	"READ",
	"SEARCH",
}

func (v *AuditOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuditOperationType(value)
	for _, existing := range AllowedAuditOperationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuditOperationType", value)
}

// NewAuditOperationTypeFromValue returns a pointer to a valid AuditOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuditOperationTypeFromValue(v string) (*AuditOperationType, error) {
	ev := AuditOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuditOperationType: valid values are %v", v, AllowedAuditOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuditOperationType) IsValid() bool {
	for _, existing := range AllowedAuditOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuditOperationType value
func (v AuditOperationType) Ptr() *AuditOperationType {
	return &v
}

type NullableAuditOperationType struct {
	value *AuditOperationType
	isSet bool
}

func (v NullableAuditOperationType) Get() *AuditOperationType {
	return v.value
}

func (v *NullableAuditOperationType) Set(val *AuditOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditOperationType(val *AuditOperationType) *NullableAuditOperationType {
	return &NullableAuditOperationType{value: val, isSet: true}
}

func (v NullableAuditOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
