/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// RelationshipTypePropertyNames the model 'RelationshipTypePropertyNames'
type RelationshipTypePropertyNames string

// List of RelationshipTypePropertyNames
const (
	RELATIONSHIPTYPEPROPERTYNAMES_ACCESS               RelationshipTypePropertyNames = "access"
	RELATIONSHIPTYPEPROPERTYNAMES_ATTRIBUTE_VALUES     RelationshipTypePropertyNames = "attributeValues"
	RELATIONSHIPTYPEPROPERTYNAMES_BIDIRECTIONAL        RelationshipTypePropertyNames = "bidirectional"
	RELATIONSHIPTYPEPROPERTYNAMES_CODE                 RelationshipTypePropertyNames = "code"
	RELATIONSHIPTYPEPROPERTYNAMES_CREATED              RelationshipTypePropertyNames = "created"
	RELATIONSHIPTYPEPROPERTYNAMES_CREATED_BY           RelationshipTypePropertyNames = "createdBy"
	RELATIONSHIPTYPEPROPERTYNAMES_DESCRIPTION          RelationshipTypePropertyNames = "description"
	RELATIONSHIPTYPEPROPERTYNAMES_DISPLAY_FROM_TO_NAME RelationshipTypePropertyNames = "displayFromToName"
	RELATIONSHIPTYPEPROPERTYNAMES_DISPLAY_NAME         RelationshipTypePropertyNames = "displayName"
	RELATIONSHIPTYPEPROPERTYNAMES_DISPLAY_TO_FROM_NAME RelationshipTypePropertyNames = "displayToFromName"
	RELATIONSHIPTYPEPROPERTYNAMES_FAVORITE             RelationshipTypePropertyNames = "favorite"
	RELATIONSHIPTYPEPROPERTYNAMES_FAVORITES            RelationshipTypePropertyNames = "favorites"
	RELATIONSHIPTYPEPROPERTYNAMES_FROM_CONSTRAINT      RelationshipTypePropertyNames = "fromConstraint"
	RELATIONSHIPTYPEPROPERTYNAMES_FROM_TO_NAME         RelationshipTypePropertyNames = "fromToName"
	RELATIONSHIPTYPEPROPERTYNAMES_HREF                 RelationshipTypePropertyNames = "href"
	RELATIONSHIPTYPEPROPERTYNAMES_ID                   RelationshipTypePropertyNames = "id"
	RELATIONSHIPTYPEPROPERTYNAMES_LAST_UPDATED         RelationshipTypePropertyNames = "lastUpdated"
	RELATIONSHIPTYPEPROPERTYNAMES_LAST_UPDATED_BY      RelationshipTypePropertyNames = "lastUpdatedBy"
	RELATIONSHIPTYPEPROPERTYNAMES_NAME                 RelationshipTypePropertyNames = "name"
	RELATIONSHIPTYPEPROPERTYNAMES_REFERRAL             RelationshipTypePropertyNames = "referral"
	RELATIONSHIPTYPEPROPERTYNAMES_SHARING              RelationshipTypePropertyNames = "sharing"
	RELATIONSHIPTYPEPROPERTYNAMES_TO_CONSTRAINT        RelationshipTypePropertyNames = "toConstraint"
	RELATIONSHIPTYPEPROPERTYNAMES_TO_FROM_NAME         RelationshipTypePropertyNames = "toFromName"
	RELATIONSHIPTYPEPROPERTYNAMES_TRANSLATIONS         RelationshipTypePropertyNames = "translations"
)

// All allowed values of RelationshipTypePropertyNames enum
var AllowedRelationshipTypePropertyNamesEnumValues = []RelationshipTypePropertyNames{
	"access",
	"attributeValues",
	"bidirectional",
	"code",
	"created",
	"createdBy",
	"description",
	"displayFromToName",
	"displayName",
	"displayToFromName",
	"favorite",
	"favorites",
	"fromConstraint",
	"fromToName",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"referral",
	"sharing",
	"toConstraint",
	"toFromName",
	"translations",
}

func (v *RelationshipTypePropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RelationshipTypePropertyNames(value)
	for _, existing := range AllowedRelationshipTypePropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RelationshipTypePropertyNames", value)
}

// NewRelationshipTypePropertyNamesFromValue returns a pointer to a valid RelationshipTypePropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRelationshipTypePropertyNamesFromValue(v string) (*RelationshipTypePropertyNames, error) {
	ev := RelationshipTypePropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RelationshipTypePropertyNames: valid values are %v", v, AllowedRelationshipTypePropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RelationshipTypePropertyNames) IsValid() bool {
	for _, existing := range AllowedRelationshipTypePropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RelationshipTypePropertyNames value
func (v RelationshipTypePropertyNames) Ptr() *RelationshipTypePropertyNames {
	return &v
}

type NullableRelationshipTypePropertyNames struct {
	value *RelationshipTypePropertyNames
	isSet bool
}

func (v NullableRelationshipTypePropertyNames) Get() *RelationshipTypePropertyNames {
	return v.value
}

func (v *NullableRelationshipTypePropertyNames) Set(val *RelationshipTypePropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipTypePropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipTypePropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipTypePropertyNames(val *RelationshipTypePropertyNames) *NullableRelationshipTypePropertyNames {
	return &NullableRelationshipTypePropertyNames{value: val, isSet: true}
}

func (v NullableRelationshipTypePropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipTypePropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
