/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// checks if the OutlierValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutlierValue{}

// OutlierValue struct for OutlierValue
type OutlierValue struct {
	AbsDev      *float64   `json:"absDev,omitempty"`
	Aoc         *string    `json:"aoc,omitempty"`
	AocName     *string    `json:"aocName,omitempty"`
	Coc         *string    `json:"coc,omitempty"`
	CocName     *string    `json:"cocName,omitempty"`
	De          *string    `json:"de,omitempty"`
	DeName      *string    `json:"deName,omitempty"`
	Followup    *bool      `json:"followup,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	LowerBound  *float64   `json:"lowerBound,omitempty"`
	Mean        *float64   `json:"mean,omitempty"`
	Median      *float64   `json:"median,omitempty"`
	Ou          *string    `json:"ou,omitempty"`
	OuName      *string    `json:"ouName,omitempty"`
	Pe          *string    `json:"pe,omitempty"`
	StdDev      *float64   `json:"stdDev,omitempty"`
	UpperBound  *float64   `json:"upperBound,omitempty"`
	Value       *float64   `json:"value,omitempty"`
	ZScore      *float64   `json:"zScore,omitempty"`
}

// NewOutlierValue instantiates a new OutlierValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutlierValue() *OutlierValue {
	this := OutlierValue{}
	return &this
}

// NewOutlierValueWithDefaults instantiates a new OutlierValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutlierValueWithDefaults() *OutlierValue {
	this := OutlierValue{}
	return &this
}

// GetAbsDev returns the AbsDev field value if set, zero value otherwise.
func (o *OutlierValue) GetAbsDev() float64 {
	if o == nil || IsNil(o.AbsDev) {
		var ret float64
		return ret
	}
	return *o.AbsDev
}

// GetAbsDevOk returns a tuple with the AbsDev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetAbsDevOk() (*float64, bool) {
	if o == nil || IsNil(o.AbsDev) {
		return nil, false
	}
	return o.AbsDev, true
}

// HasAbsDev returns a boolean if a field has been set.
func (o *OutlierValue) HasAbsDev() bool {
	if o != nil && !IsNil(o.AbsDev) {
		return true
	}

	return false
}

// SetAbsDev gets a reference to the given float64 and assigns it to the AbsDev field.
func (o *OutlierValue) SetAbsDev(v float64) {
	o.AbsDev = &v
}

// GetAoc returns the Aoc field value if set, zero value otherwise.
func (o *OutlierValue) GetAoc() string {
	if o == nil || IsNil(o.Aoc) {
		var ret string
		return ret
	}
	return *o.Aoc
}

// GetAocOk returns a tuple with the Aoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetAocOk() (*string, bool) {
	if o == nil || IsNil(o.Aoc) {
		return nil, false
	}
	return o.Aoc, true
}

// HasAoc returns a boolean if a field has been set.
func (o *OutlierValue) HasAoc() bool {
	if o != nil && !IsNil(o.Aoc) {
		return true
	}

	return false
}

// SetAoc gets a reference to the given string and assigns it to the Aoc field.
func (o *OutlierValue) SetAoc(v string) {
	o.Aoc = &v
}

// GetAocName returns the AocName field value if set, zero value otherwise.
func (o *OutlierValue) GetAocName() string {
	if o == nil || IsNil(o.AocName) {
		var ret string
		return ret
	}
	return *o.AocName
}

// GetAocNameOk returns a tuple with the AocName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetAocNameOk() (*string, bool) {
	if o == nil || IsNil(o.AocName) {
		return nil, false
	}
	return o.AocName, true
}

// HasAocName returns a boolean if a field has been set.
func (o *OutlierValue) HasAocName() bool {
	if o != nil && !IsNil(o.AocName) {
		return true
	}

	return false
}

// SetAocName gets a reference to the given string and assigns it to the AocName field.
func (o *OutlierValue) SetAocName(v string) {
	o.AocName = &v
}

// GetCoc returns the Coc field value if set, zero value otherwise.
func (o *OutlierValue) GetCoc() string {
	if o == nil || IsNil(o.Coc) {
		var ret string
		return ret
	}
	return *o.Coc
}

// GetCocOk returns a tuple with the Coc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetCocOk() (*string, bool) {
	if o == nil || IsNil(o.Coc) {
		return nil, false
	}
	return o.Coc, true
}

// HasCoc returns a boolean if a field has been set.
func (o *OutlierValue) HasCoc() bool {
	if o != nil && !IsNil(o.Coc) {
		return true
	}

	return false
}

// SetCoc gets a reference to the given string and assigns it to the Coc field.
func (o *OutlierValue) SetCoc(v string) {
	o.Coc = &v
}

// GetCocName returns the CocName field value if set, zero value otherwise.
func (o *OutlierValue) GetCocName() string {
	if o == nil || IsNil(o.CocName) {
		var ret string
		return ret
	}
	return *o.CocName
}

// GetCocNameOk returns a tuple with the CocName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetCocNameOk() (*string, bool) {
	if o == nil || IsNil(o.CocName) {
		return nil, false
	}
	return o.CocName, true
}

// HasCocName returns a boolean if a field has been set.
func (o *OutlierValue) HasCocName() bool {
	if o != nil && !IsNil(o.CocName) {
		return true
	}

	return false
}

// SetCocName gets a reference to the given string and assigns it to the CocName field.
func (o *OutlierValue) SetCocName(v string) {
	o.CocName = &v
}

// GetDe returns the De field value if set, zero value otherwise.
func (o *OutlierValue) GetDe() string {
	if o == nil || IsNil(o.De) {
		var ret string
		return ret
	}
	return *o.De
}

// GetDeOk returns a tuple with the De field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetDeOk() (*string, bool) {
	if o == nil || IsNil(o.De) {
		return nil, false
	}
	return o.De, true
}

// HasDe returns a boolean if a field has been set.
func (o *OutlierValue) HasDe() bool {
	if o != nil && !IsNil(o.De) {
		return true
	}

	return false
}

// SetDe gets a reference to the given string and assigns it to the De field.
func (o *OutlierValue) SetDe(v string) {
	o.De = &v
}

// GetDeName returns the DeName field value if set, zero value otherwise.
func (o *OutlierValue) GetDeName() string {
	if o == nil || IsNil(o.DeName) {
		var ret string
		return ret
	}
	return *o.DeName
}

// GetDeNameOk returns a tuple with the DeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetDeNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeName) {
		return nil, false
	}
	return o.DeName, true
}

// HasDeName returns a boolean if a field has been set.
func (o *OutlierValue) HasDeName() bool {
	if o != nil && !IsNil(o.DeName) {
		return true
	}

	return false
}

// SetDeName gets a reference to the given string and assigns it to the DeName field.
func (o *OutlierValue) SetDeName(v string) {
	o.DeName = &v
}

// GetFollowup returns the Followup field value if set, zero value otherwise.
func (o *OutlierValue) GetFollowup() bool {
	if o == nil || IsNil(o.Followup) {
		var ret bool
		return ret
	}
	return *o.Followup
}

// GetFollowupOk returns a tuple with the Followup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetFollowupOk() (*bool, bool) {
	if o == nil || IsNil(o.Followup) {
		return nil, false
	}
	return o.Followup, true
}

// HasFollowup returns a boolean if a field has been set.
func (o *OutlierValue) HasFollowup() bool {
	if o != nil && !IsNil(o.Followup) {
		return true
	}

	return false
}

// SetFollowup gets a reference to the given bool and assigns it to the Followup field.
func (o *OutlierValue) SetFollowup(v bool) {
	o.Followup = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *OutlierValue) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *OutlierValue) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *OutlierValue) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLowerBound returns the LowerBound field value if set, zero value otherwise.
func (o *OutlierValue) GetLowerBound() float64 {
	if o == nil || IsNil(o.LowerBound) {
		var ret float64
		return ret
	}
	return *o.LowerBound
}

// GetLowerBoundOk returns a tuple with the LowerBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetLowerBoundOk() (*float64, bool) {
	if o == nil || IsNil(o.LowerBound) {
		return nil, false
	}
	return o.LowerBound, true
}

// HasLowerBound returns a boolean if a field has been set.
func (o *OutlierValue) HasLowerBound() bool {
	if o != nil && !IsNil(o.LowerBound) {
		return true
	}

	return false
}

// SetLowerBound gets a reference to the given float64 and assigns it to the LowerBound field.
func (o *OutlierValue) SetLowerBound(v float64) {
	o.LowerBound = &v
}

// GetMean returns the Mean field value if set, zero value otherwise.
func (o *OutlierValue) GetMean() float64 {
	if o == nil || IsNil(o.Mean) {
		var ret float64
		return ret
	}
	return *o.Mean
}

// GetMeanOk returns a tuple with the Mean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetMeanOk() (*float64, bool) {
	if o == nil || IsNil(o.Mean) {
		return nil, false
	}
	return o.Mean, true
}

// HasMean returns a boolean if a field has been set.
func (o *OutlierValue) HasMean() bool {
	if o != nil && !IsNil(o.Mean) {
		return true
	}

	return false
}

// SetMean gets a reference to the given float64 and assigns it to the Mean field.
func (o *OutlierValue) SetMean(v float64) {
	o.Mean = &v
}

// GetMedian returns the Median field value if set, zero value otherwise.
func (o *OutlierValue) GetMedian() float64 {
	if o == nil || IsNil(o.Median) {
		var ret float64
		return ret
	}
	return *o.Median
}

// GetMedianOk returns a tuple with the Median field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetMedianOk() (*float64, bool) {
	if o == nil || IsNil(o.Median) {
		return nil, false
	}
	return o.Median, true
}

// HasMedian returns a boolean if a field has been set.
func (o *OutlierValue) HasMedian() bool {
	if o != nil && !IsNil(o.Median) {
		return true
	}

	return false
}

// SetMedian gets a reference to the given float64 and assigns it to the Median field.
func (o *OutlierValue) SetMedian(v float64) {
	o.Median = &v
}

// GetOu returns the Ou field value if set, zero value otherwise.
func (o *OutlierValue) GetOu() string {
	if o == nil || IsNil(o.Ou) {
		var ret string
		return ret
	}
	return *o.Ou
}

// GetOuOk returns a tuple with the Ou field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetOuOk() (*string, bool) {
	if o == nil || IsNil(o.Ou) {
		return nil, false
	}
	return o.Ou, true
}

// HasOu returns a boolean if a field has been set.
func (o *OutlierValue) HasOu() bool {
	if o != nil && !IsNil(o.Ou) {
		return true
	}

	return false
}

// SetOu gets a reference to the given string and assigns it to the Ou field.
func (o *OutlierValue) SetOu(v string) {
	o.Ou = &v
}

// GetOuName returns the OuName field value if set, zero value otherwise.
func (o *OutlierValue) GetOuName() string {
	if o == nil || IsNil(o.OuName) {
		var ret string
		return ret
	}
	return *o.OuName
}

// GetOuNameOk returns a tuple with the OuName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetOuNameOk() (*string, bool) {
	if o == nil || IsNil(o.OuName) {
		return nil, false
	}
	return o.OuName, true
}

// HasOuName returns a boolean if a field has been set.
func (o *OutlierValue) HasOuName() bool {
	if o != nil && !IsNil(o.OuName) {
		return true
	}

	return false
}

// SetOuName gets a reference to the given string and assigns it to the OuName field.
func (o *OutlierValue) SetOuName(v string) {
	o.OuName = &v
}

// GetPe returns the Pe field value if set, zero value otherwise.
func (o *OutlierValue) GetPe() string {
	if o == nil || IsNil(o.Pe) {
		var ret string
		return ret
	}
	return *o.Pe
}

// GetPeOk returns a tuple with the Pe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetPeOk() (*string, bool) {
	if o == nil || IsNil(o.Pe) {
		return nil, false
	}
	return o.Pe, true
}

// HasPe returns a boolean if a field has been set.
func (o *OutlierValue) HasPe() bool {
	if o != nil && !IsNil(o.Pe) {
		return true
	}

	return false
}

// SetPe gets a reference to the given string and assigns it to the Pe field.
func (o *OutlierValue) SetPe(v string) {
	o.Pe = &v
}

// GetStdDev returns the StdDev field value if set, zero value otherwise.
func (o *OutlierValue) GetStdDev() float64 {
	if o == nil || IsNil(o.StdDev) {
		var ret float64
		return ret
	}
	return *o.StdDev
}

// GetStdDevOk returns a tuple with the StdDev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetStdDevOk() (*float64, bool) {
	if o == nil || IsNil(o.StdDev) {
		return nil, false
	}
	return o.StdDev, true
}

// HasStdDev returns a boolean if a field has been set.
func (o *OutlierValue) HasStdDev() bool {
	if o != nil && !IsNil(o.StdDev) {
		return true
	}

	return false
}

// SetStdDev gets a reference to the given float64 and assigns it to the StdDev field.
func (o *OutlierValue) SetStdDev(v float64) {
	o.StdDev = &v
}

// GetUpperBound returns the UpperBound field value if set, zero value otherwise.
func (o *OutlierValue) GetUpperBound() float64 {
	if o == nil || IsNil(o.UpperBound) {
		var ret float64
		return ret
	}
	return *o.UpperBound
}

// GetUpperBoundOk returns a tuple with the UpperBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetUpperBoundOk() (*float64, bool) {
	if o == nil || IsNil(o.UpperBound) {
		return nil, false
	}
	return o.UpperBound, true
}

// HasUpperBound returns a boolean if a field has been set.
func (o *OutlierValue) HasUpperBound() bool {
	if o != nil && !IsNil(o.UpperBound) {
		return true
	}

	return false
}

// SetUpperBound gets a reference to the given float64 and assigns it to the UpperBound field.
func (o *OutlierValue) SetUpperBound(v float64) {
	o.UpperBound = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OutlierValue) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OutlierValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *OutlierValue) SetValue(v float64) {
	o.Value = &v
}

// GetZScore returns the ZScore field value if set, zero value otherwise.
func (o *OutlierValue) GetZScore() float64 {
	if o == nil || IsNil(o.ZScore) {
		var ret float64
		return ret
	}
	return *o.ZScore
}

// GetZScoreOk returns a tuple with the ZScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierValue) GetZScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.ZScore) {
		return nil, false
	}
	return o.ZScore, true
}

// HasZScore returns a boolean if a field has been set.
func (o *OutlierValue) HasZScore() bool {
	if o != nil && !IsNil(o.ZScore) {
		return true
	}

	return false
}

// SetZScore gets a reference to the given float64 and assigns it to the ZScore field.
func (o *OutlierValue) SetZScore(v float64) {
	o.ZScore = &v
}

func (o OutlierValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutlierValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AbsDev) {
		toSerialize["absDev"] = o.AbsDev
	}
	if !IsNil(o.Aoc) {
		toSerialize["aoc"] = o.Aoc
	}
	if !IsNil(o.AocName) {
		toSerialize["aocName"] = o.AocName
	}
	if !IsNil(o.Coc) {
		toSerialize["coc"] = o.Coc
	}
	if !IsNil(o.CocName) {
		toSerialize["cocName"] = o.CocName
	}
	if !IsNil(o.De) {
		toSerialize["de"] = o.De
	}
	if !IsNil(o.DeName) {
		toSerialize["deName"] = o.DeName
	}
	if !IsNil(o.Followup) {
		toSerialize["followup"] = o.Followup
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LowerBound) {
		toSerialize["lowerBound"] = o.LowerBound
	}
	if !IsNil(o.Mean) {
		toSerialize["mean"] = o.Mean
	}
	if !IsNil(o.Median) {
		toSerialize["median"] = o.Median
	}
	if !IsNil(o.Ou) {
		toSerialize["ou"] = o.Ou
	}
	if !IsNil(o.OuName) {
		toSerialize["ouName"] = o.OuName
	}
	if !IsNil(o.Pe) {
		toSerialize["pe"] = o.Pe
	}
	if !IsNil(o.StdDev) {
		toSerialize["stdDev"] = o.StdDev
	}
	if !IsNil(o.UpperBound) {
		toSerialize["upperBound"] = o.UpperBound
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ZScore) {
		toSerialize["zScore"] = o.ZScore
	}
	return toSerialize, nil
}

type NullableOutlierValue struct {
	value *OutlierValue
	isSet bool
}

func (v NullableOutlierValue) Get() *OutlierValue {
	return v.value
}

func (v *NullableOutlierValue) Set(val *OutlierValue) {
	v.value = val
	v.isSet = true
}

func (v NullableOutlierValue) IsSet() bool {
	return v.isSet
}

func (v *NullableOutlierValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutlierValue(val *OutlierValue) *NullableOutlierValue {
	return &NullableOutlierValue{value: val, isSet: true}
}

func (v NullableOutlierValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutlierValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
