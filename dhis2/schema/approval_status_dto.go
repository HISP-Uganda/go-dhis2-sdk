/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ApprovalStatusDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalStatusDto{}

// ApprovalStatusDto struct for ApprovalStatusDto
type ApprovalStatusDto struct {
	// A UID for an CategoryOptionCombo object   (Java name `org.hisp.dhis.category.CategoryOptionCombo`)
	Aoc   *string `json:"aoc,omitempty"`
	Level *string `json:"level,omitempty"`
	// A UID for an OrganisationUnit object   (Java name `org.hisp.dhis.organisationunit.OrganisationUnit`)
	Ou          *string                  `json:"ou,omitempty"`
	OuName      *string                  `json:"ouName,omitempty"`
	Pe          *string                  `json:"pe,omitempty"`
	Permissions *DataApprovalPermissions `json:"permissions,omitempty"`
	State       DataApprovalState        `json:"state"`
	// A UID for an DataApprovalWorkflow object   (Java name `org.hisp.dhis.dataapproval.DataApprovalWorkflow`)
	Wf *string `json:"wf,omitempty"`
}

type _ApprovalStatusDto ApprovalStatusDto

// NewApprovalStatusDto instantiates a new ApprovalStatusDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalStatusDto(state DataApprovalState) *ApprovalStatusDto {
	this := ApprovalStatusDto{}
	this.State = state
	return &this
}

// NewApprovalStatusDtoWithDefaults instantiates a new ApprovalStatusDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalStatusDtoWithDefaults() *ApprovalStatusDto {
	this := ApprovalStatusDto{}
	return &this
}

// GetAoc returns the Aoc field value if set, zero value otherwise.
func (o *ApprovalStatusDto) GetAoc() string {
	if o == nil || IsNil(o.Aoc) {
		var ret string
		return ret
	}
	return *o.Aoc
}

// GetAocOk returns a tuple with the Aoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalStatusDto) GetAocOk() (*string, bool) {
	if o == nil || IsNil(o.Aoc) {
		return nil, false
	}
	return o.Aoc, true
}

// HasAoc returns a boolean if a field has been set.
func (o *ApprovalStatusDto) HasAoc() bool {
	if o != nil && !IsNil(o.Aoc) {
		return true
	}

	return false
}

// SetAoc gets a reference to the given string and assigns it to the Aoc field.
func (o *ApprovalStatusDto) SetAoc(v string) {
	o.Aoc = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *ApprovalStatusDto) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalStatusDto) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *ApprovalStatusDto) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *ApprovalStatusDto) SetLevel(v string) {
	o.Level = &v
}

// GetOu returns the Ou field value if set, zero value otherwise.
func (o *ApprovalStatusDto) GetOu() string {
	if o == nil || IsNil(o.Ou) {
		var ret string
		return ret
	}
	return *o.Ou
}

// GetOuOk returns a tuple with the Ou field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalStatusDto) GetOuOk() (*string, bool) {
	if o == nil || IsNil(o.Ou) {
		return nil, false
	}
	return o.Ou, true
}

// HasOu returns a boolean if a field has been set.
func (o *ApprovalStatusDto) HasOu() bool {
	if o != nil && !IsNil(o.Ou) {
		return true
	}

	return false
}

// SetOu gets a reference to the given string and assigns it to the Ou field.
func (o *ApprovalStatusDto) SetOu(v string) {
	o.Ou = &v
}

// GetOuName returns the OuName field value if set, zero value otherwise.
func (o *ApprovalStatusDto) GetOuName() string {
	if o == nil || IsNil(o.OuName) {
		var ret string
		return ret
	}
	return *o.OuName
}

// GetOuNameOk returns a tuple with the OuName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalStatusDto) GetOuNameOk() (*string, bool) {
	if o == nil || IsNil(o.OuName) {
		return nil, false
	}
	return o.OuName, true
}

// HasOuName returns a boolean if a field has been set.
func (o *ApprovalStatusDto) HasOuName() bool {
	if o != nil && !IsNil(o.OuName) {
		return true
	}

	return false
}

// SetOuName gets a reference to the given string and assigns it to the OuName field.
func (o *ApprovalStatusDto) SetOuName(v string) {
	o.OuName = &v
}

// GetPe returns the Pe field value if set, zero value otherwise.
func (o *ApprovalStatusDto) GetPe() string {
	if o == nil || IsNil(o.Pe) {
		var ret string
		return ret
	}
	return *o.Pe
}

// GetPeOk returns a tuple with the Pe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalStatusDto) GetPeOk() (*string, bool) {
	if o == nil || IsNil(o.Pe) {
		return nil, false
	}
	return o.Pe, true
}

// HasPe returns a boolean if a field has been set.
func (o *ApprovalStatusDto) HasPe() bool {
	if o != nil && !IsNil(o.Pe) {
		return true
	}

	return false
}

// SetPe gets a reference to the given string and assigns it to the Pe field.
func (o *ApprovalStatusDto) SetPe(v string) {
	o.Pe = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ApprovalStatusDto) GetPermissions() DataApprovalPermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret DataApprovalPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalStatusDto) GetPermissionsOk() (*DataApprovalPermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ApprovalStatusDto) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given DataApprovalPermissions and assigns it to the Permissions field.
func (o *ApprovalStatusDto) SetPermissions(v DataApprovalPermissions) {
	o.Permissions = &v
}

// GetState returns the State field value
func (o *ApprovalStatusDto) GetState() DataApprovalState {
	if o == nil {
		var ret DataApprovalState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ApprovalStatusDto) GetStateOk() (*DataApprovalState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ApprovalStatusDto) SetState(v DataApprovalState) {
	o.State = v
}

// GetWf returns the Wf field value if set, zero value otherwise.
func (o *ApprovalStatusDto) GetWf() string {
	if o == nil || IsNil(o.Wf) {
		var ret string
		return ret
	}
	return *o.Wf
}

// GetWfOk returns a tuple with the Wf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalStatusDto) GetWfOk() (*string, bool) {
	if o == nil || IsNil(o.Wf) {
		return nil, false
	}
	return o.Wf, true
}

// HasWf returns a boolean if a field has been set.
func (o *ApprovalStatusDto) HasWf() bool {
	if o != nil && !IsNil(o.Wf) {
		return true
	}

	return false
}

// SetWf gets a reference to the given string and assigns it to the Wf field.
func (o *ApprovalStatusDto) SetWf(v string) {
	o.Wf = &v
}

func (o ApprovalStatusDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalStatusDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aoc) {
		toSerialize["aoc"] = o.Aoc
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Ou) {
		toSerialize["ou"] = o.Ou
	}
	if !IsNil(o.OuName) {
		toSerialize["ouName"] = o.OuName
	}
	if !IsNil(o.Pe) {
		toSerialize["pe"] = o.Pe
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	toSerialize["state"] = o.State
	if !IsNil(o.Wf) {
		toSerialize["wf"] = o.Wf
	}
	return toSerialize, nil
}

func (o *ApprovalStatusDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApprovalStatusDto := _ApprovalStatusDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApprovalStatusDto)

	if err != nil {
		return err
	}

	*o = ApprovalStatusDto(varApprovalStatusDto)

	return err
}

type NullableApprovalStatusDto struct {
	value *ApprovalStatusDto
	isSet bool
}

func (v NullableApprovalStatusDto) Get() *ApprovalStatusDto {
	return v.value
}

func (v *NullableApprovalStatusDto) Set(val *ApprovalStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalStatusDto(val *ApprovalStatusDto) *NullableApprovalStatusDto {
	return &NullableApprovalStatusDto{value: val, isSet: true}
}

func (v NullableApprovalStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
