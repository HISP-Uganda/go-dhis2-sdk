/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesProgramMessage the model 'PropertyNamesProgramMessage'
type PropertyNamesProgramMessage string

// List of PropertyNames_ProgramMessage
const (
	PROPERTYNAMESPROGRAMMESSAGE_ACCESS                 PropertyNamesProgramMessage = "access"
	PROPERTYNAMESPROGRAMMESSAGE_ATTRIBUTE_VALUES       PropertyNamesProgramMessage = "attributeValues"
	PROPERTYNAMESPROGRAMMESSAGE_CODE                   PropertyNamesProgramMessage = "code"
	PROPERTYNAMESPROGRAMMESSAGE_CREATED                PropertyNamesProgramMessage = "created"
	PROPERTYNAMESPROGRAMMESSAGE_CREATED_BY             PropertyNamesProgramMessage = "createdBy"
	PROPERTYNAMESPROGRAMMESSAGE_DELIVERY_CHANNELS      PropertyNamesProgramMessage = "deliveryChannels"
	PROPERTYNAMESPROGRAMMESSAGE_DISPLAY_NAME           PropertyNamesProgramMessage = "displayName"
	PROPERTYNAMESPROGRAMMESSAGE_EXTERNAL_ACCESS        PropertyNamesProgramMessage = "externalAccess"
	PROPERTYNAMESPROGRAMMESSAGE_FAVORITE               PropertyNamesProgramMessage = "favorite"
	PROPERTYNAMESPROGRAMMESSAGE_FAVORITES              PropertyNamesProgramMessage = "favorites"
	PROPERTYNAMESPROGRAMMESSAGE_HREF                   PropertyNamesProgramMessage = "href"
	PROPERTYNAMESPROGRAMMESSAGE_ID                     PropertyNamesProgramMessage = "id"
	PROPERTYNAMESPROGRAMMESSAGE_LAST_UPDATED           PropertyNamesProgramMessage = "lastUpdated"
	PROPERTYNAMESPROGRAMMESSAGE_LAST_UPDATED_BY        PropertyNamesProgramMessage = "lastUpdatedBy"
	PROPERTYNAMESPROGRAMMESSAGE_MESSAGE_STATUS         PropertyNamesProgramMessage = "messageStatus"
	PROPERTYNAMESPROGRAMMESSAGE_NAME                   PropertyNamesProgramMessage = "name"
	PROPERTYNAMESPROGRAMMESSAGE_NOTIFICATION_TEMPLATE  PropertyNamesProgramMessage = "notificationTemplate"
	PROPERTYNAMESPROGRAMMESSAGE_PROCESSED_DATE         PropertyNamesProgramMessage = "processedDate"
	PROPERTYNAMESPROGRAMMESSAGE_PROGRAM_INSTANCE       PropertyNamesProgramMessage = "programInstance"
	PROPERTYNAMESPROGRAMMESSAGE_PROGRAM_STAGE_INSTANCE PropertyNamesProgramMessage = "programStageInstance"
	PROPERTYNAMESPROGRAMMESSAGE_PUBLIC_ACCESS          PropertyNamesProgramMessage = "publicAccess"
	PROPERTYNAMESPROGRAMMESSAGE_RECIPIENTS             PropertyNamesProgramMessage = "recipients"
	PROPERTYNAMESPROGRAMMESSAGE_SHARING                PropertyNamesProgramMessage = "sharing"
	PROPERTYNAMESPROGRAMMESSAGE_STORE_COPY             PropertyNamesProgramMessage = "storeCopy"
	PROPERTYNAMESPROGRAMMESSAGE_SUBJECT                PropertyNamesProgramMessage = "subject"
	PROPERTYNAMESPROGRAMMESSAGE_TEXT                   PropertyNamesProgramMessage = "text"
	PROPERTYNAMESPROGRAMMESSAGE_TRANSLATIONS           PropertyNamesProgramMessage = "translations"
	PROPERTYNAMESPROGRAMMESSAGE_USER                   PropertyNamesProgramMessage = "user"
	PROPERTYNAMESPROGRAMMESSAGE_USER_ACCESSES          PropertyNamesProgramMessage = "userAccesses"
	PROPERTYNAMESPROGRAMMESSAGE_USER_GROUP_ACCESSES    PropertyNamesProgramMessage = "userGroupAccesses"
)

// All allowed values of PropertyNamesProgramMessage enum
var AllowedPropertyNamesProgramMessageEnumValues = []PropertyNamesProgramMessage{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"deliveryChannels",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"messageStatus",
	"name",
	"notificationTemplate",
	"processedDate",
	"programInstance",
	"programStageInstance",
	"publicAccess",
	"recipients",
	"sharing",
	"storeCopy",
	"subject",
	"text",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesProgramMessage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesProgramMessage(value)
	for _, existing := range AllowedPropertyNamesProgramMessageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesProgramMessage", value)
}

// NewPropertyNamesProgramMessageFromValue returns a pointer to a valid PropertyNamesProgramMessage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesProgramMessageFromValue(v string) (*PropertyNamesProgramMessage, error) {
	ev := PropertyNamesProgramMessage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesProgramMessage: valid values are %v", v, AllowedPropertyNamesProgramMessageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesProgramMessage) IsValid() bool {
	for _, existing := range AllowedPropertyNamesProgramMessageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_ProgramMessage value
func (v PropertyNamesProgramMessage) Ptr() *PropertyNamesProgramMessage {
	return &v
}

type NullablePropertyNamesProgramMessage struct {
	value *PropertyNamesProgramMessage
	isSet bool
}

func (v NullablePropertyNamesProgramMessage) Get() *PropertyNamesProgramMessage {
	return v.value
}

func (v *NullablePropertyNamesProgramMessage) Set(val *PropertyNamesProgramMessage) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesProgramMessage) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesProgramMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesProgramMessage(val *PropertyNamesProgramMessage) *NullablePropertyNamesProgramMessage {
	return &NullablePropertyNamesProgramMessage{value: val, isSet: true}
}

func (v NullablePropertyNamesProgramMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesProgramMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
