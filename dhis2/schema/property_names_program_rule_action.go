/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesProgramRuleAction the model 'PropertyNamesProgramRuleAction'
type PropertyNamesProgramRuleAction string

// List of PropertyNames_ProgramRuleAction
const (
	PROPERTYNAMESPROGRAMRULEACTION_ACCESS                                      PropertyNamesProgramRuleAction = "access"
	PROPERTYNAMESPROGRAMRULEACTION_ATTRIBUTE_VALUES                            PropertyNamesProgramRuleAction = "attributeValues"
	PROPERTYNAMESPROGRAMRULEACTION_CODE                                        PropertyNamesProgramRuleAction = "code"
	PROPERTYNAMESPROGRAMRULEACTION_CONTENT                                     PropertyNamesProgramRuleAction = "content"
	PROPERTYNAMESPROGRAMRULEACTION_CREATED                                     PropertyNamesProgramRuleAction = "created"
	PROPERTYNAMESPROGRAMRULEACTION_CREATED_BY                                  PropertyNamesProgramRuleAction = "createdBy"
	PROPERTYNAMESPROGRAMRULEACTION_DATA                                        PropertyNamesProgramRuleAction = "data"
	PROPERTYNAMESPROGRAMRULEACTION_DATA_ELEMENT                                PropertyNamesProgramRuleAction = "dataElement"
	PROPERTYNAMESPROGRAMRULEACTION_DISPLAY_CONTENT                             PropertyNamesProgramRuleAction = "displayContent"
	PROPERTYNAMESPROGRAMRULEACTION_DISPLAY_NAME                                PropertyNamesProgramRuleAction = "displayName"
	PROPERTYNAMESPROGRAMRULEACTION_EXTERNAL_ACCESS                             PropertyNamesProgramRuleAction = "externalAccess"
	PROPERTYNAMESPROGRAMRULEACTION_FAVORITE                                    PropertyNamesProgramRuleAction = "favorite"
	PROPERTYNAMESPROGRAMRULEACTION_FAVORITES                                   PropertyNamesProgramRuleAction = "favorites"
	PROPERTYNAMESPROGRAMRULEACTION_HREF                                        PropertyNamesProgramRuleAction = "href"
	PROPERTYNAMESPROGRAMRULEACTION_ID                                          PropertyNamesProgramRuleAction = "id"
	PROPERTYNAMESPROGRAMRULEACTION_LAST_UPDATED                                PropertyNamesProgramRuleAction = "lastUpdated"
	PROPERTYNAMESPROGRAMRULEACTION_LAST_UPDATED_BY                             PropertyNamesProgramRuleAction = "lastUpdatedBy"
	PROPERTYNAMESPROGRAMRULEACTION_LOCATION                                    PropertyNamesProgramRuleAction = "location"
	PROPERTYNAMESPROGRAMRULEACTION_NAME                                        PropertyNamesProgramRuleAction = "name"
	PROPERTYNAMESPROGRAMRULEACTION_OPTION                                      PropertyNamesProgramRuleAction = "option"
	PROPERTYNAMESPROGRAMRULEACTION_OPTION_GROUP                                PropertyNamesProgramRuleAction = "optionGroup"
	PROPERTYNAMESPROGRAMRULEACTION_PROGRAM_INDICATOR                           PropertyNamesProgramRuleAction = "programIndicator"
	PROPERTYNAMESPROGRAMRULEACTION_PROGRAM_RULE                                PropertyNamesProgramRuleAction = "programRule"
	PROPERTYNAMESPROGRAMRULEACTION_PROGRAM_RULE_ACTION_EVALUATION_ENVIRONMENTS PropertyNamesProgramRuleAction = "programRuleActionEvaluationEnvironments"
	PROPERTYNAMESPROGRAMRULEACTION_PROGRAM_RULE_ACTION_EVALUATION_TIME         PropertyNamesProgramRuleAction = "programRuleActionEvaluationTime"
	PROPERTYNAMESPROGRAMRULEACTION_PROGRAM_RULE_ACTION_TYPE                    PropertyNamesProgramRuleAction = "programRuleActionType"
	PROPERTYNAMESPROGRAMRULEACTION_PROGRAM_STAGE                               PropertyNamesProgramRuleAction = "programStage"
	PROPERTYNAMESPROGRAMRULEACTION_PROGRAM_STAGE_SECTION                       PropertyNamesProgramRuleAction = "programStageSection"
	PROPERTYNAMESPROGRAMRULEACTION_PUBLIC_ACCESS                               PropertyNamesProgramRuleAction = "publicAccess"
	PROPERTYNAMESPROGRAMRULEACTION_SHARING                                     PropertyNamesProgramRuleAction = "sharing"
	PROPERTYNAMESPROGRAMRULEACTION_TEMPLATE_UID                                PropertyNamesProgramRuleAction = "templateUid"
	PROPERTYNAMESPROGRAMRULEACTION_TRACKED_ENTITY_ATTRIBUTE                    PropertyNamesProgramRuleAction = "trackedEntityAttribute"
	PROPERTYNAMESPROGRAMRULEACTION_TRANSLATIONS                                PropertyNamesProgramRuleAction = "translations"
	PROPERTYNAMESPROGRAMRULEACTION_USER                                        PropertyNamesProgramRuleAction = "user"
	PROPERTYNAMESPROGRAMRULEACTION_USER_ACCESSES                               PropertyNamesProgramRuleAction = "userAccesses"
	PROPERTYNAMESPROGRAMRULEACTION_USER_GROUP_ACCESSES                         PropertyNamesProgramRuleAction = "userGroupAccesses"
)

// All allowed values of PropertyNamesProgramRuleAction enum
var AllowedPropertyNamesProgramRuleActionEnumValues = []PropertyNamesProgramRuleAction{
	"access",
	"attributeValues",
	"code",
	"content",
	"created",
	"createdBy",
	"data",
	"dataElement",
	"displayContent",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"location",
	"name",
	"option",
	"optionGroup",
	"programIndicator",
	"programRule",
	"programRuleActionEvaluationEnvironments",
	"programRuleActionEvaluationTime",
	"programRuleActionType",
	"programStage",
	"programStageSection",
	"publicAccess",
	"sharing",
	"templateUid",
	"trackedEntityAttribute",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesProgramRuleAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesProgramRuleAction(value)
	for _, existing := range AllowedPropertyNamesProgramRuleActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesProgramRuleAction", value)
}

// NewPropertyNamesProgramRuleActionFromValue returns a pointer to a valid PropertyNamesProgramRuleAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesProgramRuleActionFromValue(v string) (*PropertyNamesProgramRuleAction, error) {
	ev := PropertyNamesProgramRuleAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesProgramRuleAction: valid values are %v", v, AllowedPropertyNamesProgramRuleActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesProgramRuleAction) IsValid() bool {
	for _, existing := range AllowedPropertyNamesProgramRuleActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_ProgramRuleAction value
func (v PropertyNamesProgramRuleAction) Ptr() *PropertyNamesProgramRuleAction {
	return &v
}

type NullablePropertyNamesProgramRuleAction struct {
	value *PropertyNamesProgramRuleAction
	isSet bool
}

func (v NullablePropertyNamesProgramRuleAction) Get() *PropertyNamesProgramRuleAction {
	return v.value
}

func (v *NullablePropertyNamesProgramRuleAction) Set(val *PropertyNamesProgramRuleAction) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesProgramRuleAction) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesProgramRuleAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesProgramRuleAction(val *PropertyNamesProgramRuleAction) *NullablePropertyNamesProgramRuleAction {
	return &NullablePropertyNamesProgramRuleAction{value: val, isSet: true}
}

func (v NullablePropertyNamesProgramRuleAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesProgramRuleAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
