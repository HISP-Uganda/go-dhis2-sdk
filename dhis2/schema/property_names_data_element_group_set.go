/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesDataElementGroupSet the model 'PropertyNamesDataElementGroupSet'
type PropertyNamesDataElementGroupSet string

// List of PropertyNames_DataElementGroupSet
const (
	PROPERTYNAMESDATAELEMENTGROUPSET_ACCESS                  PropertyNamesDataElementGroupSet = "access"
	PROPERTYNAMESDATAELEMENTGROUPSET_AGGREGATION_TYPE        PropertyNamesDataElementGroupSet = "aggregationType"
	PROPERTYNAMESDATAELEMENTGROUPSET_ALL_ITEMS               PropertyNamesDataElementGroupSet = "allItems"
	PROPERTYNAMESDATAELEMENTGROUPSET_ATTRIBUTE_VALUES        PropertyNamesDataElementGroupSet = "attributeValues"
	PROPERTYNAMESDATAELEMENTGROUPSET_CODE                    PropertyNamesDataElementGroupSet = "code"
	PROPERTYNAMESDATAELEMENTGROUPSET_COMPULSORY              PropertyNamesDataElementGroupSet = "compulsory"
	PROPERTYNAMESDATAELEMENTGROUPSET_CREATED                 PropertyNamesDataElementGroupSet = "created"
	PROPERTYNAMESDATAELEMENTGROUPSET_CREATED_BY              PropertyNamesDataElementGroupSet = "createdBy"
	PROPERTYNAMESDATAELEMENTGROUPSET_DATA_DIMENSION          PropertyNamesDataElementGroupSet = "dataDimension"
	PROPERTYNAMESDATAELEMENTGROUPSET_DATA_DIMENSION_TYPE     PropertyNamesDataElementGroupSet = "dataDimensionType"
	PROPERTYNAMESDATAELEMENTGROUPSET_DATA_ELEMENT_GROUPS     PropertyNamesDataElementGroupSet = "dataElementGroups"
	PROPERTYNAMESDATAELEMENTGROUPSET_DESCRIPTION             PropertyNamesDataElementGroupSet = "description"
	PROPERTYNAMESDATAELEMENTGROUPSET_DIMENSION               PropertyNamesDataElementGroupSet = "dimension"
	PROPERTYNAMESDATAELEMENTGROUPSET_DIMENSION_ITEM_KEYWORDS PropertyNamesDataElementGroupSet = "dimensionItemKeywords"
	PROPERTYNAMESDATAELEMENTGROUPSET_DISPLAY_DESCRIPTION     PropertyNamesDataElementGroupSet = "displayDescription"
	PROPERTYNAMESDATAELEMENTGROUPSET_DISPLAY_FORM_NAME       PropertyNamesDataElementGroupSet = "displayFormName"
	PROPERTYNAMESDATAELEMENTGROUPSET_DISPLAY_NAME            PropertyNamesDataElementGroupSet = "displayName"
	PROPERTYNAMESDATAELEMENTGROUPSET_DISPLAY_SHORT_NAME      PropertyNamesDataElementGroupSet = "displayShortName"
	PROPERTYNAMESDATAELEMENTGROUPSET_EXTERNAL_ACCESS         PropertyNamesDataElementGroupSet = "externalAccess"
	PROPERTYNAMESDATAELEMENTGROUPSET_FAVORITE                PropertyNamesDataElementGroupSet = "favorite"
	PROPERTYNAMESDATAELEMENTGROUPSET_FAVORITES               PropertyNamesDataElementGroupSet = "favorites"
	PROPERTYNAMESDATAELEMENTGROUPSET_FILTER                  PropertyNamesDataElementGroupSet = "filter"
	PROPERTYNAMESDATAELEMENTGROUPSET_FORM_NAME               PropertyNamesDataElementGroupSet = "formName"
	PROPERTYNAMESDATAELEMENTGROUPSET_HREF                    PropertyNamesDataElementGroupSet = "href"
	PROPERTYNAMESDATAELEMENTGROUPSET_ID                      PropertyNamesDataElementGroupSet = "id"
	PROPERTYNAMESDATAELEMENTGROUPSET_ITEMS                   PropertyNamesDataElementGroupSet = "items"
	PROPERTYNAMESDATAELEMENTGROUPSET_LAST_UPDATED            PropertyNamesDataElementGroupSet = "lastUpdated"
	PROPERTYNAMESDATAELEMENTGROUPSET_LAST_UPDATED_BY         PropertyNamesDataElementGroupSet = "lastUpdatedBy"
	PROPERTYNAMESDATAELEMENTGROUPSET_LEGEND_SET              PropertyNamesDataElementGroupSet = "legendSet"
	PROPERTYNAMESDATAELEMENTGROUPSET_NAME                    PropertyNamesDataElementGroupSet = "name"
	PROPERTYNAMESDATAELEMENTGROUPSET_OPTION_SET              PropertyNamesDataElementGroupSet = "optionSet"
	PROPERTYNAMESDATAELEMENTGROUPSET_PROGRAM_STAGE           PropertyNamesDataElementGroupSet = "programStage"
	PROPERTYNAMESDATAELEMENTGROUPSET_PUBLIC_ACCESS           PropertyNamesDataElementGroupSet = "publicAccess"
	PROPERTYNAMESDATAELEMENTGROUPSET_REPETITION              PropertyNamesDataElementGroupSet = "repetition"
	PROPERTYNAMESDATAELEMENTGROUPSET_SHARING                 PropertyNamesDataElementGroupSet = "sharing"
	PROPERTYNAMESDATAELEMENTGROUPSET_SHORT_NAME              PropertyNamesDataElementGroupSet = "shortName"
	PROPERTYNAMESDATAELEMENTGROUPSET_TRANSLATIONS            PropertyNamesDataElementGroupSet = "translations"
	PROPERTYNAMESDATAELEMENTGROUPSET_USER                    PropertyNamesDataElementGroupSet = "user"
	PROPERTYNAMESDATAELEMENTGROUPSET_USER_ACCESSES           PropertyNamesDataElementGroupSet = "userAccesses"
	PROPERTYNAMESDATAELEMENTGROUPSET_USER_GROUP_ACCESSES     PropertyNamesDataElementGroupSet = "userGroupAccesses"
	PROPERTYNAMESDATAELEMENTGROUPSET_VALUE_TYPE              PropertyNamesDataElementGroupSet = "valueType"
)

// All allowed values of PropertyNamesDataElementGroupSet enum
var AllowedPropertyNamesDataElementGroupSetEnumValues = []PropertyNamesDataElementGroupSet{
	"access",
	"aggregationType",
	"allItems",
	"attributeValues",
	"code",
	"compulsory",
	"created",
	"createdBy",
	"dataDimension",
	"dataDimensionType",
	"dataElementGroups",
	"description",
	"dimension",
	"dimensionItemKeywords",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"externalAccess",
	"favorite",
	"favorites",
	"filter",
	"formName",
	"href",
	"id",
	"items",
	"lastUpdated",
	"lastUpdatedBy",
	"legendSet",
	"name",
	"optionSet",
	"programStage",
	"publicAccess",
	"repetition",
	"sharing",
	"shortName",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"valueType",
}

func (v *PropertyNamesDataElementGroupSet) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesDataElementGroupSet(value)
	for _, existing := range AllowedPropertyNamesDataElementGroupSetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesDataElementGroupSet", value)
}

// NewPropertyNamesDataElementGroupSetFromValue returns a pointer to a valid PropertyNamesDataElementGroupSet
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesDataElementGroupSetFromValue(v string) (*PropertyNamesDataElementGroupSet, error) {
	ev := PropertyNamesDataElementGroupSet(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesDataElementGroupSet: valid values are %v", v, AllowedPropertyNamesDataElementGroupSetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesDataElementGroupSet) IsValid() bool {
	for _, existing := range AllowedPropertyNamesDataElementGroupSetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_DataElementGroupSet value
func (v PropertyNamesDataElementGroupSet) Ptr() *PropertyNamesDataElementGroupSet {
	return &v
}

type NullablePropertyNamesDataElementGroupSet struct {
	value *PropertyNamesDataElementGroupSet
	isSet bool
}

func (v NullablePropertyNamesDataElementGroupSet) Get() *PropertyNamesDataElementGroupSet {
	return v.value
}

func (v *NullablePropertyNamesDataElementGroupSet) Set(val *PropertyNamesDataElementGroupSet) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesDataElementGroupSet) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesDataElementGroupSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesDataElementGroupSet(val *PropertyNamesDataElementGroupSet) *NullablePropertyNamesDataElementGroupSet {
	return &NullablePropertyNamesDataElementGroupSet{value: val, isSet: true}
}

func (v NullablePropertyNamesDataElementGroupSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesDataElementGroupSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
