/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// UserGroupPropertyNames the model 'UserGroupPropertyNames'
type UserGroupPropertyNames string

// List of UserGroupPropertyNames
const (
	USERGROUPPROPERTYNAMES_ACCESS            UserGroupPropertyNames = "access"
	USERGROUPPROPERTYNAMES_ATTRIBUTE_VALUES  UserGroupPropertyNames = "attributeValues"
	USERGROUPPROPERTYNAMES_CODE              UserGroupPropertyNames = "code"
	USERGROUPPROPERTYNAMES_CREATED           UserGroupPropertyNames = "created"
	USERGROUPPROPERTYNAMES_CREATED_BY        UserGroupPropertyNames = "createdBy"
	USERGROUPPROPERTYNAMES_DISPLAY_NAME      UserGroupPropertyNames = "displayName"
	USERGROUPPROPERTYNAMES_FAVORITE          UserGroupPropertyNames = "favorite"
	USERGROUPPROPERTYNAMES_FAVORITES         UserGroupPropertyNames = "favorites"
	USERGROUPPROPERTYNAMES_HREF              UserGroupPropertyNames = "href"
	USERGROUPPROPERTYNAMES_ID                UserGroupPropertyNames = "id"
	USERGROUPPROPERTYNAMES_LAST_UPDATED      UserGroupPropertyNames = "lastUpdated"
	USERGROUPPROPERTYNAMES_LAST_UPDATED_BY   UserGroupPropertyNames = "lastUpdatedBy"
	USERGROUPPROPERTYNAMES_MANAGED_BY_GROUPS UserGroupPropertyNames = "managedByGroups"
	USERGROUPPROPERTYNAMES_MANAGED_GROUPS    UserGroupPropertyNames = "managedGroups"
	USERGROUPPROPERTYNAMES_NAME              UserGroupPropertyNames = "name"
	USERGROUPPROPERTYNAMES_SHARING           UserGroupPropertyNames = "sharing"
	USERGROUPPROPERTYNAMES_TRANSLATIONS      UserGroupPropertyNames = "translations"
	USERGROUPPROPERTYNAMES_USERS             UserGroupPropertyNames = "users"
)

// All allowed values of UserGroupPropertyNames enum
var AllowedUserGroupPropertyNamesEnumValues = []UserGroupPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"managedByGroups",
	"managedGroups",
	"name",
	"sharing",
	"translations",
	"users",
}

func (v *UserGroupPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserGroupPropertyNames(value)
	for _, existing := range AllowedUserGroupPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserGroupPropertyNames", value)
}

// NewUserGroupPropertyNamesFromValue returns a pointer to a valid UserGroupPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserGroupPropertyNamesFromValue(v string) (*UserGroupPropertyNames, error) {
	ev := UserGroupPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserGroupPropertyNames: valid values are %v", v, AllowedUserGroupPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserGroupPropertyNames) IsValid() bool {
	for _, existing := range AllowedUserGroupPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserGroupPropertyNames value
func (v UserGroupPropertyNames) Ptr() *UserGroupPropertyNames {
	return &v
}

type NullableUserGroupPropertyNames struct {
	value *UserGroupPropertyNames
	isSet bool
}

func (v NullableUserGroupPropertyNames) Get() *UserGroupPropertyNames {
	return v.value
}

func (v *NullableUserGroupPropertyNames) Set(val *UserGroupPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGroupPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGroupPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGroupPropertyNames(val *UserGroupPropertyNames) *NullableUserGroupPropertyNames {
	return &NullableUserGroupPropertyNames{value: val, isSet: true}
}

func (v NullableUserGroupPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGroupPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
