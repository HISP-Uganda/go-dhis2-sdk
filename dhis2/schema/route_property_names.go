/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// RoutePropertyNames the model 'RoutePropertyNames'
type RoutePropertyNames string

// List of RoutePropertyNames
const (
	ROUTEPROPERTYNAMES_ACCESS                   RoutePropertyNames = "access"
	ROUTEPROPERTYNAMES_ATTRIBUTE_VALUES         RoutePropertyNames = "attributeValues"
	ROUTEPROPERTYNAMES_AUTH                     RoutePropertyNames = "auth"
	ROUTEPROPERTYNAMES_AUTHORITIES              RoutePropertyNames = "authorities"
	ROUTEPROPERTYNAMES_CODE                     RoutePropertyNames = "code"
	ROUTEPROPERTYNAMES_CREATED                  RoutePropertyNames = "created"
	ROUTEPROPERTYNAMES_CREATED_BY               RoutePropertyNames = "createdBy"
	ROUTEPROPERTYNAMES_DESCRIPTION              RoutePropertyNames = "description"
	ROUTEPROPERTYNAMES_DISABLED                 RoutePropertyNames = "disabled"
	ROUTEPROPERTYNAMES_DISPLAY_NAME             RoutePropertyNames = "displayName"
	ROUTEPROPERTYNAMES_FAVORITE                 RoutePropertyNames = "favorite"
	ROUTEPROPERTYNAMES_FAVORITES                RoutePropertyNames = "favorites"
	ROUTEPROPERTYNAMES_HEADERS                  RoutePropertyNames = "headers"
	ROUTEPROPERTYNAMES_HREF                     RoutePropertyNames = "href"
	ROUTEPROPERTYNAMES_ID                       RoutePropertyNames = "id"
	ROUTEPROPERTYNAMES_LAST_UPDATED             RoutePropertyNames = "lastUpdated"
	ROUTEPROPERTYNAMES_LAST_UPDATED_BY          RoutePropertyNames = "lastUpdatedBy"
	ROUTEPROPERTYNAMES_NAME                     RoutePropertyNames = "name"
	ROUTEPROPERTYNAMES_RESPONSE_TIMEOUT_SECONDS RoutePropertyNames = "responseTimeoutSeconds"
	ROUTEPROPERTYNAMES_SHARING                  RoutePropertyNames = "sharing"
	ROUTEPROPERTYNAMES_TRANSLATIONS             RoutePropertyNames = "translations"
	ROUTEPROPERTYNAMES_URL                      RoutePropertyNames = "url"
)

// All allowed values of RoutePropertyNames enum
var AllowedRoutePropertyNamesEnumValues = []RoutePropertyNames{
	"access",
	"attributeValues",
	"auth",
	"authorities",
	"code",
	"created",
	"createdBy",
	"description",
	"disabled",
	"displayName",
	"favorite",
	"favorites",
	"headers",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"responseTimeoutSeconds",
	"sharing",
	"translations",
	"url",
}

func (v *RoutePropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutePropertyNames(value)
	for _, existing := range AllowedRoutePropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutePropertyNames", value)
}

// NewRoutePropertyNamesFromValue returns a pointer to a valid RoutePropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutePropertyNamesFromValue(v string) (*RoutePropertyNames, error) {
	ev := RoutePropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutePropertyNames: valid values are %v", v, AllowedRoutePropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutePropertyNames) IsValid() bool {
	for _, existing := range AllowedRoutePropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutePropertyNames value
func (v RoutePropertyNames) Ptr() *RoutePropertyNames {
	return &v
}

type NullableRoutePropertyNames struct {
	value *RoutePropertyNames
	isSet bool
}

func (v NullableRoutePropertyNames) Get() *RoutePropertyNames {
	return v.value
}

func (v *NullableRoutePropertyNames) Set(val *RoutePropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutePropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutePropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutePropertyNames(val *RoutePropertyNames) *NullableRoutePropertyNames {
	return &NullableRoutePropertyNames{value: val, isSet: true}
}

func (v NullableRoutePropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutePropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
