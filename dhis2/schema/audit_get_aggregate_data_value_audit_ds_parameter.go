/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AuditGetAggregateDataValueAuditDsParameter - struct for AuditGetAggregateDataValueAuditDsParameter
type AuditGetAggregateDataValueAuditDsParameter struct {
	DataSet       *DataSet
	ArrayOfString *[]string
}

// DataSetAsAuditGetAggregateDataValueAuditDsParameter is a convenience function that returns DataSet wrapped in AuditGetAggregateDataValueAuditDsParameter
func DataSetAsAuditGetAggregateDataValueAuditDsParameter(v *DataSet) AuditGetAggregateDataValueAuditDsParameter {
	return AuditGetAggregateDataValueAuditDsParameter{
		DataSet: v,
	}
}

// []stringAsAuditGetAggregateDataValueAuditDsParameter is a convenience function that returns []string wrapped in AuditGetAggregateDataValueAuditDsParameter
func ArrayOfStringAsAuditGetAggregateDataValueAuditDsParameter(v *[]string) AuditGetAggregateDataValueAuditDsParameter {
	return AuditGetAggregateDataValueAuditDsParameter{
		ArrayOfString: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuditGetAggregateDataValueAuditDsParameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DataSet
	err = newStrictDecoder(data).Decode(&dst.DataSet)
	if err == nil {
		jsonDataSet, _ := json.Marshal(dst.DataSet)
		if string(jsonDataSet) == "{}" { // empty struct
			dst.DataSet = nil
		} else {
			match++
		}
	} else {
		dst.DataSet = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DataSet = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AuditGetAggregateDataValueAuditDsParameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AuditGetAggregateDataValueAuditDsParameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuditGetAggregateDataValueAuditDsParameter) MarshalJSON() ([]byte, error) {
	if src.DataSet != nil {
		return json.Marshal(&src.DataSet)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuditGetAggregateDataValueAuditDsParameter) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DataSet != nil {
		return obj.DataSet
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableAuditGetAggregateDataValueAuditDsParameter struct {
	value *AuditGetAggregateDataValueAuditDsParameter
	isSet bool
}

func (v NullableAuditGetAggregateDataValueAuditDsParameter) Get() *AuditGetAggregateDataValueAuditDsParameter {
	return v.value
}

func (v *NullableAuditGetAggregateDataValueAuditDsParameter) Set(val *AuditGetAggregateDataValueAuditDsParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditGetAggregateDataValueAuditDsParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditGetAggregateDataValueAuditDsParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditGetAggregateDataValueAuditDsParameter(val *AuditGetAggregateDataValueAuditDsParameter) *NullableAuditGetAggregateDataValueAuditDsParameter {
	return &NullableAuditGetAggregateDataValueAuditDsParameter{value: val, isSet: true}
}

func (v NullableAuditGetAggregateDataValueAuditDsParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditGetAggregateDataValueAuditDsParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
