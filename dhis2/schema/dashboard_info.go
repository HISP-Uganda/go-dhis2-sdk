/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DashboardInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardInfo{}

// DashboardInfo struct for DashboardInfo
type DashboardInfo struct {
	UnreadInterpretations      int64 `json:"unreadInterpretations"`
	UnreadMessageConversations int64 `json:"unreadMessageConversations"`
}

type _DashboardInfo DashboardInfo

// NewDashboardInfo instantiates a new DashboardInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardInfo(unreadInterpretations int64, unreadMessageConversations int64) *DashboardInfo {
	this := DashboardInfo{}
	this.UnreadInterpretations = unreadInterpretations
	this.UnreadMessageConversations = unreadMessageConversations
	return &this
}

// NewDashboardInfoWithDefaults instantiates a new DashboardInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardInfoWithDefaults() *DashboardInfo {
	this := DashboardInfo{}
	return &this
}

// GetUnreadInterpretations returns the UnreadInterpretations field value
func (o *DashboardInfo) GetUnreadInterpretations() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UnreadInterpretations
}

// GetUnreadInterpretationsOk returns a tuple with the UnreadInterpretations field value
// and a boolean to check if the value has been set.
func (o *DashboardInfo) GetUnreadInterpretationsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnreadInterpretations, true
}

// SetUnreadInterpretations sets field value
func (o *DashboardInfo) SetUnreadInterpretations(v int64) {
	o.UnreadInterpretations = v
}

// GetUnreadMessageConversations returns the UnreadMessageConversations field value
func (o *DashboardInfo) GetUnreadMessageConversations() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UnreadMessageConversations
}

// GetUnreadMessageConversationsOk returns a tuple with the UnreadMessageConversations field value
// and a boolean to check if the value has been set.
func (o *DashboardInfo) GetUnreadMessageConversationsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnreadMessageConversations, true
}

// SetUnreadMessageConversations sets field value
func (o *DashboardInfo) SetUnreadMessageConversations(v int64) {
	o.UnreadMessageConversations = v
}

func (o DashboardInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["unreadInterpretations"] = o.UnreadInterpretations
	toSerialize["unreadMessageConversations"] = o.UnreadMessageConversations
	return toSerialize, nil
}

func (o *DashboardInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unreadInterpretations",
		"unreadMessageConversations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDashboardInfo := _DashboardInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDashboardInfo)

	if err != nil {
		return err
	}

	*o = DashboardInfo(varDashboardInfo)

	return err
}

type NullableDashboardInfo struct {
	value *DashboardInfo
	isSet bool
}

func (v NullableDashboardInfo) Get() *DashboardInfo {
	return v.value
}

func (v *NullableDashboardInfo) Set(val *DashboardInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardInfo(val *DashboardInfo) *NullableDashboardInfo {
	return &NullableDashboardInfo{value: val, isSet: true}
}

func (v NullableDashboardInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
