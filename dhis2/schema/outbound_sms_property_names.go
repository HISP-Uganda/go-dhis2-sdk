/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// OutboundSmsPropertyNames the model 'OutboundSmsPropertyNames'
type OutboundSmsPropertyNames string

// List of OutboundSmsPropertyNames
const (
	OUTBOUNDSMSPROPERTYNAMES_ACCESS           OutboundSmsPropertyNames = "access"
	OUTBOUNDSMSPROPERTYNAMES_ATTRIBUTE_VALUES OutboundSmsPropertyNames = "attributeValues"
	OUTBOUNDSMSPROPERTYNAMES_CODE             OutboundSmsPropertyNames = "code"
	OUTBOUNDSMSPROPERTYNAMES_CREATED          OutboundSmsPropertyNames = "created"
	OUTBOUNDSMSPROPERTYNAMES_CREATED_BY       OutboundSmsPropertyNames = "createdBy"
	OUTBOUNDSMSPROPERTYNAMES_DATE             OutboundSmsPropertyNames = "date"
	OUTBOUNDSMSPROPERTYNAMES_DISPLAY_NAME     OutboundSmsPropertyNames = "displayName"
	OUTBOUNDSMSPROPERTYNAMES_FAVORITE         OutboundSmsPropertyNames = "favorite"
	OUTBOUNDSMSPROPERTYNAMES_FAVORITES        OutboundSmsPropertyNames = "favorites"
	OUTBOUNDSMSPROPERTYNAMES_HREF             OutboundSmsPropertyNames = "href"
	OUTBOUNDSMSPROPERTYNAMES_ID               OutboundSmsPropertyNames = "id"
	OUTBOUNDSMSPROPERTYNAMES_LAST_UPDATED     OutboundSmsPropertyNames = "lastUpdated"
	OUTBOUNDSMSPROPERTYNAMES_LAST_UPDATED_BY  OutboundSmsPropertyNames = "lastUpdatedBy"
	OUTBOUNDSMSPROPERTYNAMES_MESSAGE          OutboundSmsPropertyNames = "message"
	OUTBOUNDSMSPROPERTYNAMES_NAME             OutboundSmsPropertyNames = "name"
	OUTBOUNDSMSPROPERTYNAMES_RECIPIENTS       OutboundSmsPropertyNames = "recipients"
	OUTBOUNDSMSPROPERTYNAMES_SENDER           OutboundSmsPropertyNames = "sender"
	OUTBOUNDSMSPROPERTYNAMES_SHARING          OutboundSmsPropertyNames = "sharing"
	OUTBOUNDSMSPROPERTYNAMES_STATUS           OutboundSmsPropertyNames = "status"
	OUTBOUNDSMSPROPERTYNAMES_SUBJECT          OutboundSmsPropertyNames = "subject"
	OUTBOUNDSMSPROPERTYNAMES_TRANSLATIONS     OutboundSmsPropertyNames = "translations"
)

// All allowed values of OutboundSmsPropertyNames enum
var AllowedOutboundSmsPropertyNamesEnumValues = []OutboundSmsPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"date",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"message",
	"name",
	"recipients",
	"sender",
	"sharing",
	"status",
	"subject",
	"translations",
}

func (v *OutboundSmsPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OutboundSmsPropertyNames(value)
	for _, existing := range AllowedOutboundSmsPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OutboundSmsPropertyNames", value)
}

// NewOutboundSmsPropertyNamesFromValue returns a pointer to a valid OutboundSmsPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOutboundSmsPropertyNamesFromValue(v string) (*OutboundSmsPropertyNames, error) {
	ev := OutboundSmsPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OutboundSmsPropertyNames: valid values are %v", v, AllowedOutboundSmsPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OutboundSmsPropertyNames) IsValid() bool {
	for _, existing := range AllowedOutboundSmsPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OutboundSmsPropertyNames value
func (v OutboundSmsPropertyNames) Ptr() *OutboundSmsPropertyNames {
	return &v
}

type NullableOutboundSmsPropertyNames struct {
	value *OutboundSmsPropertyNames
	isSet bool
}

func (v NullableOutboundSmsPropertyNames) Get() *OutboundSmsPropertyNames {
	return v.value
}

func (v *NullableOutboundSmsPropertyNames) Set(val *OutboundSmsPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboundSmsPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboundSmsPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboundSmsPropertyNames(val *OutboundSmsPropertyNames) *NullableOutboundSmsPropertyNames {
	return &NullableOutboundSmsPropertyNames{value: val, isSet: true}
}

func (v NullableOutboundSmsPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboundSmsPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
