/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// EventHookTargetsInner - struct for EventHookTargetsInner
type EventHookTargetsInner struct {
	ConsoleTarget *ConsoleTarget
	JmsTarget     *JmsTarget
	KafkaTarget   *KafkaTarget
	WebhookTarget *WebhookTarget
}

// ConsoleTargetAsEventHookTargetsInner is a convenience function that returns ConsoleTarget wrapped in EventHookTargetsInner
func ConsoleTargetAsEventHookTargetsInner(v *ConsoleTarget) EventHookTargetsInner {
	return EventHookTargetsInner{
		ConsoleTarget: v,
	}
}

// JmsTargetAsEventHookTargetsInner is a convenience function that returns JmsTarget wrapped in EventHookTargetsInner
func JmsTargetAsEventHookTargetsInner(v *JmsTarget) EventHookTargetsInner {
	return EventHookTargetsInner{
		JmsTarget: v,
	}
}

// KafkaTargetAsEventHookTargetsInner is a convenience function that returns KafkaTarget wrapped in EventHookTargetsInner
func KafkaTargetAsEventHookTargetsInner(v *KafkaTarget) EventHookTargetsInner {
	return EventHookTargetsInner{
		KafkaTarget: v,
	}
}

// WebhookTargetAsEventHookTargetsInner is a convenience function that returns WebhookTarget wrapped in EventHookTargetsInner
func WebhookTargetAsEventHookTargetsInner(v *WebhookTarget) EventHookTargetsInner {
	return EventHookTargetsInner{
		WebhookTarget: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EventHookTargetsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ConsoleTarget
	err = newStrictDecoder(data).Decode(&dst.ConsoleTarget)
	if err == nil {
		jsonConsoleTarget, _ := json.Marshal(dst.ConsoleTarget)
		if string(jsonConsoleTarget) == "{}" { // empty struct
			dst.ConsoleTarget = nil
		} else {
			match++
		}
	} else {
		dst.ConsoleTarget = nil
	}

	// try to unmarshal data into JmsTarget
	err = newStrictDecoder(data).Decode(&dst.JmsTarget)
	if err == nil {
		jsonJmsTarget, _ := json.Marshal(dst.JmsTarget)
		if string(jsonJmsTarget) == "{}" { // empty struct
			dst.JmsTarget = nil
		} else {
			match++
		}
	} else {
		dst.JmsTarget = nil
	}

	// try to unmarshal data into KafkaTarget
	err = newStrictDecoder(data).Decode(&dst.KafkaTarget)
	if err == nil {
		jsonKafkaTarget, _ := json.Marshal(dst.KafkaTarget)
		if string(jsonKafkaTarget) == "{}" { // empty struct
			dst.KafkaTarget = nil
		} else {
			match++
		}
	} else {
		dst.KafkaTarget = nil
	}

	// try to unmarshal data into WebhookTarget
	err = newStrictDecoder(data).Decode(&dst.WebhookTarget)
	if err == nil {
		jsonWebhookTarget, _ := json.Marshal(dst.WebhookTarget)
		if string(jsonWebhookTarget) == "{}" { // empty struct
			dst.WebhookTarget = nil
		} else {
			match++
		}
	} else {
		dst.WebhookTarget = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ConsoleTarget = nil
		dst.JmsTarget = nil
		dst.KafkaTarget = nil
		dst.WebhookTarget = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EventHookTargetsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EventHookTargetsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EventHookTargetsInner) MarshalJSON() ([]byte, error) {
	if src.ConsoleTarget != nil {
		return json.Marshal(&src.ConsoleTarget)
	}

	if src.JmsTarget != nil {
		return json.Marshal(&src.JmsTarget)
	}

	if src.KafkaTarget != nil {
		return json.Marshal(&src.KafkaTarget)
	}

	if src.WebhookTarget != nil {
		return json.Marshal(&src.WebhookTarget)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EventHookTargetsInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ConsoleTarget != nil {
		return obj.ConsoleTarget
	}

	if obj.JmsTarget != nil {
		return obj.JmsTarget
	}

	if obj.KafkaTarget != nil {
		return obj.KafkaTarget
	}

	if obj.WebhookTarget != nil {
		return obj.WebhookTarget
	}

	// all schemas are nil
	return nil
}

type NullableEventHookTargetsInner struct {
	value *EventHookTargetsInner
	isSet bool
}

func (v NullableEventHookTargetsInner) Get() *EventHookTargetsInner {
	return v.value
}

func (v *NullableEventHookTargetsInner) Set(val *EventHookTargetsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEventHookTargetsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEventHookTargetsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventHookTargetsInner(val *EventHookTargetsInner) *NullableEventHookTargetsInner {
	return &NullableEventHookTargetsInner{value: val, isSet: true}
}

func (v NullableEventHookTargetsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventHookTargetsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
