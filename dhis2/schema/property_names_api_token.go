/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesApiToken the model 'PropertyNamesApiToken'
type PropertyNamesApiToken string

// List of PropertyNames_ApiToken
const (
	PROPERTYNAMESAPITOKEN_ACCESS              PropertyNamesApiToken = "access"
	PROPERTYNAMESAPITOKEN_ATTRIBUTE_VALUES    PropertyNamesApiToken = "attributeValues"
	PROPERTYNAMESAPITOKEN_ATTRIBUTES          PropertyNamesApiToken = "attributes"
	PROPERTYNAMESAPITOKEN_CODE                PropertyNamesApiToken = "code"
	PROPERTYNAMESAPITOKEN_CREATED             PropertyNamesApiToken = "created"
	PROPERTYNAMESAPITOKEN_CREATED_BY          PropertyNamesApiToken = "createdBy"
	PROPERTYNAMESAPITOKEN_DISPLAY_NAME        PropertyNamesApiToken = "displayName"
	PROPERTYNAMESAPITOKEN_EXPIRE              PropertyNamesApiToken = "expire"
	PROPERTYNAMESAPITOKEN_EXTERNAL_ACCESS     PropertyNamesApiToken = "externalAccess"
	PROPERTYNAMESAPITOKEN_FAVORITE            PropertyNamesApiToken = "favorite"
	PROPERTYNAMESAPITOKEN_FAVORITES           PropertyNamesApiToken = "favorites"
	PROPERTYNAMESAPITOKEN_HREF                PropertyNamesApiToken = "href"
	PROPERTYNAMESAPITOKEN_ID                  PropertyNamesApiToken = "id"
	PROPERTYNAMESAPITOKEN_LAST_UPDATED        PropertyNamesApiToken = "lastUpdated"
	PROPERTYNAMESAPITOKEN_LAST_UPDATED_BY     PropertyNamesApiToken = "lastUpdatedBy"
	PROPERTYNAMESAPITOKEN_NAME                PropertyNamesApiToken = "name"
	PROPERTYNAMESAPITOKEN_PUBLIC_ACCESS       PropertyNamesApiToken = "publicAccess"
	PROPERTYNAMESAPITOKEN_SHARING             PropertyNamesApiToken = "sharing"
	PROPERTYNAMESAPITOKEN_TRANSLATIONS        PropertyNamesApiToken = "translations"
	PROPERTYNAMESAPITOKEN_TYPE                PropertyNamesApiToken = "type"
	PROPERTYNAMESAPITOKEN_USER                PropertyNamesApiToken = "user"
	PROPERTYNAMESAPITOKEN_USER_ACCESSES       PropertyNamesApiToken = "userAccesses"
	PROPERTYNAMESAPITOKEN_USER_GROUP_ACCESSES PropertyNamesApiToken = "userGroupAccesses"
	PROPERTYNAMESAPITOKEN_VERSION             PropertyNamesApiToken = "version"
)

// All allowed values of PropertyNamesApiToken enum
var AllowedPropertyNamesApiTokenEnumValues = []PropertyNamesApiToken{
	"access",
	"attributeValues",
	"attributes",
	"code",
	"created",
	"createdBy",
	"displayName",
	"expire",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"translations",
	"type",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"version",
}

func (v *PropertyNamesApiToken) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesApiToken(value)
	for _, existing := range AllowedPropertyNamesApiTokenEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesApiToken", value)
}

// NewPropertyNamesApiTokenFromValue returns a pointer to a valid PropertyNamesApiToken
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesApiTokenFromValue(v string) (*PropertyNamesApiToken, error) {
	ev := PropertyNamesApiToken(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesApiToken: valid values are %v", v, AllowedPropertyNamesApiTokenEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesApiToken) IsValid() bool {
	for _, existing := range AllowedPropertyNamesApiTokenEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_ApiToken value
func (v PropertyNamesApiToken) Ptr() *PropertyNamesApiToken {
	return &v
}

type NullablePropertyNamesApiToken struct {
	value *PropertyNamesApiToken
	isSet bool
}

func (v NullablePropertyNamesApiToken) Get() *PropertyNamesApiToken {
	return v.value
}

func (v *NullablePropertyNamesApiToken) Set(val *PropertyNamesApiToken) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesApiToken) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesApiToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesApiToken(val *PropertyNamesApiToken) *NullablePropertyNamesApiToken {
	return &NullablePropertyNamesApiToken{value: val, isSet: true}
}

func (v NullablePropertyNamesApiToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesApiToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
