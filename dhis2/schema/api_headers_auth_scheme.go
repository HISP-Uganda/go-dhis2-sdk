/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ApiHeadersAuthScheme type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiHeadersAuthScheme{}

// ApiHeadersAuthScheme struct for ApiHeadersAuthScheme
type ApiHeadersAuthScheme struct {
	Headers map[string]string `json:"headers"`
}

type _ApiHeadersAuthScheme ApiHeadersAuthScheme

// NewApiHeadersAuthScheme instantiates a new ApiHeadersAuthScheme object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiHeadersAuthScheme(headers map[string]string) *ApiHeadersAuthScheme {
	this := ApiHeadersAuthScheme{}
	this.Headers = headers
	return &this
}

// NewApiHeadersAuthSchemeWithDefaults instantiates a new ApiHeadersAuthScheme object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiHeadersAuthSchemeWithDefaults() *ApiHeadersAuthScheme {
	this := ApiHeadersAuthScheme{}
	return &this
}

// GetHeaders returns the Headers field value
func (o *ApiHeadersAuthScheme) GetHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *ApiHeadersAuthScheme) GetHeadersOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Headers, true
}

// SetHeaders sets field value
func (o *ApiHeadersAuthScheme) SetHeaders(v map[string]string) {
	o.Headers = v
}

func (o ApiHeadersAuthScheme) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiHeadersAuthScheme) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["headers"] = o.Headers
	return toSerialize, nil
}

func (o *ApiHeadersAuthScheme) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"headers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiHeadersAuthScheme := _ApiHeadersAuthScheme{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiHeadersAuthScheme)

	if err != nil {
		return err
	}

	*o = ApiHeadersAuthScheme(varApiHeadersAuthScheme)

	return err
}

type NullableApiHeadersAuthScheme struct {
	value *ApiHeadersAuthScheme
	isSet bool
}

func (v NullableApiHeadersAuthScheme) Get() *ApiHeadersAuthScheme {
	return v.value
}

func (v *NullableApiHeadersAuthScheme) Set(val *ApiHeadersAuthScheme) {
	v.value = val
	v.isSet = true
}

func (v NullableApiHeadersAuthScheme) IsSet() bool {
	return v.isSet
}

func (v *NullableApiHeadersAuthScheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiHeadersAuthScheme(val *ApiHeadersAuthScheme) *NullableApiHeadersAuthScheme {
	return &NullableApiHeadersAuthScheme{value: val, isSet: true}
}

func (v NullableApiHeadersAuthScheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiHeadersAuthScheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
