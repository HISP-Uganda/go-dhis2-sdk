/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ImportStatus the model 'ImportStatus'
type ImportStatus string

// List of ImportStatus
const (
	IMPORTSTATUS_SUCCESS ImportStatus = "SUCCESS"
	IMPORTSTATUS_WARNING ImportStatus = "WARNING"
	IMPORTSTATUS_ERROR   ImportStatus = "ERROR"
)

// All allowed values of ImportStatus enum
var AllowedImportStatusEnumValues = []ImportStatus{
	"SUCCESS",
	"WARNING",
	"ERROR",
}

func (v *ImportStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImportStatus(value)
	for _, existing := range AllowedImportStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImportStatus", value)
}

// NewImportStatusFromValue returns a pointer to a valid ImportStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImportStatusFromValue(v string) (*ImportStatus, error) {
	ev := ImportStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImportStatus: valid values are %v", v, AllowedImportStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImportStatus) IsValid() bool {
	for _, existing := range AllowedImportStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImportStatus value
func (v ImportStatus) Ptr() *ImportStatus {
	return &v
}

type NullableImportStatus struct {
	value *ImportStatus
	isSet bool
}

func (v NullableImportStatus) Get() *ImportStatus {
	return v.value
}

func (v *NullableImportStatus) Set(val *ImportStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableImportStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableImportStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportStatus(val *ImportStatus) *NullableImportStatus {
	return &NullableImportStatus{value: val, isSet: true}
}

func (v NullableImportStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
