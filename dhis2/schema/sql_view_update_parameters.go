/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the SqlViewUpdateParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlViewUpdateParameters{}

// SqlViewUpdateParameters struct for SqlViewUpdateParameters
type SqlViewUpdateParameters struct {
	SqlViews []string `json:"sqlViews,omitempty"`
}

// NewSqlViewUpdateParameters instantiates a new SqlViewUpdateParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlViewUpdateParameters() *SqlViewUpdateParameters {
	this := SqlViewUpdateParameters{}
	return &this
}

// NewSqlViewUpdateParametersWithDefaults instantiates a new SqlViewUpdateParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlViewUpdateParametersWithDefaults() *SqlViewUpdateParameters {
	this := SqlViewUpdateParameters{}
	return &this
}

// GetSqlViews returns the SqlViews field value if set, zero value otherwise.
func (o *SqlViewUpdateParameters) GetSqlViews() []string {
	if o == nil || IsNil(o.SqlViews) {
		var ret []string
		return ret
	}
	return o.SqlViews
}

// GetSqlViewsOk returns a tuple with the SqlViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlViewUpdateParameters) GetSqlViewsOk() ([]string, bool) {
	if o == nil || IsNil(o.SqlViews) {
		return nil, false
	}
	return o.SqlViews, true
}

// HasSqlViews returns a boolean if a field has been set.
func (o *SqlViewUpdateParameters) HasSqlViews() bool {
	if o != nil && !IsNil(o.SqlViews) {
		return true
	}

	return false
}

// SetSqlViews gets a reference to the given []string and assigns it to the SqlViews field.
func (o *SqlViewUpdateParameters) SetSqlViews(v []string) {
	o.SqlViews = v
}

func (o SqlViewUpdateParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlViewUpdateParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SqlViews) {
		toSerialize["sqlViews"] = o.SqlViews
	}
	return toSerialize, nil
}

type NullableSqlViewUpdateParameters struct {
	value *SqlViewUpdateParameters
	isSet bool
}

func (v NullableSqlViewUpdateParameters) Get() *SqlViewUpdateParameters {
	return v.value
}

func (v *NullableSqlViewUpdateParameters) Set(val *SqlViewUpdateParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlViewUpdateParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlViewUpdateParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlViewUpdateParameters(val *SqlViewUpdateParameters) *NullableSqlViewUpdateParameters {
	return &NullableSqlViewUpdateParameters{value: val, isSet: true}
}

func (v NullableSqlViewUpdateParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlViewUpdateParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
