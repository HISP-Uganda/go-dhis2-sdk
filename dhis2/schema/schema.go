/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Schema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schema{}

// Schema struct for Schema
type Schema struct {
	ApiEndpoint              *string     `json:"apiEndpoint,omitempty"`
	Authorities              []Authority `json:"authorities,omitempty"`
	CollectionName           *string     `json:"collectionName,omitempty"`
	DataReadShareable        *bool       `json:"dataReadShareable,omitempty"`
	DataShareable            *bool       `json:"dataShareable,omitempty"`
	DataWriteShareable       *bool       `json:"dataWriteShareable,omitempty"`
	DefaultPrivate           *bool       `json:"defaultPrivate,omitempty"`
	DisplayName              *string     `json:"displayName,omitempty"`
	EmbeddedObject           *bool       `json:"embeddedObject,omitempty"`
	Favoritable              *bool       `json:"favoritable,omitempty"`
	Href                     *string     `json:"href,omitempty"`
	IdentifiableObject       *bool       `json:"identifiableObject,omitempty"`
	ImplicitPrivateAuthority *bool       `json:"implicitPrivateAuthority,omitempty"`
	Klass                    *string     `json:"klass,omitempty"`
	Metadata                 *bool       `json:"metadata,omitempty"`
	Name                     *string     `json:"name,omitempty"`
	NameableObject           *bool       `json:"nameableObject,omitempty"`
	Namespace                *string     `json:"namespace,omitempty"`
	Order                    int32       `json:"order"`
	Persisted                *bool       `json:"persisted,omitempty"`
	Plural                   *string     `json:"plural,omitempty"`
	Properties               []Property  `json:"properties,omitempty"`
	References               []string    `json:"references,omitempty"`
	RelativeApiEndpoint      *string     `json:"relativeApiEndpoint,omitempty"`
	SecondaryMetadata        *bool       `json:"secondaryMetadata,omitempty"`
	Shareable                *bool       `json:"shareable,omitempty"`
	Singular                 *string     `json:"singular,omitempty"`
	Subscribable             *bool       `json:"subscribable,omitempty"`
	SubscribableObject       *bool       `json:"subscribableObject,omitempty"`
	Translatable             *bool       `json:"translatable,omitempty"`
}

type _Schema Schema

// NewSchema instantiates a new Schema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchema(order int32) *Schema {
	this := Schema{}
	this.Order = order
	return &this
}

// NewSchemaWithDefaults instantiates a new Schema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaWithDefaults() *Schema {
	this := Schema{}
	return &this
}

// GetApiEndpoint returns the ApiEndpoint field value if set, zero value otherwise.
func (o *Schema) GetApiEndpoint() string {
	if o == nil || IsNil(o.ApiEndpoint) {
		var ret string
		return ret
	}
	return *o.ApiEndpoint
}

// GetApiEndpointOk returns a tuple with the ApiEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetApiEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.ApiEndpoint) {
		return nil, false
	}
	return o.ApiEndpoint, true
}

// HasApiEndpoint returns a boolean if a field has been set.
func (o *Schema) HasApiEndpoint() bool {
	if o != nil && !IsNil(o.ApiEndpoint) {
		return true
	}

	return false
}

// SetApiEndpoint gets a reference to the given string and assigns it to the ApiEndpoint field.
func (o *Schema) SetApiEndpoint(v string) {
	o.ApiEndpoint = &v
}

// GetAuthorities returns the Authorities field value if set, zero value otherwise.
func (o *Schema) GetAuthorities() []Authority {
	if o == nil || IsNil(o.Authorities) {
		var ret []Authority
		return ret
	}
	return o.Authorities
}

// GetAuthoritiesOk returns a tuple with the Authorities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetAuthoritiesOk() ([]Authority, bool) {
	if o == nil || IsNil(o.Authorities) {
		return nil, false
	}
	return o.Authorities, true
}

// HasAuthorities returns a boolean if a field has been set.
func (o *Schema) HasAuthorities() bool {
	if o != nil && !IsNil(o.Authorities) {
		return true
	}

	return false
}

// SetAuthorities gets a reference to the given []Authority and assigns it to the Authorities field.
func (o *Schema) SetAuthorities(v []Authority) {
	o.Authorities = v
}

// GetCollectionName returns the CollectionName field value if set, zero value otherwise.
func (o *Schema) GetCollectionName() string {
	if o == nil || IsNil(o.CollectionName) {
		var ret string
		return ret
	}
	return *o.CollectionName
}

// GetCollectionNameOk returns a tuple with the CollectionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetCollectionNameOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionName) {
		return nil, false
	}
	return o.CollectionName, true
}

// HasCollectionName returns a boolean if a field has been set.
func (o *Schema) HasCollectionName() bool {
	if o != nil && !IsNil(o.CollectionName) {
		return true
	}

	return false
}

// SetCollectionName gets a reference to the given string and assigns it to the CollectionName field.
func (o *Schema) SetCollectionName(v string) {
	o.CollectionName = &v
}

// GetDataReadShareable returns the DataReadShareable field value if set, zero value otherwise.
func (o *Schema) GetDataReadShareable() bool {
	if o == nil || IsNil(o.DataReadShareable) {
		var ret bool
		return ret
	}
	return *o.DataReadShareable
}

// GetDataReadShareableOk returns a tuple with the DataReadShareable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetDataReadShareableOk() (*bool, bool) {
	if o == nil || IsNil(o.DataReadShareable) {
		return nil, false
	}
	return o.DataReadShareable, true
}

// HasDataReadShareable returns a boolean if a field has been set.
func (o *Schema) HasDataReadShareable() bool {
	if o != nil && !IsNil(o.DataReadShareable) {
		return true
	}

	return false
}

// SetDataReadShareable gets a reference to the given bool and assigns it to the DataReadShareable field.
func (o *Schema) SetDataReadShareable(v bool) {
	o.DataReadShareable = &v
}

// GetDataShareable returns the DataShareable field value if set, zero value otherwise.
func (o *Schema) GetDataShareable() bool {
	if o == nil || IsNil(o.DataShareable) {
		var ret bool
		return ret
	}
	return *o.DataShareable
}

// GetDataShareableOk returns a tuple with the DataShareable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetDataShareableOk() (*bool, bool) {
	if o == nil || IsNil(o.DataShareable) {
		return nil, false
	}
	return o.DataShareable, true
}

// HasDataShareable returns a boolean if a field has been set.
func (o *Schema) HasDataShareable() bool {
	if o != nil && !IsNil(o.DataShareable) {
		return true
	}

	return false
}

// SetDataShareable gets a reference to the given bool and assigns it to the DataShareable field.
func (o *Schema) SetDataShareable(v bool) {
	o.DataShareable = &v
}

// GetDataWriteShareable returns the DataWriteShareable field value if set, zero value otherwise.
func (o *Schema) GetDataWriteShareable() bool {
	if o == nil || IsNil(o.DataWriteShareable) {
		var ret bool
		return ret
	}
	return *o.DataWriteShareable
}

// GetDataWriteShareableOk returns a tuple with the DataWriteShareable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetDataWriteShareableOk() (*bool, bool) {
	if o == nil || IsNil(o.DataWriteShareable) {
		return nil, false
	}
	return o.DataWriteShareable, true
}

// HasDataWriteShareable returns a boolean if a field has been set.
func (o *Schema) HasDataWriteShareable() bool {
	if o != nil && !IsNil(o.DataWriteShareable) {
		return true
	}

	return false
}

// SetDataWriteShareable gets a reference to the given bool and assigns it to the DataWriteShareable field.
func (o *Schema) SetDataWriteShareable(v bool) {
	o.DataWriteShareable = &v
}

// GetDefaultPrivate returns the DefaultPrivate field value if set, zero value otherwise.
func (o *Schema) GetDefaultPrivate() bool {
	if o == nil || IsNil(o.DefaultPrivate) {
		var ret bool
		return ret
	}
	return *o.DefaultPrivate
}

// GetDefaultPrivateOk returns a tuple with the DefaultPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetDefaultPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultPrivate) {
		return nil, false
	}
	return o.DefaultPrivate, true
}

// HasDefaultPrivate returns a boolean if a field has been set.
func (o *Schema) HasDefaultPrivate() bool {
	if o != nil && !IsNil(o.DefaultPrivate) {
		return true
	}

	return false
}

// SetDefaultPrivate gets a reference to the given bool and assigns it to the DefaultPrivate field.
func (o *Schema) SetDefaultPrivate(v bool) {
	o.DefaultPrivate = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Schema) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Schema) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Schema) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmbeddedObject returns the EmbeddedObject field value if set, zero value otherwise.
func (o *Schema) GetEmbeddedObject() bool {
	if o == nil || IsNil(o.EmbeddedObject) {
		var ret bool
		return ret
	}
	return *o.EmbeddedObject
}

// GetEmbeddedObjectOk returns a tuple with the EmbeddedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetEmbeddedObjectOk() (*bool, bool) {
	if o == nil || IsNil(o.EmbeddedObject) {
		return nil, false
	}
	return o.EmbeddedObject, true
}

// HasEmbeddedObject returns a boolean if a field has been set.
func (o *Schema) HasEmbeddedObject() bool {
	if o != nil && !IsNil(o.EmbeddedObject) {
		return true
	}

	return false
}

// SetEmbeddedObject gets a reference to the given bool and assigns it to the EmbeddedObject field.
func (o *Schema) SetEmbeddedObject(v bool) {
	o.EmbeddedObject = &v
}

// GetFavoritable returns the Favoritable field value if set, zero value otherwise.
func (o *Schema) GetFavoritable() bool {
	if o == nil || IsNil(o.Favoritable) {
		var ret bool
		return ret
	}
	return *o.Favoritable
}

// GetFavoritableOk returns a tuple with the Favoritable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetFavoritableOk() (*bool, bool) {
	if o == nil || IsNil(o.Favoritable) {
		return nil, false
	}
	return o.Favoritable, true
}

// HasFavoritable returns a boolean if a field has been set.
func (o *Schema) HasFavoritable() bool {
	if o != nil && !IsNil(o.Favoritable) {
		return true
	}

	return false
}

// SetFavoritable gets a reference to the given bool and assigns it to the Favoritable field.
func (o *Schema) SetFavoritable(v bool) {
	o.Favoritable = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Schema) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Schema) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Schema) SetHref(v string) {
	o.Href = &v
}

// GetIdentifiableObject returns the IdentifiableObject field value if set, zero value otherwise.
func (o *Schema) GetIdentifiableObject() bool {
	if o == nil || IsNil(o.IdentifiableObject) {
		var ret bool
		return ret
	}
	return *o.IdentifiableObject
}

// GetIdentifiableObjectOk returns a tuple with the IdentifiableObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetIdentifiableObjectOk() (*bool, bool) {
	if o == nil || IsNil(o.IdentifiableObject) {
		return nil, false
	}
	return o.IdentifiableObject, true
}

// HasIdentifiableObject returns a boolean if a field has been set.
func (o *Schema) HasIdentifiableObject() bool {
	if o != nil && !IsNil(o.IdentifiableObject) {
		return true
	}

	return false
}

// SetIdentifiableObject gets a reference to the given bool and assigns it to the IdentifiableObject field.
func (o *Schema) SetIdentifiableObject(v bool) {
	o.IdentifiableObject = &v
}

// GetImplicitPrivateAuthority returns the ImplicitPrivateAuthority field value if set, zero value otherwise.
func (o *Schema) GetImplicitPrivateAuthority() bool {
	if o == nil || IsNil(o.ImplicitPrivateAuthority) {
		var ret bool
		return ret
	}
	return *o.ImplicitPrivateAuthority
}

// GetImplicitPrivateAuthorityOk returns a tuple with the ImplicitPrivateAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetImplicitPrivateAuthorityOk() (*bool, bool) {
	if o == nil || IsNil(o.ImplicitPrivateAuthority) {
		return nil, false
	}
	return o.ImplicitPrivateAuthority, true
}

// HasImplicitPrivateAuthority returns a boolean if a field has been set.
func (o *Schema) HasImplicitPrivateAuthority() bool {
	if o != nil && !IsNil(o.ImplicitPrivateAuthority) {
		return true
	}

	return false
}

// SetImplicitPrivateAuthority gets a reference to the given bool and assigns it to the ImplicitPrivateAuthority field.
func (o *Schema) SetImplicitPrivateAuthority(v bool) {
	o.ImplicitPrivateAuthority = &v
}

// GetKlass returns the Klass field value if set, zero value otherwise.
func (o *Schema) GetKlass() string {
	if o == nil || IsNil(o.Klass) {
		var ret string
		return ret
	}
	return *o.Klass
}

// GetKlassOk returns a tuple with the Klass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetKlassOk() (*string, bool) {
	if o == nil || IsNil(o.Klass) {
		return nil, false
	}
	return o.Klass, true
}

// HasKlass returns a boolean if a field has been set.
func (o *Schema) HasKlass() bool {
	if o != nil && !IsNil(o.Klass) {
		return true
	}

	return false
}

// SetKlass gets a reference to the given string and assigns it to the Klass field.
func (o *Schema) SetKlass(v string) {
	o.Klass = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Schema) GetMetadata() bool {
	if o == nil || IsNil(o.Metadata) {
		var ret bool
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetMetadataOk() (*bool, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Schema) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given bool and assigns it to the Metadata field.
func (o *Schema) SetMetadata(v bool) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Schema) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Schema) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Schema) SetName(v string) {
	o.Name = &v
}

// GetNameableObject returns the NameableObject field value if set, zero value otherwise.
func (o *Schema) GetNameableObject() bool {
	if o == nil || IsNil(o.NameableObject) {
		var ret bool
		return ret
	}
	return *o.NameableObject
}

// GetNameableObjectOk returns a tuple with the NameableObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNameableObjectOk() (*bool, bool) {
	if o == nil || IsNil(o.NameableObject) {
		return nil, false
	}
	return o.NameableObject, true
}

// HasNameableObject returns a boolean if a field has been set.
func (o *Schema) HasNameableObject() bool {
	if o != nil && !IsNil(o.NameableObject) {
		return true
	}

	return false
}

// SetNameableObject gets a reference to the given bool and assigns it to the NameableObject field.
func (o *Schema) SetNameableObject(v bool) {
	o.NameableObject = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Schema) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Schema) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *Schema) SetNamespace(v string) {
	o.Namespace = &v
}

// GetOrder returns the Order field value
func (o *Schema) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *Schema) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *Schema) SetOrder(v int32) {
	o.Order = v
}

// GetPersisted returns the Persisted field value if set, zero value otherwise.
func (o *Schema) GetPersisted() bool {
	if o == nil || IsNil(o.Persisted) {
		var ret bool
		return ret
	}
	return *o.Persisted
}

// GetPersistedOk returns a tuple with the Persisted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetPersistedOk() (*bool, bool) {
	if o == nil || IsNil(o.Persisted) {
		return nil, false
	}
	return o.Persisted, true
}

// HasPersisted returns a boolean if a field has been set.
func (o *Schema) HasPersisted() bool {
	if o != nil && !IsNil(o.Persisted) {
		return true
	}

	return false
}

// SetPersisted gets a reference to the given bool and assigns it to the Persisted field.
func (o *Schema) SetPersisted(v bool) {
	o.Persisted = &v
}

// GetPlural returns the Plural field value if set, zero value otherwise.
func (o *Schema) GetPlural() string {
	if o == nil || IsNil(o.Plural) {
		var ret string
		return ret
	}
	return *o.Plural
}

// GetPluralOk returns a tuple with the Plural field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetPluralOk() (*string, bool) {
	if o == nil || IsNil(o.Plural) {
		return nil, false
	}
	return o.Plural, true
}

// HasPlural returns a boolean if a field has been set.
func (o *Schema) HasPlural() bool {
	if o != nil && !IsNil(o.Plural) {
		return true
	}

	return false
}

// SetPlural gets a reference to the given string and assigns it to the Plural field.
func (o *Schema) SetPlural(v string) {
	o.Plural = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Schema) GetProperties() []Property {
	if o == nil || IsNil(o.Properties) {
		var ret []Property
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetPropertiesOk() ([]Property, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Schema) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []Property and assigns it to the Properties field.
func (o *Schema) SetProperties(v []Property) {
	o.Properties = v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *Schema) GetReferences() []string {
	if o == nil || IsNil(o.References) {
		var ret []string
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *Schema) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []string and assigns it to the References field.
func (o *Schema) SetReferences(v []string) {
	o.References = v
}

// GetRelativeApiEndpoint returns the RelativeApiEndpoint field value if set, zero value otherwise.
func (o *Schema) GetRelativeApiEndpoint() string {
	if o == nil || IsNil(o.RelativeApiEndpoint) {
		var ret string
		return ret
	}
	return *o.RelativeApiEndpoint
}

// GetRelativeApiEndpointOk returns a tuple with the RelativeApiEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetRelativeApiEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.RelativeApiEndpoint) {
		return nil, false
	}
	return o.RelativeApiEndpoint, true
}

// HasRelativeApiEndpoint returns a boolean if a field has been set.
func (o *Schema) HasRelativeApiEndpoint() bool {
	if o != nil && !IsNil(o.RelativeApiEndpoint) {
		return true
	}

	return false
}

// SetRelativeApiEndpoint gets a reference to the given string and assigns it to the RelativeApiEndpoint field.
func (o *Schema) SetRelativeApiEndpoint(v string) {
	o.RelativeApiEndpoint = &v
}

// GetSecondaryMetadata returns the SecondaryMetadata field value if set, zero value otherwise.
func (o *Schema) GetSecondaryMetadata() bool {
	if o == nil || IsNil(o.SecondaryMetadata) {
		var ret bool
		return ret
	}
	return *o.SecondaryMetadata
}

// GetSecondaryMetadataOk returns a tuple with the SecondaryMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetSecondaryMetadataOk() (*bool, bool) {
	if o == nil || IsNil(o.SecondaryMetadata) {
		return nil, false
	}
	return o.SecondaryMetadata, true
}

// HasSecondaryMetadata returns a boolean if a field has been set.
func (o *Schema) HasSecondaryMetadata() bool {
	if o != nil && !IsNil(o.SecondaryMetadata) {
		return true
	}

	return false
}

// SetSecondaryMetadata gets a reference to the given bool and assigns it to the SecondaryMetadata field.
func (o *Schema) SetSecondaryMetadata(v bool) {
	o.SecondaryMetadata = &v
}

// GetShareable returns the Shareable field value if set, zero value otherwise.
func (o *Schema) GetShareable() bool {
	if o == nil || IsNil(o.Shareable) {
		var ret bool
		return ret
	}
	return *o.Shareable
}

// GetShareableOk returns a tuple with the Shareable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetShareableOk() (*bool, bool) {
	if o == nil || IsNil(o.Shareable) {
		return nil, false
	}
	return o.Shareable, true
}

// HasShareable returns a boolean if a field has been set.
func (o *Schema) HasShareable() bool {
	if o != nil && !IsNil(o.Shareable) {
		return true
	}

	return false
}

// SetShareable gets a reference to the given bool and assigns it to the Shareable field.
func (o *Schema) SetShareable(v bool) {
	o.Shareable = &v
}

// GetSingular returns the Singular field value if set, zero value otherwise.
func (o *Schema) GetSingular() string {
	if o == nil || IsNil(o.Singular) {
		var ret string
		return ret
	}
	return *o.Singular
}

// GetSingularOk returns a tuple with the Singular field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetSingularOk() (*string, bool) {
	if o == nil || IsNil(o.Singular) {
		return nil, false
	}
	return o.Singular, true
}

// HasSingular returns a boolean if a field has been set.
func (o *Schema) HasSingular() bool {
	if o != nil && !IsNil(o.Singular) {
		return true
	}

	return false
}

// SetSingular gets a reference to the given string and assigns it to the Singular field.
func (o *Schema) SetSingular(v string) {
	o.Singular = &v
}

// GetSubscribable returns the Subscribable field value if set, zero value otherwise.
func (o *Schema) GetSubscribable() bool {
	if o == nil || IsNil(o.Subscribable) {
		var ret bool
		return ret
	}
	return *o.Subscribable
}

// GetSubscribableOk returns a tuple with the Subscribable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetSubscribableOk() (*bool, bool) {
	if o == nil || IsNil(o.Subscribable) {
		return nil, false
	}
	return o.Subscribable, true
}

// HasSubscribable returns a boolean if a field has been set.
func (o *Schema) HasSubscribable() bool {
	if o != nil && !IsNil(o.Subscribable) {
		return true
	}

	return false
}

// SetSubscribable gets a reference to the given bool and assigns it to the Subscribable field.
func (o *Schema) SetSubscribable(v bool) {
	o.Subscribable = &v
}

// GetSubscribableObject returns the SubscribableObject field value if set, zero value otherwise.
func (o *Schema) GetSubscribableObject() bool {
	if o == nil || IsNil(o.SubscribableObject) {
		var ret bool
		return ret
	}
	return *o.SubscribableObject
}

// GetSubscribableObjectOk returns a tuple with the SubscribableObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetSubscribableObjectOk() (*bool, bool) {
	if o == nil || IsNil(o.SubscribableObject) {
		return nil, false
	}
	return o.SubscribableObject, true
}

// HasSubscribableObject returns a boolean if a field has been set.
func (o *Schema) HasSubscribableObject() bool {
	if o != nil && !IsNil(o.SubscribableObject) {
		return true
	}

	return false
}

// SetSubscribableObject gets a reference to the given bool and assigns it to the SubscribableObject field.
func (o *Schema) SetSubscribableObject(v bool) {
	o.SubscribableObject = &v
}

// GetTranslatable returns the Translatable field value if set, zero value otherwise.
func (o *Schema) GetTranslatable() bool {
	if o == nil || IsNil(o.Translatable) {
		var ret bool
		return ret
	}
	return *o.Translatable
}

// GetTranslatableOk returns a tuple with the Translatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetTranslatableOk() (*bool, bool) {
	if o == nil || IsNil(o.Translatable) {
		return nil, false
	}
	return o.Translatable, true
}

// HasTranslatable returns a boolean if a field has been set.
func (o *Schema) HasTranslatable() bool {
	if o != nil && !IsNil(o.Translatable) {
		return true
	}

	return false
}

// SetTranslatable gets a reference to the given bool and assigns it to the Translatable field.
func (o *Schema) SetTranslatable(v bool) {
	o.Translatable = &v
}

func (o Schema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiEndpoint) {
		toSerialize["apiEndpoint"] = o.ApiEndpoint
	}
	if !IsNil(o.Authorities) {
		toSerialize["authorities"] = o.Authorities
	}
	if !IsNil(o.CollectionName) {
		toSerialize["collectionName"] = o.CollectionName
	}
	if !IsNil(o.DataReadShareable) {
		toSerialize["dataReadShareable"] = o.DataReadShareable
	}
	if !IsNil(o.DataShareable) {
		toSerialize["dataShareable"] = o.DataShareable
	}
	if !IsNil(o.DataWriteShareable) {
		toSerialize["dataWriteShareable"] = o.DataWriteShareable
	}
	if !IsNil(o.DefaultPrivate) {
		toSerialize["defaultPrivate"] = o.DefaultPrivate
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EmbeddedObject) {
		toSerialize["embeddedObject"] = o.EmbeddedObject
	}
	if !IsNil(o.Favoritable) {
		toSerialize["favoritable"] = o.Favoritable
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.IdentifiableObject) {
		toSerialize["identifiableObject"] = o.IdentifiableObject
	}
	if !IsNil(o.ImplicitPrivateAuthority) {
		toSerialize["implicitPrivateAuthority"] = o.ImplicitPrivateAuthority
	}
	if !IsNil(o.Klass) {
		toSerialize["klass"] = o.Klass
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NameableObject) {
		toSerialize["nameableObject"] = o.NameableObject
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	toSerialize["order"] = o.Order
	if !IsNil(o.Persisted) {
		toSerialize["persisted"] = o.Persisted
	}
	if !IsNil(o.Plural) {
		toSerialize["plural"] = o.Plural
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.RelativeApiEndpoint) {
		toSerialize["relativeApiEndpoint"] = o.RelativeApiEndpoint
	}
	if !IsNil(o.SecondaryMetadata) {
		toSerialize["secondaryMetadata"] = o.SecondaryMetadata
	}
	if !IsNil(o.Shareable) {
		toSerialize["shareable"] = o.Shareable
	}
	if !IsNil(o.Singular) {
		toSerialize["singular"] = o.Singular
	}
	if !IsNil(o.Subscribable) {
		toSerialize["subscribable"] = o.Subscribable
	}
	if !IsNil(o.SubscribableObject) {
		toSerialize["subscribableObject"] = o.SubscribableObject
	}
	if !IsNil(o.Translatable) {
		toSerialize["translatable"] = o.Translatable
	}
	return toSerialize, nil
}

func (o *Schema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"order",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchema := _Schema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchema)

	if err != nil {
		return err
	}

	*o = Schema(varSchema)

	return err
}

type NullableSchema struct {
	value *Schema
	isSet bool
}

func (v NullableSchema) Get() *Schema {
	return v.value
}

func (v *NullableSchema) Set(val *Schema) {
	v.value = val
	v.isSet = true
}

func (v NullableSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchema(val *Schema) *NullableSchema {
	return &NullableSchema{value: val, isSet: true}
}

func (v NullableSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
