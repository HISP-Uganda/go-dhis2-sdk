/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the DataIntegrityIssue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataIntegrityIssue{}

// DataIntegrityIssue struct for DataIntegrityIssue
type DataIntegrityIssue struct {
	Comment *string  `json:"comment,omitempty"`
	Id      *string  `json:"id,omitempty"`
	Name    *string  `json:"name,omitempty"`
	Refs    []string `json:"refs,omitempty"`
}

// NewDataIntegrityIssue instantiates a new DataIntegrityIssue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataIntegrityIssue() *DataIntegrityIssue {
	this := DataIntegrityIssue{}
	return &this
}

// NewDataIntegrityIssueWithDefaults instantiates a new DataIntegrityIssue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataIntegrityIssueWithDefaults() *DataIntegrityIssue {
	this := DataIntegrityIssue{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DataIntegrityIssue) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataIntegrityIssue) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DataIntegrityIssue) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DataIntegrityIssue) SetComment(v string) {
	o.Comment = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataIntegrityIssue) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataIntegrityIssue) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataIntegrityIssue) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataIntegrityIssue) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataIntegrityIssue) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataIntegrityIssue) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataIntegrityIssue) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataIntegrityIssue) SetName(v string) {
	o.Name = &v
}

// GetRefs returns the Refs field value if set, zero value otherwise.
func (o *DataIntegrityIssue) GetRefs() []string {
	if o == nil || IsNil(o.Refs) {
		var ret []string
		return ret
	}
	return o.Refs
}

// GetRefsOk returns a tuple with the Refs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataIntegrityIssue) GetRefsOk() ([]string, bool) {
	if o == nil || IsNil(o.Refs) {
		return nil, false
	}
	return o.Refs, true
}

// HasRefs returns a boolean if a field has been set.
func (o *DataIntegrityIssue) HasRefs() bool {
	if o != nil && !IsNil(o.Refs) {
		return true
	}

	return false
}

// SetRefs gets a reference to the given []string and assigns it to the Refs field.
func (o *DataIntegrityIssue) SetRefs(v []string) {
	o.Refs = v
}

func (o DataIntegrityIssue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataIntegrityIssue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Refs) {
		toSerialize["refs"] = o.Refs
	}
	return toSerialize, nil
}

type NullableDataIntegrityIssue struct {
	value *DataIntegrityIssue
	isSet bool
}

func (v NullableDataIntegrityIssue) Get() *DataIntegrityIssue {
	return v.value
}

func (v *NullableDataIntegrityIssue) Set(val *DataIntegrityIssue) {
	v.value = val
	v.isSet = true
}

func (v NullableDataIntegrityIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableDataIntegrityIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataIntegrityIssue(val *DataIntegrityIssue) *NullableDataIntegrityIssue {
	return &NullableDataIntegrityIssue{value: val, isSet: true}
}

func (v NullableDataIntegrityIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataIntegrityIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
