/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesMetadataProposal the model 'PropertyNamesMetadataProposal'
type PropertyNamesMetadataProposal string

// List of PropertyNames_MetadataProposal
const (
	PROPERTYNAMESMETADATAPROPOSAL_CHANGE       PropertyNamesMetadataProposal = "change"
	PROPERTYNAMESMETADATAPROPOSAL_COMMENT      PropertyNamesMetadataProposal = "comment"
	PROPERTYNAMESMETADATAPROPOSAL_CREATED      PropertyNamesMetadataProposal = "created"
	PROPERTYNAMESMETADATAPROPOSAL_CREATED_BY   PropertyNamesMetadataProposal = "createdBy"
	PROPERTYNAMESMETADATAPROPOSAL_FINALISED    PropertyNamesMetadataProposal = "finalised"
	PROPERTYNAMESMETADATAPROPOSAL_FINALISED_BY PropertyNamesMetadataProposal = "finalisedBy"
	PROPERTYNAMESMETADATAPROPOSAL_ID           PropertyNamesMetadataProposal = "id"
	PROPERTYNAMESMETADATAPROPOSAL_REASON       PropertyNamesMetadataProposal = "reason"
	PROPERTYNAMESMETADATAPROPOSAL_STATUS       PropertyNamesMetadataProposal = "status"
	PROPERTYNAMESMETADATAPROPOSAL_TARGET       PropertyNamesMetadataProposal = "target"
	PROPERTYNAMESMETADATAPROPOSAL_TARGET_ID    PropertyNamesMetadataProposal = "targetId"
	PROPERTYNAMESMETADATAPROPOSAL_TYPE         PropertyNamesMetadataProposal = "type"
)

// All allowed values of PropertyNamesMetadataProposal enum
var AllowedPropertyNamesMetadataProposalEnumValues = []PropertyNamesMetadataProposal{
	"change",
	"comment",
	"created",
	"createdBy",
	"finalised",
	"finalisedBy",
	"id",
	"reason",
	"status",
	"target",
	"targetId",
	"type",
}

func (v *PropertyNamesMetadataProposal) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesMetadataProposal(value)
	for _, existing := range AllowedPropertyNamesMetadataProposalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesMetadataProposal", value)
}

// NewPropertyNamesMetadataProposalFromValue returns a pointer to a valid PropertyNamesMetadataProposal
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesMetadataProposalFromValue(v string) (*PropertyNamesMetadataProposal, error) {
	ev := PropertyNamesMetadataProposal(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesMetadataProposal: valid values are %v", v, AllowedPropertyNamesMetadataProposalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesMetadataProposal) IsValid() bool {
	for _, existing := range AllowedPropertyNamesMetadataProposalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_MetadataProposal value
func (v PropertyNamesMetadataProposal) Ptr() *PropertyNamesMetadataProposal {
	return &v
}

type NullablePropertyNamesMetadataProposal struct {
	value *PropertyNamesMetadataProposal
	isSet bool
}

func (v NullablePropertyNamesMetadataProposal) Get() *PropertyNamesMetadataProposal {
	return v.value
}

func (v *NullablePropertyNamesMetadataProposal) Set(val *PropertyNamesMetadataProposal) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesMetadataProposal) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesMetadataProposal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesMetadataProposal(val *PropertyNamesMetadataProposal) *NullablePropertyNamesMetadataProposal {
	return &NullablePropertyNamesMetadataProposal{value: val, isSet: true}
}

func (v NullablePropertyNamesMetadataProposal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesMetadataProposal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
