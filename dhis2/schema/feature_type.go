/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// FeatureType the model 'FeatureType'
type FeatureType string

// List of FeatureType
const (
	FEATURETYPE_NONE          FeatureType = "NONE"
	FEATURETYPE_MULTI_POLYGON FeatureType = "MULTI_POLYGON"
	FEATURETYPE_POLYGON       FeatureType = "POLYGON"
	FEATURETYPE_POINT         FeatureType = "POINT"
	FEATURETYPE_SYMBOL        FeatureType = "SYMBOL"
)

// All allowed values of FeatureType enum
var AllowedFeatureTypeEnumValues = []FeatureType{
	"NONE",
	"MULTI_POLYGON",
	"POLYGON",
	"POINT",
	"SYMBOL",
}

func (v *FeatureType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeatureType(value)
	for _, existing := range AllowedFeatureTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeatureType", value)
}

// NewFeatureTypeFromValue returns a pointer to a valid FeatureType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeatureTypeFromValue(v string) (*FeatureType, error) {
	ev := FeatureType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeatureType: valid values are %v", v, AllowedFeatureTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeatureType) IsValid() bool {
	for _, existing := range AllowedFeatureTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeatureType value
func (v FeatureType) Ptr() *FeatureType {
	return &v
}

type NullableFeatureType struct {
	value *FeatureType
	isSet bool
}

func (v NullableFeatureType) Get() *FeatureType {
	return v.value
}

func (v *NullableFeatureType) Set(val *FeatureType) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureType) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureType(val *FeatureType) *NullableFeatureType {
	return &NullableFeatureType{value: val, isSet: true}
}

func (v NullableFeatureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
