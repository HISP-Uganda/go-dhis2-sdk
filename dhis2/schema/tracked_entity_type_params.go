/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TrackedEntityTypeParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackedEntityTypeParams{}

// TrackedEntityTypeParams struct for TrackedEntityTypeParams
type TrackedEntityTypeParams struct {
	AllowAuditLog                 *bool                                 `json:"allowAuditLog,omitempty"`
	AttributeValues               []AttributeValueParams                `json:"attributeValues,omitempty"`
	Code                          *string                               `json:"code,omitempty"`
	Created                       *time.Time                            `json:"created,omitempty"`
	CreatedBy                     *AggregateDataExchangeParamsCreatedBy `json:"createdBy,omitempty"`
	Description                   *string                               `json:"description,omitempty"`
	DisplayDescription            *string                               `json:"displayDescription,omitempty"`
	DisplayFormName               *string                               `json:"displayFormName,omitempty"`
	DisplayName                   *string                               `json:"displayName,omitempty"`
	DisplayShortName              *string                               `json:"displayShortName,omitempty"`
	Favorite                      *bool                                 `json:"favorite,omitempty"`
	Favorites                     []string                              `json:"favorites,omitempty"`
	FeatureType                   FeatureType                           `json:"featureType"`
	FormName                      *string                               `json:"formName,omitempty"`
	Id                            *string                               `json:"id,omitempty"`
	LastUpdated                   *time.Time                            `json:"lastUpdated,omitempty"`
	LastUpdatedBy                 *AggregateDataExchangeParamsCreatedBy `json:"lastUpdatedBy,omitempty"`
	MaxTeiCountToReturn           int32                                 `json:"maxTeiCountToReturn"`
	MinAttributesRequiredToSearch int32                                 `json:"minAttributesRequiredToSearch"`
	Name                          *string                               `json:"name,omitempty"`
	Sharing                       *Sharing                              `json:"sharing,omitempty"`
	ShortName                     *string                               `json:"shortName,omitempty"`
	Style                         *ObjectStyle                          `json:"style,omitempty"`
	TrackedEntityTypeAttributes   []TrackedEntityTypeAttributeParams    `json:"trackedEntityTypeAttributes,omitempty"`
	Translations                  []Translation                         `json:"translations,omitempty"`
}

type _TrackedEntityTypeParams TrackedEntityTypeParams

// NewTrackedEntityTypeParams instantiates a new TrackedEntityTypeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackedEntityTypeParams(featureType FeatureType, maxTeiCountToReturn int32, minAttributesRequiredToSearch int32) *TrackedEntityTypeParams {
	this := TrackedEntityTypeParams{}
	this.FeatureType = featureType
	this.MaxTeiCountToReturn = maxTeiCountToReturn
	this.MinAttributesRequiredToSearch = minAttributesRequiredToSearch
	return &this
}

// NewTrackedEntityTypeParamsWithDefaults instantiates a new TrackedEntityTypeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackedEntityTypeParamsWithDefaults() *TrackedEntityTypeParams {
	this := TrackedEntityTypeParams{}
	return &this
}

// GetAllowAuditLog returns the AllowAuditLog field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetAllowAuditLog() bool {
	if o == nil || IsNil(o.AllowAuditLog) {
		var ret bool
		return ret
	}
	return *o.AllowAuditLog
}

// GetAllowAuditLogOk returns a tuple with the AllowAuditLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetAllowAuditLogOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAuditLog) {
		return nil, false
	}
	return o.AllowAuditLog, true
}

// HasAllowAuditLog returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasAllowAuditLog() bool {
	if o != nil && !IsNil(o.AllowAuditLog) {
		return true
	}

	return false
}

// SetAllowAuditLog gets a reference to the given bool and assigns it to the AllowAuditLog field.
func (o *TrackedEntityTypeParams) SetAllowAuditLog(v bool) {
	o.AllowAuditLog = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *TrackedEntityTypeParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TrackedEntityTypeParams) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *TrackedEntityTypeParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *TrackedEntityTypeParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TrackedEntityTypeParams) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *TrackedEntityTypeParams) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayFormName returns the DisplayFormName field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetDisplayFormName() string {
	if o == nil || IsNil(o.DisplayFormName) {
		var ret string
		return ret
	}
	return *o.DisplayFormName
}

// GetDisplayFormNameOk returns a tuple with the DisplayFormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetDisplayFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayFormName) {
		return nil, false
	}
	return o.DisplayFormName, true
}

// HasDisplayFormName returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasDisplayFormName() bool {
	if o != nil && !IsNil(o.DisplayFormName) {
		return true
	}

	return false
}

// SetDisplayFormName gets a reference to the given string and assigns it to the DisplayFormName field.
func (o *TrackedEntityTypeParams) SetDisplayFormName(v string) {
	o.DisplayFormName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *TrackedEntityTypeParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *TrackedEntityTypeParams) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *TrackedEntityTypeParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *TrackedEntityTypeParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFeatureType returns the FeatureType field value
func (o *TrackedEntityTypeParams) GetFeatureType() FeatureType {
	if o == nil {
		var ret FeatureType
		return ret
	}

	return o.FeatureType
}

// GetFeatureTypeOk returns a tuple with the FeatureType field value
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetFeatureTypeOk() (*FeatureType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureType, true
}

// SetFeatureType sets field value
func (o *TrackedEntityTypeParams) SetFeatureType(v FeatureType) {
	o.FeatureType = v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *TrackedEntityTypeParams) SetFormName(v string) {
	o.FormName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TrackedEntityTypeParams) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *TrackedEntityTypeParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *TrackedEntityTypeParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetMaxTeiCountToReturn returns the MaxTeiCountToReturn field value
func (o *TrackedEntityTypeParams) GetMaxTeiCountToReturn() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxTeiCountToReturn
}

// GetMaxTeiCountToReturnOk returns a tuple with the MaxTeiCountToReturn field value
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetMaxTeiCountToReturnOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxTeiCountToReturn, true
}

// SetMaxTeiCountToReturn sets field value
func (o *TrackedEntityTypeParams) SetMaxTeiCountToReturn(v int32) {
	o.MaxTeiCountToReturn = v
}

// GetMinAttributesRequiredToSearch returns the MinAttributesRequiredToSearch field value
func (o *TrackedEntityTypeParams) GetMinAttributesRequiredToSearch() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinAttributesRequiredToSearch
}

// GetMinAttributesRequiredToSearchOk returns a tuple with the MinAttributesRequiredToSearch field value
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetMinAttributesRequiredToSearchOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinAttributesRequiredToSearch, true
}

// SetMinAttributesRequiredToSearch sets field value
func (o *TrackedEntityTypeParams) SetMinAttributesRequiredToSearch(v int32) {
	o.MinAttributesRequiredToSearch = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TrackedEntityTypeParams) SetName(v string) {
	o.Name = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *TrackedEntityTypeParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *TrackedEntityTypeParams) SetShortName(v string) {
	o.ShortName = &v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetStyle() ObjectStyle {
	if o == nil || IsNil(o.Style) {
		var ret ObjectStyle
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetStyleOk() (*ObjectStyle, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given ObjectStyle and assigns it to the Style field.
func (o *TrackedEntityTypeParams) SetStyle(v ObjectStyle) {
	o.Style = &v
}

// GetTrackedEntityTypeAttributes returns the TrackedEntityTypeAttributes field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetTrackedEntityTypeAttributes() []TrackedEntityTypeAttributeParams {
	if o == nil || IsNil(o.TrackedEntityTypeAttributes) {
		var ret []TrackedEntityTypeAttributeParams
		return ret
	}
	return o.TrackedEntityTypeAttributes
}

// GetTrackedEntityTypeAttributesOk returns a tuple with the TrackedEntityTypeAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetTrackedEntityTypeAttributesOk() ([]TrackedEntityTypeAttributeParams, bool) {
	if o == nil || IsNil(o.TrackedEntityTypeAttributes) {
		return nil, false
	}
	return o.TrackedEntityTypeAttributes, true
}

// HasTrackedEntityTypeAttributes returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasTrackedEntityTypeAttributes() bool {
	if o != nil && !IsNil(o.TrackedEntityTypeAttributes) {
		return true
	}

	return false
}

// SetTrackedEntityTypeAttributes gets a reference to the given []TrackedEntityTypeAttributeParams and assigns it to the TrackedEntityTypeAttributes field.
func (o *TrackedEntityTypeParams) SetTrackedEntityTypeAttributes(v []TrackedEntityTypeAttributeParams) {
	o.TrackedEntityTypeAttributes = v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *TrackedEntityTypeParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityTypeParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *TrackedEntityTypeParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *TrackedEntityTypeParams) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o TrackedEntityTypeParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackedEntityTypeParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowAuditLog) {
		toSerialize["allowAuditLog"] = o.AllowAuditLog
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayFormName) {
		toSerialize["displayFormName"] = o.DisplayFormName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	toSerialize["featureType"] = o.FeatureType
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	toSerialize["maxTeiCountToReturn"] = o.MaxTeiCountToReturn
	toSerialize["minAttributesRequiredToSearch"] = o.MinAttributesRequiredToSearch
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	if !IsNil(o.TrackedEntityTypeAttributes) {
		toSerialize["trackedEntityTypeAttributes"] = o.TrackedEntityTypeAttributes
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

func (o *TrackedEntityTypeParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"featureType",
		"maxTeiCountToReturn",
		"minAttributesRequiredToSearch",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackedEntityTypeParams := _TrackedEntityTypeParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackedEntityTypeParams)

	if err != nil {
		return err
	}

	*o = TrackedEntityTypeParams(varTrackedEntityTypeParams)

	return err
}

type NullableTrackedEntityTypeParams struct {
	value *TrackedEntityTypeParams
	isSet bool
}

func (v NullableTrackedEntityTypeParams) Get() *TrackedEntityTypeParams {
	return v.value
}

func (v *NullableTrackedEntityTypeParams) Set(val *TrackedEntityTypeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackedEntityTypeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackedEntityTypeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackedEntityTypeParams(val *TrackedEntityTypeParams) *NullableTrackedEntityTypeParams {
	return &NullableTrackedEntityTypeParams{value: val, isSet: true}
}

func (v NullableTrackedEntityTypeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackedEntityTypeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
