/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesOptionSet the model 'PropertyNamesOptionSet'
type PropertyNamesOptionSet string

// List of PropertyNames_OptionSet
const (
	PROPERTYNAMESOPTIONSET_ACCESS              PropertyNamesOptionSet = "access"
	PROPERTYNAMESOPTIONSET_ATTRIBUTE_VALUES    PropertyNamesOptionSet = "attributeValues"
	PROPERTYNAMESOPTIONSET_CODE                PropertyNamesOptionSet = "code"
	PROPERTYNAMESOPTIONSET_CREATED             PropertyNamesOptionSet = "created"
	PROPERTYNAMESOPTIONSET_CREATED_BY          PropertyNamesOptionSet = "createdBy"
	PROPERTYNAMESOPTIONSET_DESCRIPTION         PropertyNamesOptionSet = "description"
	PROPERTYNAMESOPTIONSET_DISPLAY_NAME        PropertyNamesOptionSet = "displayName"
	PROPERTYNAMESOPTIONSET_EXTERNAL_ACCESS     PropertyNamesOptionSet = "externalAccess"
	PROPERTYNAMESOPTIONSET_FAVORITE            PropertyNamesOptionSet = "favorite"
	PROPERTYNAMESOPTIONSET_FAVORITES           PropertyNamesOptionSet = "favorites"
	PROPERTYNAMESOPTIONSET_HREF                PropertyNamesOptionSet = "href"
	PROPERTYNAMESOPTIONSET_ID                  PropertyNamesOptionSet = "id"
	PROPERTYNAMESOPTIONSET_LAST_UPDATED        PropertyNamesOptionSet = "lastUpdated"
	PROPERTYNAMESOPTIONSET_LAST_UPDATED_BY     PropertyNamesOptionSet = "lastUpdatedBy"
	PROPERTYNAMESOPTIONSET_NAME                PropertyNamesOptionSet = "name"
	PROPERTYNAMESOPTIONSET_OPTIONS             PropertyNamesOptionSet = "options"
	PROPERTYNAMESOPTIONSET_PUBLIC_ACCESS       PropertyNamesOptionSet = "publicAccess"
	PROPERTYNAMESOPTIONSET_SHARING             PropertyNamesOptionSet = "sharing"
	PROPERTYNAMESOPTIONSET_TRANSLATIONS        PropertyNamesOptionSet = "translations"
	PROPERTYNAMESOPTIONSET_USER                PropertyNamesOptionSet = "user"
	PROPERTYNAMESOPTIONSET_USER_ACCESSES       PropertyNamesOptionSet = "userAccesses"
	PROPERTYNAMESOPTIONSET_USER_GROUP_ACCESSES PropertyNamesOptionSet = "userGroupAccesses"
	PROPERTYNAMESOPTIONSET_VALUE_TYPE          PropertyNamesOptionSet = "valueType"
	PROPERTYNAMESOPTIONSET_VERSION             PropertyNamesOptionSet = "version"
)

// All allowed values of PropertyNamesOptionSet enum
var AllowedPropertyNamesOptionSetEnumValues = []PropertyNamesOptionSet{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"options",
	"publicAccess",
	"sharing",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"valueType",
	"version",
}

func (v *PropertyNamesOptionSet) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesOptionSet(value)
	for _, existing := range AllowedPropertyNamesOptionSetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesOptionSet", value)
}

// NewPropertyNamesOptionSetFromValue returns a pointer to a valid PropertyNamesOptionSet
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesOptionSetFromValue(v string) (*PropertyNamesOptionSet, error) {
	ev := PropertyNamesOptionSet(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesOptionSet: valid values are %v", v, AllowedPropertyNamesOptionSetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesOptionSet) IsValid() bool {
	for _, existing := range AllowedPropertyNamesOptionSetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_OptionSet value
func (v PropertyNamesOptionSet) Ptr() *PropertyNamesOptionSet {
	return &v
}

type NullablePropertyNamesOptionSet struct {
	value *PropertyNamesOptionSet
	isSet bool
}

func (v NullablePropertyNamesOptionSet) Get() *PropertyNamesOptionSet {
	return v.value
}

func (v *NullablePropertyNamesOptionSet) Set(val *PropertyNamesOptionSet) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesOptionSet) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesOptionSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesOptionSet(val *PropertyNamesOptionSet) *NullablePropertyNamesOptionSet {
	return &NullablePropertyNamesOptionSet{value: val, isSet: true}
}

func (v NullablePropertyNamesOptionSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesOptionSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
