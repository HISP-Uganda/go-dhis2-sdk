/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DataIntegritySeverity the model 'DataIntegritySeverity'
type DataIntegritySeverity string

// List of DataIntegritySeverity
const (
	DATAINTEGRITYSEVERITY_INFO     DataIntegritySeverity = "INFO"
	DATAINTEGRITYSEVERITY_WARNING  DataIntegritySeverity = "WARNING"
	DATAINTEGRITYSEVERITY_SEVERE   DataIntegritySeverity = "SEVERE"
	DATAINTEGRITYSEVERITY_CRITICAL DataIntegritySeverity = "CRITICAL"
)

// All allowed values of DataIntegritySeverity enum
var AllowedDataIntegritySeverityEnumValues = []DataIntegritySeverity{
	"INFO",
	"WARNING",
	"SEVERE",
	"CRITICAL",
}

func (v *DataIntegritySeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataIntegritySeverity(value)
	for _, existing := range AllowedDataIntegritySeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataIntegritySeverity", value)
}

// NewDataIntegritySeverityFromValue returns a pointer to a valid DataIntegritySeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataIntegritySeverityFromValue(v string) (*DataIntegritySeverity, error) {
	ev := DataIntegritySeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataIntegritySeverity: valid values are %v", v, AllowedDataIntegritySeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataIntegritySeverity) IsValid() bool {
	for _, existing := range AllowedDataIntegritySeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataIntegritySeverity value
func (v DataIntegritySeverity) Ptr() *DataIntegritySeverity {
	return &v
}

type NullableDataIntegritySeverity struct {
	value *DataIntegritySeverity
	isSet bool
}

func (v NullableDataIntegritySeverity) Get() *DataIntegritySeverity {
	return v.value
}

func (v *NullableDataIntegritySeverity) Set(val *DataIntegritySeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableDataIntegritySeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableDataIntegritySeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataIntegritySeverity(val *DataIntegritySeverity) *NullableDataIntegritySeverity {
	return &NullableDataIntegritySeverity{value: val, isSet: true}
}

func (v NullableDataIntegritySeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataIntegritySeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
