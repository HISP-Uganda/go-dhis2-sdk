/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ProcessInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessInfo{}

// ProcessInfo struct for ProcessInfo
type ProcessInfo struct {
	CancelledTime *time.Time        `json:"cancelledTime,omitempty"`
	CompletedTime *time.Time        `json:"completedTime,omitempty"`
	Description   *string           `json:"description,omitempty"`
	Error         *string           `json:"error,omitempty"`
	JobId         *string           `json:"jobId,omitempty"`
	Stages        []string          `json:"stages,omitempty"`
	StartedTime   *time.Time        `json:"startedTime,omitempty"`
	Status        JobProgressStatus `json:"status"`
	Summary       *string           `json:"summary,omitempty"`
}

type _ProcessInfo ProcessInfo

// NewProcessInfo instantiates a new ProcessInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessInfo(status JobProgressStatus) *ProcessInfo {
	this := ProcessInfo{}
	this.Status = status
	return &this
}

// NewProcessInfoWithDefaults instantiates a new ProcessInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessInfoWithDefaults() *ProcessInfo {
	this := ProcessInfo{}
	return &this
}

// GetCancelledTime returns the CancelledTime field value if set, zero value otherwise.
func (o *ProcessInfo) GetCancelledTime() time.Time {
	if o == nil || IsNil(o.CancelledTime) {
		var ret time.Time
		return ret
	}
	return *o.CancelledTime
}

// GetCancelledTimeOk returns a tuple with the CancelledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetCancelledTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CancelledTime) {
		return nil, false
	}
	return o.CancelledTime, true
}

// HasCancelledTime returns a boolean if a field has been set.
func (o *ProcessInfo) HasCancelledTime() bool {
	if o != nil && !IsNil(o.CancelledTime) {
		return true
	}

	return false
}

// SetCancelledTime gets a reference to the given time.Time and assigns it to the CancelledTime field.
func (o *ProcessInfo) SetCancelledTime(v time.Time) {
	o.CancelledTime = &v
}

// GetCompletedTime returns the CompletedTime field value if set, zero value otherwise.
func (o *ProcessInfo) GetCompletedTime() time.Time {
	if o == nil || IsNil(o.CompletedTime) {
		var ret time.Time
		return ret
	}
	return *o.CompletedTime
}

// GetCompletedTimeOk returns a tuple with the CompletedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetCompletedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedTime) {
		return nil, false
	}
	return o.CompletedTime, true
}

// HasCompletedTime returns a boolean if a field has been set.
func (o *ProcessInfo) HasCompletedTime() bool {
	if o != nil && !IsNil(o.CompletedTime) {
		return true
	}

	return false
}

// SetCompletedTime gets a reference to the given time.Time and assigns it to the CompletedTime field.
func (o *ProcessInfo) SetCompletedTime(v time.Time) {
	o.CompletedTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProcessInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProcessInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProcessInfo) SetDescription(v string) {
	o.Description = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ProcessInfo) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ProcessInfo) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ProcessInfo) SetError(v string) {
	o.Error = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *ProcessInfo) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *ProcessInfo) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *ProcessInfo) SetJobId(v string) {
	o.JobId = &v
}

// GetStages returns the Stages field value if set, zero value otherwise.
func (o *ProcessInfo) GetStages() []string {
	if o == nil || IsNil(o.Stages) {
		var ret []string
		return ret
	}
	return o.Stages
}

// GetStagesOk returns a tuple with the Stages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetStagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Stages) {
		return nil, false
	}
	return o.Stages, true
}

// HasStages returns a boolean if a field has been set.
func (o *ProcessInfo) HasStages() bool {
	if o != nil && !IsNil(o.Stages) {
		return true
	}

	return false
}

// SetStages gets a reference to the given []string and assigns it to the Stages field.
func (o *ProcessInfo) SetStages(v []string) {
	o.Stages = v
}

// GetStartedTime returns the StartedTime field value if set, zero value otherwise.
func (o *ProcessInfo) GetStartedTime() time.Time {
	if o == nil || IsNil(o.StartedTime) {
		var ret time.Time
		return ret
	}
	return *o.StartedTime
}

// GetStartedTimeOk returns a tuple with the StartedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetStartedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedTime) {
		return nil, false
	}
	return o.StartedTime, true
}

// HasStartedTime returns a boolean if a field has been set.
func (o *ProcessInfo) HasStartedTime() bool {
	if o != nil && !IsNil(o.StartedTime) {
		return true
	}

	return false
}

// SetStartedTime gets a reference to the given time.Time and assigns it to the StartedTime field.
func (o *ProcessInfo) SetStartedTime(v time.Time) {
	o.StartedTime = &v
}

// GetStatus returns the Status field value
func (o *ProcessInfo) GetStatus() JobProgressStatus {
	if o == nil {
		var ret JobProgressStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetStatusOk() (*JobProgressStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ProcessInfo) SetStatus(v JobProgressStatus) {
	o.Status = v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ProcessInfo) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ProcessInfo) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *ProcessInfo) SetSummary(v string) {
	o.Summary = &v
}

func (o ProcessInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CancelledTime) {
		toSerialize["cancelledTime"] = o.CancelledTime
	}
	if !IsNil(o.CompletedTime) {
		toSerialize["completedTime"] = o.CompletedTime
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	if !IsNil(o.Stages) {
		toSerialize["stages"] = o.Stages
	}
	if !IsNil(o.StartedTime) {
		toSerialize["startedTime"] = o.StartedTime
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	return toSerialize, nil
}

func (o *ProcessInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProcessInfo := _ProcessInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProcessInfo)

	if err != nil {
		return err
	}

	*o = ProcessInfo(varProcessInfo)

	return err
}

type NullableProcessInfo struct {
	value *ProcessInfo
	isSet bool
}

func (v NullableProcessInfo) Get() *ProcessInfo {
	return v.value
}

func (v *NullableProcessInfo) Set(val *ProcessInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessInfo(val *ProcessInfo) *NullableProcessInfo {
	return &NullableProcessInfo{value: val, isSet: true}
}

func (v NullableProcessInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
