/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the ValidationRuleExpressionDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationRuleExpressionDetails{}

// ValidationRuleExpressionDetails struct for ValidationRuleExpressionDetails
type ValidationRuleExpressionDetails struct {
	LeftSide  []map[string]string `json:"leftSide,omitempty"`
	RightSide []map[string]string `json:"rightSide,omitempty"`
}

// NewValidationRuleExpressionDetails instantiates a new ValidationRuleExpressionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationRuleExpressionDetails() *ValidationRuleExpressionDetails {
	this := ValidationRuleExpressionDetails{}
	return &this
}

// NewValidationRuleExpressionDetailsWithDefaults instantiates a new ValidationRuleExpressionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationRuleExpressionDetailsWithDefaults() *ValidationRuleExpressionDetails {
	this := ValidationRuleExpressionDetails{}
	return &this
}

// GetLeftSide returns the LeftSide field value if set, zero value otherwise.
func (o *ValidationRuleExpressionDetails) GetLeftSide() []map[string]string {
	if o == nil || IsNil(o.LeftSide) {
		var ret []map[string]string
		return ret
	}
	return o.LeftSide
}

// GetLeftSideOk returns a tuple with the LeftSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRuleExpressionDetails) GetLeftSideOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.LeftSide) {
		return nil, false
	}
	return o.LeftSide, true
}

// HasLeftSide returns a boolean if a field has been set.
func (o *ValidationRuleExpressionDetails) HasLeftSide() bool {
	if o != nil && !IsNil(o.LeftSide) {
		return true
	}

	return false
}

// SetLeftSide gets a reference to the given []map[string]string and assigns it to the LeftSide field.
func (o *ValidationRuleExpressionDetails) SetLeftSide(v []map[string]string) {
	o.LeftSide = v
}

// GetRightSide returns the RightSide field value if set, zero value otherwise.
func (o *ValidationRuleExpressionDetails) GetRightSide() []map[string]string {
	if o == nil || IsNil(o.RightSide) {
		var ret []map[string]string
		return ret
	}
	return o.RightSide
}

// GetRightSideOk returns a tuple with the RightSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRuleExpressionDetails) GetRightSideOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.RightSide) {
		return nil, false
	}
	return o.RightSide, true
}

// HasRightSide returns a boolean if a field has been set.
func (o *ValidationRuleExpressionDetails) HasRightSide() bool {
	if o != nil && !IsNil(o.RightSide) {
		return true
	}

	return false
}

// SetRightSide gets a reference to the given []map[string]string and assigns it to the RightSide field.
func (o *ValidationRuleExpressionDetails) SetRightSide(v []map[string]string) {
	o.RightSide = v
}

func (o ValidationRuleExpressionDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationRuleExpressionDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LeftSide) {
		toSerialize["leftSide"] = o.LeftSide
	}
	if !IsNil(o.RightSide) {
		toSerialize["rightSide"] = o.RightSide
	}
	return toSerialize, nil
}

type NullableValidationRuleExpressionDetails struct {
	value *ValidationRuleExpressionDetails
	isSet bool
}

func (v NullableValidationRuleExpressionDetails) Get() *ValidationRuleExpressionDetails {
	return v.value
}

func (v *NullableValidationRuleExpressionDetails) Set(val *ValidationRuleExpressionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationRuleExpressionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationRuleExpressionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationRuleExpressionDetails(val *ValidationRuleExpressionDetails) *NullableValidationRuleExpressionDetails {
	return &NullableValidationRuleExpressionDetails{value: val, isSet: true}
}

func (v NullableValidationRuleExpressionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationRuleExpressionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
