/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PreheatIdentifier the model 'PreheatIdentifier'
type PreheatIdentifier string

// List of PreheatIdentifier
const (
	PREHEATIDENTIFIER_UID  PreheatIdentifier = "UID"
	PREHEATIDENTIFIER_CODE PreheatIdentifier = "CODE"
)

// All allowed values of PreheatIdentifier enum
var AllowedPreheatIdentifierEnumValues = []PreheatIdentifier{
	"UID",
	"CODE",
}

func (v *PreheatIdentifier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PreheatIdentifier(value)
	for _, existing := range AllowedPreheatIdentifierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PreheatIdentifier", value)
}

// NewPreheatIdentifierFromValue returns a pointer to a valid PreheatIdentifier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPreheatIdentifierFromValue(v string) (*PreheatIdentifier, error) {
	ev := PreheatIdentifier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PreheatIdentifier: valid values are %v", v, AllowedPreheatIdentifierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PreheatIdentifier) IsValid() bool {
	for _, existing := range AllowedPreheatIdentifierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PreheatIdentifier value
func (v PreheatIdentifier) Ptr() *PreheatIdentifier {
	return &v
}

type NullablePreheatIdentifier struct {
	value *PreheatIdentifier
	isSet bool
}

func (v NullablePreheatIdentifier) Get() *PreheatIdentifier {
	return v.value
}

func (v *NullablePreheatIdentifier) Set(val *PreheatIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullablePreheatIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullablePreheatIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreheatIdentifier(val *PreheatIdentifier) *NullablePreheatIdentifier {
	return &NullablePreheatIdentifier{value: val, isSet: true}
}

func (v NullablePreheatIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreheatIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
