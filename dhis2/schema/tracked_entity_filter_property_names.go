/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TrackedEntityFilterPropertyNames the model 'TrackedEntityFilterPropertyNames'
type TrackedEntityFilterPropertyNames string

// List of TrackedEntityFilterPropertyNames
const (
	TRACKEDENTITYFILTERPROPERTYNAMES_ACCESS                    TrackedEntityFilterPropertyNames = "access"
	TRACKEDENTITYFILTERPROPERTYNAMES_ATTRIBUTE_VALUES          TrackedEntityFilterPropertyNames = "attributeValues"
	TRACKEDENTITYFILTERPROPERTYNAMES_CODE                      TrackedEntityFilterPropertyNames = "code"
	TRACKEDENTITYFILTERPROPERTYNAMES_CREATED                   TrackedEntityFilterPropertyNames = "created"
	TRACKEDENTITYFILTERPROPERTYNAMES_CREATED_BY                TrackedEntityFilterPropertyNames = "createdBy"
	TRACKEDENTITYFILTERPROPERTYNAMES_DESCRIPTION               TrackedEntityFilterPropertyNames = "description"
	TRACKEDENTITYFILTERPROPERTYNAMES_DISPLAY_DESCRIPTION       TrackedEntityFilterPropertyNames = "displayDescription"
	TRACKEDENTITYFILTERPROPERTYNAMES_DISPLAY_NAME              TrackedEntityFilterPropertyNames = "displayName"
	TRACKEDENTITYFILTERPROPERTYNAMES_ENROLLMENT_CREATED_PERIOD TrackedEntityFilterPropertyNames = "enrollmentCreatedPeriod"
	TRACKEDENTITYFILTERPROPERTYNAMES_ENROLLMENT_STATUS         TrackedEntityFilterPropertyNames = "enrollmentStatus"
	TRACKEDENTITYFILTERPROPERTYNAMES_ENTITY_QUERY_CRITERIA     TrackedEntityFilterPropertyNames = "entityQueryCriteria"
	TRACKEDENTITYFILTERPROPERTYNAMES_EVENT_FILTERS             TrackedEntityFilterPropertyNames = "eventFilters"
	TRACKEDENTITYFILTERPROPERTYNAMES_FAVORITE                  TrackedEntityFilterPropertyNames = "favorite"
	TRACKEDENTITYFILTERPROPERTYNAMES_FAVORITES                 TrackedEntityFilterPropertyNames = "favorites"
	TRACKEDENTITYFILTERPROPERTYNAMES_FOLLOWUP                  TrackedEntityFilterPropertyNames = "followup"
	TRACKEDENTITYFILTERPROPERTYNAMES_HREF                      TrackedEntityFilterPropertyNames = "href"
	TRACKEDENTITYFILTERPROPERTYNAMES_ID                        TrackedEntityFilterPropertyNames = "id"
	TRACKEDENTITYFILTERPROPERTYNAMES_LAST_UPDATED              TrackedEntityFilterPropertyNames = "lastUpdated"
	TRACKEDENTITYFILTERPROPERTYNAMES_LAST_UPDATED_BY           TrackedEntityFilterPropertyNames = "lastUpdatedBy"
	TRACKEDENTITYFILTERPROPERTYNAMES_NAME                      TrackedEntityFilterPropertyNames = "name"
	TRACKEDENTITYFILTERPROPERTYNAMES_PROGRAM                   TrackedEntityFilterPropertyNames = "program"
	TRACKEDENTITYFILTERPROPERTYNAMES_SHARING                   TrackedEntityFilterPropertyNames = "sharing"
	TRACKEDENTITYFILTERPROPERTYNAMES_SORT_ORDER                TrackedEntityFilterPropertyNames = "sortOrder"
	TRACKEDENTITYFILTERPROPERTYNAMES_STYLE                     TrackedEntityFilterPropertyNames = "style"
	TRACKEDENTITYFILTERPROPERTYNAMES_TRANSLATIONS              TrackedEntityFilterPropertyNames = "translations"
)

// All allowed values of TrackedEntityFilterPropertyNames enum
var AllowedTrackedEntityFilterPropertyNamesEnumValues = []TrackedEntityFilterPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayDescription",
	"displayName",
	"enrollmentCreatedPeriod",
	"enrollmentStatus",
	"entityQueryCriteria",
	"eventFilters",
	"favorite",
	"favorites",
	"followup",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"program",
	"sharing",
	"sortOrder",
	"style",
	"translations",
}

func (v *TrackedEntityFilterPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackedEntityFilterPropertyNames(value)
	for _, existing := range AllowedTrackedEntityFilterPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackedEntityFilterPropertyNames", value)
}

// NewTrackedEntityFilterPropertyNamesFromValue returns a pointer to a valid TrackedEntityFilterPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackedEntityFilterPropertyNamesFromValue(v string) (*TrackedEntityFilterPropertyNames, error) {
	ev := TrackedEntityFilterPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackedEntityFilterPropertyNames: valid values are %v", v, AllowedTrackedEntityFilterPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackedEntityFilterPropertyNames) IsValid() bool {
	for _, existing := range AllowedTrackedEntityFilterPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackedEntityFilterPropertyNames value
func (v TrackedEntityFilterPropertyNames) Ptr() *TrackedEntityFilterPropertyNames {
	return &v
}

type NullableTrackedEntityFilterPropertyNames struct {
	value *TrackedEntityFilterPropertyNames
	isSet bool
}

func (v NullableTrackedEntityFilterPropertyNames) Get() *TrackedEntityFilterPropertyNames {
	return v.value
}

func (v *NullableTrackedEntityFilterPropertyNames) Set(val *TrackedEntityFilterPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackedEntityFilterPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackedEntityFilterPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackedEntityFilterPropertyNames(val *TrackedEntityFilterPropertyNames) *NullableTrackedEntityFilterPropertyNames {
	return &NullableTrackedEntityFilterPropertyNames{value: val, isSet: true}
}

func (v NullableTrackedEntityFilterPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackedEntityFilterPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
