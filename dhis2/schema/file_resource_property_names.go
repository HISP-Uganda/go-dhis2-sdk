/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// FileResourcePropertyNames the model 'FileResourcePropertyNames'
type FileResourcePropertyNames string

// List of FileResourcePropertyNames
const (
	FILERESOURCEPROPERTYNAMES_ACCESS                     FileResourcePropertyNames = "access"
	FILERESOURCEPROPERTYNAMES_ATTRIBUTE_VALUES           FileResourcePropertyNames = "attributeValues"
	FILERESOURCEPROPERTYNAMES_CODE                       FileResourcePropertyNames = "code"
	FILERESOURCEPROPERTYNAMES_CONTENT_LENGTH             FileResourcePropertyNames = "contentLength"
	FILERESOURCEPROPERTYNAMES_CONTENT_MD5                FileResourcePropertyNames = "contentMd5"
	FILERESOURCEPROPERTYNAMES_CONTENT_TYPE               FileResourcePropertyNames = "contentType"
	FILERESOURCEPROPERTYNAMES_CREATED                    FileResourcePropertyNames = "created"
	FILERESOURCEPROPERTYNAMES_CREATED_BY                 FileResourcePropertyNames = "createdBy"
	FILERESOURCEPROPERTYNAMES_DISPLAY_NAME               FileResourcePropertyNames = "displayName"
	FILERESOURCEPROPERTYNAMES_DOMAIN                     FileResourcePropertyNames = "domain"
	FILERESOURCEPROPERTYNAMES_FAVORITE                   FileResourcePropertyNames = "favorite"
	FILERESOURCEPROPERTYNAMES_FAVORITES                  FileResourcePropertyNames = "favorites"
	FILERESOURCEPROPERTYNAMES_HAS_MULTIPLE_STORAGE_FILES FileResourcePropertyNames = "hasMultipleStorageFiles"
	FILERESOURCEPROPERTYNAMES_HREF                       FileResourcePropertyNames = "href"
	FILERESOURCEPROPERTYNAMES_ID                         FileResourcePropertyNames = "id"
	FILERESOURCEPROPERTYNAMES_LAST_UPDATED               FileResourcePropertyNames = "lastUpdated"
	FILERESOURCEPROPERTYNAMES_LAST_UPDATED_BY            FileResourcePropertyNames = "lastUpdatedBy"
	FILERESOURCEPROPERTYNAMES_NAME                       FileResourcePropertyNames = "name"
	FILERESOURCEPROPERTYNAMES_SHARING                    FileResourcePropertyNames = "sharing"
	FILERESOURCEPROPERTYNAMES_STORAGE_STATUS             FileResourcePropertyNames = "storageStatus"
	FILERESOURCEPROPERTYNAMES_TRANSLATIONS               FileResourcePropertyNames = "translations"
)

// All allowed values of FileResourcePropertyNames enum
var AllowedFileResourcePropertyNamesEnumValues = []FileResourcePropertyNames{
	"access",
	"attributeValues",
	"code",
	"contentLength",
	"contentMd5",
	"contentType",
	"created",
	"createdBy",
	"displayName",
	"domain",
	"favorite",
	"favorites",
	"hasMultipleStorageFiles",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"sharing",
	"storageStatus",
	"translations",
}

func (v *FileResourcePropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileResourcePropertyNames(value)
	for _, existing := range AllowedFileResourcePropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileResourcePropertyNames", value)
}

// NewFileResourcePropertyNamesFromValue returns a pointer to a valid FileResourcePropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileResourcePropertyNamesFromValue(v string) (*FileResourcePropertyNames, error) {
	ev := FileResourcePropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileResourcePropertyNames: valid values are %v", v, AllowedFileResourcePropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileResourcePropertyNames) IsValid() bool {
	for _, existing := range AllowedFileResourcePropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileResourcePropertyNames value
func (v FileResourcePropertyNames) Ptr() *FileResourcePropertyNames {
	return &v
}

type NullableFileResourcePropertyNames struct {
	value *FileResourcePropertyNames
	isSet bool
}

func (v NullableFileResourcePropertyNames) Get() *FileResourcePropertyNames {
	return v.value
}

func (v *NullableFileResourcePropertyNames) Set(val *FileResourcePropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableFileResourcePropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableFileResourcePropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileResourcePropertyNames(val *FileResourcePropertyNames) *NullableFileResourcePropertyNames {
	return &NullableFileResourcePropertyNames{value: val, isSet: true}
}

func (v NullableFileResourcePropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileResourcePropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
