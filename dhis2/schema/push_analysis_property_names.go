/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// PushAnalysisPropertyNames the model 'PushAnalysisPropertyNames'
type PushAnalysisPropertyNames string

// List of PushAnalysisPropertyNames
const (
	PUSHANALYSISPROPERTYNAMES_ACCESS                PushAnalysisPropertyNames = "access"
	PUSHANALYSISPROPERTYNAMES_ATTRIBUTE_VALUES      PushAnalysisPropertyNames = "attributeValues"
	PUSHANALYSISPROPERTYNAMES_CODE                  PushAnalysisPropertyNames = "code"
	PUSHANALYSISPROPERTYNAMES_CREATED               PushAnalysisPropertyNames = "created"
	PUSHANALYSISPROPERTYNAMES_CREATED_BY            PushAnalysisPropertyNames = "createdBy"
	PUSHANALYSISPROPERTYNAMES_DASHBOARD             PushAnalysisPropertyNames = "dashboard"
	PUSHANALYSISPROPERTYNAMES_DISPLAY_NAME          PushAnalysisPropertyNames = "displayName"
	PUSHANALYSISPROPERTYNAMES_FAVORITE              PushAnalysisPropertyNames = "favorite"
	PUSHANALYSISPROPERTYNAMES_FAVORITES             PushAnalysisPropertyNames = "favorites"
	PUSHANALYSISPROPERTYNAMES_HREF                  PushAnalysisPropertyNames = "href"
	PUSHANALYSISPROPERTYNAMES_ID                    PushAnalysisPropertyNames = "id"
	PUSHANALYSISPROPERTYNAMES_LAST_UPDATED          PushAnalysisPropertyNames = "lastUpdated"
	PUSHANALYSISPROPERTYNAMES_LAST_UPDATED_BY       PushAnalysisPropertyNames = "lastUpdatedBy"
	PUSHANALYSISPROPERTYNAMES_MESSAGE               PushAnalysisPropertyNames = "message"
	PUSHANALYSISPROPERTYNAMES_NAME                  PushAnalysisPropertyNames = "name"
	PUSHANALYSISPROPERTYNAMES_RECIPIENT_USER_GROUPS PushAnalysisPropertyNames = "recipientUserGroups"
	PUSHANALYSISPROPERTYNAMES_SHARING               PushAnalysisPropertyNames = "sharing"
	PUSHANALYSISPROPERTYNAMES_TITLE                 PushAnalysisPropertyNames = "title"
	PUSHANALYSISPROPERTYNAMES_TRANSLATIONS          PushAnalysisPropertyNames = "translations"
)

// All allowed values of PushAnalysisPropertyNames enum
var AllowedPushAnalysisPropertyNamesEnumValues = []PushAnalysisPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"dashboard",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"message",
	"name",
	"recipientUserGroups",
	"sharing",
	"title",
	"translations",
}

func (v *PushAnalysisPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PushAnalysisPropertyNames(value)
	for _, existing := range AllowedPushAnalysisPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PushAnalysisPropertyNames", value)
}

// NewPushAnalysisPropertyNamesFromValue returns a pointer to a valid PushAnalysisPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPushAnalysisPropertyNamesFromValue(v string) (*PushAnalysisPropertyNames, error) {
	ev := PushAnalysisPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PushAnalysisPropertyNames: valid values are %v", v, AllowedPushAnalysisPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PushAnalysisPropertyNames) IsValid() bool {
	for _, existing := range AllowedPushAnalysisPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PushAnalysisPropertyNames value
func (v PushAnalysisPropertyNames) Ptr() *PushAnalysisPropertyNames {
	return &v
}

type NullablePushAnalysisPropertyNames struct {
	value *PushAnalysisPropertyNames
	isSet bool
}

func (v NullablePushAnalysisPropertyNames) Get() *PushAnalysisPropertyNames {
	return v.value
}

func (v *NullablePushAnalysisPropertyNames) Set(val *PushAnalysisPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullablePushAnalysisPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullablePushAnalysisPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePushAnalysisPropertyNames(val *PushAnalysisPropertyNames) *NullablePushAnalysisPropertyNames {
	return &NullablePushAnalysisPropertyNames{value: val, isSet: true}
}

func (v NullablePushAnalysisPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePushAnalysisPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
