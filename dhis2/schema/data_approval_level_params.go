/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DataApprovalLevelParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataApprovalLevelParams{}

// DataApprovalLevelParams struct for DataApprovalLevelParams
type DataApprovalLevelParams struct {
	AttributeValues        []AttributeValueParams                `json:"attributeValues,omitempty"`
	CategoryOptionGroupSet *CategoryOptionGroupSetParams         `json:"categoryOptionGroupSet,omitempty"`
	Code                   *string                               `json:"code,omitempty"`
	Created                *time.Time                            `json:"created,omitempty"`
	CreatedBy              *AggregateDataExchangeParamsCreatedBy `json:"createdBy,omitempty"`
	DisplayName            *string                               `json:"displayName,omitempty"`
	Favorite               *bool                                 `json:"favorite,omitempty"`
	Favorites              []string                              `json:"favorites,omitempty"`
	Id                     *string                               `json:"id,omitempty"`
	LastUpdated            *time.Time                            `json:"lastUpdated,omitempty"`
	LastUpdatedBy          *AggregateDataExchangeParamsCreatedBy `json:"lastUpdatedBy,omitempty"`
	Level                  int32                                 `json:"level"`
	Name                   *string                               `json:"name,omitempty"`
	OrgUnitLevel           int32                                 `json:"orgUnitLevel"`
	OrgUnitLevelName       *string                               `json:"orgUnitLevelName,omitempty"`
	Sharing                *Sharing                              `json:"sharing,omitempty"`
	Translations           []Translation                         `json:"translations,omitempty"`
}

type _DataApprovalLevelParams DataApprovalLevelParams

// NewDataApprovalLevelParams instantiates a new DataApprovalLevelParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataApprovalLevelParams(level int32, orgUnitLevel int32) *DataApprovalLevelParams {
	this := DataApprovalLevelParams{}
	this.Level = level
	this.OrgUnitLevel = orgUnitLevel
	return &this
}

// NewDataApprovalLevelParamsWithDefaults instantiates a new DataApprovalLevelParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataApprovalLevelParamsWithDefaults() *DataApprovalLevelParams {
	this := DataApprovalLevelParams{}
	return &this
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *DataApprovalLevelParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCategoryOptionGroupSet returns the CategoryOptionGroupSet field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetCategoryOptionGroupSet() CategoryOptionGroupSetParams {
	if o == nil || IsNil(o.CategoryOptionGroupSet) {
		var ret CategoryOptionGroupSetParams
		return ret
	}
	return *o.CategoryOptionGroupSet
}

// GetCategoryOptionGroupSetOk returns a tuple with the CategoryOptionGroupSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetCategoryOptionGroupSetOk() (*CategoryOptionGroupSetParams, bool) {
	if o == nil || IsNil(o.CategoryOptionGroupSet) {
		return nil, false
	}
	return o.CategoryOptionGroupSet, true
}

// HasCategoryOptionGroupSet returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasCategoryOptionGroupSet() bool {
	if o != nil && !IsNil(o.CategoryOptionGroupSet) {
		return true
	}

	return false
}

// SetCategoryOptionGroupSet gets a reference to the given CategoryOptionGroupSetParams and assigns it to the CategoryOptionGroupSet field.
func (o *DataApprovalLevelParams) SetCategoryOptionGroupSet(v CategoryOptionGroupSetParams) {
	o.CategoryOptionGroupSet = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *DataApprovalLevelParams) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *DataApprovalLevelParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *DataApprovalLevelParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DataApprovalLevelParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *DataApprovalLevelParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *DataApprovalLevelParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataApprovalLevelParams) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *DataApprovalLevelParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *DataApprovalLevelParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLevel returns the Level field value
func (o *DataApprovalLevelParams) GetLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *DataApprovalLevelParams) SetLevel(v int32) {
	o.Level = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataApprovalLevelParams) SetName(v string) {
	o.Name = &v
}

// GetOrgUnitLevel returns the OrgUnitLevel field value
func (o *DataApprovalLevelParams) GetOrgUnitLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OrgUnitLevel
}

// GetOrgUnitLevelOk returns a tuple with the OrgUnitLevel field value
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetOrgUnitLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgUnitLevel, true
}

// SetOrgUnitLevel sets field value
func (o *DataApprovalLevelParams) SetOrgUnitLevel(v int32) {
	o.OrgUnitLevel = v
}

// GetOrgUnitLevelName returns the OrgUnitLevelName field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetOrgUnitLevelName() string {
	if o == nil || IsNil(o.OrgUnitLevelName) {
		var ret string
		return ret
	}
	return *o.OrgUnitLevelName
}

// GetOrgUnitLevelNameOk returns a tuple with the OrgUnitLevelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetOrgUnitLevelNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnitLevelName) {
		return nil, false
	}
	return o.OrgUnitLevelName, true
}

// HasOrgUnitLevelName returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasOrgUnitLevelName() bool {
	if o != nil && !IsNil(o.OrgUnitLevelName) {
		return true
	}

	return false
}

// SetOrgUnitLevelName gets a reference to the given string and assigns it to the OrgUnitLevelName field.
func (o *DataApprovalLevelParams) SetOrgUnitLevelName(v string) {
	o.OrgUnitLevelName = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *DataApprovalLevelParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *DataApprovalLevelParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalLevelParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *DataApprovalLevelParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *DataApprovalLevelParams) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o DataApprovalLevelParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataApprovalLevelParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.CategoryOptionGroupSet) {
		toSerialize["categoryOptionGroupSet"] = o.CategoryOptionGroupSet
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	toSerialize["level"] = o.Level
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["orgUnitLevel"] = o.OrgUnitLevel
	if !IsNil(o.OrgUnitLevelName) {
		toSerialize["orgUnitLevelName"] = o.OrgUnitLevelName
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

func (o *DataApprovalLevelParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"level",
		"orgUnitLevel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataApprovalLevelParams := _DataApprovalLevelParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataApprovalLevelParams)

	if err != nil {
		return err
	}

	*o = DataApprovalLevelParams(varDataApprovalLevelParams)

	return err
}

type NullableDataApprovalLevelParams struct {
	value *DataApprovalLevelParams
	isSet bool
}

func (v NullableDataApprovalLevelParams) Get() *DataApprovalLevelParams {
	return v.value
}

func (v *NullableDataApprovalLevelParams) Set(val *DataApprovalLevelParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDataApprovalLevelParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDataApprovalLevelParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataApprovalLevelParams(val *DataApprovalLevelParams) *NullableDataApprovalLevelParams {
	return &NullableDataApprovalLevelParams{value: val, isSet: true}
}

func (v NullableDataApprovalLevelParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataApprovalLevelParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
