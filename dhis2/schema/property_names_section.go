/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesSection the model 'PropertyNamesSection'
type PropertyNamesSection string

// List of PropertyNames_Section
const (
	PROPERTYNAMESSECTION_ACCESS                          PropertyNamesSection = "access"
	PROPERTYNAMESSECTION_ATTRIBUTE_VALUES                PropertyNamesSection = "attributeValues"
	PROPERTYNAMESSECTION_CATEGORY_COMBOS                 PropertyNamesSection = "categoryCombos"
	PROPERTYNAMESSECTION_CODE                            PropertyNamesSection = "code"
	PROPERTYNAMESSECTION_CREATED                         PropertyNamesSection = "created"
	PROPERTYNAMESSECTION_CREATED_BY                      PropertyNamesSection = "createdBy"
	PROPERTYNAMESSECTION_DATA_ELEMENTS                   PropertyNamesSection = "dataElements"
	PROPERTYNAMESSECTION_DATA_SET                        PropertyNamesSection = "dataSet"
	PROPERTYNAMESSECTION_DESCRIPTION                     PropertyNamesSection = "description"
	PROPERTYNAMESSECTION_DISABLE_DATA_ELEMENT_AUTO_GROUP PropertyNamesSection = "disableDataElementAutoGroup"
	PROPERTYNAMESSECTION_DISPLAY_NAME                    PropertyNamesSection = "displayName"
	PROPERTYNAMESSECTION_EXTERNAL_ACCESS                 PropertyNamesSection = "externalAccess"
	PROPERTYNAMESSECTION_FAVORITE                        PropertyNamesSection = "favorite"
	PROPERTYNAMESSECTION_FAVORITES                       PropertyNamesSection = "favorites"
	PROPERTYNAMESSECTION_GREYED_FIELDS                   PropertyNamesSection = "greyedFields"
	PROPERTYNAMESSECTION_HREF                            PropertyNamesSection = "href"
	PROPERTYNAMESSECTION_ID                              PropertyNamesSection = "id"
	PROPERTYNAMESSECTION_INDICATORS                      PropertyNamesSection = "indicators"
	PROPERTYNAMESSECTION_LAST_UPDATED                    PropertyNamesSection = "lastUpdated"
	PROPERTYNAMESSECTION_LAST_UPDATED_BY                 PropertyNamesSection = "lastUpdatedBy"
	PROPERTYNAMESSECTION_NAME                            PropertyNamesSection = "name"
	PROPERTYNAMESSECTION_PUBLIC_ACCESS                   PropertyNamesSection = "publicAccess"
	PROPERTYNAMESSECTION_SHARING                         PropertyNamesSection = "sharing"
	PROPERTYNAMESSECTION_SHOW_COLUMN_TOTALS              PropertyNamesSection = "showColumnTotals"
	PROPERTYNAMESSECTION_SHOW_ROW_TOTALS                 PropertyNamesSection = "showRowTotals"
	PROPERTYNAMESSECTION_SORT_ORDER                      PropertyNamesSection = "sortOrder"
	PROPERTYNAMESSECTION_TRANSLATIONS                    PropertyNamesSection = "translations"
	PROPERTYNAMESSECTION_USER                            PropertyNamesSection = "user"
	PROPERTYNAMESSECTION_USER_ACCESSES                   PropertyNamesSection = "userAccesses"
	PROPERTYNAMESSECTION_USER_GROUP_ACCESSES             PropertyNamesSection = "userGroupAccesses"
)

// All allowed values of PropertyNamesSection enum
var AllowedPropertyNamesSectionEnumValues = []PropertyNamesSection{
	"access",
	"attributeValues",
	"categoryCombos",
	"code",
	"created",
	"createdBy",
	"dataElements",
	"dataSet",
	"description",
	"disableDataElementAutoGroup",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"greyedFields",
	"href",
	"id",
	"indicators",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"showColumnTotals",
	"showRowTotals",
	"sortOrder",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesSection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesSection(value)
	for _, existing := range AllowedPropertyNamesSectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesSection", value)
}

// NewPropertyNamesSectionFromValue returns a pointer to a valid PropertyNamesSection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesSectionFromValue(v string) (*PropertyNamesSection, error) {
	ev := PropertyNamesSection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesSection: valid values are %v", v, AllowedPropertyNamesSectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesSection) IsValid() bool {
	for _, existing := range AllowedPropertyNamesSectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Section value
func (v PropertyNamesSection) Ptr() *PropertyNamesSection {
	return &v
}

type NullablePropertyNamesSection struct {
	value *PropertyNamesSection
	isSet bool
}

func (v NullablePropertyNamesSection) Get() *PropertyNamesSection {
	return v.value
}

func (v *NullablePropertyNamesSection) Set(val *PropertyNamesSection) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesSection) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesSection(val *PropertyNamesSection) *NullablePropertyNamesSection {
	return &NullablePropertyNamesSection{value: val, isSet: true}
}

func (v NullablePropertyNamesSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
