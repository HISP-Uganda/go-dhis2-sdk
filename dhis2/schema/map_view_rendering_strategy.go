/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// MapViewRenderingStrategy the model 'MapViewRenderingStrategy'
type MapViewRenderingStrategy string

// List of MapViewRenderingStrategy
const (
	MAPVIEWRENDERINGSTRATEGY_SINGLE          MapViewRenderingStrategy = "SINGLE"
	MAPVIEWRENDERINGSTRATEGY_SPLIT_BY_PERIOD MapViewRenderingStrategy = "SPLIT_BY_PERIOD"
	MAPVIEWRENDERINGSTRATEGY_TIMELINE        MapViewRenderingStrategy = "TIMELINE"
)

// All allowed values of MapViewRenderingStrategy enum
var AllowedMapViewRenderingStrategyEnumValues = []MapViewRenderingStrategy{
	"SINGLE",
	"SPLIT_BY_PERIOD",
	"TIMELINE",
}

func (v *MapViewRenderingStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MapViewRenderingStrategy(value)
	for _, existing := range AllowedMapViewRenderingStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MapViewRenderingStrategy", value)
}

// NewMapViewRenderingStrategyFromValue returns a pointer to a valid MapViewRenderingStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMapViewRenderingStrategyFromValue(v string) (*MapViewRenderingStrategy, error) {
	ev := MapViewRenderingStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MapViewRenderingStrategy: valid values are %v", v, AllowedMapViewRenderingStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MapViewRenderingStrategy) IsValid() bool {
	for _, existing := range AllowedMapViewRenderingStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MapViewRenderingStrategy value
func (v MapViewRenderingStrategy) Ptr() *MapViewRenderingStrategy {
	return &v
}

type NullableMapViewRenderingStrategy struct {
	value *MapViewRenderingStrategy
	isSet bool
}

func (v NullableMapViewRenderingStrategy) Get() *MapViewRenderingStrategy {
	return v.value
}

func (v *NullableMapViewRenderingStrategy) Set(val *MapViewRenderingStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableMapViewRenderingStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableMapViewRenderingStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapViewRenderingStrategy(val *MapViewRenderingStrategy) *NullableMapViewRenderingStrategy {
	return &NullableMapViewRenderingStrategy{value: val, isSet: true}
}

func (v NullableMapViewRenderingStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapViewRenderingStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
