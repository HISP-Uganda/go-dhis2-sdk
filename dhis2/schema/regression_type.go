/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// RegressionType the model 'RegressionType'
type RegressionType string

// List of RegressionType
const (
	REGRESSIONTYPE_NONE       RegressionType = "NONE"
	REGRESSIONTYPE_LINEAR     RegressionType = "LINEAR"
	REGRESSIONTYPE_POLYNOMIAL RegressionType = "POLYNOMIAL"
	REGRESSIONTYPE_LOESS      RegressionType = "LOESS"
)

// All allowed values of RegressionType enum
var AllowedRegressionTypeEnumValues = []RegressionType{
	"NONE",
	"LINEAR",
	"POLYNOMIAL",
	"LOESS",
}

func (v *RegressionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegressionType(value)
	for _, existing := range AllowedRegressionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegressionType", value)
}

// NewRegressionTypeFromValue returns a pointer to a valid RegressionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegressionTypeFromValue(v string) (*RegressionType, error) {
	ev := RegressionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegressionType: valid values are %v", v, AllowedRegressionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegressionType) IsValid() bool {
	for _, existing := range AllowedRegressionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegressionType value
func (v RegressionType) Ptr() *RegressionType {
	return &v
}

type NullableRegressionType struct {
	value *RegressionType
	isSet bool
}

func (v NullableRegressionType) Get() *RegressionType {
	return v.value
}

func (v *NullableRegressionType) Set(val *RegressionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRegressionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRegressionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegressionType(val *RegressionType) *NullableRegressionType {
	return &NullableRegressionType{value: val, isSet: true}
}

func (v NullableRegressionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegressionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
