/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// FileResourceStorageStatus the model 'FileResourceStorageStatus'
type FileResourceStorageStatus string

// List of FileResourceStorageStatus
const (
	FILERESOURCESTORAGESTATUS_NONE    FileResourceStorageStatus = "NONE"
	FILERESOURCESTORAGESTATUS_PENDING FileResourceStorageStatus = "PENDING"
	FILERESOURCESTORAGESTATUS_STORED  FileResourceStorageStatus = "STORED"
)

// All allowed values of FileResourceStorageStatus enum
var AllowedFileResourceStorageStatusEnumValues = []FileResourceStorageStatus{
	"NONE",
	"PENDING",
	"STORED",
}

func (v *FileResourceStorageStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileResourceStorageStatus(value)
	for _, existing := range AllowedFileResourceStorageStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileResourceStorageStatus", value)
}

// NewFileResourceStorageStatusFromValue returns a pointer to a valid FileResourceStorageStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileResourceStorageStatusFromValue(v string) (*FileResourceStorageStatus, error) {
	ev := FileResourceStorageStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileResourceStorageStatus: valid values are %v", v, AllowedFileResourceStorageStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileResourceStorageStatus) IsValid() bool {
	for _, existing := range AllowedFileResourceStorageStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileResourceStorageStatus value
func (v FileResourceStorageStatus) Ptr() *FileResourceStorageStatus {
	return &v
}

type NullableFileResourceStorageStatus struct {
	value *FileResourceStorageStatus
	isSet bool
}

func (v NullableFileResourceStorageStatus) Get() *FileResourceStorageStatus {
	return v.value
}

func (v *NullableFileResourceStorageStatus) Set(val *FileResourceStorageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFileResourceStorageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFileResourceStorageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileResourceStorageStatus(val *FileResourceStorageStatus) *NullableFileResourceStorageStatus {
	return &NullableFileResourceStorageStatus{value: val, isSet: true}
}

func (v NullableFileResourceStorageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileResourceStorageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
