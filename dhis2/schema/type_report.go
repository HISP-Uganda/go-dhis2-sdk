/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TypeReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypeReport{}

// TypeReport struct for TypeReport
type TypeReport struct {
	Klass         *string        `json:"klass,omitempty"`
	ObjectReports []ObjectReport `json:"objectReports"`
	Stats         *Stats         `json:"stats,omitempty"`
}

type _TypeReport TypeReport

// NewTypeReport instantiates a new TypeReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypeReport(objectReports []ObjectReport) *TypeReport {
	this := TypeReport{}
	this.ObjectReports = objectReports
	return &this
}

// NewTypeReportWithDefaults instantiates a new TypeReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypeReportWithDefaults() *TypeReport {
	this := TypeReport{}
	return &this
}

// GetKlass returns the Klass field value if set, zero value otherwise.
func (o *TypeReport) GetKlass() string {
	if o == nil || IsNil(o.Klass) {
		var ret string
		return ret
	}
	return *o.Klass
}

// GetKlassOk returns a tuple with the Klass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeReport) GetKlassOk() (*string, bool) {
	if o == nil || IsNil(o.Klass) {
		return nil, false
	}
	return o.Klass, true
}

// HasKlass returns a boolean if a field has been set.
func (o *TypeReport) HasKlass() bool {
	if o != nil && !IsNil(o.Klass) {
		return true
	}

	return false
}

// SetKlass gets a reference to the given string and assigns it to the Klass field.
func (o *TypeReport) SetKlass(v string) {
	o.Klass = &v
}

// GetObjectReports returns the ObjectReports field value
func (o *TypeReport) GetObjectReports() []ObjectReport {
	if o == nil {
		var ret []ObjectReport
		return ret
	}

	return o.ObjectReports
}

// GetObjectReportsOk returns a tuple with the ObjectReports field value
// and a boolean to check if the value has been set.
func (o *TypeReport) GetObjectReportsOk() ([]ObjectReport, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectReports, true
}

// SetObjectReports sets field value
func (o *TypeReport) SetObjectReports(v []ObjectReport) {
	o.ObjectReports = v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *TypeReport) GetStats() Stats {
	if o == nil || IsNil(o.Stats) {
		var ret Stats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeReport) GetStatsOk() (*Stats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *TypeReport) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given Stats and assigns it to the Stats field.
func (o *TypeReport) SetStats(v Stats) {
	o.Stats = &v
}

func (o TypeReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypeReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Klass) {
		toSerialize["klass"] = o.Klass
	}
	toSerialize["objectReports"] = o.ObjectReports
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	return toSerialize, nil
}

func (o *TypeReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectReports",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTypeReport := _TypeReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTypeReport)

	if err != nil {
		return err
	}

	*o = TypeReport(varTypeReport)

	return err
}

type NullableTypeReport struct {
	value *TypeReport
	isSet bool
}

func (v NullableTypeReport) Get() *TypeReport {
	return v.value
}

func (v *NullableTypeReport) Set(val *TypeReport) {
	v.value = val
	v.isSet = true
}

func (v NullableTypeReport) IsSet() bool {
	return v.isSet
}

func (v *NullableTypeReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypeReport(val *TypeReport) *NullableTypeReport {
	return &NullableTypeReport{value: val, isSet: true}
}

func (v NullableTypeReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypeReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
