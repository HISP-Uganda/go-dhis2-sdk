/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Series type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Series{}

// Series struct for Series
type Series struct {
	Axis          *int32            `json:"axis,omitempty"`
	DimensionItem *string           `json:"dimensionItem,omitempty"`
	Type          VisualizationType `json:"type"`
}

type _Series Series

// NewSeries instantiates a new Series object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeries(type_ VisualizationType) *Series {
	this := Series{}
	this.Type = type_
	return &this
}

// NewSeriesWithDefaults instantiates a new Series object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesWithDefaults() *Series {
	this := Series{}
	return &this
}

// GetAxis returns the Axis field value if set, zero value otherwise.
func (o *Series) GetAxis() int32 {
	if o == nil || IsNil(o.Axis) {
		var ret int32
		return ret
	}
	return *o.Axis
}

// GetAxisOk returns a tuple with the Axis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetAxisOk() (*int32, bool) {
	if o == nil || IsNil(o.Axis) {
		return nil, false
	}
	return o.Axis, true
}

// HasAxis returns a boolean if a field has been set.
func (o *Series) HasAxis() bool {
	if o != nil && !IsNil(o.Axis) {
		return true
	}

	return false
}

// SetAxis gets a reference to the given int32 and assigns it to the Axis field.
func (o *Series) SetAxis(v int32) {
	o.Axis = &v
}

// GetDimensionItem returns the DimensionItem field value if set, zero value otherwise.
func (o *Series) GetDimensionItem() string {
	if o == nil || IsNil(o.DimensionItem) {
		var ret string
		return ret
	}
	return *o.DimensionItem
}

// GetDimensionItemOk returns a tuple with the DimensionItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetDimensionItemOk() (*string, bool) {
	if o == nil || IsNil(o.DimensionItem) {
		return nil, false
	}
	return o.DimensionItem, true
}

// HasDimensionItem returns a boolean if a field has been set.
func (o *Series) HasDimensionItem() bool {
	if o != nil && !IsNil(o.DimensionItem) {
		return true
	}

	return false
}

// SetDimensionItem gets a reference to the given string and assigns it to the DimensionItem field.
func (o *Series) SetDimensionItem(v string) {
	o.DimensionItem = &v
}

// GetType returns the Type field value
func (o *Series) GetType() VisualizationType {
	if o == nil {
		var ret VisualizationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Series) GetTypeOk() (*VisualizationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Series) SetType(v VisualizationType) {
	o.Type = v
}

func (o Series) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Series) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Axis) {
		toSerialize["axis"] = o.Axis
	}
	if !IsNil(o.DimensionItem) {
		toSerialize["dimensionItem"] = o.DimensionItem
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *Series) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSeries := _Series{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSeries)

	if err != nil {
		return err
	}

	*o = Series(varSeries)

	return err
}

type NullableSeries struct {
	value *Series
	isSet bool
}

func (v NullableSeries) Get() *Series {
	return v.value
}

func (v *NullableSeries) Set(val *Series) {
	v.value = val
	v.isSet = true
}

func (v NullableSeries) IsSet() bool {
	return v.isSet
}

func (v *NullableSeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeries(val *Series) *NullableSeries {
	return &NullableSeries{value: val, isSet: true}
}

func (v NullableSeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
