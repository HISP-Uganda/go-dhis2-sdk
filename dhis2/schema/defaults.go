/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// Defaults the model 'Defaults'
type Defaults string

// List of Defaults
const (
	DEFAULTS_INCLUDE Defaults = "INCLUDE"
	DEFAULTS_EXCLUDE Defaults = "EXCLUDE"
)

// All allowed values of Defaults enum
var AllowedDefaultsEnumValues = []Defaults{
	"INCLUDE",
	"EXCLUDE",
}

func (v *Defaults) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Defaults(value)
	for _, existing := range AllowedDefaultsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Defaults", value)
}

// NewDefaultsFromValue returns a pointer to a valid Defaults
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDefaultsFromValue(v string) (*Defaults, error) {
	ev := Defaults(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Defaults: valid values are %v", v, AllowedDefaultsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Defaults) IsValid() bool {
	for _, existing := range AllowedDefaultsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Defaults value
func (v Defaults) Ptr() *Defaults {
	return &v
}

type NullableDefaults struct {
	value *Defaults
	isSet bool
}

func (v NullableDefaults) Get() *Defaults {
	return v.value
}

func (v *NullableDefaults) Set(val *Defaults) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaults) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaults(val *Defaults) *NullableDefaults {
	return &NullableDefaults{value: val, isSet: true}
}

func (v NullableDefaults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
