/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the DataSetElementParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSetElementParams{}

// DataSetElementParams struct for DataSetElementParams
type DataSetElementParams struct {
	CategoryCombo *CategoryComboParams `json:"categoryCombo,omitempty"`
	DataElement   *DataElementParams   `json:"dataElement,omitempty"`
	DataSet       *DataSetParams       `json:"dataSet,omitempty"`
}

// NewDataSetElementParams instantiates a new DataSetElementParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSetElementParams() *DataSetElementParams {
	this := DataSetElementParams{}
	return &this
}

// NewDataSetElementParamsWithDefaults instantiates a new DataSetElementParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSetElementParamsWithDefaults() *DataSetElementParams {
	this := DataSetElementParams{}
	return &this
}

// GetCategoryCombo returns the CategoryCombo field value if set, zero value otherwise.
func (o *DataSetElementParams) GetCategoryCombo() CategoryComboParams {
	if o == nil || IsNil(o.CategoryCombo) {
		var ret CategoryComboParams
		return ret
	}
	return *o.CategoryCombo
}

// GetCategoryComboOk returns a tuple with the CategoryCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetElementParams) GetCategoryComboOk() (*CategoryComboParams, bool) {
	if o == nil || IsNil(o.CategoryCombo) {
		return nil, false
	}
	return o.CategoryCombo, true
}

// HasCategoryCombo returns a boolean if a field has been set.
func (o *DataSetElementParams) HasCategoryCombo() bool {
	if o != nil && !IsNil(o.CategoryCombo) {
		return true
	}

	return false
}

// SetCategoryCombo gets a reference to the given CategoryComboParams and assigns it to the CategoryCombo field.
func (o *DataSetElementParams) SetCategoryCombo(v CategoryComboParams) {
	o.CategoryCombo = &v
}

// GetDataElement returns the DataElement field value if set, zero value otherwise.
func (o *DataSetElementParams) GetDataElement() DataElementParams {
	if o == nil || IsNil(o.DataElement) {
		var ret DataElementParams
		return ret
	}
	return *o.DataElement
}

// GetDataElementOk returns a tuple with the DataElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetElementParams) GetDataElementOk() (*DataElementParams, bool) {
	if o == nil || IsNil(o.DataElement) {
		return nil, false
	}
	return o.DataElement, true
}

// HasDataElement returns a boolean if a field has been set.
func (o *DataSetElementParams) HasDataElement() bool {
	if o != nil && !IsNil(o.DataElement) {
		return true
	}

	return false
}

// SetDataElement gets a reference to the given DataElementParams and assigns it to the DataElement field.
func (o *DataSetElementParams) SetDataElement(v DataElementParams) {
	o.DataElement = &v
}

// GetDataSet returns the DataSet field value if set, zero value otherwise.
func (o *DataSetElementParams) GetDataSet() DataSetParams {
	if o == nil || IsNil(o.DataSet) {
		var ret DataSetParams
		return ret
	}
	return *o.DataSet
}

// GetDataSetOk returns a tuple with the DataSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSetElementParams) GetDataSetOk() (*DataSetParams, bool) {
	if o == nil || IsNil(o.DataSet) {
		return nil, false
	}
	return o.DataSet, true
}

// HasDataSet returns a boolean if a field has been set.
func (o *DataSetElementParams) HasDataSet() bool {
	if o != nil && !IsNil(o.DataSet) {
		return true
	}

	return false
}

// SetDataSet gets a reference to the given DataSetParams and assigns it to the DataSet field.
func (o *DataSetElementParams) SetDataSet(v DataSetParams) {
	o.DataSet = &v
}

func (o DataSetElementParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSetElementParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryCombo) {
		toSerialize["categoryCombo"] = o.CategoryCombo
	}
	if !IsNil(o.DataElement) {
		toSerialize["dataElement"] = o.DataElement
	}
	if !IsNil(o.DataSet) {
		toSerialize["dataSet"] = o.DataSet
	}
	return toSerialize, nil
}

type NullableDataSetElementParams struct {
	value *DataSetElementParams
	isSet bool
}

func (v NullableDataSetElementParams) Get() *DataSetElementParams {
	return v.value
}

func (v *NullableDataSetElementParams) Set(val *DataSetElementParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSetElementParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSetElementParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSetElementParams(val *DataSetElementParams) *NullableDataSetElementParams {
	return &NullableDataSetElementParams{value: val, isSet: true}
}

func (v NullableDataSetElementParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSetElementParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
