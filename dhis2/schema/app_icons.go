/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the AppIcons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppIcons{}

// AppIcons struct for AppIcons
type AppIcons struct {
	Var128 *string `json:"128,omitempty"`
	Var16  *string `json:"16,omitempty"`
	Var48  *string `json:"48,omitempty"`
}

// NewAppIcons instantiates a new AppIcons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppIcons() *AppIcons {
	this := AppIcons{}
	return &this
}

// NewAppIconsWithDefaults instantiates a new AppIcons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppIconsWithDefaults() *AppIcons {
	this := AppIcons{}
	return &this
}

// GetVar128 returns the Var128 field value if set, zero value otherwise.
func (o *AppIcons) GetVar128() string {
	if o == nil || IsNil(o.Var128) {
		var ret string
		return ret
	}
	return *o.Var128
}

// GetVar128Ok returns a tuple with the Var128 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppIcons) GetVar128Ok() (*string, bool) {
	if o == nil || IsNil(o.Var128) {
		return nil, false
	}
	return o.Var128, true
}

// HasVar128 returns a boolean if a field has been set.
func (o *AppIcons) HasVar128() bool {
	if o != nil && !IsNil(o.Var128) {
		return true
	}

	return false
}

// SetVar128 gets a reference to the given string and assigns it to the Var128 field.
func (o *AppIcons) SetVar128(v string) {
	o.Var128 = &v
}

// GetVar16 returns the Var16 field value if set, zero value otherwise.
func (o *AppIcons) GetVar16() string {
	if o == nil || IsNil(o.Var16) {
		var ret string
		return ret
	}
	return *o.Var16
}

// GetVar16Ok returns a tuple with the Var16 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppIcons) GetVar16Ok() (*string, bool) {
	if o == nil || IsNil(o.Var16) {
		return nil, false
	}
	return o.Var16, true
}

// HasVar16 returns a boolean if a field has been set.
func (o *AppIcons) HasVar16() bool {
	if o != nil && !IsNil(o.Var16) {
		return true
	}

	return false
}

// SetVar16 gets a reference to the given string and assigns it to the Var16 field.
func (o *AppIcons) SetVar16(v string) {
	o.Var16 = &v
}

// GetVar48 returns the Var48 field value if set, zero value otherwise.
func (o *AppIcons) GetVar48() string {
	if o == nil || IsNil(o.Var48) {
		var ret string
		return ret
	}
	return *o.Var48
}

// GetVar48Ok returns a tuple with the Var48 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppIcons) GetVar48Ok() (*string, bool) {
	if o == nil || IsNil(o.Var48) {
		return nil, false
	}
	return o.Var48, true
}

// HasVar48 returns a boolean if a field has been set.
func (o *AppIcons) HasVar48() bool {
	if o != nil && !IsNil(o.Var48) {
		return true
	}

	return false
}

// SetVar48 gets a reference to the given string and assigns it to the Var48 field.
func (o *AppIcons) SetVar48(v string) {
	o.Var48 = &v
}

func (o AppIcons) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppIcons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Var128) {
		toSerialize["128"] = o.Var128
	}
	if !IsNil(o.Var16) {
		toSerialize["16"] = o.Var16
	}
	if !IsNil(o.Var48) {
		toSerialize["48"] = o.Var48
	}
	return toSerialize, nil
}

type NullableAppIcons struct {
	value *AppIcons
	isSet bool
}

func (v NullableAppIcons) Get() *AppIcons {
	return v.value
}

func (v *NullableAppIcons) Set(val *AppIcons) {
	v.value = val
	v.isSet = true
}

func (v NullableAppIcons) IsSet() bool {
	return v.isSet
}

func (v *NullableAppIcons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppIcons(val *AppIcons) *NullableAppIcons {
	return &NullableAppIcons{value: val, isSet: true}
}

func (v NullableAppIcons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppIcons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
