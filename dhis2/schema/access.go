/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the Access type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Access{}

// Access struct for Access
type Access struct {
	Data        *AccessData `json:"data,omitempty"`
	Delete      *bool       `json:"delete,omitempty"`
	Externalize *bool       `json:"externalize,omitempty"`
	Manage      *bool       `json:"manage,omitempty"`
	Read        *bool       `json:"read,omitempty"`
	Update      *bool       `json:"update,omitempty"`
	Write       *bool       `json:"write,omitempty"`
}

// NewAccess instantiates a new Access object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccess() *Access {
	this := Access{}
	return &this
}

// NewAccessWithDefaults instantiates a new Access object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessWithDefaults() *Access {
	this := Access{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Access) GetData() AccessData {
	if o == nil || IsNil(o.Data) {
		var ret AccessData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Access) GetDataOk() (*AccessData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Access) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given AccessData and assigns it to the Data field.
func (o *Access) SetData(v AccessData) {
	o.Data = &v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *Access) GetDelete() bool {
	if o == nil || IsNil(o.Delete) {
		var ret bool
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Access) GetDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *Access) HasDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given bool and assigns it to the Delete field.
func (o *Access) SetDelete(v bool) {
	o.Delete = &v
}

// GetExternalize returns the Externalize field value if set, zero value otherwise.
func (o *Access) GetExternalize() bool {
	if o == nil || IsNil(o.Externalize) {
		var ret bool
		return ret
	}
	return *o.Externalize
}

// GetExternalizeOk returns a tuple with the Externalize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Access) GetExternalizeOk() (*bool, bool) {
	if o == nil || IsNil(o.Externalize) {
		return nil, false
	}
	return o.Externalize, true
}

// HasExternalize returns a boolean if a field has been set.
func (o *Access) HasExternalize() bool {
	if o != nil && !IsNil(o.Externalize) {
		return true
	}

	return false
}

// SetExternalize gets a reference to the given bool and assigns it to the Externalize field.
func (o *Access) SetExternalize(v bool) {
	o.Externalize = &v
}

// GetManage returns the Manage field value if set, zero value otherwise.
func (o *Access) GetManage() bool {
	if o == nil || IsNil(o.Manage) {
		var ret bool
		return ret
	}
	return *o.Manage
}

// GetManageOk returns a tuple with the Manage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Access) GetManageOk() (*bool, bool) {
	if o == nil || IsNil(o.Manage) {
		return nil, false
	}
	return o.Manage, true
}

// HasManage returns a boolean if a field has been set.
func (o *Access) HasManage() bool {
	if o != nil && !IsNil(o.Manage) {
		return true
	}

	return false
}

// SetManage gets a reference to the given bool and assigns it to the Manage field.
func (o *Access) SetManage(v bool) {
	o.Manage = &v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *Access) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Access) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *Access) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *Access) SetRead(v bool) {
	o.Read = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *Access) GetUpdate() bool {
	if o == nil || IsNil(o.Update) {
		var ret bool
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Access) GetUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *Access) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given bool and assigns it to the Update field.
func (o *Access) SetUpdate(v bool) {
	o.Update = &v
}

// GetWrite returns the Write field value if set, zero value otherwise.
func (o *Access) GetWrite() bool {
	if o == nil || IsNil(o.Write) {
		var ret bool
		return ret
	}
	return *o.Write
}

// GetWriteOk returns a tuple with the Write field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Access) GetWriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Write) {
		return nil, false
	}
	return o.Write, true
}

// HasWrite returns a boolean if a field has been set.
func (o *Access) HasWrite() bool {
	if o != nil && !IsNil(o.Write) {
		return true
	}

	return false
}

// SetWrite gets a reference to the given bool and assigns it to the Write field.
func (o *Access) SetWrite(v bool) {
	o.Write = &v
}

func (o Access) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Access) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	if !IsNil(o.Externalize) {
		toSerialize["externalize"] = o.Externalize
	}
	if !IsNil(o.Manage) {
		toSerialize["manage"] = o.Manage
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Write) {
		toSerialize["write"] = o.Write
	}
	return toSerialize, nil
}

type NullableAccess struct {
	value *Access
	isSet bool
}

func (v NullableAccess) Get() *Access {
	return v.value
}

func (v *NullableAccess) Set(val *Access) {
	v.value = val
	v.isSet = true
}

func (v NullableAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccess(val *Access) *NullableAccess {
	return &NullableAccess{value: val, isSet: true}
}

func (v NullableAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
