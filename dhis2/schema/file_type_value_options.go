/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FileTypeValueOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileTypeValueOptions{}

// FileTypeValueOptions struct for FileTypeValueOptions
type FileTypeValueOptions struct {
	AllowedContentTypes []string `json:"allowedContentTypes,omitempty"`
	MaxFileSize         int64    `json:"maxFileSize"`
	Version             int64    `json:"version"`
}

type _FileTypeValueOptions FileTypeValueOptions

// NewFileTypeValueOptions instantiates a new FileTypeValueOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileTypeValueOptions(maxFileSize int64, version int64) *FileTypeValueOptions {
	this := FileTypeValueOptions{}
	this.MaxFileSize = maxFileSize
	this.Version = version
	return &this
}

// NewFileTypeValueOptionsWithDefaults instantiates a new FileTypeValueOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileTypeValueOptionsWithDefaults() *FileTypeValueOptions {
	this := FileTypeValueOptions{}
	return &this
}

// GetAllowedContentTypes returns the AllowedContentTypes field value if set, zero value otherwise.
func (o *FileTypeValueOptions) GetAllowedContentTypes() []string {
	if o == nil || IsNil(o.AllowedContentTypes) {
		var ret []string
		return ret
	}
	return o.AllowedContentTypes
}

// GetAllowedContentTypesOk returns a tuple with the AllowedContentTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileTypeValueOptions) GetAllowedContentTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedContentTypes) {
		return nil, false
	}
	return o.AllowedContentTypes, true
}

// HasAllowedContentTypes returns a boolean if a field has been set.
func (o *FileTypeValueOptions) HasAllowedContentTypes() bool {
	if o != nil && !IsNil(o.AllowedContentTypes) {
		return true
	}

	return false
}

// SetAllowedContentTypes gets a reference to the given []string and assigns it to the AllowedContentTypes field.
func (o *FileTypeValueOptions) SetAllowedContentTypes(v []string) {
	o.AllowedContentTypes = v
}

// GetMaxFileSize returns the MaxFileSize field value
func (o *FileTypeValueOptions) GetMaxFileSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxFileSize
}

// GetMaxFileSizeOk returns a tuple with the MaxFileSize field value
// and a boolean to check if the value has been set.
func (o *FileTypeValueOptions) GetMaxFileSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxFileSize, true
}

// SetMaxFileSize sets field value
func (o *FileTypeValueOptions) SetMaxFileSize(v int64) {
	o.MaxFileSize = v
}

// GetVersion returns the Version field value
func (o *FileTypeValueOptions) GetVersion() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *FileTypeValueOptions) GetVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *FileTypeValueOptions) SetVersion(v int64) {
	o.Version = v
}

func (o FileTypeValueOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileTypeValueOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedContentTypes) {
		toSerialize["allowedContentTypes"] = o.AllowedContentTypes
	}
	toSerialize["maxFileSize"] = o.MaxFileSize
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *FileTypeValueOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"maxFileSize",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileTypeValueOptions := _FileTypeValueOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileTypeValueOptions)

	if err != nil {
		return err
	}

	*o = FileTypeValueOptions(varFileTypeValueOptions)

	return err
}

type NullableFileTypeValueOptions struct {
	value *FileTypeValueOptions
	isSet bool
}

func (v NullableFileTypeValueOptions) Get() *FileTypeValueOptions {
	return v.value
}

func (v *NullableFileTypeValueOptions) Set(val *FileTypeValueOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableFileTypeValueOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableFileTypeValueOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileTypeValueOptions(val *FileTypeValueOptions) *NullableFileTypeValueOptions {
	return &NullableFileTypeValueOptions{value: val, isSet: true}
}

func (v NullableFileTypeValueOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileTypeValueOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
