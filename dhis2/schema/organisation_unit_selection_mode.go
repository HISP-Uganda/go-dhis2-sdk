/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// OrganisationUnitSelectionMode the model 'OrganisationUnitSelectionMode'
type OrganisationUnitSelectionMode string

// List of OrganisationUnitSelectionMode
const (
	ORGANISATIONUNITSELECTIONMODE_SELECTED    OrganisationUnitSelectionMode = "SELECTED"
	ORGANISATIONUNITSELECTIONMODE_CHILDREN    OrganisationUnitSelectionMode = "CHILDREN"
	ORGANISATIONUNITSELECTIONMODE_DESCENDANTS OrganisationUnitSelectionMode = "DESCENDANTS"
	ORGANISATIONUNITSELECTIONMODE_ACCESSIBLE  OrganisationUnitSelectionMode = "ACCESSIBLE"
	ORGANISATIONUNITSELECTIONMODE_CAPTURE     OrganisationUnitSelectionMode = "CAPTURE"
	ORGANISATIONUNITSELECTIONMODE_ALL         OrganisationUnitSelectionMode = "ALL"
)

// All allowed values of OrganisationUnitSelectionMode enum
var AllowedOrganisationUnitSelectionModeEnumValues = []OrganisationUnitSelectionMode{
	"SELECTED",
	"CHILDREN",
	"DESCENDANTS",
	"ACCESSIBLE",
	"CAPTURE",
	"ALL",
}

func (v *OrganisationUnitSelectionMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganisationUnitSelectionMode(value)
	for _, existing := range AllowedOrganisationUnitSelectionModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganisationUnitSelectionMode", value)
}

// NewOrganisationUnitSelectionModeFromValue returns a pointer to a valid OrganisationUnitSelectionMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganisationUnitSelectionModeFromValue(v string) (*OrganisationUnitSelectionMode, error) {
	ev := OrganisationUnitSelectionMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganisationUnitSelectionMode: valid values are %v", v, AllowedOrganisationUnitSelectionModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganisationUnitSelectionMode) IsValid() bool {
	for _, existing := range AllowedOrganisationUnitSelectionModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganisationUnitSelectionMode value
func (v OrganisationUnitSelectionMode) Ptr() *OrganisationUnitSelectionMode {
	return &v
}

type NullableOrganisationUnitSelectionMode struct {
	value *OrganisationUnitSelectionMode
	isSet bool
}

func (v NullableOrganisationUnitSelectionMode) Get() *OrganisationUnitSelectionMode {
	return v.value
}

func (v *NullableOrganisationUnitSelectionMode) Set(val *OrganisationUnitSelectionMode) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganisationUnitSelectionMode) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganisationUnitSelectionMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganisationUnitSelectionMode(val *OrganisationUnitSelectionMode) *NullableOrganisationUnitSelectionMode {
	return &NullableOrganisationUnitSelectionMode{value: val, isSet: true}
}

func (v NullableOrganisationUnitSelectionMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganisationUnitSelectionMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
