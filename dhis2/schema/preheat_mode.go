/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PreheatMode the model 'PreheatMode'
type PreheatMode string

// List of PreheatMode
const (
	PREHEATMODE_REFERENCE PreheatMode = "REFERENCE"
	PREHEATMODE_ALL       PreheatMode = "ALL"
	PREHEATMODE_NONE      PreheatMode = "NONE"
)

// All allowed values of PreheatMode enum
var AllowedPreheatModeEnumValues = []PreheatMode{
	"REFERENCE",
	"ALL",
	"NONE",
}

func (v *PreheatMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PreheatMode(value)
	for _, existing := range AllowedPreheatModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PreheatMode", value)
}

// NewPreheatModeFromValue returns a pointer to a valid PreheatMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPreheatModeFromValue(v string) (*PreheatMode, error) {
	ev := PreheatMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PreheatMode: valid values are %v", v, AllowedPreheatModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PreheatMode) IsValid() bool {
	for _, existing := range AllowedPreheatModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PreheatMode value
func (v PreheatMode) Ptr() *PreheatMode {
	return &v
}

type NullablePreheatMode struct {
	value *PreheatMode
	isSet bool
}

func (v NullablePreheatMode) Get() *PreheatMode {
	return v.value
}

func (v *NullablePreheatMode) Set(val *PreheatMode) {
	v.value = val
	v.isSet = true
}

func (v NullablePreheatMode) IsSet() bool {
	return v.isSet
}

func (v *NullablePreheatMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreheatMode(val *PreheatMode) *NullablePreheatMode {
	return &NullablePreheatMode{value: val, isSet: true}
}

func (v NullablePreheatMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreheatMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
