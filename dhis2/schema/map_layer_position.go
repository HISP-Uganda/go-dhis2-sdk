/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// MapLayerPosition the model 'MapLayerPosition'
type MapLayerPosition string

// List of MapLayerPosition
const (
	MAPLAYERPOSITION_BASEMAP MapLayerPosition = "BASEMAP"
	MAPLAYERPOSITION_OVERLAY MapLayerPosition = "OVERLAY"
)

// All allowed values of MapLayerPosition enum
var AllowedMapLayerPositionEnumValues = []MapLayerPosition{
	"BASEMAP",
	"OVERLAY",
}

func (v *MapLayerPosition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MapLayerPosition(value)
	for _, existing := range AllowedMapLayerPositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MapLayerPosition", value)
}

// NewMapLayerPositionFromValue returns a pointer to a valid MapLayerPosition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMapLayerPositionFromValue(v string) (*MapLayerPosition, error) {
	ev := MapLayerPosition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MapLayerPosition: valid values are %v", v, AllowedMapLayerPositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MapLayerPosition) IsValid() bool {
	for _, existing := range AllowedMapLayerPositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MapLayerPosition value
func (v MapLayerPosition) Ptr() *MapLayerPosition {
	return &v
}

type NullableMapLayerPosition struct {
	value *MapLayerPosition
	isSet bool
}

func (v NullableMapLayerPosition) Get() *MapLayerPosition {
	return v.value
}

func (v *NullableMapLayerPosition) Set(val *MapLayerPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableMapLayerPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableMapLayerPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapLayerPosition(val *MapLayerPosition) *NullableMapLayerPosition {
	return &NullableMapLayerPosition{value: val, isSet: true}
}

func (v NullableMapLayerPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapLayerPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
