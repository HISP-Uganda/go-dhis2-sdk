/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the TrackerRelationshipItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackerRelationshipItem{}

// TrackerRelationshipItem struct for TrackerRelationshipItem
type TrackerRelationshipItem struct {
	Enrollment            *Enrollment    `json:"enrollment,omitempty"`
	Event                 *TrackerEvent  `json:"event,omitempty"`
	TrackedEntityInstance *TrackedEntity `json:"trackedEntityInstance,omitempty"`
}

// NewTrackerRelationshipItem instantiates a new TrackerRelationshipItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackerRelationshipItem() *TrackerRelationshipItem {
	this := TrackerRelationshipItem{}
	return &this
}

// NewTrackerRelationshipItemWithDefaults instantiates a new TrackerRelationshipItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackerRelationshipItemWithDefaults() *TrackerRelationshipItem {
	this := TrackerRelationshipItem{}
	return &this
}

// GetEnrollment returns the Enrollment field value if set, zero value otherwise.
func (o *TrackerRelationshipItem) GetEnrollment() Enrollment {
	if o == nil || IsNil(o.Enrollment) {
		var ret Enrollment
		return ret
	}
	return *o.Enrollment
}

// GetEnrollmentOk returns a tuple with the Enrollment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationshipItem) GetEnrollmentOk() (*Enrollment, bool) {
	if o == nil || IsNil(o.Enrollment) {
		return nil, false
	}
	return o.Enrollment, true
}

// HasEnrollment returns a boolean if a field has been set.
func (o *TrackerRelationshipItem) HasEnrollment() bool {
	if o != nil && !IsNil(o.Enrollment) {
		return true
	}

	return false
}

// SetEnrollment gets a reference to the given Enrollment and assigns it to the Enrollment field.
func (o *TrackerRelationshipItem) SetEnrollment(v Enrollment) {
	o.Enrollment = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *TrackerRelationshipItem) GetEvent() TrackerEvent {
	if o == nil || IsNil(o.Event) {
		var ret TrackerEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationshipItem) GetEventOk() (*TrackerEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *TrackerRelationshipItem) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given TrackerEvent and assigns it to the Event field.
func (o *TrackerRelationshipItem) SetEvent(v TrackerEvent) {
	o.Event = &v
}

// GetTrackedEntityInstance returns the TrackedEntityInstance field value if set, zero value otherwise.
func (o *TrackerRelationshipItem) GetTrackedEntityInstance() TrackedEntity {
	if o == nil || IsNil(o.TrackedEntityInstance) {
		var ret TrackedEntity
		return ret
	}
	return *o.TrackedEntityInstance
}

// GetTrackedEntityInstanceOk returns a tuple with the TrackedEntityInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationshipItem) GetTrackedEntityInstanceOk() (*TrackedEntity, bool) {
	if o == nil || IsNil(o.TrackedEntityInstance) {
		return nil, false
	}
	return o.TrackedEntityInstance, true
}

// HasTrackedEntityInstance returns a boolean if a field has been set.
func (o *TrackerRelationshipItem) HasTrackedEntityInstance() bool {
	if o != nil && !IsNil(o.TrackedEntityInstance) {
		return true
	}

	return false
}

// SetTrackedEntityInstance gets a reference to the given TrackedEntity and assigns it to the TrackedEntityInstance field.
func (o *TrackerRelationshipItem) SetTrackedEntityInstance(v TrackedEntity) {
	o.TrackedEntityInstance = &v
}

func (o TrackerRelationshipItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackerRelationshipItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enrollment) {
		toSerialize["enrollment"] = o.Enrollment
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.TrackedEntityInstance) {
		toSerialize["trackedEntityInstance"] = o.TrackedEntityInstance
	}
	return toSerialize, nil
}

type NullableTrackerRelationshipItem struct {
	value *TrackerRelationshipItem
	isSet bool
}

func (v NullableTrackerRelationshipItem) Get() *TrackerRelationshipItem {
	return v.value
}

func (v *NullableTrackerRelationshipItem) Set(val *TrackerRelationshipItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerRelationshipItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerRelationshipItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerRelationshipItem(val *TrackerRelationshipItem) *NullableTrackerRelationshipItem {
	return &NullableTrackerRelationshipItem{value: val, isSet: true}
}

func (v NullableTrackerRelationshipItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerRelationshipItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
