/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DashboardItemParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardItemParams{}

// DashboardItemParams struct for DashboardItemParams
type DashboardItemParams struct {
	AppKey                  *string                                `json:"appKey,omitempty"`
	AttributeValues         []AttributeValueParams                 `json:"attributeValues,omitempty"`
	Code                    *string                                `json:"code,omitempty"`
	ContentCount            int32                                  `json:"contentCount"`
	Created                 *time.Time                             `json:"created,omitempty"`
	CreatedBy               *AggregateDataExchangeParamsCreatedBy  `json:"createdBy,omitempty"`
	DisplayName             *string                                `json:"displayName,omitempty"`
	EventChart              *EventChartParams                      `json:"eventChart,omitempty"`
	EventReport             *EventReportParams                     `json:"eventReport,omitempty"`
	EventVisualization      *EventVisualizationParams              `json:"eventVisualization,omitempty"`
	Favorite                *bool                                  `json:"favorite,omitempty"`
	Favorites               []string                               `json:"favorites,omitempty"`
	Height                  *int32                                 `json:"height,omitempty"`
	Id                      *string                                `json:"id,omitempty"`
	InterpretationCount     int32                                  `json:"interpretationCount"`
	InterpretationLikeCount int32                                  `json:"interpretationLikeCount"`
	LastUpdated             *time.Time                             `json:"lastUpdated,omitempty"`
	LastUpdatedBy           *AggregateDataExchangeParamsCreatedBy  `json:"lastUpdatedBy,omitempty"`
	Map                     *MapParams                             `json:"map,omitempty"`
	Messages                *bool                                  `json:"messages,omitempty"`
	Name                    *string                                `json:"name,omitempty"`
	Reports                 []DashboardItemParamsReportsInner      `json:"reports,omitempty"`
	Resources               []DashboardItemParamsResourcesInner    `json:"resources,omitempty"`
	Shape                   DashboardItemShape                     `json:"shape"`
	Sharing                 *Sharing                               `json:"sharing,omitempty"`
	Text                    *string                                `json:"text,omitempty"`
	Translations            []Translation                          `json:"translations,omitempty"`
	Type                    DashboardItemType                      `json:"type"`
	Users                   []AggregateDataExchangeParamsCreatedBy `json:"users,omitempty"`
	Visualization           *VisualizationParams                   `json:"visualization,omitempty"`
	Width                   *int32                                 `json:"width,omitempty"`
	X                       *int32                                 `json:"x,omitempty"`
	Y                       *int32                                 `json:"y,omitempty"`
}

type _DashboardItemParams DashboardItemParams

// NewDashboardItemParams instantiates a new DashboardItemParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardItemParams(contentCount int32, interpretationCount int32, interpretationLikeCount int32, shape DashboardItemShape, type_ DashboardItemType) *DashboardItemParams {
	this := DashboardItemParams{}
	this.ContentCount = contentCount
	this.InterpretationCount = interpretationCount
	this.InterpretationLikeCount = interpretationLikeCount
	this.Shape = shape
	this.Type = type_
	return &this
}

// NewDashboardItemParamsWithDefaults instantiates a new DashboardItemParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardItemParamsWithDefaults() *DashboardItemParams {
	this := DashboardItemParams{}
	return &this
}

// GetAppKey returns the AppKey field value if set, zero value otherwise.
func (o *DashboardItemParams) GetAppKey() string {
	if o == nil || IsNil(o.AppKey) {
		var ret string
		return ret
	}
	return *o.AppKey
}

// GetAppKeyOk returns a tuple with the AppKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetAppKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AppKey) {
		return nil, false
	}
	return o.AppKey, true
}

// HasAppKey returns a boolean if a field has been set.
func (o *DashboardItemParams) HasAppKey() bool {
	if o != nil && !IsNil(o.AppKey) {
		return true
	}

	return false
}

// SetAppKey gets a reference to the given string and assigns it to the AppKey field.
func (o *DashboardItemParams) SetAppKey(v string) {
	o.AppKey = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *DashboardItemParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *DashboardItemParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *DashboardItemParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *DashboardItemParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *DashboardItemParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *DashboardItemParams) SetCode(v string) {
	o.Code = &v
}

// GetContentCount returns the ContentCount field value
func (o *DashboardItemParams) GetContentCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ContentCount
}

// GetContentCountOk returns a tuple with the ContentCount field value
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetContentCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentCount, true
}

// SetContentCount sets field value
func (o *DashboardItemParams) SetContentCount(v int32) {
	o.ContentCount = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DashboardItemParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DashboardItemParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *DashboardItemParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DashboardItemParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DashboardItemParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *DashboardItemParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DashboardItemParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DashboardItemParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DashboardItemParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEventChart returns the EventChart field value if set, zero value otherwise.
func (o *DashboardItemParams) GetEventChart() EventChartParams {
	if o == nil || IsNil(o.EventChart) {
		var ret EventChartParams
		return ret
	}
	return *o.EventChart
}

// GetEventChartOk returns a tuple with the EventChart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetEventChartOk() (*EventChartParams, bool) {
	if o == nil || IsNil(o.EventChart) {
		return nil, false
	}
	return o.EventChart, true
}

// HasEventChart returns a boolean if a field has been set.
func (o *DashboardItemParams) HasEventChart() bool {
	if o != nil && !IsNil(o.EventChart) {
		return true
	}

	return false
}

// SetEventChart gets a reference to the given EventChartParams and assigns it to the EventChart field.
func (o *DashboardItemParams) SetEventChart(v EventChartParams) {
	o.EventChart = &v
}

// GetEventReport returns the EventReport field value if set, zero value otherwise.
func (o *DashboardItemParams) GetEventReport() EventReportParams {
	if o == nil || IsNil(o.EventReport) {
		var ret EventReportParams
		return ret
	}
	return *o.EventReport
}

// GetEventReportOk returns a tuple with the EventReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetEventReportOk() (*EventReportParams, bool) {
	if o == nil || IsNil(o.EventReport) {
		return nil, false
	}
	return o.EventReport, true
}

// HasEventReport returns a boolean if a field has been set.
func (o *DashboardItemParams) HasEventReport() bool {
	if o != nil && !IsNil(o.EventReport) {
		return true
	}

	return false
}

// SetEventReport gets a reference to the given EventReportParams and assigns it to the EventReport field.
func (o *DashboardItemParams) SetEventReport(v EventReportParams) {
	o.EventReport = &v
}

// GetEventVisualization returns the EventVisualization field value if set, zero value otherwise.
func (o *DashboardItemParams) GetEventVisualization() EventVisualizationParams {
	if o == nil || IsNil(o.EventVisualization) {
		var ret EventVisualizationParams
		return ret
	}
	return *o.EventVisualization
}

// GetEventVisualizationOk returns a tuple with the EventVisualization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetEventVisualizationOk() (*EventVisualizationParams, bool) {
	if o == nil || IsNil(o.EventVisualization) {
		return nil, false
	}
	return o.EventVisualization, true
}

// HasEventVisualization returns a boolean if a field has been set.
func (o *DashboardItemParams) HasEventVisualization() bool {
	if o != nil && !IsNil(o.EventVisualization) {
		return true
	}

	return false
}

// SetEventVisualization gets a reference to the given EventVisualizationParams and assigns it to the EventVisualization field.
func (o *DashboardItemParams) SetEventVisualization(v EventVisualizationParams) {
	o.EventVisualization = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *DashboardItemParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *DashboardItemParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *DashboardItemParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *DashboardItemParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *DashboardItemParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *DashboardItemParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *DashboardItemParams) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *DashboardItemParams) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *DashboardItemParams) SetHeight(v int32) {
	o.Height = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DashboardItemParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DashboardItemParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DashboardItemParams) SetId(v string) {
	o.Id = &v
}

// GetInterpretationCount returns the InterpretationCount field value
func (o *DashboardItemParams) GetInterpretationCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InterpretationCount
}

// GetInterpretationCountOk returns a tuple with the InterpretationCount field value
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetInterpretationCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterpretationCount, true
}

// SetInterpretationCount sets field value
func (o *DashboardItemParams) SetInterpretationCount(v int32) {
	o.InterpretationCount = v
}

// GetInterpretationLikeCount returns the InterpretationLikeCount field value
func (o *DashboardItemParams) GetInterpretationLikeCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InterpretationLikeCount
}

// GetInterpretationLikeCountOk returns a tuple with the InterpretationLikeCount field value
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetInterpretationLikeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterpretationLikeCount, true
}

// SetInterpretationLikeCount sets field value
func (o *DashboardItemParams) SetInterpretationLikeCount(v int32) {
	o.InterpretationLikeCount = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *DashboardItemParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *DashboardItemParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *DashboardItemParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *DashboardItemParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *DashboardItemParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *DashboardItemParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetMap returns the Map field value if set, zero value otherwise.
func (o *DashboardItemParams) GetMap() MapParams {
	if o == nil || IsNil(o.Map) {
		var ret MapParams
		return ret
	}
	return *o.Map
}

// GetMapOk returns a tuple with the Map field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetMapOk() (*MapParams, bool) {
	if o == nil || IsNil(o.Map) {
		return nil, false
	}
	return o.Map, true
}

// HasMap returns a boolean if a field has been set.
func (o *DashboardItemParams) HasMap() bool {
	if o != nil && !IsNil(o.Map) {
		return true
	}

	return false
}

// SetMap gets a reference to the given MapParams and assigns it to the Map field.
func (o *DashboardItemParams) SetMap(v MapParams) {
	o.Map = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *DashboardItemParams) GetMessages() bool {
	if o == nil || IsNil(o.Messages) {
		var ret bool
		return ret
	}
	return *o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetMessagesOk() (*bool, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *DashboardItemParams) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given bool and assigns it to the Messages field.
func (o *DashboardItemParams) SetMessages(v bool) {
	o.Messages = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DashboardItemParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DashboardItemParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DashboardItemParams) SetName(v string) {
	o.Name = &v
}

// GetReports returns the Reports field value if set, zero value otherwise.
func (o *DashboardItemParams) GetReports() []DashboardItemParamsReportsInner {
	if o == nil || IsNil(o.Reports) {
		var ret []DashboardItemParamsReportsInner
		return ret
	}
	return o.Reports
}

// GetReportsOk returns a tuple with the Reports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetReportsOk() ([]DashboardItemParamsReportsInner, bool) {
	if o == nil || IsNil(o.Reports) {
		return nil, false
	}
	return o.Reports, true
}

// HasReports returns a boolean if a field has been set.
func (o *DashboardItemParams) HasReports() bool {
	if o != nil && !IsNil(o.Reports) {
		return true
	}

	return false
}

// SetReports gets a reference to the given []DashboardItemParamsReportsInner and assigns it to the Reports field.
func (o *DashboardItemParams) SetReports(v []DashboardItemParamsReportsInner) {
	o.Reports = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *DashboardItemParams) GetResources() []DashboardItemParamsResourcesInner {
	if o == nil || IsNil(o.Resources) {
		var ret []DashboardItemParamsResourcesInner
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetResourcesOk() ([]DashboardItemParamsResourcesInner, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *DashboardItemParams) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []DashboardItemParamsResourcesInner and assigns it to the Resources field.
func (o *DashboardItemParams) SetResources(v []DashboardItemParamsResourcesInner) {
	o.Resources = v
}

// GetShape returns the Shape field value
func (o *DashboardItemParams) GetShape() DashboardItemShape {
	if o == nil {
		var ret DashboardItemShape
		return ret
	}

	return o.Shape
}

// GetShapeOk returns a tuple with the Shape field value
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetShapeOk() (*DashboardItemShape, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shape, true
}

// SetShape sets field value
func (o *DashboardItemParams) SetShape(v DashboardItemShape) {
	o.Shape = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *DashboardItemParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *DashboardItemParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *DashboardItemParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *DashboardItemParams) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *DashboardItemParams) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *DashboardItemParams) SetText(v string) {
	o.Text = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *DashboardItemParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *DashboardItemParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *DashboardItemParams) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetType returns the Type field value
func (o *DashboardItemParams) GetType() DashboardItemType {
	if o == nil {
		var ret DashboardItemType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetTypeOk() (*DashboardItemType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DashboardItemParams) SetType(v DashboardItemType) {
	o.Type = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *DashboardItemParams) GetUsers() []AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.Users) {
		var ret []AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetUsersOk() ([]AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *DashboardItemParams) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []AggregateDataExchangeParamsCreatedBy and assigns it to the Users field.
func (o *DashboardItemParams) SetUsers(v []AggregateDataExchangeParamsCreatedBy) {
	o.Users = v
}

// GetVisualization returns the Visualization field value if set, zero value otherwise.
func (o *DashboardItemParams) GetVisualization() VisualizationParams {
	if o == nil || IsNil(o.Visualization) {
		var ret VisualizationParams
		return ret
	}
	return *o.Visualization
}

// GetVisualizationOk returns a tuple with the Visualization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetVisualizationOk() (*VisualizationParams, bool) {
	if o == nil || IsNil(o.Visualization) {
		return nil, false
	}
	return o.Visualization, true
}

// HasVisualization returns a boolean if a field has been set.
func (o *DashboardItemParams) HasVisualization() bool {
	if o != nil && !IsNil(o.Visualization) {
		return true
	}

	return false
}

// SetVisualization gets a reference to the given VisualizationParams and assigns it to the Visualization field.
func (o *DashboardItemParams) SetVisualization(v VisualizationParams) {
	o.Visualization = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *DashboardItemParams) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *DashboardItemParams) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *DashboardItemParams) SetWidth(v int32) {
	o.Width = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *DashboardItemParams) GetX() int32 {
	if o == nil || IsNil(o.X) {
		var ret int32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetXOk() (*int32, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *DashboardItemParams) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given int32 and assigns it to the X field.
func (o *DashboardItemParams) SetX(v int32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *DashboardItemParams) GetY() int32 {
	if o == nil || IsNil(o.Y) {
		var ret int32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItemParams) GetYOk() (*int32, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *DashboardItemParams) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given int32 and assigns it to the Y field.
func (o *DashboardItemParams) SetY(v int32) {
	o.Y = &v
}

func (o DashboardItemParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardItemParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppKey) {
		toSerialize["appKey"] = o.AppKey
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["contentCount"] = o.ContentCount
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EventChart) {
		toSerialize["eventChart"] = o.EventChart
	}
	if !IsNil(o.EventReport) {
		toSerialize["eventReport"] = o.EventReport
	}
	if !IsNil(o.EventVisualization) {
		toSerialize["eventVisualization"] = o.EventVisualization
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["interpretationCount"] = o.InterpretationCount
	toSerialize["interpretationLikeCount"] = o.InterpretationLikeCount
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Map) {
		toSerialize["map"] = o.Map
	}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Reports) {
		toSerialize["reports"] = o.Reports
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	toSerialize["shape"] = o.Shape
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Visualization) {
		toSerialize["visualization"] = o.Visualization
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}
	return toSerialize, nil
}

func (o *DashboardItemParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contentCount",
		"interpretationCount",
		"interpretationLikeCount",
		"shape",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDashboardItemParams := _DashboardItemParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDashboardItemParams)

	if err != nil {
		return err
	}

	*o = DashboardItemParams(varDashboardItemParams)

	return err
}

type NullableDashboardItemParams struct {
	value *DashboardItemParams
	isSet bool
}

func (v NullableDashboardItemParams) Get() *DashboardItemParams {
	return v.value
}

func (v *NullableDashboardItemParams) Set(val *DashboardItemParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardItemParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardItemParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardItemParams(val *DashboardItemParams) *NullableDashboardItemParams {
	return &NullableDashboardItemParams{value: val, isSet: true}
}

func (v NullableDashboardItemParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardItemParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
