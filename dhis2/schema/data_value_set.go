/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the DataValueSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataValueSet{}

// DataValueSet struct for DataValueSet
type DataValueSet struct {
	AttributeCategoryOptions    []string    `json:"attributeCategoryOptions,omitempty"`
	AttributeOptionCombo        *string     `json:"attributeOptionCombo,omitempty"`
	CategoryOptionComboIdScheme *string     `json:"categoryOptionComboIdScheme,omitempty"`
	CompleteDate                *string     `json:"completeDate,omitempty"`
	DataElementIdScheme         *string     `json:"dataElementIdScheme,omitempty"`
	DataSet                     *string     `json:"dataSet,omitempty"`
	DataSetIdScheme             *string     `json:"dataSetIdScheme,omitempty"`
	DataValues                  []DataValue `json:"dataValues,omitempty"`
	DryRun                      *bool       `json:"dryRun,omitempty"`
	IdScheme                    *string     `json:"idScheme,omitempty"`
	OrgUnit                     *string     `json:"orgUnit,omitempty"`
	OrgUnitIdScheme             *string     `json:"orgUnitIdScheme,omitempty"`
	Period                      *string     `json:"period,omitempty"`
	Strategy                    *string     `json:"strategy,omitempty"`
}

// NewDataValueSet instantiates a new DataValueSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataValueSet() *DataValueSet {
	this := DataValueSet{}
	return &this
}

// NewDataValueSetWithDefaults instantiates a new DataValueSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataValueSetWithDefaults() *DataValueSet {
	this := DataValueSet{}
	return &this
}

// GetAttributeCategoryOptions returns the AttributeCategoryOptions field value if set, zero value otherwise.
func (o *DataValueSet) GetAttributeCategoryOptions() []string {
	if o == nil || IsNil(o.AttributeCategoryOptions) {
		var ret []string
		return ret
	}
	return o.AttributeCategoryOptions
}

// GetAttributeCategoryOptionsOk returns a tuple with the AttributeCategoryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetAttributeCategoryOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.AttributeCategoryOptions) {
		return nil, false
	}
	return o.AttributeCategoryOptions, true
}

// HasAttributeCategoryOptions returns a boolean if a field has been set.
func (o *DataValueSet) HasAttributeCategoryOptions() bool {
	if o != nil && !IsNil(o.AttributeCategoryOptions) {
		return true
	}

	return false
}

// SetAttributeCategoryOptions gets a reference to the given []string and assigns it to the AttributeCategoryOptions field.
func (o *DataValueSet) SetAttributeCategoryOptions(v []string) {
	o.AttributeCategoryOptions = v
}

// GetAttributeOptionCombo returns the AttributeOptionCombo field value if set, zero value otherwise.
func (o *DataValueSet) GetAttributeOptionCombo() string {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		var ret string
		return ret
	}
	return *o.AttributeOptionCombo
}

// GetAttributeOptionComboOk returns a tuple with the AttributeOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetAttributeOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		return nil, false
	}
	return o.AttributeOptionCombo, true
}

// HasAttributeOptionCombo returns a boolean if a field has been set.
func (o *DataValueSet) HasAttributeOptionCombo() bool {
	if o != nil && !IsNil(o.AttributeOptionCombo) {
		return true
	}

	return false
}

// SetAttributeOptionCombo gets a reference to the given string and assigns it to the AttributeOptionCombo field.
func (o *DataValueSet) SetAttributeOptionCombo(v string) {
	o.AttributeOptionCombo = &v
}

// GetCategoryOptionComboIdScheme returns the CategoryOptionComboIdScheme field value if set, zero value otherwise.
func (o *DataValueSet) GetCategoryOptionComboIdScheme() string {
	if o == nil || IsNil(o.CategoryOptionComboIdScheme) {
		var ret string
		return ret
	}
	return *o.CategoryOptionComboIdScheme
}

// GetCategoryOptionComboIdSchemeOk returns a tuple with the CategoryOptionComboIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetCategoryOptionComboIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryOptionComboIdScheme) {
		return nil, false
	}
	return o.CategoryOptionComboIdScheme, true
}

// HasCategoryOptionComboIdScheme returns a boolean if a field has been set.
func (o *DataValueSet) HasCategoryOptionComboIdScheme() bool {
	if o != nil && !IsNil(o.CategoryOptionComboIdScheme) {
		return true
	}

	return false
}

// SetCategoryOptionComboIdScheme gets a reference to the given string and assigns it to the CategoryOptionComboIdScheme field.
func (o *DataValueSet) SetCategoryOptionComboIdScheme(v string) {
	o.CategoryOptionComboIdScheme = &v
}

// GetCompleteDate returns the CompleteDate field value if set, zero value otherwise.
func (o *DataValueSet) GetCompleteDate() string {
	if o == nil || IsNil(o.CompleteDate) {
		var ret string
		return ret
	}
	return *o.CompleteDate
}

// GetCompleteDateOk returns a tuple with the CompleteDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetCompleteDateOk() (*string, bool) {
	if o == nil || IsNil(o.CompleteDate) {
		return nil, false
	}
	return o.CompleteDate, true
}

// HasCompleteDate returns a boolean if a field has been set.
func (o *DataValueSet) HasCompleteDate() bool {
	if o != nil && !IsNil(o.CompleteDate) {
		return true
	}

	return false
}

// SetCompleteDate gets a reference to the given string and assigns it to the CompleteDate field.
func (o *DataValueSet) SetCompleteDate(v string) {
	o.CompleteDate = &v
}

// GetDataElementIdScheme returns the DataElementIdScheme field value if set, zero value otherwise.
func (o *DataValueSet) GetDataElementIdScheme() string {
	if o == nil || IsNil(o.DataElementIdScheme) {
		var ret string
		return ret
	}
	return *o.DataElementIdScheme
}

// GetDataElementIdSchemeOk returns a tuple with the DataElementIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetDataElementIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.DataElementIdScheme) {
		return nil, false
	}
	return o.DataElementIdScheme, true
}

// HasDataElementIdScheme returns a boolean if a field has been set.
func (o *DataValueSet) HasDataElementIdScheme() bool {
	if o != nil && !IsNil(o.DataElementIdScheme) {
		return true
	}

	return false
}

// SetDataElementIdScheme gets a reference to the given string and assigns it to the DataElementIdScheme field.
func (o *DataValueSet) SetDataElementIdScheme(v string) {
	o.DataElementIdScheme = &v
}

// GetDataSet returns the DataSet field value if set, zero value otherwise.
func (o *DataValueSet) GetDataSet() string {
	if o == nil || IsNil(o.DataSet) {
		var ret string
		return ret
	}
	return *o.DataSet
}

// GetDataSetOk returns a tuple with the DataSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetDataSetOk() (*string, bool) {
	if o == nil || IsNil(o.DataSet) {
		return nil, false
	}
	return o.DataSet, true
}

// HasDataSet returns a boolean if a field has been set.
func (o *DataValueSet) HasDataSet() bool {
	if o != nil && !IsNil(o.DataSet) {
		return true
	}

	return false
}

// SetDataSet gets a reference to the given string and assigns it to the DataSet field.
func (o *DataValueSet) SetDataSet(v string) {
	o.DataSet = &v
}

// GetDataSetIdScheme returns the DataSetIdScheme field value if set, zero value otherwise.
func (o *DataValueSet) GetDataSetIdScheme() string {
	if o == nil || IsNil(o.DataSetIdScheme) {
		var ret string
		return ret
	}
	return *o.DataSetIdScheme
}

// GetDataSetIdSchemeOk returns a tuple with the DataSetIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetDataSetIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.DataSetIdScheme) {
		return nil, false
	}
	return o.DataSetIdScheme, true
}

// HasDataSetIdScheme returns a boolean if a field has been set.
func (o *DataValueSet) HasDataSetIdScheme() bool {
	if o != nil && !IsNil(o.DataSetIdScheme) {
		return true
	}

	return false
}

// SetDataSetIdScheme gets a reference to the given string and assigns it to the DataSetIdScheme field.
func (o *DataValueSet) SetDataSetIdScheme(v string) {
	o.DataSetIdScheme = &v
}

// GetDataValues returns the DataValues field value if set, zero value otherwise.
func (o *DataValueSet) GetDataValues() []DataValue {
	if o == nil || IsNil(o.DataValues) {
		var ret []DataValue
		return ret
	}
	return o.DataValues
}

// GetDataValuesOk returns a tuple with the DataValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetDataValuesOk() ([]DataValue, bool) {
	if o == nil || IsNil(o.DataValues) {
		return nil, false
	}
	return o.DataValues, true
}

// HasDataValues returns a boolean if a field has been set.
func (o *DataValueSet) HasDataValues() bool {
	if o != nil && !IsNil(o.DataValues) {
		return true
	}

	return false
}

// SetDataValues gets a reference to the given []DataValue and assigns it to the DataValues field.
func (o *DataValueSet) SetDataValues(v []DataValue) {
	o.DataValues = v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *DataValueSet) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *DataValueSet) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *DataValueSet) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetIdScheme returns the IdScheme field value if set, zero value otherwise.
func (o *DataValueSet) GetIdScheme() string {
	if o == nil || IsNil(o.IdScheme) {
		var ret string
		return ret
	}
	return *o.IdScheme
}

// GetIdSchemeOk returns a tuple with the IdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.IdScheme) {
		return nil, false
	}
	return o.IdScheme, true
}

// HasIdScheme returns a boolean if a field has been set.
func (o *DataValueSet) HasIdScheme() bool {
	if o != nil && !IsNil(o.IdScheme) {
		return true
	}

	return false
}

// SetIdScheme gets a reference to the given string and assigns it to the IdScheme field.
func (o *DataValueSet) SetIdScheme(v string) {
	o.IdScheme = &v
}

// GetOrgUnit returns the OrgUnit field value if set, zero value otherwise.
func (o *DataValueSet) GetOrgUnit() string {
	if o == nil || IsNil(o.OrgUnit) {
		var ret string
		return ret
	}
	return *o.OrgUnit
}

// GetOrgUnitOk returns a tuple with the OrgUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetOrgUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnit) {
		return nil, false
	}
	return o.OrgUnit, true
}

// HasOrgUnit returns a boolean if a field has been set.
func (o *DataValueSet) HasOrgUnit() bool {
	if o != nil && !IsNil(o.OrgUnit) {
		return true
	}

	return false
}

// SetOrgUnit gets a reference to the given string and assigns it to the OrgUnit field.
func (o *DataValueSet) SetOrgUnit(v string) {
	o.OrgUnit = &v
}

// GetOrgUnitIdScheme returns the OrgUnitIdScheme field value if set, zero value otherwise.
func (o *DataValueSet) GetOrgUnitIdScheme() string {
	if o == nil || IsNil(o.OrgUnitIdScheme) {
		var ret string
		return ret
	}
	return *o.OrgUnitIdScheme
}

// GetOrgUnitIdSchemeOk returns a tuple with the OrgUnitIdScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetOrgUnitIdSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnitIdScheme) {
		return nil, false
	}
	return o.OrgUnitIdScheme, true
}

// HasOrgUnitIdScheme returns a boolean if a field has been set.
func (o *DataValueSet) HasOrgUnitIdScheme() bool {
	if o != nil && !IsNil(o.OrgUnitIdScheme) {
		return true
	}

	return false
}

// SetOrgUnitIdScheme gets a reference to the given string and assigns it to the OrgUnitIdScheme field.
func (o *DataValueSet) SetOrgUnitIdScheme(v string) {
	o.OrgUnitIdScheme = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *DataValueSet) GetPeriod() string {
	if o == nil || IsNil(o.Period) {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *DataValueSet) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *DataValueSet) SetPeriod(v string) {
	o.Period = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *DataValueSet) GetStrategy() string {
	if o == nil || IsNil(o.Strategy) {
		var ret string
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueSet) GetStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *DataValueSet) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given string and assigns it to the Strategy field.
func (o *DataValueSet) SetStrategy(v string) {
	o.Strategy = &v
}

func (o DataValueSet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataValueSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeCategoryOptions) {
		toSerialize["attributeCategoryOptions"] = o.AttributeCategoryOptions
	}
	if !IsNil(o.AttributeOptionCombo) {
		toSerialize["attributeOptionCombo"] = o.AttributeOptionCombo
	}
	if !IsNil(o.CategoryOptionComboIdScheme) {
		toSerialize["categoryOptionComboIdScheme"] = o.CategoryOptionComboIdScheme
	}
	if !IsNil(o.CompleteDate) {
		toSerialize["completeDate"] = o.CompleteDate
	}
	if !IsNil(o.DataElementIdScheme) {
		toSerialize["dataElementIdScheme"] = o.DataElementIdScheme
	}
	if !IsNil(o.DataSet) {
		toSerialize["dataSet"] = o.DataSet
	}
	if !IsNil(o.DataSetIdScheme) {
		toSerialize["dataSetIdScheme"] = o.DataSetIdScheme
	}
	if !IsNil(o.DataValues) {
		toSerialize["dataValues"] = o.DataValues
	}
	if !IsNil(o.DryRun) {
		toSerialize["dryRun"] = o.DryRun
	}
	if !IsNil(o.IdScheme) {
		toSerialize["idScheme"] = o.IdScheme
	}
	if !IsNil(o.OrgUnit) {
		toSerialize["orgUnit"] = o.OrgUnit
	}
	if !IsNil(o.OrgUnitIdScheme) {
		toSerialize["orgUnitIdScheme"] = o.OrgUnitIdScheme
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	return toSerialize, nil
}

type NullableDataValueSet struct {
	value *DataValueSet
	isSet bool
}

func (v NullableDataValueSet) Get() *DataValueSet {
	return v.value
}

func (v *NullableDataValueSet) Set(val *DataValueSet) {
	v.value = val
	v.isSet = true
}

func (v NullableDataValueSet) IsSet() bool {
	return v.isSet
}

func (v *NullableDataValueSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataValueSet(val *DataValueSet) *NullableDataValueSet {
	return &NullableDataValueSet{value: val, isSet: true}
}

func (v NullableDataValueSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataValueSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
