/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the SMSCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SMSCode{}

// SMSCode struct for SMSCode
type SMSCode struct {
	Code                   *string                                    `json:"code,omitempty"`
	Compulsory             *bool                                      `json:"compulsory,omitempty"`
	DataElement            *DataDimensionItemDataElement              `json:"dataElement,omitempty"`
	Formula                *string                                    `json:"formula,omitempty"`
	OptionId               *CategoryComboCategoryOptionCombosInner    `json:"optionId,omitempty"`
	TrackedEntityAttribute *EventVisualizationAttributeValueDimension `json:"trackedEntityAttribute,omitempty"`
}

// NewSMSCode instantiates a new SMSCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMSCode() *SMSCode {
	this := SMSCode{}
	return &this
}

// NewSMSCodeWithDefaults instantiates a new SMSCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMSCodeWithDefaults() *SMSCode {
	this := SMSCode{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SMSCode) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCode) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SMSCode) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SMSCode) SetCode(v string) {
	o.Code = &v
}

// GetCompulsory returns the Compulsory field value if set, zero value otherwise.
func (o *SMSCode) GetCompulsory() bool {
	if o == nil || IsNil(o.Compulsory) {
		var ret bool
		return ret
	}
	return *o.Compulsory
}

// GetCompulsoryOk returns a tuple with the Compulsory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCode) GetCompulsoryOk() (*bool, bool) {
	if o == nil || IsNil(o.Compulsory) {
		return nil, false
	}
	return o.Compulsory, true
}

// HasCompulsory returns a boolean if a field has been set.
func (o *SMSCode) HasCompulsory() bool {
	if o != nil && !IsNil(o.Compulsory) {
		return true
	}

	return false
}

// SetCompulsory gets a reference to the given bool and assigns it to the Compulsory field.
func (o *SMSCode) SetCompulsory(v bool) {
	o.Compulsory = &v
}

// GetDataElement returns the DataElement field value if set, zero value otherwise.
func (o *SMSCode) GetDataElement() DataDimensionItemDataElement {
	if o == nil || IsNil(o.DataElement) {
		var ret DataDimensionItemDataElement
		return ret
	}
	return *o.DataElement
}

// GetDataElementOk returns a tuple with the DataElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCode) GetDataElementOk() (*DataDimensionItemDataElement, bool) {
	if o == nil || IsNil(o.DataElement) {
		return nil, false
	}
	return o.DataElement, true
}

// HasDataElement returns a boolean if a field has been set.
func (o *SMSCode) HasDataElement() bool {
	if o != nil && !IsNil(o.DataElement) {
		return true
	}

	return false
}

// SetDataElement gets a reference to the given DataDimensionItemDataElement and assigns it to the DataElement field.
func (o *SMSCode) SetDataElement(v DataDimensionItemDataElement) {
	o.DataElement = &v
}

// GetFormula returns the Formula field value if set, zero value otherwise.
func (o *SMSCode) GetFormula() string {
	if o == nil || IsNil(o.Formula) {
		var ret string
		return ret
	}
	return *o.Formula
}

// GetFormulaOk returns a tuple with the Formula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCode) GetFormulaOk() (*string, bool) {
	if o == nil || IsNil(o.Formula) {
		return nil, false
	}
	return o.Formula, true
}

// HasFormula returns a boolean if a field has been set.
func (o *SMSCode) HasFormula() bool {
	if o != nil && !IsNil(o.Formula) {
		return true
	}

	return false
}

// SetFormula gets a reference to the given string and assigns it to the Formula field.
func (o *SMSCode) SetFormula(v string) {
	o.Formula = &v
}

// GetOptionId returns the OptionId field value if set, zero value otherwise.
func (o *SMSCode) GetOptionId() CategoryComboCategoryOptionCombosInner {
	if o == nil || IsNil(o.OptionId) {
		var ret CategoryComboCategoryOptionCombosInner
		return ret
	}
	return *o.OptionId
}

// GetOptionIdOk returns a tuple with the OptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCode) GetOptionIdOk() (*CategoryComboCategoryOptionCombosInner, bool) {
	if o == nil || IsNil(o.OptionId) {
		return nil, false
	}
	return o.OptionId, true
}

// HasOptionId returns a boolean if a field has been set.
func (o *SMSCode) HasOptionId() bool {
	if o != nil && !IsNil(o.OptionId) {
		return true
	}

	return false
}

// SetOptionId gets a reference to the given CategoryComboCategoryOptionCombosInner and assigns it to the OptionId field.
func (o *SMSCode) SetOptionId(v CategoryComboCategoryOptionCombosInner) {
	o.OptionId = &v
}

// GetTrackedEntityAttribute returns the TrackedEntityAttribute field value if set, zero value otherwise.
func (o *SMSCode) GetTrackedEntityAttribute() EventVisualizationAttributeValueDimension {
	if o == nil || IsNil(o.TrackedEntityAttribute) {
		var ret EventVisualizationAttributeValueDimension
		return ret
	}
	return *o.TrackedEntityAttribute
}

// GetTrackedEntityAttributeOk returns a tuple with the TrackedEntityAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSCode) GetTrackedEntityAttributeOk() (*EventVisualizationAttributeValueDimension, bool) {
	if o == nil || IsNil(o.TrackedEntityAttribute) {
		return nil, false
	}
	return o.TrackedEntityAttribute, true
}

// HasTrackedEntityAttribute returns a boolean if a field has been set.
func (o *SMSCode) HasTrackedEntityAttribute() bool {
	if o != nil && !IsNil(o.TrackedEntityAttribute) {
		return true
	}

	return false
}

// SetTrackedEntityAttribute gets a reference to the given EventVisualizationAttributeValueDimension and assigns it to the TrackedEntityAttribute field.
func (o *SMSCode) SetTrackedEntityAttribute(v EventVisualizationAttributeValueDimension) {
	o.TrackedEntityAttribute = &v
}

func (o SMSCode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SMSCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Compulsory) {
		toSerialize["compulsory"] = o.Compulsory
	}
	if !IsNil(o.DataElement) {
		toSerialize["dataElement"] = o.DataElement
	}
	if !IsNil(o.Formula) {
		toSerialize["formula"] = o.Formula
	}
	if !IsNil(o.OptionId) {
		toSerialize["optionId"] = o.OptionId
	}
	if !IsNil(o.TrackedEntityAttribute) {
		toSerialize["trackedEntityAttribute"] = o.TrackedEntityAttribute
	}
	return toSerialize, nil
}

type NullableSMSCode struct {
	value *SMSCode
	isSet bool
}

func (v NullableSMSCode) Get() *SMSCode {
	return v.value
}

func (v *NullableSMSCode) Set(val *SMSCode) {
	v.value = val
	v.isSet = true
}

func (v NullableSMSCode) IsSet() bool {
	return v.isSet
}

func (v *NullableSMSCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMSCode(val *SMSCode) *NullableSMSCode {
	return &NullableSMSCode{value: val, isSet: true}
}

func (v NullableSMSCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMSCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
