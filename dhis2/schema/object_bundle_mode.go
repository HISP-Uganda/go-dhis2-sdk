/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ObjectBundleMode the model 'ObjectBundleMode'
type ObjectBundleMode string

// List of ObjectBundleMode
const (
	OBJECTBUNDLEMODE_COMMIT   ObjectBundleMode = "COMMIT"
	OBJECTBUNDLEMODE_VALIDATE ObjectBundleMode = "VALIDATE"
)

// All allowed values of ObjectBundleMode enum
var AllowedObjectBundleModeEnumValues = []ObjectBundleMode{
	"COMMIT",
	"VALIDATE",
}

func (v *ObjectBundleMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ObjectBundleMode(value)
	for _, existing := range AllowedObjectBundleModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ObjectBundleMode", value)
}

// NewObjectBundleModeFromValue returns a pointer to a valid ObjectBundleMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewObjectBundleModeFromValue(v string) (*ObjectBundleMode, error) {
	ev := ObjectBundleMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ObjectBundleMode: valid values are %v", v, AllowedObjectBundleModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ObjectBundleMode) IsValid() bool {
	for _, existing := range AllowedObjectBundleModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ObjectBundleMode value
func (v ObjectBundleMode) Ptr() *ObjectBundleMode {
	return &v
}

type NullableObjectBundleMode struct {
	value *ObjectBundleMode
	isSet bool
}

func (v NullableObjectBundleMode) Get() *ObjectBundleMode {
	return v.value
}

func (v *NullableObjectBundleMode) Set(val *ObjectBundleMode) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectBundleMode) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectBundleMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectBundleMode(val *ObjectBundleMode) *NullableObjectBundleMode {
	return &NullableObjectBundleMode{value: val, isSet: true}
}

func (v NullableObjectBundleMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectBundleMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
