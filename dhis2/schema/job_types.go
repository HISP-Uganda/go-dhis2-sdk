/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the JobTypes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobTypes{}

// JobTypes struct for JobTypes
type JobTypes struct {
	JobTypes []JobTypeInfo `json:"jobTypes,omitempty"`
}

// NewJobTypes instantiates a new JobTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobTypes() *JobTypes {
	this := JobTypes{}
	return &this
}

// NewJobTypesWithDefaults instantiates a new JobTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobTypesWithDefaults() *JobTypes {
	this := JobTypes{}
	return &this
}

// GetJobTypes returns the JobTypes field value if set, zero value otherwise.
func (o *JobTypes) GetJobTypes() []JobTypeInfo {
	if o == nil || IsNil(o.JobTypes) {
		var ret []JobTypeInfo
		return ret
	}
	return o.JobTypes
}

// GetJobTypesOk returns a tuple with the JobTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobTypes) GetJobTypesOk() ([]JobTypeInfo, bool) {
	if o == nil || IsNil(o.JobTypes) {
		return nil, false
	}
	return o.JobTypes, true
}

// HasJobTypes returns a boolean if a field has been set.
func (o *JobTypes) HasJobTypes() bool {
	if o != nil && !IsNil(o.JobTypes) {
		return true
	}

	return false
}

// SetJobTypes gets a reference to the given []JobTypeInfo and assigns it to the JobTypes field.
func (o *JobTypes) SetJobTypes(v []JobTypeInfo) {
	o.JobTypes = v
}

func (o JobTypes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobTypes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JobTypes) {
		toSerialize["jobTypes"] = o.JobTypes
	}
	return toSerialize, nil
}

type NullableJobTypes struct {
	value *JobTypes
	isSet bool
}

func (v NullableJobTypes) Get() *JobTypes {
	return v.value
}

func (v *NullableJobTypes) Set(val *JobTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableJobTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableJobTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobTypes(val *JobTypes) *NullableJobTypes {
	return &NullableJobTypes{value: val, isSet: true}
}

func (v NullableJobTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
