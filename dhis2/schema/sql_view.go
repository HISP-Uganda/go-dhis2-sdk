/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SqlView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlView{}

// SqlView struct for SqlView
type SqlView struct {
	Access            *Access                         `json:"access,omitempty"`
	AttributeValues   []AttributeValue                `json:"attributeValues,omitempty"`
	CacheStrategy     string                          `json:"cacheStrategy"`
	Code              *string                         `json:"code,omitempty"`
	Created           *time.Time                      `json:"created,omitempty"`
	CreatedBy         *AggregateDataExchangeCreatedBy `json:"createdBy,omitempty"`
	Description       *string                         `json:"description,omitempty"`
	DisplayName       *string                         `json:"displayName,omitempty"`
	ExternalAccess    *bool                           `json:"externalAccess,omitempty"`
	Favorite          *bool                           `json:"favorite,omitempty"`
	Favorites         []string                        `json:"favorites,omitempty"`
	Href              *string                         `json:"href,omitempty"`
	Id                *string                         `json:"id,omitempty"`
	LastUpdated       *time.Time                      `json:"lastUpdated,omitempty"`
	LastUpdatedBy     *AggregateDataExchangeCreatedBy `json:"lastUpdatedBy,omitempty"`
	Name              *string                         `json:"name,omitempty"`
	PublicAccess      *string                         `json:"publicAccess,omitempty"`
	Sharing           *Sharing                        `json:"sharing,omitempty"`
	SqlQuery          *string                         `json:"sqlQuery,omitempty"`
	Translations      []Translation                   `json:"translations,omitempty"`
	Type              string                          `json:"type"`
	UpdateJobId       *string                         `json:"updateJobId,omitempty"`
	User              *AggregateDataExchangeCreatedBy `json:"user,omitempty"`
	UserAccesses      []LegacyUserAccess              `json:"userAccesses,omitempty"`
	UserGroupAccesses []LegacyUserGroupAccess         `json:"userGroupAccesses,omitempty"`
}

type _SqlView SqlView

// NewSqlView instantiates a new SqlView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlView(cacheStrategy string, type_ string) *SqlView {
	this := SqlView{}
	this.CacheStrategy = cacheStrategy
	this.Type = type_
	return &this
}

// NewSqlViewWithDefaults instantiates a new SqlView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlViewWithDefaults() *SqlView {
	this := SqlView{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *SqlView) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *SqlView) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *SqlView) SetAccess(v Access) {
	o.Access = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *SqlView) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *SqlView) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *SqlView) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCacheStrategy returns the CacheStrategy field value
func (o *SqlView) GetCacheStrategy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CacheStrategy
}

// GetCacheStrategyOk returns a tuple with the CacheStrategy field value
// and a boolean to check if the value has been set.
func (o *SqlView) GetCacheStrategyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CacheStrategy, true
}

// SetCacheStrategy sets field value
func (o *SqlView) SetCacheStrategy(v string) {
	o.CacheStrategy = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SqlView) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SqlView) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SqlView) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *SqlView) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *SqlView) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *SqlView) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *SqlView) GetCreatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetCreatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *SqlView) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the CreatedBy field.
func (o *SqlView) SetCreatedBy(v AggregateDataExchangeCreatedBy) {
	o.CreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SqlView) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SqlView) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SqlView) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SqlView) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SqlView) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SqlView) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExternalAccess returns the ExternalAccess field value if set, zero value otherwise.
func (o *SqlView) GetExternalAccess() bool {
	if o == nil || IsNil(o.ExternalAccess) {
		var ret bool
		return ret
	}
	return *o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetExternalAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAccess) {
		return nil, false
	}
	return o.ExternalAccess, true
}

// HasExternalAccess returns a boolean if a field has been set.
func (o *SqlView) HasExternalAccess() bool {
	if o != nil && !IsNil(o.ExternalAccess) {
		return true
	}

	return false
}

// SetExternalAccess gets a reference to the given bool and assigns it to the ExternalAccess field.
func (o *SqlView) SetExternalAccess(v bool) {
	o.ExternalAccess = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *SqlView) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *SqlView) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *SqlView) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *SqlView) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *SqlView) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *SqlView) SetFavorites(v []string) {
	o.Favorites = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *SqlView) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *SqlView) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *SqlView) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SqlView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SqlView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SqlView) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *SqlView) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *SqlView) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *SqlView) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *SqlView) GetLastUpdatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetLastUpdatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *SqlView) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the LastUpdatedBy field.
func (o *SqlView) SetLastUpdatedBy(v AggregateDataExchangeCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SqlView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SqlView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SqlView) SetName(v string) {
	o.Name = &v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *SqlView) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *SqlView) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *SqlView) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *SqlView) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *SqlView) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *SqlView) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetSqlQuery returns the SqlQuery field value if set, zero value otherwise.
func (o *SqlView) GetSqlQuery() string {
	if o == nil || IsNil(o.SqlQuery) {
		var ret string
		return ret
	}
	return *o.SqlQuery
}

// GetSqlQueryOk returns a tuple with the SqlQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetSqlQueryOk() (*string, bool) {
	if o == nil || IsNil(o.SqlQuery) {
		return nil, false
	}
	return o.SqlQuery, true
}

// HasSqlQuery returns a boolean if a field has been set.
func (o *SqlView) HasSqlQuery() bool {
	if o != nil && !IsNil(o.SqlQuery) {
		return true
	}

	return false
}

// SetSqlQuery gets a reference to the given string and assigns it to the SqlQuery field.
func (o *SqlView) SetSqlQuery(v string) {
	o.SqlQuery = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *SqlView) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *SqlView) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *SqlView) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetType returns the Type field value
func (o *SqlView) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SqlView) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SqlView) SetType(v string) {
	o.Type = v
}

// GetUpdateJobId returns the UpdateJobId field value if set, zero value otherwise.
func (o *SqlView) GetUpdateJobId() string {
	if o == nil || IsNil(o.UpdateJobId) {
		var ret string
		return ret
	}
	return *o.UpdateJobId
}

// GetUpdateJobIdOk returns a tuple with the UpdateJobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetUpdateJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateJobId) {
		return nil, false
	}
	return o.UpdateJobId, true
}

// HasUpdateJobId returns a boolean if a field has been set.
func (o *SqlView) HasUpdateJobId() bool {
	if o != nil && !IsNil(o.UpdateJobId) {
		return true
	}

	return false
}

// SetUpdateJobId gets a reference to the given string and assigns it to the UpdateJobId field.
func (o *SqlView) SetUpdateJobId(v string) {
	o.UpdateJobId = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SqlView) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SqlView) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *SqlView) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *SqlView) GetUserAccesses() []LegacyUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []LegacyUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetUserAccessesOk() ([]LegacyUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *SqlView) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []LegacyUserAccess and assigns it to the UserAccesses field.
func (o *SqlView) SetUserAccesses(v []LegacyUserAccess) {
	o.UserAccesses = v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *SqlView) GetUserGroupAccesses() []LegacyUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []LegacyUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlView) GetUserGroupAccessesOk() ([]LegacyUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *SqlView) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []LegacyUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *SqlView) SetUserGroupAccesses(v []LegacyUserGroupAccess) {
	o.UserGroupAccesses = v
}

func (o SqlView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	toSerialize["cacheStrategy"] = o.CacheStrategy
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.ExternalAccess) {
		toSerialize["externalAccess"] = o.ExternalAccess
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.SqlQuery) {
		toSerialize["sqlQuery"] = o.SqlQuery
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UpdateJobId) {
		toSerialize["updateJobId"] = o.UpdateJobId
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	return toSerialize, nil
}

func (o *SqlView) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cacheStrategy",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSqlView := _SqlView{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSqlView)

	if err != nil {
		return err
	}

	*o = SqlView(varSqlView)

	return err
}

type NullableSqlView struct {
	value *SqlView
	isSet bool
}

func (v NullableSqlView) Get() *SqlView {
	return v.value
}

func (v *NullableSqlView) Set(val *SqlView) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlView) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlView(val *SqlView) *NullableSqlView {
	return &NullableSqlView{value: val, isSet: true}
}

func (v NullableSqlView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
