/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ProgramType the model 'ProgramType'
type ProgramType string

// List of ProgramType
const (
	PROGRAMTYPE_WITH_REGISTRATION    ProgramType = "WITH_REGISTRATION"
	PROGRAMTYPE_WITHOUT_REGISTRATION ProgramType = "WITHOUT_REGISTRATION"
)

// All allowed values of ProgramType enum
var AllowedProgramTypeEnumValues = []ProgramType{
	"WITH_REGISTRATION",
	"WITHOUT_REGISTRATION",
}

func (v *ProgramType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProgramType(value)
	for _, existing := range AllowedProgramTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProgramType", value)
}

// NewProgramTypeFromValue returns a pointer to a valid ProgramType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProgramTypeFromValue(v string) (*ProgramType, error) {
	ev := ProgramType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProgramType: valid values are %v", v, AllowedProgramTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProgramType) IsValid() bool {
	for _, existing := range AllowedProgramTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramType value
func (v ProgramType) Ptr() *ProgramType {
	return &v
}

type NullableProgramType struct {
	value *ProgramType
	isSet bool
}

func (v NullableProgramType) Get() *ProgramType {
	return v.value
}

func (v *NullableProgramType) Set(val *ProgramType) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramType) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramType(val *ProgramType) *NullableProgramType {
	return &NullableProgramType{value: val, isSet: true}
}

func (v NullableProgramType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
