/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ViewMode the model 'ViewMode'
type ViewMode string

// List of ViewMode
const (
	VIEWMODE_EXECUTOR ViewMode = "EXECUTOR"
	VIEWMODE_RECEIVER ViewMode = "RECEIVER"
)

// All allowed values of ViewMode enum
var AllowedViewModeEnumValues = []ViewMode{
	"EXECUTOR",
	"RECEIVER",
}

func (v *ViewMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ViewMode(value)
	for _, existing := range AllowedViewModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ViewMode", value)
}

// NewViewModeFromValue returns a pointer to a valid ViewMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewViewModeFromValue(v string) (*ViewMode, error) {
	ev := ViewMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ViewMode: valid values are %v", v, AllowedViewModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ViewMode) IsValid() bool {
	for _, existing := range AllowedViewModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ViewMode value
func (v ViewMode) Ptr() *ViewMode {
	return &v
}

type NullableViewMode struct {
	value *ViewMode
	isSet bool
}

func (v NullableViewMode) Get() *ViewMode {
	return v.value
}

func (v *NullableViewMode) Set(val *ViewMode) {
	v.value = val
	v.isSet = true
}

func (v NullableViewMode) IsSet() bool {
	return v.isSet
}

func (v *NullableViewMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewMode(val *ViewMode) *NullableViewMode {
	return &NullableViewMode{value: val, isSet: true}
}

func (v NullableViewMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
