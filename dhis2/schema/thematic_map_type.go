/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ThematicMapType the model 'ThematicMapType'
type ThematicMapType string

// List of ThematicMapType
const (
	THEMATICMAPTYPE_CHOROPLETH ThematicMapType = "CHOROPLETH"
	THEMATICMAPTYPE_BUBBLE     ThematicMapType = "BUBBLE"
)

// All allowed values of ThematicMapType enum
var AllowedThematicMapTypeEnumValues = []ThematicMapType{
	"CHOROPLETH",
	"BUBBLE",
}

func (v *ThematicMapType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThematicMapType(value)
	for _, existing := range AllowedThematicMapTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThematicMapType", value)
}

// NewThematicMapTypeFromValue returns a pointer to a valid ThematicMapType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThematicMapTypeFromValue(v string) (*ThematicMapType, error) {
	ev := ThematicMapType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThematicMapType: valid values are %v", v, AllowedThematicMapTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThematicMapType) IsValid() bool {
	for _, existing := range AllowedThematicMapTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ThematicMapType value
func (v ThematicMapType) Ptr() *ThematicMapType {
	return &v
}

type NullableThematicMapType struct {
	value *ThematicMapType
	isSet bool
}

func (v NullableThematicMapType) Get() *ThematicMapType {
	return v.value
}

func (v *NullableThematicMapType) Set(val *ThematicMapType) {
	v.value = val
	v.isSet = true
}

func (v NullableThematicMapType) IsSet() bool {
	return v.isSet
}

func (v *NullableThematicMapType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThematicMapType(val *ThematicMapType) *NullableThematicMapType {
	return &NullableThematicMapType{value: val, isSet: true}
}

func (v NullableThematicMapType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThematicMapType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
