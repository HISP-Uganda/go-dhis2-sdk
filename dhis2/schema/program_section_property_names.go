/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ProgramSectionPropertyNames the model 'ProgramSectionPropertyNames'
type ProgramSectionPropertyNames string

// List of ProgramSectionPropertyNames
const (
	PROGRAMSECTIONPROPERTYNAMES_ACCESS                    ProgramSectionPropertyNames = "access"
	PROGRAMSECTIONPROPERTYNAMES_ATTRIBUTE_VALUES          ProgramSectionPropertyNames = "attributeValues"
	PROGRAMSECTIONPROPERTYNAMES_CODE                      ProgramSectionPropertyNames = "code"
	PROGRAMSECTIONPROPERTYNAMES_CREATED                   ProgramSectionPropertyNames = "created"
	PROGRAMSECTIONPROPERTYNAMES_CREATED_BY                ProgramSectionPropertyNames = "createdBy"
	PROGRAMSECTIONPROPERTYNAMES_DESCRIPTION               ProgramSectionPropertyNames = "description"
	PROGRAMSECTIONPROPERTYNAMES_DISPLAY_DESCRIPTION       ProgramSectionPropertyNames = "displayDescription"
	PROGRAMSECTIONPROPERTYNAMES_DISPLAY_FORM_NAME         ProgramSectionPropertyNames = "displayFormName"
	PROGRAMSECTIONPROPERTYNAMES_DISPLAY_NAME              ProgramSectionPropertyNames = "displayName"
	PROGRAMSECTIONPROPERTYNAMES_DISPLAY_SHORT_NAME        ProgramSectionPropertyNames = "displayShortName"
	PROGRAMSECTIONPROPERTYNAMES_FAVORITE                  ProgramSectionPropertyNames = "favorite"
	PROGRAMSECTIONPROPERTYNAMES_FAVORITES                 ProgramSectionPropertyNames = "favorites"
	PROGRAMSECTIONPROPERTYNAMES_FORM_NAME                 ProgramSectionPropertyNames = "formName"
	PROGRAMSECTIONPROPERTYNAMES_HREF                      ProgramSectionPropertyNames = "href"
	PROGRAMSECTIONPROPERTYNAMES_ID                        ProgramSectionPropertyNames = "id"
	PROGRAMSECTIONPROPERTYNAMES_LAST_UPDATED              ProgramSectionPropertyNames = "lastUpdated"
	PROGRAMSECTIONPROPERTYNAMES_LAST_UPDATED_BY           ProgramSectionPropertyNames = "lastUpdatedBy"
	PROGRAMSECTIONPROPERTYNAMES_NAME                      ProgramSectionPropertyNames = "name"
	PROGRAMSECTIONPROPERTYNAMES_PROGRAM                   ProgramSectionPropertyNames = "program"
	PROGRAMSECTIONPROPERTYNAMES_RENDER_TYPE               ProgramSectionPropertyNames = "renderType"
	PROGRAMSECTIONPROPERTYNAMES_SHARING                   ProgramSectionPropertyNames = "sharing"
	PROGRAMSECTIONPROPERTYNAMES_SHORT_NAME                ProgramSectionPropertyNames = "shortName"
	PROGRAMSECTIONPROPERTYNAMES_SORT_ORDER                ProgramSectionPropertyNames = "sortOrder"
	PROGRAMSECTIONPROPERTYNAMES_STYLE                     ProgramSectionPropertyNames = "style"
	PROGRAMSECTIONPROPERTYNAMES_TRACKED_ENTITY_ATTRIBUTES ProgramSectionPropertyNames = "trackedEntityAttributes"
	PROGRAMSECTIONPROPERTYNAMES_TRANSLATIONS              ProgramSectionPropertyNames = "translations"
)

// All allowed values of ProgramSectionPropertyNames enum
var AllowedProgramSectionPropertyNamesEnumValues = []ProgramSectionPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"program",
	"renderType",
	"sharing",
	"shortName",
	"sortOrder",
	"style",
	"trackedEntityAttributes",
	"translations",
}

func (v *ProgramSectionPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProgramSectionPropertyNames(value)
	for _, existing := range AllowedProgramSectionPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProgramSectionPropertyNames", value)
}

// NewProgramSectionPropertyNamesFromValue returns a pointer to a valid ProgramSectionPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProgramSectionPropertyNamesFromValue(v string) (*ProgramSectionPropertyNames, error) {
	ev := ProgramSectionPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProgramSectionPropertyNames: valid values are %v", v, AllowedProgramSectionPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProgramSectionPropertyNames) IsValid() bool {
	for _, existing := range AllowedProgramSectionPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramSectionPropertyNames value
func (v ProgramSectionPropertyNames) Ptr() *ProgramSectionPropertyNames {
	return &v
}

type NullableProgramSectionPropertyNames struct {
	value *ProgramSectionPropertyNames
	isSet bool
}

func (v NullableProgramSectionPropertyNames) Get() *ProgramSectionPropertyNames {
	return v.value
}

func (v *NullableProgramSectionPropertyNames) Set(val *ProgramSectionPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramSectionPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramSectionPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramSectionPropertyNames(val *ProgramSectionPropertyNames) *NullableProgramSectionPropertyNames {
	return &NullableProgramSectionPropertyNames{value: val, isSet: true}
}

func (v NullableProgramSectionPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramSectionPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
