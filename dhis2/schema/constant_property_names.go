/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ConstantPropertyNames the model 'ConstantPropertyNames'
type ConstantPropertyNames string

// List of ConstantPropertyNames
const (
	CONSTANTPROPERTYNAMES_ACCESS              ConstantPropertyNames = "access"
	CONSTANTPROPERTYNAMES_ATTRIBUTE_VALUES    ConstantPropertyNames = "attributeValues"
	CONSTANTPROPERTYNAMES_CODE                ConstantPropertyNames = "code"
	CONSTANTPROPERTYNAMES_CREATED             ConstantPropertyNames = "created"
	CONSTANTPROPERTYNAMES_CREATED_BY          ConstantPropertyNames = "createdBy"
	CONSTANTPROPERTYNAMES_DESCRIPTION         ConstantPropertyNames = "description"
	CONSTANTPROPERTYNAMES_DISPLAY_DESCRIPTION ConstantPropertyNames = "displayDescription"
	CONSTANTPROPERTYNAMES_DISPLAY_FORM_NAME   ConstantPropertyNames = "displayFormName"
	CONSTANTPROPERTYNAMES_DISPLAY_NAME        ConstantPropertyNames = "displayName"
	CONSTANTPROPERTYNAMES_DISPLAY_SHORT_NAME  ConstantPropertyNames = "displayShortName"
	CONSTANTPROPERTYNAMES_FAVORITE            ConstantPropertyNames = "favorite"
	CONSTANTPROPERTYNAMES_FAVORITES           ConstantPropertyNames = "favorites"
	CONSTANTPROPERTYNAMES_FORM_NAME           ConstantPropertyNames = "formName"
	CONSTANTPROPERTYNAMES_HREF                ConstantPropertyNames = "href"
	CONSTANTPROPERTYNAMES_ID                  ConstantPropertyNames = "id"
	CONSTANTPROPERTYNAMES_LAST_UPDATED        ConstantPropertyNames = "lastUpdated"
	CONSTANTPROPERTYNAMES_LAST_UPDATED_BY     ConstantPropertyNames = "lastUpdatedBy"
	CONSTANTPROPERTYNAMES_NAME                ConstantPropertyNames = "name"
	CONSTANTPROPERTYNAMES_SHARING             ConstantPropertyNames = "sharing"
	CONSTANTPROPERTYNAMES_SHORT_NAME          ConstantPropertyNames = "shortName"
	CONSTANTPROPERTYNAMES_TRANSLATIONS        ConstantPropertyNames = "translations"
	CONSTANTPROPERTYNAMES_VALUE               ConstantPropertyNames = "value"
)

// All allowed values of ConstantPropertyNames enum
var AllowedConstantPropertyNamesEnumValues = []ConstantPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"sharing",
	"shortName",
	"translations",
	"value",
}

func (v *ConstantPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConstantPropertyNames(value)
	for _, existing := range AllowedConstantPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConstantPropertyNames", value)
}

// NewConstantPropertyNamesFromValue returns a pointer to a valid ConstantPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConstantPropertyNamesFromValue(v string) (*ConstantPropertyNames, error) {
	ev := ConstantPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConstantPropertyNames: valid values are %v", v, AllowedConstantPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConstantPropertyNames) IsValid() bool {
	for _, existing := range AllowedConstantPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConstantPropertyNames value
func (v ConstantPropertyNames) Ptr() *ConstantPropertyNames {
	return &v
}

type NullableConstantPropertyNames struct {
	value *ConstantPropertyNames
	isSet bool
}

func (v NullableConstantPropertyNames) Get() *ConstantPropertyNames {
	return v.value
}

func (v *NullableConstantPropertyNames) Set(val *ConstantPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableConstantPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableConstantPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstantPropertyNames(val *ConstantPropertyNames) *NullableConstantPropertyNames {
	return &NullableConstantPropertyNames{value: val, isSet: true}
}

func (v NullableConstantPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstantPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
