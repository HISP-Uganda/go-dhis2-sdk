/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the PersistenceReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersistenceReport{}

// PersistenceReport struct for PersistenceReport
type PersistenceReport struct {
	// keys are class org.hisp.dhis.tracker.TrackerType
	TypeReportMap *map[string]TrackerTypeReport `json:"typeReportMap,omitempty"`
}

// NewPersistenceReport instantiates a new PersistenceReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersistenceReport() *PersistenceReport {
	this := PersistenceReport{}
	return &this
}

// NewPersistenceReportWithDefaults instantiates a new PersistenceReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersistenceReportWithDefaults() *PersistenceReport {
	this := PersistenceReport{}
	return &this
}

// GetTypeReportMap returns the TypeReportMap field value if set, zero value otherwise.
func (o *PersistenceReport) GetTypeReportMap() map[string]TrackerTypeReport {
	if o == nil || IsNil(o.TypeReportMap) {
		var ret map[string]TrackerTypeReport
		return ret
	}
	return *o.TypeReportMap
}

// GetTypeReportMapOk returns a tuple with the TypeReportMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersistenceReport) GetTypeReportMapOk() (*map[string]TrackerTypeReport, bool) {
	if o == nil || IsNil(o.TypeReportMap) {
		return nil, false
	}
	return o.TypeReportMap, true
}

// HasTypeReportMap returns a boolean if a field has been set.
func (o *PersistenceReport) HasTypeReportMap() bool {
	if o != nil && !IsNil(o.TypeReportMap) {
		return true
	}

	return false
}

// SetTypeReportMap gets a reference to the given map[string]TrackerTypeReport and assigns it to the TypeReportMap field.
func (o *PersistenceReport) SetTypeReportMap(v map[string]TrackerTypeReport) {
	o.TypeReportMap = &v
}

func (o PersistenceReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersistenceReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TypeReportMap) {
		toSerialize["typeReportMap"] = o.TypeReportMap
	}
	return toSerialize, nil
}

type NullablePersistenceReport struct {
	value *PersistenceReport
	isSet bool
}

func (v NullablePersistenceReport) Get() *PersistenceReport {
	return v.value
}

func (v *NullablePersistenceReport) Set(val *PersistenceReport) {
	v.value = val
	v.isSet = true
}

func (v NullablePersistenceReport) IsSet() bool {
	return v.isSet
}

func (v *NullablePersistenceReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersistenceReport(val *PersistenceReport) *NullablePersistenceReport {
	return &NullablePersistenceReport{value: val, isSet: true}
}

func (v NullablePersistenceReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersistenceReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
