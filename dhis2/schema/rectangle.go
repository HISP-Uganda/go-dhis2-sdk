/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Rectangle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rectangle{}

// Rectangle struct for Rectangle
type Rectangle struct {
	Count  int64   `json:"count"`
	Extent *string `json:"extent,omitempty"`
}

type _Rectangle Rectangle

// NewRectangle instantiates a new Rectangle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRectangle(count int64) *Rectangle {
	this := Rectangle{}
	this.Count = count
	return &this
}

// NewRectangleWithDefaults instantiates a new Rectangle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRectangleWithDefaults() *Rectangle {
	this := Rectangle{}
	return &this
}

// GetCount returns the Count field value
func (o *Rectangle) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *Rectangle) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *Rectangle) SetCount(v int64) {
	o.Count = v
}

// GetExtent returns the Extent field value if set, zero value otherwise.
func (o *Rectangle) GetExtent() string {
	if o == nil || IsNil(o.Extent) {
		var ret string
		return ret
	}
	return *o.Extent
}

// GetExtentOk returns a tuple with the Extent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rectangle) GetExtentOk() (*string, bool) {
	if o == nil || IsNil(o.Extent) {
		return nil, false
	}
	return o.Extent, true
}

// HasExtent returns a boolean if a field has been set.
func (o *Rectangle) HasExtent() bool {
	if o != nil && !IsNil(o.Extent) {
		return true
	}

	return false
}

// SetExtent gets a reference to the given string and assigns it to the Extent field.
func (o *Rectangle) SetExtent(v string) {
	o.Extent = &v
}

func (o Rectangle) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rectangle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	if !IsNil(o.Extent) {
		toSerialize["extent"] = o.Extent
	}
	return toSerialize, nil
}

func (o *Rectangle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRectangle := _Rectangle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRectangle)

	if err != nil {
		return err
	}

	*o = Rectangle(varRectangle)

	return err
}

type NullableRectangle struct {
	value *Rectangle
	isSet bool
}

func (v NullableRectangle) Get() *Rectangle {
	return v.value
}

func (v *NullableRectangle) Set(val *Rectangle) {
	v.value = val
	v.isSet = true
}

func (v NullableRectangle) IsSet() bool {
	return v.isSet
}

func (v *NullableRectangle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRectangle(val *Rectangle) *NullableRectangle {
	return &NullableRectangle{value: val, isSet: true}
}

func (v NullableRectangle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRectangle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
