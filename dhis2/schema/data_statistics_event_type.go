/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DataStatisticsEventType the model 'DataStatisticsEventType'
type DataStatisticsEventType string

// List of DataStatisticsEventType
const (
	DATASTATISTICSEVENTTYPE_VISUALIZATION_VIEW       DataStatisticsEventType = "VISUALIZATION_VIEW"
	DATASTATISTICSEVENTTYPE_MAP_VIEW                 DataStatisticsEventType = "MAP_VIEW"
	DATASTATISTICSEVENTTYPE_EVENT_REPORT_VIEW        DataStatisticsEventType = "EVENT_REPORT_VIEW"
	DATASTATISTICSEVENTTYPE_EVENT_CHART_VIEW         DataStatisticsEventType = "EVENT_CHART_VIEW"
	DATASTATISTICSEVENTTYPE_EVENT_VISUALIZATION_VIEW DataStatisticsEventType = "EVENT_VISUALIZATION_VIEW"
	DATASTATISTICSEVENTTYPE_DASHBOARD_VIEW           DataStatisticsEventType = "DASHBOARD_VIEW"
	DATASTATISTICSEVENTTYPE_PASSIVE_DASHBOARD_VIEW   DataStatisticsEventType = "PASSIVE_DASHBOARD_VIEW"
	DATASTATISTICSEVENTTYPE_DATA_SET_REPORT_VIEW     DataStatisticsEventType = "DATA_SET_REPORT_VIEW"
	DATASTATISTICSEVENTTYPE_TOTAL_VIEW               DataStatisticsEventType = "TOTAL_VIEW"
	DATASTATISTICSEVENTTYPE_ACTIVE_USERS             DataStatisticsEventType = "ACTIVE_USERS"
)

// All allowed values of DataStatisticsEventType enum
var AllowedDataStatisticsEventTypeEnumValues = []DataStatisticsEventType{
	"VISUALIZATION_VIEW",
	"MAP_VIEW",
	"EVENT_REPORT_VIEW",
	"EVENT_CHART_VIEW",
	"EVENT_VISUALIZATION_VIEW",
	"DASHBOARD_VIEW",
	"PASSIVE_DASHBOARD_VIEW",
	"DATA_SET_REPORT_VIEW",
	"TOTAL_VIEW",
	"ACTIVE_USERS",
}

func (v *DataStatisticsEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataStatisticsEventType(value)
	for _, existing := range AllowedDataStatisticsEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataStatisticsEventType", value)
}

// NewDataStatisticsEventTypeFromValue returns a pointer to a valid DataStatisticsEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataStatisticsEventTypeFromValue(v string) (*DataStatisticsEventType, error) {
	ev := DataStatisticsEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataStatisticsEventType: valid values are %v", v, AllowedDataStatisticsEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataStatisticsEventType) IsValid() bool {
	for _, existing := range AllowedDataStatisticsEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataStatisticsEventType value
func (v DataStatisticsEventType) Ptr() *DataStatisticsEventType {
	return &v
}

type NullableDataStatisticsEventType struct {
	value *DataStatisticsEventType
	isSet bool
}

func (v NullableDataStatisticsEventType) Get() *DataStatisticsEventType {
	return v.value
}

func (v *NullableDataStatisticsEventType) Set(val *DataStatisticsEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStatisticsEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStatisticsEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStatisticsEventType(val *DataStatisticsEventType) *NullableDataStatisticsEventType {
	return &NullableDataStatisticsEventType{value: val, isSet: true}
}

func (v NullableDataStatisticsEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStatisticsEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
