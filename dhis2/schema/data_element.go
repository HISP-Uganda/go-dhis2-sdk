/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DataElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataElement{}

// DataElement struct for DataElement
type DataElement struct {
	Access             *Access                                    `json:"access,omitempty"`
	AggregationLevels  []int32                                    `json:"aggregationLevels,omitempty"`
	AggregationType    string                                     `json:"aggregationType"`
	AttributeValues    []AttributeValue                           `json:"attributeValues,omitempty"`
	CategoryCombo      *CategoryCategoryCombosInner               `json:"categoryCombo,omitempty"`
	Code               *string                                    `json:"code,omitempty"`
	CommentOptionSet   *AttributeOptionSet                        `json:"commentOptionSet,omitempty"`
	Created            *time.Time                                 `json:"created,omitempty"`
	CreatedBy          *AggregateDataExchangeCreatedBy            `json:"createdBy,omitempty"`
	DataElementGroups  []ConfigurationInfrastructuralDataElements `json:"dataElementGroups,omitempty"`
	DataSetElements    []DataSetElement                           `json:"dataSetElements,omitempty"`
	Description        *string                                    `json:"description,omitempty"`
	DimensionItem      *string                                    `json:"dimensionItem,omitempty"`
	DisplayDescription *string                                    `json:"displayDescription,omitempty"`
	DisplayFormName    *string                                    `json:"displayFormName,omitempty"`
	DisplayName        *string                                    `json:"displayName,omitempty"`
	DisplayShortName   *string                                    `json:"displayShortName,omitempty"`
	DomainType         string                                     `json:"domainType"`
	ExternalAccess     *bool                                      `json:"externalAccess,omitempty"`
	Favorite           *bool                                      `json:"favorite,omitempty"`
	Favorites          []string                                   `json:"favorites,omitempty"`
	FieldMask          *string                                    `json:"fieldMask,omitempty"`
	FormName           *string                                    `json:"formName,omitempty"`
	Href               *string                                    `json:"href,omitempty"`
	Id                 *string                                    `json:"id,omitempty"`
	LastUpdated        *time.Time                                 `json:"lastUpdated,omitempty"`
	LastUpdatedBy      *AggregateDataExchangeCreatedBy            `json:"lastUpdatedBy,omitempty"`
	LegendSet          *CategoryLegendSet                         `json:"legendSet,omitempty"`
	LegendSets         []CategoryLegendSet                        `json:"legendSets,omitempty"`
	Name               *string                                    `json:"name,omitempty"`
	OptionSet          *AttributeOptionSet                        `json:"optionSet,omitempty"`
	OptionSetValue     *bool                                      `json:"optionSetValue,omitempty"`
	PublicAccess       *string                                    `json:"publicAccess,omitempty"`
	QueryMods          *QueryModifiers                            `json:"queryMods,omitempty"`
	Sharing            *Sharing                                   `json:"sharing,omitempty"`
	ShortName          *string                                    `json:"shortName,omitempty"`
	Style              *ObjectStyle                               `json:"style,omitempty"`
	Translations       []Translation                              `json:"translations,omitempty"`
	Url                *string                                    `json:"url,omitempty"`
	User               *AggregateDataExchangeCreatedBy            `json:"user,omitempty"`
	UserAccesses       []LegacyUserAccess                         `json:"userAccesses,omitempty"`
	UserGroupAccesses  []LegacyUserGroupAccess                    `json:"userGroupAccesses,omitempty"`
	ValueType          string                                     `json:"valueType"`
	ValueTypeOptions   *FileTypeValueOptions                      `json:"valueTypeOptions,omitempty"`
	ZeroIsSignificant  *bool                                      `json:"zeroIsSignificant,omitempty"`
}

type _DataElement DataElement

// NewDataElement instantiates a new DataElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataElement(aggregationType string, domainType string, valueType string) *DataElement {
	this := DataElement{}
	this.AggregationType = aggregationType
	this.DomainType = domainType
	this.ValueType = valueType
	return &this
}

// NewDataElementWithDefaults instantiates a new DataElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataElementWithDefaults() *DataElement {
	this := DataElement{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *DataElement) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *DataElement) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *DataElement) SetAccess(v Access) {
	o.Access = &v
}

// GetAggregationLevels returns the AggregationLevels field value if set, zero value otherwise.
func (o *DataElement) GetAggregationLevels() []int32 {
	if o == nil || IsNil(o.AggregationLevels) {
		var ret []int32
		return ret
	}
	return o.AggregationLevels
}

// GetAggregationLevelsOk returns a tuple with the AggregationLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetAggregationLevelsOk() ([]int32, bool) {
	if o == nil || IsNil(o.AggregationLevels) {
		return nil, false
	}
	return o.AggregationLevels, true
}

// HasAggregationLevels returns a boolean if a field has been set.
func (o *DataElement) HasAggregationLevels() bool {
	if o != nil && !IsNil(o.AggregationLevels) {
		return true
	}

	return false
}

// SetAggregationLevels gets a reference to the given []int32 and assigns it to the AggregationLevels field.
func (o *DataElement) SetAggregationLevels(v []int32) {
	o.AggregationLevels = v
}

// GetAggregationType returns the AggregationType field value
func (o *DataElement) GetAggregationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *DataElement) GetAggregationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *DataElement) SetAggregationType(v string) {
	o.AggregationType = v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *DataElement) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *DataElement) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *DataElement) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCategoryCombo returns the CategoryCombo field value if set, zero value otherwise.
func (o *DataElement) GetCategoryCombo() CategoryCategoryCombosInner {
	if o == nil || IsNil(o.CategoryCombo) {
		var ret CategoryCategoryCombosInner
		return ret
	}
	return *o.CategoryCombo
}

// GetCategoryComboOk returns a tuple with the CategoryCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetCategoryComboOk() (*CategoryCategoryCombosInner, bool) {
	if o == nil || IsNil(o.CategoryCombo) {
		return nil, false
	}
	return o.CategoryCombo, true
}

// HasCategoryCombo returns a boolean if a field has been set.
func (o *DataElement) HasCategoryCombo() bool {
	if o != nil && !IsNil(o.CategoryCombo) {
		return true
	}

	return false
}

// SetCategoryCombo gets a reference to the given CategoryCategoryCombosInner and assigns it to the CategoryCombo field.
func (o *DataElement) SetCategoryCombo(v CategoryCategoryCombosInner) {
	o.CategoryCombo = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *DataElement) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *DataElement) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *DataElement) SetCode(v string) {
	o.Code = &v
}

// GetCommentOptionSet returns the CommentOptionSet field value if set, zero value otherwise.
func (o *DataElement) GetCommentOptionSet() AttributeOptionSet {
	if o == nil || IsNil(o.CommentOptionSet) {
		var ret AttributeOptionSet
		return ret
	}
	return *o.CommentOptionSet
}

// GetCommentOptionSetOk returns a tuple with the CommentOptionSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetCommentOptionSetOk() (*AttributeOptionSet, bool) {
	if o == nil || IsNil(o.CommentOptionSet) {
		return nil, false
	}
	return o.CommentOptionSet, true
}

// HasCommentOptionSet returns a boolean if a field has been set.
func (o *DataElement) HasCommentOptionSet() bool {
	if o != nil && !IsNil(o.CommentOptionSet) {
		return true
	}

	return false
}

// SetCommentOptionSet gets a reference to the given AttributeOptionSet and assigns it to the CommentOptionSet field.
func (o *DataElement) SetCommentOptionSet(v AttributeOptionSet) {
	o.CommentOptionSet = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DataElement) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DataElement) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *DataElement) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DataElement) GetCreatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetCreatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DataElement) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the CreatedBy field.
func (o *DataElement) SetCreatedBy(v AggregateDataExchangeCreatedBy) {
	o.CreatedBy = &v
}

// GetDataElementGroups returns the DataElementGroups field value if set, zero value otherwise.
func (o *DataElement) GetDataElementGroups() []ConfigurationInfrastructuralDataElements {
	if o == nil || IsNil(o.DataElementGroups) {
		var ret []ConfigurationInfrastructuralDataElements
		return ret
	}
	return o.DataElementGroups
}

// GetDataElementGroupsOk returns a tuple with the DataElementGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetDataElementGroupsOk() ([]ConfigurationInfrastructuralDataElements, bool) {
	if o == nil || IsNil(o.DataElementGroups) {
		return nil, false
	}
	return o.DataElementGroups, true
}

// HasDataElementGroups returns a boolean if a field has been set.
func (o *DataElement) HasDataElementGroups() bool {
	if o != nil && !IsNil(o.DataElementGroups) {
		return true
	}

	return false
}

// SetDataElementGroups gets a reference to the given []ConfigurationInfrastructuralDataElements and assigns it to the DataElementGroups field.
func (o *DataElement) SetDataElementGroups(v []ConfigurationInfrastructuralDataElements) {
	o.DataElementGroups = v
}

// GetDataSetElements returns the DataSetElements field value if set, zero value otherwise.
func (o *DataElement) GetDataSetElements() []DataSetElement {
	if o == nil || IsNil(o.DataSetElements) {
		var ret []DataSetElement
		return ret
	}
	return o.DataSetElements
}

// GetDataSetElementsOk returns a tuple with the DataSetElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetDataSetElementsOk() ([]DataSetElement, bool) {
	if o == nil || IsNil(o.DataSetElements) {
		return nil, false
	}
	return o.DataSetElements, true
}

// HasDataSetElements returns a boolean if a field has been set.
func (o *DataElement) HasDataSetElements() bool {
	if o != nil && !IsNil(o.DataSetElements) {
		return true
	}

	return false
}

// SetDataSetElements gets a reference to the given []DataSetElement and assigns it to the DataSetElements field.
func (o *DataElement) SetDataSetElements(v []DataSetElement) {
	o.DataSetElements = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DataElement) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DataElement) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DataElement) SetDescription(v string) {
	o.Description = &v
}

// GetDimensionItem returns the DimensionItem field value if set, zero value otherwise.
func (o *DataElement) GetDimensionItem() string {
	if o == nil || IsNil(o.DimensionItem) {
		var ret string
		return ret
	}
	return *o.DimensionItem
}

// GetDimensionItemOk returns a tuple with the DimensionItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetDimensionItemOk() (*string, bool) {
	if o == nil || IsNil(o.DimensionItem) {
		return nil, false
	}
	return o.DimensionItem, true
}

// HasDimensionItem returns a boolean if a field has been set.
func (o *DataElement) HasDimensionItem() bool {
	if o != nil && !IsNil(o.DimensionItem) {
		return true
	}

	return false
}

// SetDimensionItem gets a reference to the given string and assigns it to the DimensionItem field.
func (o *DataElement) SetDimensionItem(v string) {
	o.DimensionItem = &v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *DataElement) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *DataElement) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *DataElement) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayFormName returns the DisplayFormName field value if set, zero value otherwise.
func (o *DataElement) GetDisplayFormName() string {
	if o == nil || IsNil(o.DisplayFormName) {
		var ret string
		return ret
	}
	return *o.DisplayFormName
}

// GetDisplayFormNameOk returns a tuple with the DisplayFormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetDisplayFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayFormName) {
		return nil, false
	}
	return o.DisplayFormName, true
}

// HasDisplayFormName returns a boolean if a field has been set.
func (o *DataElement) HasDisplayFormName() bool {
	if o != nil && !IsNil(o.DisplayFormName) {
		return true
	}

	return false
}

// SetDisplayFormName gets a reference to the given string and assigns it to the DisplayFormName field.
func (o *DataElement) SetDisplayFormName(v string) {
	o.DisplayFormName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DataElement) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DataElement) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DataElement) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *DataElement) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *DataElement) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *DataElement) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetDomainType returns the DomainType field value
func (o *DataElement) GetDomainType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainType
}

// GetDomainTypeOk returns a tuple with the DomainType field value
// and a boolean to check if the value has been set.
func (o *DataElement) GetDomainTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainType, true
}

// SetDomainType sets field value
func (o *DataElement) SetDomainType(v string) {
	o.DomainType = v
}

// GetExternalAccess returns the ExternalAccess field value if set, zero value otherwise.
func (o *DataElement) GetExternalAccess() bool {
	if o == nil || IsNil(o.ExternalAccess) {
		var ret bool
		return ret
	}
	return *o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetExternalAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAccess) {
		return nil, false
	}
	return o.ExternalAccess, true
}

// HasExternalAccess returns a boolean if a field has been set.
func (o *DataElement) HasExternalAccess() bool {
	if o != nil && !IsNil(o.ExternalAccess) {
		return true
	}

	return false
}

// SetExternalAccess gets a reference to the given bool and assigns it to the ExternalAccess field.
func (o *DataElement) SetExternalAccess(v bool) {
	o.ExternalAccess = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *DataElement) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *DataElement) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *DataElement) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *DataElement) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *DataElement) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *DataElement) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFieldMask returns the FieldMask field value if set, zero value otherwise.
func (o *DataElement) GetFieldMask() string {
	if o == nil || IsNil(o.FieldMask) {
		var ret string
		return ret
	}
	return *o.FieldMask
}

// GetFieldMaskOk returns a tuple with the FieldMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetFieldMaskOk() (*string, bool) {
	if o == nil || IsNil(o.FieldMask) {
		return nil, false
	}
	return o.FieldMask, true
}

// HasFieldMask returns a boolean if a field has been set.
func (o *DataElement) HasFieldMask() bool {
	if o != nil && !IsNil(o.FieldMask) {
		return true
	}

	return false
}

// SetFieldMask gets a reference to the given string and assigns it to the FieldMask field.
func (o *DataElement) SetFieldMask(v string) {
	o.FieldMask = &v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *DataElement) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *DataElement) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *DataElement) SetFormName(v string) {
	o.FormName = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *DataElement) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *DataElement) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *DataElement) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataElement) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataElement) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataElement) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *DataElement) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *DataElement) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *DataElement) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *DataElement) GetLastUpdatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetLastUpdatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *DataElement) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the LastUpdatedBy field.
func (o *DataElement) SetLastUpdatedBy(v AggregateDataExchangeCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLegendSet returns the LegendSet field value if set, zero value otherwise.
func (o *DataElement) GetLegendSet() CategoryLegendSet {
	if o == nil || IsNil(o.LegendSet) {
		var ret CategoryLegendSet
		return ret
	}
	return *o.LegendSet
}

// GetLegendSetOk returns a tuple with the LegendSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetLegendSetOk() (*CategoryLegendSet, bool) {
	if o == nil || IsNil(o.LegendSet) {
		return nil, false
	}
	return o.LegendSet, true
}

// HasLegendSet returns a boolean if a field has been set.
func (o *DataElement) HasLegendSet() bool {
	if o != nil && !IsNil(o.LegendSet) {
		return true
	}

	return false
}

// SetLegendSet gets a reference to the given CategoryLegendSet and assigns it to the LegendSet field.
func (o *DataElement) SetLegendSet(v CategoryLegendSet) {
	o.LegendSet = &v
}

// GetLegendSets returns the LegendSets field value if set, zero value otherwise.
func (o *DataElement) GetLegendSets() []CategoryLegendSet {
	if o == nil || IsNil(o.LegendSets) {
		var ret []CategoryLegendSet
		return ret
	}
	return o.LegendSets
}

// GetLegendSetsOk returns a tuple with the LegendSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetLegendSetsOk() ([]CategoryLegendSet, bool) {
	if o == nil || IsNil(o.LegendSets) {
		return nil, false
	}
	return o.LegendSets, true
}

// HasLegendSets returns a boolean if a field has been set.
func (o *DataElement) HasLegendSets() bool {
	if o != nil && !IsNil(o.LegendSets) {
		return true
	}

	return false
}

// SetLegendSets gets a reference to the given []CategoryLegendSet and assigns it to the LegendSets field.
func (o *DataElement) SetLegendSets(v []CategoryLegendSet) {
	o.LegendSets = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataElement) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataElement) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataElement) SetName(v string) {
	o.Name = &v
}

// GetOptionSet returns the OptionSet field value if set, zero value otherwise.
func (o *DataElement) GetOptionSet() AttributeOptionSet {
	if o == nil || IsNil(o.OptionSet) {
		var ret AttributeOptionSet
		return ret
	}
	return *o.OptionSet
}

// GetOptionSetOk returns a tuple with the OptionSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetOptionSetOk() (*AttributeOptionSet, bool) {
	if o == nil || IsNil(o.OptionSet) {
		return nil, false
	}
	return o.OptionSet, true
}

// HasOptionSet returns a boolean if a field has been set.
func (o *DataElement) HasOptionSet() bool {
	if o != nil && !IsNil(o.OptionSet) {
		return true
	}

	return false
}

// SetOptionSet gets a reference to the given AttributeOptionSet and assigns it to the OptionSet field.
func (o *DataElement) SetOptionSet(v AttributeOptionSet) {
	o.OptionSet = &v
}

// GetOptionSetValue returns the OptionSetValue field value if set, zero value otherwise.
func (o *DataElement) GetOptionSetValue() bool {
	if o == nil || IsNil(o.OptionSetValue) {
		var ret bool
		return ret
	}
	return *o.OptionSetValue
}

// GetOptionSetValueOk returns a tuple with the OptionSetValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetOptionSetValueOk() (*bool, bool) {
	if o == nil || IsNil(o.OptionSetValue) {
		return nil, false
	}
	return o.OptionSetValue, true
}

// HasOptionSetValue returns a boolean if a field has been set.
func (o *DataElement) HasOptionSetValue() bool {
	if o != nil && !IsNil(o.OptionSetValue) {
		return true
	}

	return false
}

// SetOptionSetValue gets a reference to the given bool and assigns it to the OptionSetValue field.
func (o *DataElement) SetOptionSetValue(v bool) {
	o.OptionSetValue = &v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *DataElement) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *DataElement) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *DataElement) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetQueryMods returns the QueryMods field value if set, zero value otherwise.
func (o *DataElement) GetQueryMods() QueryModifiers {
	if o == nil || IsNil(o.QueryMods) {
		var ret QueryModifiers
		return ret
	}
	return *o.QueryMods
}

// GetQueryModsOk returns a tuple with the QueryMods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetQueryModsOk() (*QueryModifiers, bool) {
	if o == nil || IsNil(o.QueryMods) {
		return nil, false
	}
	return o.QueryMods, true
}

// HasQueryMods returns a boolean if a field has been set.
func (o *DataElement) HasQueryMods() bool {
	if o != nil && !IsNil(o.QueryMods) {
		return true
	}

	return false
}

// SetQueryMods gets a reference to the given QueryModifiers and assigns it to the QueryMods field.
func (o *DataElement) SetQueryMods(v QueryModifiers) {
	o.QueryMods = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *DataElement) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *DataElement) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *DataElement) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *DataElement) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *DataElement) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *DataElement) SetShortName(v string) {
	o.ShortName = &v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *DataElement) GetStyle() ObjectStyle {
	if o == nil || IsNil(o.Style) {
		var ret ObjectStyle
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetStyleOk() (*ObjectStyle, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *DataElement) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given ObjectStyle and assigns it to the Style field.
func (o *DataElement) SetStyle(v ObjectStyle) {
	o.Style = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *DataElement) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *DataElement) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *DataElement) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DataElement) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DataElement) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DataElement) SetUrl(v string) {
	o.Url = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DataElement) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DataElement) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *DataElement) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *DataElement) GetUserAccesses() []LegacyUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []LegacyUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetUserAccessesOk() ([]LegacyUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *DataElement) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []LegacyUserAccess and assigns it to the UserAccesses field.
func (o *DataElement) SetUserAccesses(v []LegacyUserAccess) {
	o.UserAccesses = v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *DataElement) GetUserGroupAccesses() []LegacyUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []LegacyUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetUserGroupAccessesOk() ([]LegacyUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *DataElement) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []LegacyUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *DataElement) SetUserGroupAccesses(v []LegacyUserGroupAccess) {
	o.UserGroupAccesses = v
}

// GetValueType returns the ValueType field value
func (o *DataElement) GetValueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *DataElement) GetValueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *DataElement) SetValueType(v string) {
	o.ValueType = v
}

// GetValueTypeOptions returns the ValueTypeOptions field value if set, zero value otherwise.
func (o *DataElement) GetValueTypeOptions() FileTypeValueOptions {
	if o == nil || IsNil(o.ValueTypeOptions) {
		var ret FileTypeValueOptions
		return ret
	}
	return *o.ValueTypeOptions
}

// GetValueTypeOptionsOk returns a tuple with the ValueTypeOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetValueTypeOptionsOk() (*FileTypeValueOptions, bool) {
	if o == nil || IsNil(o.ValueTypeOptions) {
		return nil, false
	}
	return o.ValueTypeOptions, true
}

// HasValueTypeOptions returns a boolean if a field has been set.
func (o *DataElement) HasValueTypeOptions() bool {
	if o != nil && !IsNil(o.ValueTypeOptions) {
		return true
	}

	return false
}

// SetValueTypeOptions gets a reference to the given FileTypeValueOptions and assigns it to the ValueTypeOptions field.
func (o *DataElement) SetValueTypeOptions(v FileTypeValueOptions) {
	o.ValueTypeOptions = &v
}

// GetZeroIsSignificant returns the ZeroIsSignificant field value if set, zero value otherwise.
func (o *DataElement) GetZeroIsSignificant() bool {
	if o == nil || IsNil(o.ZeroIsSignificant) {
		var ret bool
		return ret
	}
	return *o.ZeroIsSignificant
}

// GetZeroIsSignificantOk returns a tuple with the ZeroIsSignificant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataElement) GetZeroIsSignificantOk() (*bool, bool) {
	if o == nil || IsNil(o.ZeroIsSignificant) {
		return nil, false
	}
	return o.ZeroIsSignificant, true
}

// HasZeroIsSignificant returns a boolean if a field has been set.
func (o *DataElement) HasZeroIsSignificant() bool {
	if o != nil && !IsNil(o.ZeroIsSignificant) {
		return true
	}

	return false
}

// SetZeroIsSignificant gets a reference to the given bool and assigns it to the ZeroIsSignificant field.
func (o *DataElement) SetZeroIsSignificant(v bool) {
	o.ZeroIsSignificant = &v
}

func (o DataElement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AggregationLevels) {
		toSerialize["aggregationLevels"] = o.AggregationLevels
	}
	toSerialize["aggregationType"] = o.AggregationType
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.CategoryCombo) {
		toSerialize["categoryCombo"] = o.CategoryCombo
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CommentOptionSet) {
		toSerialize["commentOptionSet"] = o.CommentOptionSet
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DataElementGroups) {
		toSerialize["dataElementGroups"] = o.DataElementGroups
	}
	if !IsNil(o.DataSetElements) {
		toSerialize["dataSetElements"] = o.DataSetElements
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DimensionItem) {
		toSerialize["dimensionItem"] = o.DimensionItem
	}
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayFormName) {
		toSerialize["displayFormName"] = o.DisplayFormName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	toSerialize["domainType"] = o.DomainType
	if !IsNil(o.ExternalAccess) {
		toSerialize["externalAccess"] = o.ExternalAccess
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FieldMask) {
		toSerialize["fieldMask"] = o.FieldMask
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LegendSet) {
		toSerialize["legendSet"] = o.LegendSet
	}
	if !IsNil(o.LegendSets) {
		toSerialize["legendSets"] = o.LegendSets
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OptionSet) {
		toSerialize["optionSet"] = o.OptionSet
	}
	if !IsNil(o.OptionSetValue) {
		toSerialize["optionSetValue"] = o.OptionSetValue
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	if !IsNil(o.QueryMods) {
		toSerialize["queryMods"] = o.QueryMods
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	toSerialize["valueType"] = o.ValueType
	if !IsNil(o.ValueTypeOptions) {
		toSerialize["valueTypeOptions"] = o.ValueTypeOptions
	}
	if !IsNil(o.ZeroIsSignificant) {
		toSerialize["zeroIsSignificant"] = o.ZeroIsSignificant
	}
	return toSerialize, nil
}

func (o *DataElement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregationType",
		"domainType",
		"valueType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataElement := _DataElement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataElement)

	if err != nil {
		return err
	}

	*o = DataElement(varDataElement)

	return err
}

type NullableDataElement struct {
	value *DataElement
	isSet bool
}

func (v NullableDataElement) Get() *DataElement {
	return v.value
}

func (v *NullableDataElement) Set(val *DataElement) {
	v.value = val
	v.isSet = true
}

func (v NullableDataElement) IsSet() bool {
	return v.isSet
}

func (v *NullableDataElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataElement(val *DataElement) *NullableDataElement {
	return &NullableDataElement{value: val, isSet: true}
}

func (v NullableDataElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
