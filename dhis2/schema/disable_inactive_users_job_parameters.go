/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DisableInactiveUsersJobParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisableInactiveUsersJobParameters{}

// DisableInactiveUsersJobParameters struct for DisableInactiveUsersJobParameters
type DisableInactiveUsersJobParameters struct {
	InactiveMonths     int32  `json:"inactiveMonths"`
	ReminderDaysBefore *int32 `json:"reminderDaysBefore,omitempty"`
}

type _DisableInactiveUsersJobParameters DisableInactiveUsersJobParameters

// NewDisableInactiveUsersJobParameters instantiates a new DisableInactiveUsersJobParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisableInactiveUsersJobParameters(inactiveMonths int32) *DisableInactiveUsersJobParameters {
	this := DisableInactiveUsersJobParameters{}
	this.InactiveMonths = inactiveMonths
	return &this
}

// NewDisableInactiveUsersJobParametersWithDefaults instantiates a new DisableInactiveUsersJobParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisableInactiveUsersJobParametersWithDefaults() *DisableInactiveUsersJobParameters {
	this := DisableInactiveUsersJobParameters{}
	return &this
}

// GetInactiveMonths returns the InactiveMonths field value
func (o *DisableInactiveUsersJobParameters) GetInactiveMonths() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InactiveMonths
}

// GetInactiveMonthsOk returns a tuple with the InactiveMonths field value
// and a boolean to check if the value has been set.
func (o *DisableInactiveUsersJobParameters) GetInactiveMonthsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InactiveMonths, true
}

// SetInactiveMonths sets field value
func (o *DisableInactiveUsersJobParameters) SetInactiveMonths(v int32) {
	o.InactiveMonths = v
}

// GetReminderDaysBefore returns the ReminderDaysBefore field value if set, zero value otherwise.
func (o *DisableInactiveUsersJobParameters) GetReminderDaysBefore() int32 {
	if o == nil || IsNil(o.ReminderDaysBefore) {
		var ret int32
		return ret
	}
	return *o.ReminderDaysBefore
}

// GetReminderDaysBeforeOk returns a tuple with the ReminderDaysBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisableInactiveUsersJobParameters) GetReminderDaysBeforeOk() (*int32, bool) {
	if o == nil || IsNil(o.ReminderDaysBefore) {
		return nil, false
	}
	return o.ReminderDaysBefore, true
}

// HasReminderDaysBefore returns a boolean if a field has been set.
func (o *DisableInactiveUsersJobParameters) HasReminderDaysBefore() bool {
	if o != nil && !IsNil(o.ReminderDaysBefore) {
		return true
	}

	return false
}

// SetReminderDaysBefore gets a reference to the given int32 and assigns it to the ReminderDaysBefore field.
func (o *DisableInactiveUsersJobParameters) SetReminderDaysBefore(v int32) {
	o.ReminderDaysBefore = &v
}

func (o DisableInactiveUsersJobParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisableInactiveUsersJobParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["inactiveMonths"] = o.InactiveMonths
	if !IsNil(o.ReminderDaysBefore) {
		toSerialize["reminderDaysBefore"] = o.ReminderDaysBefore
	}
	return toSerialize, nil
}

func (o *DisableInactiveUsersJobParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"inactiveMonths",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDisableInactiveUsersJobParameters := _DisableInactiveUsersJobParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDisableInactiveUsersJobParameters)

	if err != nil {
		return err
	}

	*o = DisableInactiveUsersJobParameters(varDisableInactiveUsersJobParameters)

	return err
}

type NullableDisableInactiveUsersJobParameters struct {
	value *DisableInactiveUsersJobParameters
	isSet bool
}

func (v NullableDisableInactiveUsersJobParameters) Get() *DisableInactiveUsersJobParameters {
	return v.value
}

func (v *NullableDisableInactiveUsersJobParameters) Set(val *DisableInactiveUsersJobParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableDisableInactiveUsersJobParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableDisableInactiveUsersJobParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisableInactiveUsersJobParameters(val *DisableInactiveUsersJobParameters) *NullableDisableInactiveUsersJobParameters {
	return &NullableDisableInactiveUsersJobParameters{value: val, isSet: true}
}

func (v NullableDisableInactiveUsersJobParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisableInactiveUsersJobParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
