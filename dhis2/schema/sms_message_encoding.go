/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// SmsMessageEncoding the model 'SmsMessageEncoding'
type SmsMessageEncoding string

// List of SmsMessageEncoding
const (
	SMSMESSAGEENCODING_ENC7_BIT  SmsMessageEncoding = "ENC7BIT"
	SMSMESSAGEENCODING_ENC8_BIT  SmsMessageEncoding = "ENC8BIT"
	SMSMESSAGEENCODING_ENCUCS2   SmsMessageEncoding = "ENCUCS2"
	SMSMESSAGEENCODING_ENCCUSTOM SmsMessageEncoding = "ENCCUSTOM"
)

// All allowed values of SmsMessageEncoding enum
var AllowedSmsMessageEncodingEnumValues = []SmsMessageEncoding{
	"ENC7BIT",
	"ENC8BIT",
	"ENCUCS2",
	"ENCCUSTOM",
}

func (v *SmsMessageEncoding) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SmsMessageEncoding(value)
	for _, existing := range AllowedSmsMessageEncodingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SmsMessageEncoding", value)
}

// NewSmsMessageEncodingFromValue returns a pointer to a valid SmsMessageEncoding
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSmsMessageEncodingFromValue(v string) (*SmsMessageEncoding, error) {
	ev := SmsMessageEncoding(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SmsMessageEncoding: valid values are %v", v, AllowedSmsMessageEncodingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SmsMessageEncoding) IsValid() bool {
	for _, existing := range AllowedSmsMessageEncodingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SmsMessageEncoding value
func (v SmsMessageEncoding) Ptr() *SmsMessageEncoding {
	return &v
}

type NullableSmsMessageEncoding struct {
	value *SmsMessageEncoding
	isSet bool
}

func (v NullableSmsMessageEncoding) Get() *SmsMessageEncoding {
	return v.value
}

func (v *NullableSmsMessageEncoding) Set(val *SmsMessageEncoding) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsMessageEncoding) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsMessageEncoding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsMessageEncoding(val *SmsMessageEncoding) *NullableSmsMessageEncoding {
	return &NullableSmsMessageEncoding{value: val, isSet: true}
}

func (v NullableSmsMessageEncoding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsMessageEncoding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
