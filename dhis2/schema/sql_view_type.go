/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// SqlViewType the model 'SqlViewType'
type SqlViewType string

// List of SqlViewType
const (
	SQLVIEWTYPE_VIEW              SqlViewType = "VIEW"
	SQLVIEWTYPE_MATERIALIZED_VIEW SqlViewType = "MATERIALIZED_VIEW"
	SQLVIEWTYPE_QUERY             SqlViewType = "QUERY"
)

// All allowed values of SqlViewType enum
var AllowedSqlViewTypeEnumValues = []SqlViewType{
	"VIEW",
	"MATERIALIZED_VIEW",
	"QUERY",
}

func (v *SqlViewType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SqlViewType(value)
	for _, existing := range AllowedSqlViewTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SqlViewType", value)
}

// NewSqlViewTypeFromValue returns a pointer to a valid SqlViewType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSqlViewTypeFromValue(v string) (*SqlViewType, error) {
	ev := SqlViewType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SqlViewType: valid values are %v", v, AllowedSqlViewTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SqlViewType) IsValid() bool {
	for _, existing := range AllowedSqlViewTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SqlViewType value
func (v SqlViewType) Ptr() *SqlViewType {
	return &v
}

type NullableSqlViewType struct {
	value *SqlViewType
	isSet bool
}

func (v NullableSqlViewType) Get() *SqlViewType {
	return v.value
}

func (v *NullableSqlViewType) Set(val *SqlViewType) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlViewType) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlViewType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlViewType(val *SqlViewType) *NullableSqlViewType {
	return &NullableSqlViewType{value: val, isSet: true}
}

func (v NullableSqlViewType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlViewType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
