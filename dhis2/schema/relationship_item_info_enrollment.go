/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RelationshipItemInfoEnrollment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipItemInfoEnrollment{}

// RelationshipItemInfoEnrollment struct for RelationshipItemInfoEnrollment
type RelationshipItemInfoEnrollment struct {
	Attributes      []AttributeInfo                             `json:"attributes,omitempty"`
	CompletedAt     *AttributeInfoCreatedAt                     `json:"completedAt,omitempty"`
	CompletedBy     *string                                     `json:"completedBy,omitempty"`
	CreatedAt       *AttributeInfoCreatedAt                     `json:"createdAt,omitempty"`
	CreatedAtClient *AttributeInfoCreatedAt                     `json:"createdAtClient,omitempty"`
	CreatedBy       *TrackerUser                                `json:"createdBy,omitempty"`
	Deleted         *bool                                       `json:"deleted,omitempty"`
	EnrolledAt      *AttributeInfoCreatedAt                     `json:"enrolledAt,omitempty"`
	Enrollment      *string                                     `json:"enrollment,omitempty"`
	Events          []RelationshipItemInfoEnrollmentEventsInner `json:"events,omitempty"`
	FollowUp        *bool                                       `json:"followUp,omitempty"`
	Geometry        map[string]interface{}                      `json:"geometry,omitempty"`
	Notes           []NoteInfo                                  `json:"notes,omitempty"`
	OccurredAt      *AttributeInfoCreatedAt                     `json:"occurredAt,omitempty"`
	OrgUnit         *string                                     `json:"orgUnit,omitempty"`
	OrgUnitName     *string                                     `json:"orgUnitName,omitempty"`
	Program         *string                                     `json:"program,omitempty"`
	Status          string                                      `json:"status"`
	StoredBy        *string                                     `json:"storedBy,omitempty"`
	TrackedEntity   *string                                     `json:"trackedEntity,omitempty"`
	UpdatedAt       *AttributeInfoCreatedAt                     `json:"updatedAt,omitempty"`
	UpdatedAtClient *AttributeInfoCreatedAt                     `json:"updatedAtClient,omitempty"`
	UpdatedBy       *TrackerUser                                `json:"updatedBy,omitempty"`
}

type _RelationshipItemInfoEnrollment RelationshipItemInfoEnrollment

// NewRelationshipItemInfoEnrollment instantiates a new RelationshipItemInfoEnrollment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipItemInfoEnrollment(status string) *RelationshipItemInfoEnrollment {
	this := RelationshipItemInfoEnrollment{}
	this.Status = status
	return &this
}

// NewRelationshipItemInfoEnrollmentWithDefaults instantiates a new RelationshipItemInfoEnrollment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipItemInfoEnrollmentWithDefaults() *RelationshipItemInfoEnrollment {
	this := RelationshipItemInfoEnrollment{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetAttributes() []AttributeInfo {
	if o == nil || IsNil(o.Attributes) {
		var ret []AttributeInfo
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetAttributesOk() ([]AttributeInfo, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []AttributeInfo and assigns it to the Attributes field.
func (o *RelationshipItemInfoEnrollment) SetAttributes(v []AttributeInfo) {
	o.Attributes = v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetCompletedAt() AttributeInfoCreatedAt {
	if o == nil || IsNil(o.CompletedAt) {
		var ret AttributeInfoCreatedAt
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetCompletedAtOk() (*AttributeInfoCreatedAt, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given AttributeInfoCreatedAt and assigns it to the CompletedAt field.
func (o *RelationshipItemInfoEnrollment) SetCompletedAt(v AttributeInfoCreatedAt) {
	o.CompletedAt = &v
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetCompletedBy() string {
	if o == nil || IsNil(o.CompletedBy) {
		var ret string
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetCompletedByOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedBy) {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasCompletedBy() bool {
	if o != nil && !IsNil(o.CompletedBy) {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given string and assigns it to the CompletedBy field.
func (o *RelationshipItemInfoEnrollment) SetCompletedBy(v string) {
	o.CompletedBy = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetCreatedAt() AttributeInfoCreatedAt {
	if o == nil || IsNil(o.CreatedAt) {
		var ret AttributeInfoCreatedAt
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetCreatedAtOk() (*AttributeInfoCreatedAt, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given AttributeInfoCreatedAt and assigns it to the CreatedAt field.
func (o *RelationshipItemInfoEnrollment) SetCreatedAt(v AttributeInfoCreatedAt) {
	o.CreatedAt = &v
}

// GetCreatedAtClient returns the CreatedAtClient field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetCreatedAtClient() AttributeInfoCreatedAt {
	if o == nil || IsNil(o.CreatedAtClient) {
		var ret AttributeInfoCreatedAt
		return ret
	}
	return *o.CreatedAtClient
}

// GetCreatedAtClientOk returns a tuple with the CreatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetCreatedAtClientOk() (*AttributeInfoCreatedAt, bool) {
	if o == nil || IsNil(o.CreatedAtClient) {
		return nil, false
	}
	return o.CreatedAtClient, true
}

// HasCreatedAtClient returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasCreatedAtClient() bool {
	if o != nil && !IsNil(o.CreatedAtClient) {
		return true
	}

	return false
}

// SetCreatedAtClient gets a reference to the given AttributeInfoCreatedAt and assigns it to the CreatedAtClient field.
func (o *RelationshipItemInfoEnrollment) SetCreatedAtClient(v AttributeInfoCreatedAt) {
	o.CreatedAtClient = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetCreatedBy() TrackerUser {
	if o == nil || IsNil(o.CreatedBy) {
		var ret TrackerUser
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetCreatedByOk() (*TrackerUser, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given TrackerUser and assigns it to the CreatedBy field.
func (o *RelationshipItemInfoEnrollment) SetCreatedBy(v TrackerUser) {
	o.CreatedBy = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *RelationshipItemInfoEnrollment) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetEnrolledAt returns the EnrolledAt field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetEnrolledAt() AttributeInfoCreatedAt {
	if o == nil || IsNil(o.EnrolledAt) {
		var ret AttributeInfoCreatedAt
		return ret
	}
	return *o.EnrolledAt
}

// GetEnrolledAtOk returns a tuple with the EnrolledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetEnrolledAtOk() (*AttributeInfoCreatedAt, bool) {
	if o == nil || IsNil(o.EnrolledAt) {
		return nil, false
	}
	return o.EnrolledAt, true
}

// HasEnrolledAt returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasEnrolledAt() bool {
	if o != nil && !IsNil(o.EnrolledAt) {
		return true
	}

	return false
}

// SetEnrolledAt gets a reference to the given AttributeInfoCreatedAt and assigns it to the EnrolledAt field.
func (o *RelationshipItemInfoEnrollment) SetEnrolledAt(v AttributeInfoCreatedAt) {
	o.EnrolledAt = &v
}

// GetEnrollment returns the Enrollment field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetEnrollment() string {
	if o == nil || IsNil(o.Enrollment) {
		var ret string
		return ret
	}
	return *o.Enrollment
}

// GetEnrollmentOk returns a tuple with the Enrollment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetEnrollmentOk() (*string, bool) {
	if o == nil || IsNil(o.Enrollment) {
		return nil, false
	}
	return o.Enrollment, true
}

// HasEnrollment returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasEnrollment() bool {
	if o != nil && !IsNil(o.Enrollment) {
		return true
	}

	return false
}

// SetEnrollment gets a reference to the given string and assigns it to the Enrollment field.
func (o *RelationshipItemInfoEnrollment) SetEnrollment(v string) {
	o.Enrollment = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetEvents() []RelationshipItemInfoEnrollmentEventsInner {
	if o == nil || IsNil(o.Events) {
		var ret []RelationshipItemInfoEnrollmentEventsInner
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetEventsOk() ([]RelationshipItemInfoEnrollmentEventsInner, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []RelationshipItemInfoEnrollmentEventsInner and assigns it to the Events field.
func (o *RelationshipItemInfoEnrollment) SetEvents(v []RelationshipItemInfoEnrollmentEventsInner) {
	o.Events = v
}

// GetFollowUp returns the FollowUp field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetFollowUp() bool {
	if o == nil || IsNil(o.FollowUp) {
		var ret bool
		return ret
	}
	return *o.FollowUp
}

// GetFollowUpOk returns a tuple with the FollowUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetFollowUpOk() (*bool, bool) {
	if o == nil || IsNil(o.FollowUp) {
		return nil, false
	}
	return o.FollowUp, true
}

// HasFollowUp returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasFollowUp() bool {
	if o != nil && !IsNil(o.FollowUp) {
		return true
	}

	return false
}

// SetFollowUp gets a reference to the given bool and assigns it to the FollowUp field.
func (o *RelationshipItemInfoEnrollment) SetFollowUp(v bool) {
	o.FollowUp = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetGeometry() map[string]interface{} {
	if o == nil || IsNil(o.Geometry) {
		var ret map[string]interface{}
		return ret
	}
	return o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetGeometryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Geometry) {
		return map[string]interface{}{}, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given map[string]interface{} and assigns it to the Geometry field.
func (o *RelationshipItemInfoEnrollment) SetGeometry(v map[string]interface{}) {
	o.Geometry = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetNotes() []NoteInfo {
	if o == nil || IsNil(o.Notes) {
		var ret []NoteInfo
		return ret
	}
	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetNotesOk() ([]NoteInfo, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []NoteInfo and assigns it to the Notes field.
func (o *RelationshipItemInfoEnrollment) SetNotes(v []NoteInfo) {
	o.Notes = v
}

// GetOccurredAt returns the OccurredAt field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetOccurredAt() AttributeInfoCreatedAt {
	if o == nil || IsNil(o.OccurredAt) {
		var ret AttributeInfoCreatedAt
		return ret
	}
	return *o.OccurredAt
}

// GetOccurredAtOk returns a tuple with the OccurredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetOccurredAtOk() (*AttributeInfoCreatedAt, bool) {
	if o == nil || IsNil(o.OccurredAt) {
		return nil, false
	}
	return o.OccurredAt, true
}

// HasOccurredAt returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasOccurredAt() bool {
	if o != nil && !IsNil(o.OccurredAt) {
		return true
	}

	return false
}

// SetOccurredAt gets a reference to the given AttributeInfoCreatedAt and assigns it to the OccurredAt field.
func (o *RelationshipItemInfoEnrollment) SetOccurredAt(v AttributeInfoCreatedAt) {
	o.OccurredAt = &v
}

// GetOrgUnit returns the OrgUnit field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetOrgUnit() string {
	if o == nil || IsNil(o.OrgUnit) {
		var ret string
		return ret
	}
	return *o.OrgUnit
}

// GetOrgUnitOk returns a tuple with the OrgUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetOrgUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnit) {
		return nil, false
	}
	return o.OrgUnit, true
}

// HasOrgUnit returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasOrgUnit() bool {
	if o != nil && !IsNil(o.OrgUnit) {
		return true
	}

	return false
}

// SetOrgUnit gets a reference to the given string and assigns it to the OrgUnit field.
func (o *RelationshipItemInfoEnrollment) SetOrgUnit(v string) {
	o.OrgUnit = &v
}

// GetOrgUnitName returns the OrgUnitName field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetOrgUnitName() string {
	if o == nil || IsNil(o.OrgUnitName) {
		var ret string
		return ret
	}
	return *o.OrgUnitName
}

// GetOrgUnitNameOk returns a tuple with the OrgUnitName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetOrgUnitNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnitName) {
		return nil, false
	}
	return o.OrgUnitName, true
}

// HasOrgUnitName returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasOrgUnitName() bool {
	if o != nil && !IsNil(o.OrgUnitName) {
		return true
	}

	return false
}

// SetOrgUnitName gets a reference to the given string and assigns it to the OrgUnitName field.
func (o *RelationshipItemInfoEnrollment) SetOrgUnitName(v string) {
	o.OrgUnitName = &v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetProgram() string {
	if o == nil || IsNil(o.Program) {
		var ret string
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetProgramOk() (*string, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given string and assigns it to the Program field.
func (o *RelationshipItemInfoEnrollment) SetProgram(v string) {
	o.Program = &v
}

// GetStatus returns the Status field value
func (o *RelationshipItemInfoEnrollment) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RelationshipItemInfoEnrollment) SetStatus(v string) {
	o.Status = v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *RelationshipItemInfoEnrollment) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetTrackedEntity returns the TrackedEntity field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetTrackedEntity() string {
	if o == nil || IsNil(o.TrackedEntity) {
		var ret string
		return ret
	}
	return *o.TrackedEntity
}

// GetTrackedEntityOk returns a tuple with the TrackedEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetTrackedEntityOk() (*string, bool) {
	if o == nil || IsNil(o.TrackedEntity) {
		return nil, false
	}
	return o.TrackedEntity, true
}

// HasTrackedEntity returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasTrackedEntity() bool {
	if o != nil && !IsNil(o.TrackedEntity) {
		return true
	}

	return false
}

// SetTrackedEntity gets a reference to the given string and assigns it to the TrackedEntity field.
func (o *RelationshipItemInfoEnrollment) SetTrackedEntity(v string) {
	o.TrackedEntity = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetUpdatedAt() AttributeInfoCreatedAt {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret AttributeInfoCreatedAt
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetUpdatedAtOk() (*AttributeInfoCreatedAt, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given AttributeInfoCreatedAt and assigns it to the UpdatedAt field.
func (o *RelationshipItemInfoEnrollment) SetUpdatedAt(v AttributeInfoCreatedAt) {
	o.UpdatedAt = &v
}

// GetUpdatedAtClient returns the UpdatedAtClient field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetUpdatedAtClient() AttributeInfoCreatedAt {
	if o == nil || IsNil(o.UpdatedAtClient) {
		var ret AttributeInfoCreatedAt
		return ret
	}
	return *o.UpdatedAtClient
}

// GetUpdatedAtClientOk returns a tuple with the UpdatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetUpdatedAtClientOk() (*AttributeInfoCreatedAt, bool) {
	if o == nil || IsNil(o.UpdatedAtClient) {
		return nil, false
	}
	return o.UpdatedAtClient, true
}

// HasUpdatedAtClient returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasUpdatedAtClient() bool {
	if o != nil && !IsNil(o.UpdatedAtClient) {
		return true
	}

	return false
}

// SetUpdatedAtClient gets a reference to the given AttributeInfoCreatedAt and assigns it to the UpdatedAtClient field.
func (o *RelationshipItemInfoEnrollment) SetUpdatedAtClient(v AttributeInfoCreatedAt) {
	o.UpdatedAtClient = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *RelationshipItemInfoEnrollment) GetUpdatedBy() TrackerUser {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret TrackerUser
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipItemInfoEnrollment) GetUpdatedByOk() (*TrackerUser, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *RelationshipItemInfoEnrollment) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given TrackerUser and assigns it to the UpdatedBy field.
func (o *RelationshipItemInfoEnrollment) SetUpdatedBy(v TrackerUser) {
	o.UpdatedBy = &v
}

func (o RelationshipItemInfoEnrollment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipItemInfoEnrollment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if !IsNil(o.CompletedBy) {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.CreatedAtClient) {
		toSerialize["createdAtClient"] = o.CreatedAtClient
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.EnrolledAt) {
		toSerialize["enrolledAt"] = o.EnrolledAt
	}
	if !IsNil(o.Enrollment) {
		toSerialize["enrollment"] = o.Enrollment
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.FollowUp) {
		toSerialize["followUp"] = o.FollowUp
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.OccurredAt) {
		toSerialize["occurredAt"] = o.OccurredAt
	}
	if !IsNil(o.OrgUnit) {
		toSerialize["orgUnit"] = o.OrgUnit
	}
	if !IsNil(o.OrgUnitName) {
		toSerialize["orgUnitName"] = o.OrgUnitName
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.TrackedEntity) {
		toSerialize["trackedEntity"] = o.TrackedEntity
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedAtClient) {
		toSerialize["updatedAtClient"] = o.UpdatedAtClient
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	return toSerialize, nil
}

func (o *RelationshipItemInfoEnrollment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRelationshipItemInfoEnrollment := _RelationshipItemInfoEnrollment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRelationshipItemInfoEnrollment)

	if err != nil {
		return err
	}

	*o = RelationshipItemInfoEnrollment(varRelationshipItemInfoEnrollment)

	return err
}

type NullableRelationshipItemInfoEnrollment struct {
	value *RelationshipItemInfoEnrollment
	isSet bool
}

func (v NullableRelationshipItemInfoEnrollment) Get() *RelationshipItemInfoEnrollment {
	return v.value
}

func (v *NullableRelationshipItemInfoEnrollment) Set(val *RelationshipItemInfoEnrollment) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipItemInfoEnrollment) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipItemInfoEnrollment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipItemInfoEnrollment(val *RelationshipItemInfoEnrollment) *NullableRelationshipItemInfoEnrollment {
	return &NullableRelationshipItemInfoEnrollment{value: val, isSet: true}
}

func (v NullableRelationshipItemInfoEnrollment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipItemInfoEnrollment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
