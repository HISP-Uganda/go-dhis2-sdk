/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// MessageConversationStatus the model 'MessageConversationStatus'
type MessageConversationStatus string

// List of MessageConversationStatus
const (
	MESSAGECONVERSATIONSTATUS_NONE    MessageConversationStatus = "NONE"
	MESSAGECONVERSATIONSTATUS_OPEN    MessageConversationStatus = "OPEN"
	MESSAGECONVERSATIONSTATUS_PENDING MessageConversationStatus = "PENDING"
	MESSAGECONVERSATIONSTATUS_INVALID MessageConversationStatus = "INVALID"
	MESSAGECONVERSATIONSTATUS_SOLVED  MessageConversationStatus = "SOLVED"
)

// All allowed values of MessageConversationStatus enum
var AllowedMessageConversationStatusEnumValues = []MessageConversationStatus{
	"NONE",
	"OPEN",
	"PENDING",
	"INVALID",
	"SOLVED",
}

func (v *MessageConversationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageConversationStatus(value)
	for _, existing := range AllowedMessageConversationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageConversationStatus", value)
}

// NewMessageConversationStatusFromValue returns a pointer to a valid MessageConversationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageConversationStatusFromValue(v string) (*MessageConversationStatus, error) {
	ev := MessageConversationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageConversationStatus: valid values are %v", v, AllowedMessageConversationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageConversationStatus) IsValid() bool {
	for _, existing := range AllowedMessageConversationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MessageConversationStatus value
func (v MessageConversationStatus) Ptr() *MessageConversationStatus {
	return &v
}

type NullableMessageConversationStatus struct {
	value *MessageConversationStatus
	isSet bool
}

func (v NullableMessageConversationStatus) Get() *MessageConversationStatus {
	return v.value
}

func (v *NullableMessageConversationStatus) Set(val *MessageConversationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageConversationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageConversationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageConversationStatus(val *MessageConversationStatus) *NullableMessageConversationStatus {
	return &NullableMessageConversationStatus{value: val, isSet: true}
}

func (v NullableMessageConversationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageConversationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
