/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// JunctionType the model 'JunctionType'
type JunctionType string

// List of JunctionType
const (
	JUNCTIONTYPE_AND JunctionType = "AND"
	JUNCTIONTYPE_OR  JunctionType = "OR"
)

// All allowed values of JunctionType enum
var AllowedJunctionTypeEnumValues = []JunctionType{
	"AND",
	"OR",
}

func (v *JunctionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JunctionType(value)
	for _, existing := range AllowedJunctionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JunctionType", value)
}

// NewJunctionTypeFromValue returns a pointer to a valid JunctionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJunctionTypeFromValue(v string) (*JunctionType, error) {
	ev := JunctionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JunctionType: valid values are %v", v, AllowedJunctionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JunctionType) IsValid() bool {
	for _, existing := range AllowedJunctionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JunctionType value
func (v JunctionType) Ptr() *JunctionType {
	return &v
}

type NullableJunctionType struct {
	value *JunctionType
	isSet bool
}

func (v NullableJunctionType) Get() *JunctionType {
	return v.value
}

func (v *NullableJunctionType) Set(val *JunctionType) {
	v.value = val
	v.isSet = true
}

func (v NullableJunctionType) IsSet() bool {
	return v.isSet
}

func (v *NullableJunctionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJunctionType(val *JunctionType) *NullableJunctionType {
	return &NullableJunctionType{value: val, isSet: true}
}

func (v NullableJunctionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJunctionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
