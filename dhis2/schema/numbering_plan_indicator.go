/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// NumberingPlanIndicator the model 'NumberingPlanIndicator'
type NumberingPlanIndicator string

// List of NumberingPlanIndicator
const (
	NUMBERINGPLANINDICATOR_UNKNOWN     NumberingPlanIndicator = "UNKNOWN"
	NUMBERINGPLANINDICATOR_ISDN        NumberingPlanIndicator = "ISDN"
	NUMBERINGPLANINDICATOR_DATA        NumberingPlanIndicator = "DATA"
	NUMBERINGPLANINDICATOR_TELEX       NumberingPlanIndicator = "TELEX"
	NUMBERINGPLANINDICATOR_LAND_MOBILE NumberingPlanIndicator = "LAND_MOBILE"
	NUMBERINGPLANINDICATOR_NATIONAL    NumberingPlanIndicator = "NATIONAL"
	NUMBERINGPLANINDICATOR_PRIVATE     NumberingPlanIndicator = "PRIVATE"
	NUMBERINGPLANINDICATOR_ERMES       NumberingPlanIndicator = "ERMES"
	NUMBERINGPLANINDICATOR_INTERNET    NumberingPlanIndicator = "INTERNET"
	NUMBERINGPLANINDICATOR_WAP         NumberingPlanIndicator = "WAP"
)

// All allowed values of NumberingPlanIndicator enum
var AllowedNumberingPlanIndicatorEnumValues = []NumberingPlanIndicator{
	"UNKNOWN",
	"ISDN",
	"DATA",
	"TELEX",
	"LAND_MOBILE",
	"NATIONAL",
	"PRIVATE",
	"ERMES",
	"INTERNET",
	"WAP",
}

func (v *NumberingPlanIndicator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NumberingPlanIndicator(value)
	for _, existing := range AllowedNumberingPlanIndicatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NumberingPlanIndicator", value)
}

// NewNumberingPlanIndicatorFromValue returns a pointer to a valid NumberingPlanIndicator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNumberingPlanIndicatorFromValue(v string) (*NumberingPlanIndicator, error) {
	ev := NumberingPlanIndicator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NumberingPlanIndicator: valid values are %v", v, AllowedNumberingPlanIndicatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NumberingPlanIndicator) IsValid() bool {
	for _, existing := range AllowedNumberingPlanIndicatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NumberingPlanIndicator value
func (v NumberingPlanIndicator) Ptr() *NumberingPlanIndicator {
	return &v
}

type NullableNumberingPlanIndicator struct {
	value *NumberingPlanIndicator
	isSet bool
}

func (v NullableNumberingPlanIndicator) Get() *NumberingPlanIndicator {
	return v.value
}

func (v *NullableNumberingPlanIndicator) Set(val *NumberingPlanIndicator) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberingPlanIndicator) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberingPlanIndicator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberingPlanIndicator(val *NumberingPlanIndicator) *NullableNumberingPlanIndicator {
	return &NullableNumberingPlanIndicator{value: val, isSet: true}
}

func (v NullableNumberingPlanIndicator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberingPlanIndicator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
