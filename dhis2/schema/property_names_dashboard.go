/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesDashboard the model 'PropertyNamesDashboard'
type PropertyNamesDashboard string

// List of PropertyNames_Dashboard
const (
	PROPERTYNAMESDASHBOARD_ACCESS              PropertyNamesDashboard = "access"
	PROPERTYNAMESDASHBOARD_ALLOWED_FILTERS     PropertyNamesDashboard = "allowedFilters"
	PROPERTYNAMESDASHBOARD_ATTRIBUTE_VALUES    PropertyNamesDashboard = "attributeValues"
	PROPERTYNAMESDASHBOARD_CODE                PropertyNamesDashboard = "code"
	PROPERTYNAMESDASHBOARD_CREATED             PropertyNamesDashboard = "created"
	PROPERTYNAMESDASHBOARD_CREATED_BY          PropertyNamesDashboard = "createdBy"
	PROPERTYNAMESDASHBOARD_DASHBOARD_ITEMS     PropertyNamesDashboard = "dashboardItems"
	PROPERTYNAMESDASHBOARD_DESCRIPTION         PropertyNamesDashboard = "description"
	PROPERTYNAMESDASHBOARD_DISPLAY_DESCRIPTION PropertyNamesDashboard = "displayDescription"
	PROPERTYNAMESDASHBOARD_DISPLAY_FORM_NAME   PropertyNamesDashboard = "displayFormName"
	PROPERTYNAMESDASHBOARD_DISPLAY_NAME        PropertyNamesDashboard = "displayName"
	PROPERTYNAMESDASHBOARD_DISPLAY_SHORT_NAME  PropertyNamesDashboard = "displayShortName"
	PROPERTYNAMESDASHBOARD_EXTERNAL_ACCESS     PropertyNamesDashboard = "externalAccess"
	PROPERTYNAMESDASHBOARD_FAVORITE            PropertyNamesDashboard = "favorite"
	PROPERTYNAMESDASHBOARD_FAVORITES           PropertyNamesDashboard = "favorites"
	PROPERTYNAMESDASHBOARD_FORM_NAME           PropertyNamesDashboard = "formName"
	PROPERTYNAMESDASHBOARD_HREF                PropertyNamesDashboard = "href"
	PROPERTYNAMESDASHBOARD_ID                  PropertyNamesDashboard = "id"
	PROPERTYNAMESDASHBOARD_ITEM_CONFIG         PropertyNamesDashboard = "itemConfig"
	PROPERTYNAMESDASHBOARD_ITEM_COUNT          PropertyNamesDashboard = "itemCount"
	PROPERTYNAMESDASHBOARD_LAST_UPDATED        PropertyNamesDashboard = "lastUpdated"
	PROPERTYNAMESDASHBOARD_LAST_UPDATED_BY     PropertyNamesDashboard = "lastUpdatedBy"
	PROPERTYNAMESDASHBOARD_LAYOUT              PropertyNamesDashboard = "layout"
	PROPERTYNAMESDASHBOARD_NAME                PropertyNamesDashboard = "name"
	PROPERTYNAMESDASHBOARD_PUBLIC_ACCESS       PropertyNamesDashboard = "publicAccess"
	PROPERTYNAMESDASHBOARD_RESTRICT_FILTERS    PropertyNamesDashboard = "restrictFilters"
	PROPERTYNAMESDASHBOARD_SHARING             PropertyNamesDashboard = "sharing"
	PROPERTYNAMESDASHBOARD_SHORT_NAME          PropertyNamesDashboard = "shortName"
	PROPERTYNAMESDASHBOARD_TRANSLATIONS        PropertyNamesDashboard = "translations"
	PROPERTYNAMESDASHBOARD_USER                PropertyNamesDashboard = "user"
	PROPERTYNAMESDASHBOARD_USER_ACCESSES       PropertyNamesDashboard = "userAccesses"
	PROPERTYNAMESDASHBOARD_USER_GROUP_ACCESSES PropertyNamesDashboard = "userGroupAccesses"
)

// All allowed values of PropertyNamesDashboard enum
var AllowedPropertyNamesDashboardEnumValues = []PropertyNamesDashboard{
	"access",
	"allowedFilters",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"dashboardItems",
	"description",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"externalAccess",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"itemConfig",
	"itemCount",
	"lastUpdated",
	"lastUpdatedBy",
	"layout",
	"name",
	"publicAccess",
	"restrictFilters",
	"sharing",
	"shortName",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesDashboard) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesDashboard(value)
	for _, existing := range AllowedPropertyNamesDashboardEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesDashboard", value)
}

// NewPropertyNamesDashboardFromValue returns a pointer to a valid PropertyNamesDashboard
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesDashboardFromValue(v string) (*PropertyNamesDashboard, error) {
	ev := PropertyNamesDashboard(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesDashboard: valid values are %v", v, AllowedPropertyNamesDashboardEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesDashboard) IsValid() bool {
	for _, existing := range AllowedPropertyNamesDashboardEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Dashboard value
func (v PropertyNamesDashboard) Ptr() *PropertyNamesDashboard {
	return &v
}

type NullablePropertyNamesDashboard struct {
	value *PropertyNamesDashboard
	isSet bool
}

func (v NullablePropertyNamesDashboard) Get() *PropertyNamesDashboard {
	return v.value
}

func (v *NullablePropertyNamesDashboard) Set(val *PropertyNamesDashboard) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesDashboard) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesDashboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesDashboard(val *PropertyNamesDashboard) *NullablePropertyNamesDashboard {
	return &NullablePropertyNamesDashboard{value: val, isSet: true}
}

func (v NullablePropertyNamesDashboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesDashboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
