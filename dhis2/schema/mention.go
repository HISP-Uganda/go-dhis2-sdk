/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"time"
)

// checks if the Mention type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Mention{}

// Mention struct for Mention
type Mention struct {
	Created  *time.Time `json:"created,omitempty"`
	Username *string    `json:"username,omitempty"`
}

// NewMention instantiates a new Mention object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMention() *Mention {
	this := Mention{}
	return &this
}

// NewMentionWithDefaults instantiates a new Mention object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMentionWithDefaults() *Mention {
	this := Mention{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Mention) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mention) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Mention) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Mention) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Mention) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mention) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Mention) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Mention) SetUsername(v string) {
	o.Username = &v
}

func (o Mention) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Mention) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableMention struct {
	value *Mention
	isSet bool
}

func (v NullableMention) Get() *Mention {
	return v.value
}

func (v *NullableMention) Set(val *Mention) {
	v.value = val
	v.isSet = true
}

func (v NullableMention) IsSet() bool {
	return v.isSet
}

func (v *NullableMention) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMention(val *Mention) *NullableMention {
	return &NullableMention{value: val, isSet: true}
}

func (v NullableMention) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMention) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
