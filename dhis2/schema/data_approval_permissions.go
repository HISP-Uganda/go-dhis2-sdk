/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"time"
)

// checks if the DataApprovalPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataApprovalPermissions{}

// DataApprovalPermissions struct for DataApprovalPermissions
type DataApprovalPermissions struct {
	AcceptedAt   *time.Time `json:"acceptedAt,omitempty"`
	AcceptedBy   *string    `json:"acceptedBy,omitempty"`
	ApprovedAt   *time.Time `json:"approvedAt,omitempty"`
	ApprovedBy   *string    `json:"approvedBy,omitempty"`
	MayAccept    *bool      `json:"mayAccept,omitempty"`
	MayApprove   *bool      `json:"mayApprove,omitempty"`
	MayReadData  *bool      `json:"mayReadData,omitempty"`
	MayUnaccept  *bool      `json:"mayUnaccept,omitempty"`
	MayUnapprove *bool      `json:"mayUnapprove,omitempty"`
	State        *string    `json:"state,omitempty"`
}

// NewDataApprovalPermissions instantiates a new DataApprovalPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataApprovalPermissions() *DataApprovalPermissions {
	this := DataApprovalPermissions{}
	return &this
}

// NewDataApprovalPermissionsWithDefaults instantiates a new DataApprovalPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataApprovalPermissionsWithDefaults() *DataApprovalPermissions {
	this := DataApprovalPermissions{}
	return &this
}

// GetAcceptedAt returns the AcceptedAt field value if set, zero value otherwise.
func (o *DataApprovalPermissions) GetAcceptedAt() time.Time {
	if o == nil || IsNil(o.AcceptedAt) {
		var ret time.Time
		return ret
	}
	return *o.AcceptedAt
}

// GetAcceptedAtOk returns a tuple with the AcceptedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalPermissions) GetAcceptedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AcceptedAt) {
		return nil, false
	}
	return o.AcceptedAt, true
}

// HasAcceptedAt returns a boolean if a field has been set.
func (o *DataApprovalPermissions) HasAcceptedAt() bool {
	if o != nil && !IsNil(o.AcceptedAt) {
		return true
	}

	return false
}

// SetAcceptedAt gets a reference to the given time.Time and assigns it to the AcceptedAt field.
func (o *DataApprovalPermissions) SetAcceptedAt(v time.Time) {
	o.AcceptedAt = &v
}

// GetAcceptedBy returns the AcceptedBy field value if set, zero value otherwise.
func (o *DataApprovalPermissions) GetAcceptedBy() string {
	if o == nil || IsNil(o.AcceptedBy) {
		var ret string
		return ret
	}
	return *o.AcceptedBy
}

// GetAcceptedByOk returns a tuple with the AcceptedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalPermissions) GetAcceptedByOk() (*string, bool) {
	if o == nil || IsNil(o.AcceptedBy) {
		return nil, false
	}
	return o.AcceptedBy, true
}

// HasAcceptedBy returns a boolean if a field has been set.
func (o *DataApprovalPermissions) HasAcceptedBy() bool {
	if o != nil && !IsNil(o.AcceptedBy) {
		return true
	}

	return false
}

// SetAcceptedBy gets a reference to the given string and assigns it to the AcceptedBy field.
func (o *DataApprovalPermissions) SetAcceptedBy(v string) {
	o.AcceptedBy = &v
}

// GetApprovedAt returns the ApprovedAt field value if set, zero value otherwise.
func (o *DataApprovalPermissions) GetApprovedAt() time.Time {
	if o == nil || IsNil(o.ApprovedAt) {
		var ret time.Time
		return ret
	}
	return *o.ApprovedAt
}

// GetApprovedAtOk returns a tuple with the ApprovedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalPermissions) GetApprovedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ApprovedAt) {
		return nil, false
	}
	return o.ApprovedAt, true
}

// HasApprovedAt returns a boolean if a field has been set.
func (o *DataApprovalPermissions) HasApprovedAt() bool {
	if o != nil && !IsNil(o.ApprovedAt) {
		return true
	}

	return false
}

// SetApprovedAt gets a reference to the given time.Time and assigns it to the ApprovedAt field.
func (o *DataApprovalPermissions) SetApprovedAt(v time.Time) {
	o.ApprovedAt = &v
}

// GetApprovedBy returns the ApprovedBy field value if set, zero value otherwise.
func (o *DataApprovalPermissions) GetApprovedBy() string {
	if o == nil || IsNil(o.ApprovedBy) {
		var ret string
		return ret
	}
	return *o.ApprovedBy
}

// GetApprovedByOk returns a tuple with the ApprovedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalPermissions) GetApprovedByOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovedBy) {
		return nil, false
	}
	return o.ApprovedBy, true
}

// HasApprovedBy returns a boolean if a field has been set.
func (o *DataApprovalPermissions) HasApprovedBy() bool {
	if o != nil && !IsNil(o.ApprovedBy) {
		return true
	}

	return false
}

// SetApprovedBy gets a reference to the given string and assigns it to the ApprovedBy field.
func (o *DataApprovalPermissions) SetApprovedBy(v string) {
	o.ApprovedBy = &v
}

// GetMayAccept returns the MayAccept field value if set, zero value otherwise.
func (o *DataApprovalPermissions) GetMayAccept() bool {
	if o == nil || IsNil(o.MayAccept) {
		var ret bool
		return ret
	}
	return *o.MayAccept
}

// GetMayAcceptOk returns a tuple with the MayAccept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalPermissions) GetMayAcceptOk() (*bool, bool) {
	if o == nil || IsNil(o.MayAccept) {
		return nil, false
	}
	return o.MayAccept, true
}

// HasMayAccept returns a boolean if a field has been set.
func (o *DataApprovalPermissions) HasMayAccept() bool {
	if o != nil && !IsNil(o.MayAccept) {
		return true
	}

	return false
}

// SetMayAccept gets a reference to the given bool and assigns it to the MayAccept field.
func (o *DataApprovalPermissions) SetMayAccept(v bool) {
	o.MayAccept = &v
}

// GetMayApprove returns the MayApprove field value if set, zero value otherwise.
func (o *DataApprovalPermissions) GetMayApprove() bool {
	if o == nil || IsNil(o.MayApprove) {
		var ret bool
		return ret
	}
	return *o.MayApprove
}

// GetMayApproveOk returns a tuple with the MayApprove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalPermissions) GetMayApproveOk() (*bool, bool) {
	if o == nil || IsNil(o.MayApprove) {
		return nil, false
	}
	return o.MayApprove, true
}

// HasMayApprove returns a boolean if a field has been set.
func (o *DataApprovalPermissions) HasMayApprove() bool {
	if o != nil && !IsNil(o.MayApprove) {
		return true
	}

	return false
}

// SetMayApprove gets a reference to the given bool and assigns it to the MayApprove field.
func (o *DataApprovalPermissions) SetMayApprove(v bool) {
	o.MayApprove = &v
}

// GetMayReadData returns the MayReadData field value if set, zero value otherwise.
func (o *DataApprovalPermissions) GetMayReadData() bool {
	if o == nil || IsNil(o.MayReadData) {
		var ret bool
		return ret
	}
	return *o.MayReadData
}

// GetMayReadDataOk returns a tuple with the MayReadData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalPermissions) GetMayReadDataOk() (*bool, bool) {
	if o == nil || IsNil(o.MayReadData) {
		return nil, false
	}
	return o.MayReadData, true
}

// HasMayReadData returns a boolean if a field has been set.
func (o *DataApprovalPermissions) HasMayReadData() bool {
	if o != nil && !IsNil(o.MayReadData) {
		return true
	}

	return false
}

// SetMayReadData gets a reference to the given bool and assigns it to the MayReadData field.
func (o *DataApprovalPermissions) SetMayReadData(v bool) {
	o.MayReadData = &v
}

// GetMayUnaccept returns the MayUnaccept field value if set, zero value otherwise.
func (o *DataApprovalPermissions) GetMayUnaccept() bool {
	if o == nil || IsNil(o.MayUnaccept) {
		var ret bool
		return ret
	}
	return *o.MayUnaccept
}

// GetMayUnacceptOk returns a tuple with the MayUnaccept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalPermissions) GetMayUnacceptOk() (*bool, bool) {
	if o == nil || IsNil(o.MayUnaccept) {
		return nil, false
	}
	return o.MayUnaccept, true
}

// HasMayUnaccept returns a boolean if a field has been set.
func (o *DataApprovalPermissions) HasMayUnaccept() bool {
	if o != nil && !IsNil(o.MayUnaccept) {
		return true
	}

	return false
}

// SetMayUnaccept gets a reference to the given bool and assigns it to the MayUnaccept field.
func (o *DataApprovalPermissions) SetMayUnaccept(v bool) {
	o.MayUnaccept = &v
}

// GetMayUnapprove returns the MayUnapprove field value if set, zero value otherwise.
func (o *DataApprovalPermissions) GetMayUnapprove() bool {
	if o == nil || IsNil(o.MayUnapprove) {
		var ret bool
		return ret
	}
	return *o.MayUnapprove
}

// GetMayUnapproveOk returns a tuple with the MayUnapprove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalPermissions) GetMayUnapproveOk() (*bool, bool) {
	if o == nil || IsNil(o.MayUnapprove) {
		return nil, false
	}
	return o.MayUnapprove, true
}

// HasMayUnapprove returns a boolean if a field has been set.
func (o *DataApprovalPermissions) HasMayUnapprove() bool {
	if o != nil && !IsNil(o.MayUnapprove) {
		return true
	}

	return false
}

// SetMayUnapprove gets a reference to the given bool and assigns it to the MayUnapprove field.
func (o *DataApprovalPermissions) SetMayUnapprove(v bool) {
	o.MayUnapprove = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DataApprovalPermissions) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataApprovalPermissions) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DataApprovalPermissions) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DataApprovalPermissions) SetState(v string) {
	o.State = &v
}

func (o DataApprovalPermissions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataApprovalPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcceptedAt) {
		toSerialize["acceptedAt"] = o.AcceptedAt
	}
	if !IsNil(o.AcceptedBy) {
		toSerialize["acceptedBy"] = o.AcceptedBy
	}
	if !IsNil(o.ApprovedAt) {
		toSerialize["approvedAt"] = o.ApprovedAt
	}
	if !IsNil(o.ApprovedBy) {
		toSerialize["approvedBy"] = o.ApprovedBy
	}
	if !IsNil(o.MayAccept) {
		toSerialize["mayAccept"] = o.MayAccept
	}
	if !IsNil(o.MayApprove) {
		toSerialize["mayApprove"] = o.MayApprove
	}
	if !IsNil(o.MayReadData) {
		toSerialize["mayReadData"] = o.MayReadData
	}
	if !IsNil(o.MayUnaccept) {
		toSerialize["mayUnaccept"] = o.MayUnaccept
	}
	if !IsNil(o.MayUnapprove) {
		toSerialize["mayUnapprove"] = o.MayUnapprove
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableDataApprovalPermissions struct {
	value *DataApprovalPermissions
	isSet bool
}

func (v NullableDataApprovalPermissions) Get() *DataApprovalPermissions {
	return v.value
}

func (v *NullableDataApprovalPermissions) Set(val *DataApprovalPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableDataApprovalPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableDataApprovalPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataApprovalPermissions(val *DataApprovalPermissions) *NullableDataApprovalPermissions {
	return &NullableDataApprovalPermissions{value: val, isSet: true}
}

func (v NullableDataApprovalPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataApprovalPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
