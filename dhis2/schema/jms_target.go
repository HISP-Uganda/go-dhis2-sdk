/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the JmsTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JmsTarget{}

// JmsTarget struct for JmsTarget
type JmsTarget struct {
	Address   string  `json:"address"`
	BrokerUrl string  `json:"brokerUrl"`
	ClientId  string  `json:"clientId"`
	GroupId   string  `json:"groupId"`
	Password  *string `json:"password,omitempty"`
	Type      *string `json:"type,omitempty"`
	UseQueue  *bool   `json:"useQueue,omitempty"`
	Username  *string `json:"username,omitempty"`
}

type _JmsTarget JmsTarget

// NewJmsTarget instantiates a new JmsTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJmsTarget(address string, brokerUrl string, clientId string, groupId string) *JmsTarget {
	this := JmsTarget{}
	this.Address = address
	this.BrokerUrl = brokerUrl
	this.ClientId = clientId
	this.GroupId = groupId
	return &this
}

// NewJmsTargetWithDefaults instantiates a new JmsTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJmsTargetWithDefaults() *JmsTarget {
	this := JmsTarget{}
	return &this
}

// GetAddress returns the Address field value
func (o *JmsTarget) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *JmsTarget) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *JmsTarget) SetAddress(v string) {
	o.Address = v
}

// GetBrokerUrl returns the BrokerUrl field value
func (o *JmsTarget) GetBrokerUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BrokerUrl
}

// GetBrokerUrlOk returns a tuple with the BrokerUrl field value
// and a boolean to check if the value has been set.
func (o *JmsTarget) GetBrokerUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrokerUrl, true
}

// SetBrokerUrl sets field value
func (o *JmsTarget) SetBrokerUrl(v string) {
	o.BrokerUrl = v
}

// GetClientId returns the ClientId field value
func (o *JmsTarget) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *JmsTarget) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *JmsTarget) SetClientId(v string) {
	o.ClientId = v
}

// GetGroupId returns the GroupId field value
func (o *JmsTarget) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *JmsTarget) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *JmsTarget) SetGroupId(v string) {
	o.GroupId = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *JmsTarget) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JmsTarget) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *JmsTarget) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *JmsTarget) SetPassword(v string) {
	o.Password = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JmsTarget) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JmsTarget) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JmsTarget) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *JmsTarget) SetType(v string) {
	o.Type = &v
}

// GetUseQueue returns the UseQueue field value if set, zero value otherwise.
func (o *JmsTarget) GetUseQueue() bool {
	if o == nil || IsNil(o.UseQueue) {
		var ret bool
		return ret
	}
	return *o.UseQueue
}

// GetUseQueueOk returns a tuple with the UseQueue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JmsTarget) GetUseQueueOk() (*bool, bool) {
	if o == nil || IsNil(o.UseQueue) {
		return nil, false
	}
	return o.UseQueue, true
}

// HasUseQueue returns a boolean if a field has been set.
func (o *JmsTarget) HasUseQueue() bool {
	if o != nil && !IsNil(o.UseQueue) {
		return true
	}

	return false
}

// SetUseQueue gets a reference to the given bool and assigns it to the UseQueue field.
func (o *JmsTarget) SetUseQueue(v bool) {
	o.UseQueue = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *JmsTarget) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JmsTarget) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *JmsTarget) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *JmsTarget) SetUsername(v string) {
	o.Username = &v
}

func (o JmsTarget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JmsTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["brokerUrl"] = o.BrokerUrl
	toSerialize["clientId"] = o.ClientId
	toSerialize["groupId"] = o.GroupId
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UseQueue) {
		toSerialize["useQueue"] = o.UseQueue
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

func (o *JmsTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"brokerUrl",
		"clientId",
		"groupId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJmsTarget := _JmsTarget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJmsTarget)

	if err != nil {
		return err
	}

	*o = JmsTarget(varJmsTarget)

	return err
}

type NullableJmsTarget struct {
	value *JmsTarget
	isSet bool
}

func (v NullableJmsTarget) Get() *JmsTarget {
	return v.value
}

func (v *NullableJmsTarget) Set(val *JmsTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableJmsTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableJmsTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJmsTarget(val *JmsTarget) *NullableJmsTarget {
	return &NullableJmsTarget{value: val, isSet: true}
}

func (v NullableJmsTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJmsTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
