/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ProgramTrackedEntityAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProgramTrackedEntityAttribute{}

// ProgramTrackedEntityAttribute struct for ProgramTrackedEntityAttribute
type ProgramTrackedEntityAttribute struct {
	Access               *Access                         `json:"access,omitempty"`
	AllowFutureDate      *bool                           `json:"allowFutureDate,omitempty"`
	AttributeValues      []AttributeValue                `json:"attributeValues,omitempty"`
	Code                 *string                         `json:"code,omitempty"`
	Created              *time.Time                      `json:"created,omitempty"`
	CreatedBy            *AggregateDataExchangeCreatedBy `json:"createdBy,omitempty"`
	DisplayInList        *bool                           `json:"displayInList,omitempty"`
	DisplayName          *string                         `json:"displayName,omitempty"`
	DisplayShortName     *string                         `json:"displayShortName,omitempty"`
	ExternalAccess       *bool                           `json:"externalAccess,omitempty"`
	Favorite             *bool                           `json:"favorite,omitempty"`
	Favorites            []string                        `json:"favorites,omitempty"`
	Href                 *string                         `json:"href,omitempty"`
	Id                   *string                         `json:"id,omitempty"`
	LastUpdated          *time.Time                      `json:"lastUpdated,omitempty"`
	LastUpdatedBy        *AggregateDataExchangeCreatedBy `json:"lastUpdatedBy,omitempty"`
	Mandatory            *bool                           `json:"mandatory,omitempty"`
	Program              *EventVisualizationProgram      `json:"program,omitempty"`
	PublicAccess         *string                         `json:"publicAccess,omitempty"`
	RenderOptionsAsRadio *bool                           `json:"renderOptionsAsRadio,omitempty"`
	// The exact type is unknown.   (Java type was: `org.hisp.dhis.render.DeviceRenderTypeMap<org.hisp.dhis.render.type.ValueTypeRenderingObject>`)
	RenderType             interface{}                                `json:"renderType,omitempty"`
	Searchable             *bool                                      `json:"searchable,omitempty"`
	Sharing                *Sharing                                   `json:"sharing,omitempty"`
	SortOrder              *int32                                     `json:"sortOrder,omitempty"`
	TrackedEntityAttribute *EventVisualizationAttributeValueDimension `json:"trackedEntityAttribute,omitempty"`
	Translations           []Translation                              `json:"translations,omitempty"`
	User                   *AggregateDataExchangeCreatedBy            `json:"user,omitempty"`
	UserAccesses           []LegacyUserAccess                         `json:"userAccesses,omitempty"`
	UserGroupAccesses      []LegacyUserGroupAccess                    `json:"userGroupAccesses,omitempty"`
	ValueType              string                                     `json:"valueType"`
}

type _ProgramTrackedEntityAttribute ProgramTrackedEntityAttribute

// NewProgramTrackedEntityAttribute instantiates a new ProgramTrackedEntityAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgramTrackedEntityAttribute(valueType string) *ProgramTrackedEntityAttribute {
	this := ProgramTrackedEntityAttribute{}
	this.ValueType = valueType
	return &this
}

// NewProgramTrackedEntityAttributeWithDefaults instantiates a new ProgramTrackedEntityAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgramTrackedEntityAttributeWithDefaults() *ProgramTrackedEntityAttribute {
	this := ProgramTrackedEntityAttribute{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *ProgramTrackedEntityAttribute) SetAccess(v Access) {
	o.Access = &v
}

// GetAllowFutureDate returns the AllowFutureDate field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetAllowFutureDate() bool {
	if o == nil || IsNil(o.AllowFutureDate) {
		var ret bool
		return ret
	}
	return *o.AllowFutureDate
}

// GetAllowFutureDateOk returns a tuple with the AllowFutureDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetAllowFutureDateOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowFutureDate) {
		return nil, false
	}
	return o.AllowFutureDate, true
}

// HasAllowFutureDate returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasAllowFutureDate() bool {
	if o != nil && !IsNil(o.AllowFutureDate) {
		return true
	}

	return false
}

// SetAllowFutureDate gets a reference to the given bool and assigns it to the AllowFutureDate field.
func (o *ProgramTrackedEntityAttribute) SetAllowFutureDate(v bool) {
	o.AllowFutureDate = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *ProgramTrackedEntityAttribute) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ProgramTrackedEntityAttribute) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ProgramTrackedEntityAttribute) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetCreatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetCreatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the CreatedBy field.
func (o *ProgramTrackedEntityAttribute) SetCreatedBy(v AggregateDataExchangeCreatedBy) {
	o.CreatedBy = &v
}

// GetDisplayInList returns the DisplayInList field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetDisplayInList() bool {
	if o == nil || IsNil(o.DisplayInList) {
		var ret bool
		return ret
	}
	return *o.DisplayInList
}

// GetDisplayInListOk returns a tuple with the DisplayInList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetDisplayInListOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayInList) {
		return nil, false
	}
	return o.DisplayInList, true
}

// HasDisplayInList returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasDisplayInList() bool {
	if o != nil && !IsNil(o.DisplayInList) {
		return true
	}

	return false
}

// SetDisplayInList gets a reference to the given bool and assigns it to the DisplayInList field.
func (o *ProgramTrackedEntityAttribute) SetDisplayInList(v bool) {
	o.DisplayInList = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ProgramTrackedEntityAttribute) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *ProgramTrackedEntityAttribute) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetExternalAccess returns the ExternalAccess field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetExternalAccess() bool {
	if o == nil || IsNil(o.ExternalAccess) {
		var ret bool
		return ret
	}
	return *o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetExternalAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAccess) {
		return nil, false
	}
	return o.ExternalAccess, true
}

// HasExternalAccess returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasExternalAccess() bool {
	if o != nil && !IsNil(o.ExternalAccess) {
		return true
	}

	return false
}

// SetExternalAccess gets a reference to the given bool and assigns it to the ExternalAccess field.
func (o *ProgramTrackedEntityAttribute) SetExternalAccess(v bool) {
	o.ExternalAccess = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *ProgramTrackedEntityAttribute) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *ProgramTrackedEntityAttribute) SetFavorites(v []string) {
	o.Favorites = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ProgramTrackedEntityAttribute) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProgramTrackedEntityAttribute) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *ProgramTrackedEntityAttribute) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetLastUpdatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetLastUpdatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the LastUpdatedBy field.
func (o *ProgramTrackedEntityAttribute) SetLastUpdatedBy(v AggregateDataExchangeCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetMandatory returns the Mandatory field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetMandatory() bool {
	if o == nil || IsNil(o.Mandatory) {
		var ret bool
		return ret
	}
	return *o.Mandatory
}

// GetMandatoryOk returns a tuple with the Mandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetMandatoryOk() (*bool, bool) {
	if o == nil || IsNil(o.Mandatory) {
		return nil, false
	}
	return o.Mandatory, true
}

// HasMandatory returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasMandatory() bool {
	if o != nil && !IsNil(o.Mandatory) {
		return true
	}

	return false
}

// SetMandatory gets a reference to the given bool and assigns it to the Mandatory field.
func (o *ProgramTrackedEntityAttribute) SetMandatory(v bool) {
	o.Mandatory = &v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetProgram() EventVisualizationProgram {
	if o == nil || IsNil(o.Program) {
		var ret EventVisualizationProgram
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetProgramOk() (*EventVisualizationProgram, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given EventVisualizationProgram and assigns it to the Program field.
func (o *ProgramTrackedEntityAttribute) SetProgram(v EventVisualizationProgram) {
	o.Program = &v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *ProgramTrackedEntityAttribute) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetRenderOptionsAsRadio returns the RenderOptionsAsRadio field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetRenderOptionsAsRadio() bool {
	if o == nil || IsNil(o.RenderOptionsAsRadio) {
		var ret bool
		return ret
	}
	return *o.RenderOptionsAsRadio
}

// GetRenderOptionsAsRadioOk returns a tuple with the RenderOptionsAsRadio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetRenderOptionsAsRadioOk() (*bool, bool) {
	if o == nil || IsNil(o.RenderOptionsAsRadio) {
		return nil, false
	}
	return o.RenderOptionsAsRadio, true
}

// HasRenderOptionsAsRadio returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasRenderOptionsAsRadio() bool {
	if o != nil && !IsNil(o.RenderOptionsAsRadio) {
		return true
	}

	return false
}

// SetRenderOptionsAsRadio gets a reference to the given bool and assigns it to the RenderOptionsAsRadio field.
func (o *ProgramTrackedEntityAttribute) SetRenderOptionsAsRadio(v bool) {
	o.RenderOptionsAsRadio = &v
}

// GetRenderType returns the RenderType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProgramTrackedEntityAttribute) GetRenderType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RenderType
}

// GetRenderTypeOk returns a tuple with the RenderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgramTrackedEntityAttribute) GetRenderTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RenderType) {
		return nil, false
	}
	return &o.RenderType, true
}

// HasRenderType returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasRenderType() bool {
	if o != nil && !IsNil(o.RenderType) {
		return true
	}

	return false
}

// SetRenderType gets a reference to the given interface{} and assigns it to the RenderType field.
func (o *ProgramTrackedEntityAttribute) SetRenderType(v interface{}) {
	o.RenderType = v
}

// GetSearchable returns the Searchable field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetSearchable() bool {
	if o == nil || IsNil(o.Searchable) {
		var ret bool
		return ret
	}
	return *o.Searchable
}

// GetSearchableOk returns a tuple with the Searchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetSearchableOk() (*bool, bool) {
	if o == nil || IsNil(o.Searchable) {
		return nil, false
	}
	return o.Searchable, true
}

// HasSearchable returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasSearchable() bool {
	if o != nil && !IsNil(o.Searchable) {
		return true
	}

	return false
}

// SetSearchable gets a reference to the given bool and assigns it to the Searchable field.
func (o *ProgramTrackedEntityAttribute) SetSearchable(v bool) {
	o.Searchable = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *ProgramTrackedEntityAttribute) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret int32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetSortOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int32 and assigns it to the SortOrder field.
func (o *ProgramTrackedEntityAttribute) SetSortOrder(v int32) {
	o.SortOrder = &v
}

// GetTrackedEntityAttribute returns the TrackedEntityAttribute field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetTrackedEntityAttribute() EventVisualizationAttributeValueDimension {
	if o == nil || IsNil(o.TrackedEntityAttribute) {
		var ret EventVisualizationAttributeValueDimension
		return ret
	}
	return *o.TrackedEntityAttribute
}

// GetTrackedEntityAttributeOk returns a tuple with the TrackedEntityAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetTrackedEntityAttributeOk() (*EventVisualizationAttributeValueDimension, bool) {
	if o == nil || IsNil(o.TrackedEntityAttribute) {
		return nil, false
	}
	return o.TrackedEntityAttribute, true
}

// HasTrackedEntityAttribute returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasTrackedEntityAttribute() bool {
	if o != nil && !IsNil(o.TrackedEntityAttribute) {
		return true
	}

	return false
}

// SetTrackedEntityAttribute gets a reference to the given EventVisualizationAttributeValueDimension and assigns it to the TrackedEntityAttribute field.
func (o *ProgramTrackedEntityAttribute) SetTrackedEntityAttribute(v EventVisualizationAttributeValueDimension) {
	o.TrackedEntityAttribute = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *ProgramTrackedEntityAttribute) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *ProgramTrackedEntityAttribute) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetUserAccesses() []LegacyUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []LegacyUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetUserAccessesOk() ([]LegacyUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []LegacyUserAccess and assigns it to the UserAccesses field.
func (o *ProgramTrackedEntityAttribute) SetUserAccesses(v []LegacyUserAccess) {
	o.UserAccesses = v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *ProgramTrackedEntityAttribute) GetUserGroupAccesses() []LegacyUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []LegacyUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetUserGroupAccessesOk() ([]LegacyUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *ProgramTrackedEntityAttribute) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []LegacyUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *ProgramTrackedEntityAttribute) SetUserGroupAccesses(v []LegacyUserGroupAccess) {
	o.UserGroupAccesses = v
}

// GetValueType returns the ValueType field value
func (o *ProgramTrackedEntityAttribute) GetValueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *ProgramTrackedEntityAttribute) GetValueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *ProgramTrackedEntityAttribute) SetValueType(v string) {
	o.ValueType = v
}

func (o ProgramTrackedEntityAttribute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProgramTrackedEntityAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AllowFutureDate) {
		toSerialize["allowFutureDate"] = o.AllowFutureDate
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DisplayInList) {
		toSerialize["displayInList"] = o.DisplayInList
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	if !IsNil(o.ExternalAccess) {
		toSerialize["externalAccess"] = o.ExternalAccess
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Mandatory) {
		toSerialize["mandatory"] = o.Mandatory
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	if !IsNil(o.RenderOptionsAsRadio) {
		toSerialize["renderOptionsAsRadio"] = o.RenderOptionsAsRadio
	}
	if o.RenderType != nil {
		toSerialize["renderType"] = o.RenderType
	}
	if !IsNil(o.Searchable) {
		toSerialize["searchable"] = o.Searchable
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if !IsNil(o.TrackedEntityAttribute) {
		toSerialize["trackedEntityAttribute"] = o.TrackedEntityAttribute
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	toSerialize["valueType"] = o.ValueType
	return toSerialize, nil
}

func (o *ProgramTrackedEntityAttribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"valueType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProgramTrackedEntityAttribute := _ProgramTrackedEntityAttribute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProgramTrackedEntityAttribute)

	if err != nil {
		return err
	}

	*o = ProgramTrackedEntityAttribute(varProgramTrackedEntityAttribute)

	return err
}

type NullableProgramTrackedEntityAttribute struct {
	value *ProgramTrackedEntityAttribute
	isSet bool
}

func (v NullableProgramTrackedEntityAttribute) Get() *ProgramTrackedEntityAttribute {
	return v.value
}

func (v *NullableProgramTrackedEntityAttribute) Set(val *ProgramTrackedEntityAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramTrackedEntityAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramTrackedEntityAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramTrackedEntityAttribute(val *ProgramTrackedEntityAttribute) *NullableProgramTrackedEntityAttribute {
	return &NullableProgramTrackedEntityAttribute{value: val, isSet: true}
}

func (v NullableProgramTrackedEntityAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramTrackedEntityAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
