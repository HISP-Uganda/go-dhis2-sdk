/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// JsonPatchOperationsInner - struct for JsonPatchOperationsInner
type JsonPatchOperationsInner struct {
	AddOperation        *AddOperation
	RemoveByIdOperation *RemoveByIdOperation
	RemoveOperation     *RemoveOperation
	ReplaceOperation    *ReplaceOperation
}

// AddOperationAsJsonPatchOperationsInner is a convenience function that returns AddOperation wrapped in JsonPatchOperationsInner
func AddOperationAsJsonPatchOperationsInner(v *AddOperation) JsonPatchOperationsInner {
	return JsonPatchOperationsInner{
		AddOperation: v,
	}
}

// RemoveByIdOperationAsJsonPatchOperationsInner is a convenience function that returns RemoveByIdOperation wrapped in JsonPatchOperationsInner
func RemoveByIdOperationAsJsonPatchOperationsInner(v *RemoveByIdOperation) JsonPatchOperationsInner {
	return JsonPatchOperationsInner{
		RemoveByIdOperation: v,
	}
}

// RemoveOperationAsJsonPatchOperationsInner is a convenience function that returns RemoveOperation wrapped in JsonPatchOperationsInner
func RemoveOperationAsJsonPatchOperationsInner(v *RemoveOperation) JsonPatchOperationsInner {
	return JsonPatchOperationsInner{
		RemoveOperation: v,
	}
}

// ReplaceOperationAsJsonPatchOperationsInner is a convenience function that returns ReplaceOperation wrapped in JsonPatchOperationsInner
func ReplaceOperationAsJsonPatchOperationsInner(v *ReplaceOperation) JsonPatchOperationsInner {
	return JsonPatchOperationsInner{
		ReplaceOperation: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *JsonPatchOperationsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddOperation
	err = newStrictDecoder(data).Decode(&dst.AddOperation)
	if err == nil {
		jsonAddOperation, _ := json.Marshal(dst.AddOperation)
		if string(jsonAddOperation) == "{}" { // empty struct
			dst.AddOperation = nil
		} else {
			match++
		}
	} else {
		dst.AddOperation = nil
	}

	// try to unmarshal data into RemoveByIdOperation
	err = newStrictDecoder(data).Decode(&dst.RemoveByIdOperation)
	if err == nil {
		jsonRemoveByIdOperation, _ := json.Marshal(dst.RemoveByIdOperation)
		if string(jsonRemoveByIdOperation) == "{}" { // empty struct
			dst.RemoveByIdOperation = nil
		} else {
			match++
		}
	} else {
		dst.RemoveByIdOperation = nil
	}

	// try to unmarshal data into RemoveOperation
	err = newStrictDecoder(data).Decode(&dst.RemoveOperation)
	if err == nil {
		jsonRemoveOperation, _ := json.Marshal(dst.RemoveOperation)
		if string(jsonRemoveOperation) == "{}" { // empty struct
			dst.RemoveOperation = nil
		} else {
			match++
		}
	} else {
		dst.RemoveOperation = nil
	}

	// try to unmarshal data into ReplaceOperation
	err = newStrictDecoder(data).Decode(&dst.ReplaceOperation)
	if err == nil {
		jsonReplaceOperation, _ := json.Marshal(dst.ReplaceOperation)
		if string(jsonReplaceOperation) == "{}" { // empty struct
			dst.ReplaceOperation = nil
		} else {
			match++
		}
	} else {
		dst.ReplaceOperation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddOperation = nil
		dst.RemoveByIdOperation = nil
		dst.RemoveOperation = nil
		dst.ReplaceOperation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(JsonPatchOperationsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(JsonPatchOperationsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JsonPatchOperationsInner) MarshalJSON() ([]byte, error) {
	if src.AddOperation != nil {
		return json.Marshal(&src.AddOperation)
	}

	if src.RemoveByIdOperation != nil {
		return json.Marshal(&src.RemoveByIdOperation)
	}

	if src.RemoveOperation != nil {
		return json.Marshal(&src.RemoveOperation)
	}

	if src.ReplaceOperation != nil {
		return json.Marshal(&src.ReplaceOperation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JsonPatchOperationsInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddOperation != nil {
		return obj.AddOperation
	}

	if obj.RemoveByIdOperation != nil {
		return obj.RemoveByIdOperation
	}

	if obj.RemoveOperation != nil {
		return obj.RemoveOperation
	}

	if obj.ReplaceOperation != nil {
		return obj.ReplaceOperation
	}

	// all schemas are nil
	return nil
}

type NullableJsonPatchOperationsInner struct {
	value *JsonPatchOperationsInner
	isSet bool
}

func (v NullableJsonPatchOperationsInner) Get() *JsonPatchOperationsInner {
	return v.value
}

func (v *NullableJsonPatchOperationsInner) Set(val *JsonPatchOperationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonPatchOperationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonPatchOperationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonPatchOperationsInner(val *JsonPatchOperationsInner) *NullableJsonPatchOperationsInner {
	return &NullableJsonPatchOperationsInner{value: val, isSet: true}
}

func (v NullableJsonPatchOperationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonPatchOperationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
