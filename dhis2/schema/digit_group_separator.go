/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DigitGroupSeparator the model 'DigitGroupSeparator'
type DigitGroupSeparator string

// List of DigitGroupSeparator
const (
	DIGITGROUPSEPARATOR_COMMA DigitGroupSeparator = "COMMA"
	DIGITGROUPSEPARATOR_SPACE DigitGroupSeparator = "SPACE"
	DIGITGROUPSEPARATOR_NONE  DigitGroupSeparator = "NONE"
)

// All allowed values of DigitGroupSeparator enum
var AllowedDigitGroupSeparatorEnumValues = []DigitGroupSeparator{
	"COMMA",
	"SPACE",
	"NONE",
}

func (v *DigitGroupSeparator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DigitGroupSeparator(value)
	for _, existing := range AllowedDigitGroupSeparatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DigitGroupSeparator", value)
}

// NewDigitGroupSeparatorFromValue returns a pointer to a valid DigitGroupSeparator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDigitGroupSeparatorFromValue(v string) (*DigitGroupSeparator, error) {
	ev := DigitGroupSeparator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DigitGroupSeparator: valid values are %v", v, AllowedDigitGroupSeparatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DigitGroupSeparator) IsValid() bool {
	for _, existing := range AllowedDigitGroupSeparatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DigitGroupSeparator value
func (v DigitGroupSeparator) Ptr() *DigitGroupSeparator {
	return &v
}

type NullableDigitGroupSeparator struct {
	value *DigitGroupSeparator
	isSet bool
}

func (v NullableDigitGroupSeparator) Get() *DigitGroupSeparator {
	return v.value
}

func (v *NullableDigitGroupSeparator) Set(val *DigitGroupSeparator) {
	v.value = val
	v.isSet = true
}

func (v NullableDigitGroupSeparator) IsSet() bool {
	return v.isSet
}

func (v *NullableDigitGroupSeparator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigitGroupSeparator(val *DigitGroupSeparator) *NullableDigitGroupSeparator {
	return &NullableDigitGroupSeparator{value: val, isSet: true}
}

func (v NullableDigitGroupSeparator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigitGroupSeparator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
