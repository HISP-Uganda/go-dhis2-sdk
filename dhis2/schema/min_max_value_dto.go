/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the MinMaxValueDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MinMaxValueDto{}

// MinMaxValueDto struct for MinMaxValueDto
type MinMaxValueDto struct {
	// A UID for an CategoryOptionCombo object   (Java name `org.hisp.dhis.category.CategoryOptionCombo`)
	CategoryOptionCombo *string `json:"categoryOptionCombo,omitempty"`
	// A UID for an DataElement object   (Java name `org.hisp.dhis.dataelement.DataElement`)
	DataElement *string `json:"dataElement,omitempty"`
	MaxValue    *int32  `json:"maxValue,omitempty"`
	MinValue    *int32  `json:"minValue,omitempty"`
	// A UID for an OrganisationUnit object   (Java name `org.hisp.dhis.organisationunit.OrganisationUnit`)
	OrgUnit *string `json:"orgUnit,omitempty"`
}

// NewMinMaxValueDto instantiates a new MinMaxValueDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinMaxValueDto() *MinMaxValueDto {
	this := MinMaxValueDto{}
	return &this
}

// NewMinMaxValueDtoWithDefaults instantiates a new MinMaxValueDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinMaxValueDtoWithDefaults() *MinMaxValueDto {
	this := MinMaxValueDto{}
	return &this
}

// GetCategoryOptionCombo returns the CategoryOptionCombo field value if set, zero value otherwise.
func (o *MinMaxValueDto) GetCategoryOptionCombo() string {
	if o == nil || IsNil(o.CategoryOptionCombo) {
		var ret string
		return ret
	}
	return *o.CategoryOptionCombo
}

// GetCategoryOptionComboOk returns a tuple with the CategoryOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinMaxValueDto) GetCategoryOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryOptionCombo) {
		return nil, false
	}
	return o.CategoryOptionCombo, true
}

// HasCategoryOptionCombo returns a boolean if a field has been set.
func (o *MinMaxValueDto) HasCategoryOptionCombo() bool {
	if o != nil && !IsNil(o.CategoryOptionCombo) {
		return true
	}

	return false
}

// SetCategoryOptionCombo gets a reference to the given string and assigns it to the CategoryOptionCombo field.
func (o *MinMaxValueDto) SetCategoryOptionCombo(v string) {
	o.CategoryOptionCombo = &v
}

// GetDataElement returns the DataElement field value if set, zero value otherwise.
func (o *MinMaxValueDto) GetDataElement() string {
	if o == nil || IsNil(o.DataElement) {
		var ret string
		return ret
	}
	return *o.DataElement
}

// GetDataElementOk returns a tuple with the DataElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinMaxValueDto) GetDataElementOk() (*string, bool) {
	if o == nil || IsNil(o.DataElement) {
		return nil, false
	}
	return o.DataElement, true
}

// HasDataElement returns a boolean if a field has been set.
func (o *MinMaxValueDto) HasDataElement() bool {
	if o != nil && !IsNil(o.DataElement) {
		return true
	}

	return false
}

// SetDataElement gets a reference to the given string and assigns it to the DataElement field.
func (o *MinMaxValueDto) SetDataElement(v string) {
	o.DataElement = &v
}

// GetMaxValue returns the MaxValue field value if set, zero value otherwise.
func (o *MinMaxValueDto) GetMaxValue() int32 {
	if o == nil || IsNil(o.MaxValue) {
		var ret int32
		return ret
	}
	return *o.MaxValue
}

// GetMaxValueOk returns a tuple with the MaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinMaxValueDto) GetMaxValueOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxValue) {
		return nil, false
	}
	return o.MaxValue, true
}

// HasMaxValue returns a boolean if a field has been set.
func (o *MinMaxValueDto) HasMaxValue() bool {
	if o != nil && !IsNil(o.MaxValue) {
		return true
	}

	return false
}

// SetMaxValue gets a reference to the given int32 and assigns it to the MaxValue field.
func (o *MinMaxValueDto) SetMaxValue(v int32) {
	o.MaxValue = &v
}

// GetMinValue returns the MinValue field value if set, zero value otherwise.
func (o *MinMaxValueDto) GetMinValue() int32 {
	if o == nil || IsNil(o.MinValue) {
		var ret int32
		return ret
	}
	return *o.MinValue
}

// GetMinValueOk returns a tuple with the MinValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinMaxValueDto) GetMinValueOk() (*int32, bool) {
	if o == nil || IsNil(o.MinValue) {
		return nil, false
	}
	return o.MinValue, true
}

// HasMinValue returns a boolean if a field has been set.
func (o *MinMaxValueDto) HasMinValue() bool {
	if o != nil && !IsNil(o.MinValue) {
		return true
	}

	return false
}

// SetMinValue gets a reference to the given int32 and assigns it to the MinValue field.
func (o *MinMaxValueDto) SetMinValue(v int32) {
	o.MinValue = &v
}

// GetOrgUnit returns the OrgUnit field value if set, zero value otherwise.
func (o *MinMaxValueDto) GetOrgUnit() string {
	if o == nil || IsNil(o.OrgUnit) {
		var ret string
		return ret
	}
	return *o.OrgUnit
}

// GetOrgUnitOk returns a tuple with the OrgUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinMaxValueDto) GetOrgUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnit) {
		return nil, false
	}
	return o.OrgUnit, true
}

// HasOrgUnit returns a boolean if a field has been set.
func (o *MinMaxValueDto) HasOrgUnit() bool {
	if o != nil && !IsNil(o.OrgUnit) {
		return true
	}

	return false
}

// SetOrgUnit gets a reference to the given string and assigns it to the OrgUnit field.
func (o *MinMaxValueDto) SetOrgUnit(v string) {
	o.OrgUnit = &v
}

func (o MinMaxValueDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MinMaxValueDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryOptionCombo) {
		toSerialize["categoryOptionCombo"] = o.CategoryOptionCombo
	}
	if !IsNil(o.DataElement) {
		toSerialize["dataElement"] = o.DataElement
	}
	if !IsNil(o.MaxValue) {
		toSerialize["maxValue"] = o.MaxValue
	}
	if !IsNil(o.MinValue) {
		toSerialize["minValue"] = o.MinValue
	}
	if !IsNil(o.OrgUnit) {
		toSerialize["orgUnit"] = o.OrgUnit
	}
	return toSerialize, nil
}

type NullableMinMaxValueDto struct {
	value *MinMaxValueDto
	isSet bool
}

func (v NullableMinMaxValueDto) Get() *MinMaxValueDto {
	return v.value
}

func (v *NullableMinMaxValueDto) Set(val *MinMaxValueDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMinMaxValueDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMinMaxValueDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinMaxValueDto(val *MinMaxValueDto) *NullableMinMaxValueDto {
	return &NullableMinMaxValueDto{value: val, isSet: true}
}

func (v NullableMinMaxValueDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinMaxValueDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
