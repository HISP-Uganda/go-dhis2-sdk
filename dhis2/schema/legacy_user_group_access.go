/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LegacyUserGroupAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegacyUserGroupAccess{}

// LegacyUserGroupAccess struct for LegacyUserGroupAccess
type LegacyUserGroupAccess struct {
	Access       *string                         `json:"access,omitempty"`
	DisplayName  *string                         `json:"displayName,omitempty"`
	Id           *string                         `json:"id,omitempty"`
	UserGroup    ConfigurationFeedbackRecipients `json:"userGroup"`
	UserGroupUid *string                         `json:"userGroupUid,omitempty"`
}

type _LegacyUserGroupAccess LegacyUserGroupAccess

// NewLegacyUserGroupAccess instantiates a new LegacyUserGroupAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyUserGroupAccess(userGroup ConfigurationFeedbackRecipients) *LegacyUserGroupAccess {
	this := LegacyUserGroupAccess{}
	this.UserGroup = userGroup
	return &this
}

// NewLegacyUserGroupAccessWithDefaults instantiates a new LegacyUserGroupAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyUserGroupAccessWithDefaults() *LegacyUserGroupAccess {
	this := LegacyUserGroupAccess{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *LegacyUserGroupAccess) GetAccess() string {
	if o == nil || IsNil(o.Access) {
		var ret string
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyUserGroupAccess) GetAccessOk() (*string, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *LegacyUserGroupAccess) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given string and assigns it to the Access field.
func (o *LegacyUserGroupAccess) SetAccess(v string) {
	o.Access = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *LegacyUserGroupAccess) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyUserGroupAccess) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *LegacyUserGroupAccess) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *LegacyUserGroupAccess) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LegacyUserGroupAccess) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyUserGroupAccess) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LegacyUserGroupAccess) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LegacyUserGroupAccess) SetId(v string) {
	o.Id = &v
}

// GetUserGroup returns the UserGroup field value
func (o *LegacyUserGroupAccess) GetUserGroup() ConfigurationFeedbackRecipients {
	if o == nil {
		var ret ConfigurationFeedbackRecipients
		return ret
	}

	return o.UserGroup
}

// GetUserGroupOk returns a tuple with the UserGroup field value
// and a boolean to check if the value has been set.
func (o *LegacyUserGroupAccess) GetUserGroupOk() (*ConfigurationFeedbackRecipients, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserGroup, true
}

// SetUserGroup sets field value
func (o *LegacyUserGroupAccess) SetUserGroup(v ConfigurationFeedbackRecipients) {
	o.UserGroup = v
}

// GetUserGroupUid returns the UserGroupUid field value if set, zero value otherwise.
func (o *LegacyUserGroupAccess) GetUserGroupUid() string {
	if o == nil || IsNil(o.UserGroupUid) {
		var ret string
		return ret
	}
	return *o.UserGroupUid
}

// GetUserGroupUidOk returns a tuple with the UserGroupUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyUserGroupAccess) GetUserGroupUidOk() (*string, bool) {
	if o == nil || IsNil(o.UserGroupUid) {
		return nil, false
	}
	return o.UserGroupUid, true
}

// HasUserGroupUid returns a boolean if a field has been set.
func (o *LegacyUserGroupAccess) HasUserGroupUid() bool {
	if o != nil && !IsNil(o.UserGroupUid) {
		return true
	}

	return false
}

// SetUserGroupUid gets a reference to the given string and assigns it to the UserGroupUid field.
func (o *LegacyUserGroupAccess) SetUserGroupUid(v string) {
	o.UserGroupUid = &v
}

func (o LegacyUserGroupAccess) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegacyUserGroupAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["userGroup"] = o.UserGroup
	if !IsNil(o.UserGroupUid) {
		toSerialize["userGroupUid"] = o.UserGroupUid
	}
	return toSerialize, nil
}

func (o *LegacyUserGroupAccess) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userGroup",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLegacyUserGroupAccess := _LegacyUserGroupAccess{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLegacyUserGroupAccess)

	if err != nil {
		return err
	}

	*o = LegacyUserGroupAccess(varLegacyUserGroupAccess)

	return err
}

type NullableLegacyUserGroupAccess struct {
	value *LegacyUserGroupAccess
	isSet bool
}

func (v NullableLegacyUserGroupAccess) Get() *LegacyUserGroupAccess {
	return v.value
}

func (v *NullableLegacyUserGroupAccess) Set(val *LegacyUserGroupAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyUserGroupAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyUserGroupAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyUserGroupAccess(val *LegacyUserGroupAccess) *NullableLegacyUserGroupAccess {
	return &NullableLegacyUserGroupAccess{value: val, isSet: true}
}

func (v NullableLegacyUserGroupAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyUserGroupAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
