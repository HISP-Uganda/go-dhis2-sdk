/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// UserOverrideMode the model 'UserOverrideMode'
type UserOverrideMode string

// List of UserOverrideMode
const (
	USEROVERRIDEMODE_NONE     UserOverrideMode = "NONE"
	USEROVERRIDEMODE_CURRENT  UserOverrideMode = "CURRENT"
	USEROVERRIDEMODE_SELECTED UserOverrideMode = "SELECTED"
)

// All allowed values of UserOverrideMode enum
var AllowedUserOverrideModeEnumValues = []UserOverrideMode{
	"NONE",
	"CURRENT",
	"SELECTED",
}

func (v *UserOverrideMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserOverrideMode(value)
	for _, existing := range AllowedUserOverrideModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserOverrideMode", value)
}

// NewUserOverrideModeFromValue returns a pointer to a valid UserOverrideMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserOverrideModeFromValue(v string) (*UserOverrideMode, error) {
	ev := UserOverrideMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserOverrideMode: valid values are %v", v, AllowedUserOverrideModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserOverrideMode) IsValid() bool {
	for _, existing := range AllowedUserOverrideModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserOverrideMode value
func (v UserOverrideMode) Ptr() *UserOverrideMode {
	return &v
}

type NullableUserOverrideMode struct {
	value *UserOverrideMode
	isSet bool
}

func (v NullableUserOverrideMode) Get() *UserOverrideMode {
	return v.value
}

func (v *NullableUserOverrideMode) Set(val *UserOverrideMode) {
	v.value = val
	v.isSet = true
}

func (v NullableUserOverrideMode) IsSet() bool {
	return v.isSet
}

func (v *NullableUserOverrideMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserOverrideMode(val *UserOverrideMode) *NullableUserOverrideMode {
	return &NullableUserOverrideMode{value: val, isSet: true}
}

func (v NullableUserOverrideMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserOverrideMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
