/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the LockExceptionsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LockExceptionsDto{}

// LockExceptionsDto struct for LockExceptionsDto
type LockExceptionsDto struct {
	LockExceptions []LockExceptionDto `json:"lockExceptions,omitempty"`
}

// NewLockExceptionsDto instantiates a new LockExceptionsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLockExceptionsDto() *LockExceptionsDto {
	this := LockExceptionsDto{}
	return &this
}

// NewLockExceptionsDtoWithDefaults instantiates a new LockExceptionsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLockExceptionsDtoWithDefaults() *LockExceptionsDto {
	this := LockExceptionsDto{}
	return &this
}

// GetLockExceptions returns the LockExceptions field value if set, zero value otherwise.
func (o *LockExceptionsDto) GetLockExceptions() []LockExceptionDto {
	if o == nil || IsNil(o.LockExceptions) {
		var ret []LockExceptionDto
		return ret
	}
	return o.LockExceptions
}

// GetLockExceptionsOk returns a tuple with the LockExceptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockExceptionsDto) GetLockExceptionsOk() ([]LockExceptionDto, bool) {
	if o == nil || IsNil(o.LockExceptions) {
		return nil, false
	}
	return o.LockExceptions, true
}

// HasLockExceptions returns a boolean if a field has been set.
func (o *LockExceptionsDto) HasLockExceptions() bool {
	if o != nil && !IsNil(o.LockExceptions) {
		return true
	}

	return false
}

// SetLockExceptions gets a reference to the given []LockExceptionDto and assigns it to the LockExceptions field.
func (o *LockExceptionsDto) SetLockExceptions(v []LockExceptionDto) {
	o.LockExceptions = v
}

func (o LockExceptionsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LockExceptionsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LockExceptions) {
		toSerialize["lockExceptions"] = o.LockExceptions
	}
	return toSerialize, nil
}

type NullableLockExceptionsDto struct {
	value *LockExceptionsDto
	isSet bool
}

func (v NullableLockExceptionsDto) Get() *LockExceptionsDto {
	return v.value
}

func (v *NullableLockExceptionsDto) Set(val *LockExceptionsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLockExceptionsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLockExceptionsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockExceptionsDto(val *LockExceptionsDto) *NullableLockExceptionsDto {
	return &NullableLockExceptionsDto{value: val, isSet: true}
}

func (v NullableLockExceptionsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockExceptionsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
