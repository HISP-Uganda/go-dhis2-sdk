/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// MapPropertyNames the model 'MapPropertyNames'
type MapPropertyNames string

// List of MapPropertyNames
const (
	MAPPROPERTYNAMES_ACCESS              MapPropertyNames = "access"
	MAPPROPERTYNAMES_ATTRIBUTE_VALUES    MapPropertyNames = "attributeValues"
	MAPPROPERTYNAMES_BASEMAP             MapPropertyNames = "basemap"
	MAPPROPERTYNAMES_CODE                MapPropertyNames = "code"
	MAPPROPERTYNAMES_CREATED             MapPropertyNames = "created"
	MAPPROPERTYNAMES_CREATED_BY          MapPropertyNames = "createdBy"
	MAPPROPERTYNAMES_DESCRIPTION         MapPropertyNames = "description"
	MAPPROPERTYNAMES_DISPLAY_DESCRIPTION MapPropertyNames = "displayDescription"
	MAPPROPERTYNAMES_DISPLAY_FORM_NAME   MapPropertyNames = "displayFormName"
	MAPPROPERTYNAMES_DISPLAY_NAME        MapPropertyNames = "displayName"
	MAPPROPERTYNAMES_DISPLAY_SHORT_NAME  MapPropertyNames = "displayShortName"
	MAPPROPERTYNAMES_FAVORITE            MapPropertyNames = "favorite"
	MAPPROPERTYNAMES_FAVORITES           MapPropertyNames = "favorites"
	MAPPROPERTYNAMES_FORM_NAME           MapPropertyNames = "formName"
	MAPPROPERTYNAMES_HREF                MapPropertyNames = "href"
	MAPPROPERTYNAMES_ID                  MapPropertyNames = "id"
	MAPPROPERTYNAMES_INTERPRETATIONS     MapPropertyNames = "interpretations"
	MAPPROPERTYNAMES_LAST_UPDATED        MapPropertyNames = "lastUpdated"
	MAPPROPERTYNAMES_LAST_UPDATED_BY     MapPropertyNames = "lastUpdatedBy"
	MAPPROPERTYNAMES_LATITUDE            MapPropertyNames = "latitude"
	MAPPROPERTYNAMES_LONGITUDE           MapPropertyNames = "longitude"
	MAPPROPERTYNAMES_MAP_VIEWS           MapPropertyNames = "mapViews"
	MAPPROPERTYNAMES_NAME                MapPropertyNames = "name"
	MAPPROPERTYNAMES_SHARING             MapPropertyNames = "sharing"
	MAPPROPERTYNAMES_SHORT_NAME          MapPropertyNames = "shortName"
	MAPPROPERTYNAMES_SUBSCRIBED          MapPropertyNames = "subscribed"
	MAPPROPERTYNAMES_SUBSCRIBERS         MapPropertyNames = "subscribers"
	MAPPROPERTYNAMES_TITLE               MapPropertyNames = "title"
	MAPPROPERTYNAMES_TRANSLATIONS        MapPropertyNames = "translations"
	MAPPROPERTYNAMES_ZOOM                MapPropertyNames = "zoom"
)

// All allowed values of MapPropertyNames enum
var AllowedMapPropertyNamesEnumValues = []MapPropertyNames{
	"access",
	"attributeValues",
	"basemap",
	"code",
	"created",
	"createdBy",
	"description",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"interpretations",
	"lastUpdated",
	"lastUpdatedBy",
	"latitude",
	"longitude",
	"mapViews",
	"name",
	"sharing",
	"shortName",
	"subscribed",
	"subscribers",
	"title",
	"translations",
	"zoom",
}

func (v *MapPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MapPropertyNames(value)
	for _, existing := range AllowedMapPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MapPropertyNames", value)
}

// NewMapPropertyNamesFromValue returns a pointer to a valid MapPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMapPropertyNamesFromValue(v string) (*MapPropertyNames, error) {
	ev := MapPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MapPropertyNames: valid values are %v", v, AllowedMapPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MapPropertyNames) IsValid() bool {
	for _, existing := range AllowedMapPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MapPropertyNames value
func (v MapPropertyNames) Ptr() *MapPropertyNames {
	return &v
}

type NullableMapPropertyNames struct {
	value *MapPropertyNames
	isSet bool
}

func (v NullableMapPropertyNames) Get() *MapPropertyNames {
	return v.value
}

func (v *NullableMapPropertyNames) Set(val *MapPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableMapPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableMapPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapPropertyNames(val *MapPropertyNames) *NullableMapPropertyNames {
	return &NullableMapPropertyNames{value: val, isSet: true}
}

func (v NullableMapPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
