/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SMPPGatewayConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SMPPGatewayConfig{}

// SMPPGatewayConfig struct for SMPPGatewayConfig
type SMPPGatewayConfig struct {
	BindType            BindType               `json:"bindType"`
	Compressed          *bool                  `json:"compressed,omitempty"`
	Host                *string                `json:"host,omitempty"`
	Id                  *string                `json:"id,omitempty"`
	IsDefault           *bool                  `json:"isDefault,omitempty"`
	MaxSmsLength        *string                `json:"maxSmsLength,omitempty"`
	Name                *string                `json:"name,omitempty"`
	NumberPlanIndicator NumberingPlanIndicator `json:"numberPlanIndicator"`
	Password            *string                `json:"password,omitempty"`
	Port                int32                  `json:"port"`
	SendUrlParameters   *bool                  `json:"sendUrlParameters,omitempty"`
	SystemId            *string                `json:"systemId,omitempty"`
	SystemType          *string                `json:"systemType,omitempty"`
	TypeOfNumber        TypeOfNumber           `json:"typeOfNumber"`
	Uid                 *string                `json:"uid,omitempty"`
	UrlTemplate         *string                `json:"urlTemplate,omitempty"`
	Username            *string                `json:"username,omitempty"`
}

type _SMPPGatewayConfig SMPPGatewayConfig

// NewSMPPGatewayConfig instantiates a new SMPPGatewayConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMPPGatewayConfig(bindType BindType, numberPlanIndicator NumberingPlanIndicator, port int32, typeOfNumber TypeOfNumber) *SMPPGatewayConfig {
	this := SMPPGatewayConfig{}
	this.BindType = bindType
	this.NumberPlanIndicator = numberPlanIndicator
	this.Port = port
	this.TypeOfNumber = typeOfNumber
	return &this
}

// NewSMPPGatewayConfigWithDefaults instantiates a new SMPPGatewayConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMPPGatewayConfigWithDefaults() *SMPPGatewayConfig {
	this := SMPPGatewayConfig{}
	return &this
}

// GetBindType returns the BindType field value
func (o *SMPPGatewayConfig) GetBindType() BindType {
	if o == nil {
		var ret BindType
		return ret
	}

	return o.BindType
}

// GetBindTypeOk returns a tuple with the BindType field value
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetBindTypeOk() (*BindType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BindType, true
}

// SetBindType sets field value
func (o *SMPPGatewayConfig) SetBindType(v BindType) {
	o.BindType = v
}

// GetCompressed returns the Compressed field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetCompressed() bool {
	if o == nil || IsNil(o.Compressed) {
		var ret bool
		return ret
	}
	return *o.Compressed
}

// GetCompressedOk returns a tuple with the Compressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetCompressedOk() (*bool, bool) {
	if o == nil || IsNil(o.Compressed) {
		return nil, false
	}
	return o.Compressed, true
}

// HasCompressed returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasCompressed() bool {
	if o != nil && !IsNil(o.Compressed) {
		return true
	}

	return false
}

// SetCompressed gets a reference to the given bool and assigns it to the Compressed field.
func (o *SMPPGatewayConfig) SetCompressed(v bool) {
	o.Compressed = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *SMPPGatewayConfig) SetHost(v string) {
	o.Host = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SMPPGatewayConfig) SetId(v string) {
	o.Id = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *SMPPGatewayConfig) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetMaxSmsLength returns the MaxSmsLength field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetMaxSmsLength() string {
	if o == nil || IsNil(o.MaxSmsLength) {
		var ret string
		return ret
	}
	return *o.MaxSmsLength
}

// GetMaxSmsLengthOk returns a tuple with the MaxSmsLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetMaxSmsLengthOk() (*string, bool) {
	if o == nil || IsNil(o.MaxSmsLength) {
		return nil, false
	}
	return o.MaxSmsLength, true
}

// HasMaxSmsLength returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasMaxSmsLength() bool {
	if o != nil && !IsNil(o.MaxSmsLength) {
		return true
	}

	return false
}

// SetMaxSmsLength gets a reference to the given string and assigns it to the MaxSmsLength field.
func (o *SMPPGatewayConfig) SetMaxSmsLength(v string) {
	o.MaxSmsLength = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SMPPGatewayConfig) SetName(v string) {
	o.Name = &v
}

// GetNumberPlanIndicator returns the NumberPlanIndicator field value
func (o *SMPPGatewayConfig) GetNumberPlanIndicator() NumberingPlanIndicator {
	if o == nil {
		var ret NumberingPlanIndicator
		return ret
	}

	return o.NumberPlanIndicator
}

// GetNumberPlanIndicatorOk returns a tuple with the NumberPlanIndicator field value
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetNumberPlanIndicatorOk() (*NumberingPlanIndicator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberPlanIndicator, true
}

// SetNumberPlanIndicator sets field value
func (o *SMPPGatewayConfig) SetNumberPlanIndicator(v NumberingPlanIndicator) {
	o.NumberPlanIndicator = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *SMPPGatewayConfig) SetPassword(v string) {
	o.Password = &v
}

// GetPort returns the Port field value
func (o *SMPPGatewayConfig) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *SMPPGatewayConfig) SetPort(v int32) {
	o.Port = v
}

// GetSendUrlParameters returns the SendUrlParameters field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetSendUrlParameters() bool {
	if o == nil || IsNil(o.SendUrlParameters) {
		var ret bool
		return ret
	}
	return *o.SendUrlParameters
}

// GetSendUrlParametersOk returns a tuple with the SendUrlParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetSendUrlParametersOk() (*bool, bool) {
	if o == nil || IsNil(o.SendUrlParameters) {
		return nil, false
	}
	return o.SendUrlParameters, true
}

// HasSendUrlParameters returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasSendUrlParameters() bool {
	if o != nil && !IsNil(o.SendUrlParameters) {
		return true
	}

	return false
}

// SetSendUrlParameters gets a reference to the given bool and assigns it to the SendUrlParameters field.
func (o *SMPPGatewayConfig) SetSendUrlParameters(v bool) {
	o.SendUrlParameters = &v
}

// GetSystemId returns the SystemId field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetSystemId() string {
	if o == nil || IsNil(o.SystemId) {
		var ret string
		return ret
	}
	return *o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.SystemId) {
		return nil, false
	}
	return o.SystemId, true
}

// HasSystemId returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasSystemId() bool {
	if o != nil && !IsNil(o.SystemId) {
		return true
	}

	return false
}

// SetSystemId gets a reference to the given string and assigns it to the SystemId field.
func (o *SMPPGatewayConfig) SetSystemId(v string) {
	o.SystemId = &v
}

// GetSystemType returns the SystemType field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetSystemType() string {
	if o == nil || IsNil(o.SystemType) {
		var ret string
		return ret
	}
	return *o.SystemType
}

// GetSystemTypeOk returns a tuple with the SystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetSystemTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SystemType) {
		return nil, false
	}
	return o.SystemType, true
}

// HasSystemType returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasSystemType() bool {
	if o != nil && !IsNil(o.SystemType) {
		return true
	}

	return false
}

// SetSystemType gets a reference to the given string and assigns it to the SystemType field.
func (o *SMPPGatewayConfig) SetSystemType(v string) {
	o.SystemType = &v
}

// GetTypeOfNumber returns the TypeOfNumber field value
func (o *SMPPGatewayConfig) GetTypeOfNumber() TypeOfNumber {
	if o == nil {
		var ret TypeOfNumber
		return ret
	}

	return o.TypeOfNumber
}

// GetTypeOfNumberOk returns a tuple with the TypeOfNumber field value
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetTypeOfNumberOk() (*TypeOfNumber, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeOfNumber, true
}

// SetTypeOfNumber sets field value
func (o *SMPPGatewayConfig) SetTypeOfNumber(v TypeOfNumber) {
	o.TypeOfNumber = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *SMPPGatewayConfig) SetUid(v string) {
	o.Uid = &v
}

// GetUrlTemplate returns the UrlTemplate field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetUrlTemplate() string {
	if o == nil || IsNil(o.UrlTemplate) {
		var ret string
		return ret
	}
	return *o.UrlTemplate
}

// GetUrlTemplateOk returns a tuple with the UrlTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetUrlTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.UrlTemplate) {
		return nil, false
	}
	return o.UrlTemplate, true
}

// HasUrlTemplate returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasUrlTemplate() bool {
	if o != nil && !IsNil(o.UrlTemplate) {
		return true
	}

	return false
}

// SetUrlTemplate gets a reference to the given string and assigns it to the UrlTemplate field.
func (o *SMPPGatewayConfig) SetUrlTemplate(v string) {
	o.UrlTemplate = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SMPPGatewayConfig) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMPPGatewayConfig) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SMPPGatewayConfig) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SMPPGatewayConfig) SetUsername(v string) {
	o.Username = &v
}

func (o SMPPGatewayConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SMPPGatewayConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bindType"] = o.BindType
	if !IsNil(o.Compressed) {
		toSerialize["compressed"] = o.Compressed
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !IsNil(o.MaxSmsLength) {
		toSerialize["maxSmsLength"] = o.MaxSmsLength
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["numberPlanIndicator"] = o.NumberPlanIndicator
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	toSerialize["port"] = o.Port
	if !IsNil(o.SendUrlParameters) {
		toSerialize["sendUrlParameters"] = o.SendUrlParameters
	}
	if !IsNil(o.SystemId) {
		toSerialize["systemId"] = o.SystemId
	}
	if !IsNil(o.SystemType) {
		toSerialize["systemType"] = o.SystemType
	}
	toSerialize["typeOfNumber"] = o.TypeOfNumber
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.UrlTemplate) {
		toSerialize["urlTemplate"] = o.UrlTemplate
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

func (o *SMPPGatewayConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bindType",
		"numberPlanIndicator",
		"port",
		"typeOfNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSMPPGatewayConfig := _SMPPGatewayConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSMPPGatewayConfig)

	if err != nil {
		return err
	}

	*o = SMPPGatewayConfig(varSMPPGatewayConfig)

	return err
}

type NullableSMPPGatewayConfig struct {
	value *SMPPGatewayConfig
	isSet bool
}

func (v NullableSMPPGatewayConfig) Get() *SMPPGatewayConfig {
	return v.value
}

func (v *NullableSMPPGatewayConfig) Set(val *SMPPGatewayConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSMPPGatewayConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSMPPGatewayConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMPPGatewayConfig(val *SMPPGatewayConfig) *NullableSMPPGatewayConfig {
	return &NullableSMPPGatewayConfig{value: val, isSet: true}
}

func (v NullableSMPPGatewayConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMPPGatewayConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
