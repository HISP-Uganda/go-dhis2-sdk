/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// Importance the model 'Importance'
type Importance string

// List of Importance
const (
	IMPORTANCE_HIGH   Importance = "HIGH"
	IMPORTANCE_MEDIUM Importance = "MEDIUM"
	IMPORTANCE_LOW    Importance = "LOW"
)

// All allowed values of Importance enum
var AllowedImportanceEnumValues = []Importance{
	"HIGH",
	"MEDIUM",
	"LOW",
}

func (v *Importance) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Importance(value)
	for _, existing := range AllowedImportanceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Importance", value)
}

// NewImportanceFromValue returns a pointer to a valid Importance
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImportanceFromValue(v string) (*Importance, error) {
	ev := Importance(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Importance: valid values are %v", v, AllowedImportanceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Importance) IsValid() bool {
	for _, existing := range AllowedImportanceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Importance value
func (v Importance) Ptr() *Importance {
	return &v
}

type NullableImportance struct {
	value *Importance
	isSet bool
}

func (v NullableImportance) Get() *Importance {
	return v.value
}

func (v *NullableImportance) Set(val *Importance) {
	v.value = val
	v.isSet = true
}

func (v NullableImportance) IsSet() bool {
	return v.isSet
}

func (v *NullableImportance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportance(val *Importance) *NullableImportance {
	return &NullableImportance{value: val, isSet: true}
}

func (v NullableImportance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
