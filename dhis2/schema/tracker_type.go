/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TrackerType the model 'TrackerType'
type TrackerType string

// List of TrackerType
const (
	TRACKERTYPE_TRACKED_ENTITY TrackerType = "TRACKED_ENTITY"
	TRACKERTYPE_ENROLLMENT     TrackerType = "ENROLLMENT"
	TRACKERTYPE_EVENT          TrackerType = "EVENT"
	TRACKERTYPE_RELATIONSHIP   TrackerType = "RELATIONSHIP"
)

// All allowed values of TrackerType enum
var AllowedTrackerTypeEnumValues = []TrackerType{
	"TRACKED_ENTITY",
	"ENROLLMENT",
	"EVENT",
	"RELATIONSHIP",
}

func (v *TrackerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackerType(value)
	for _, existing := range AllowedTrackerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackerType", value)
}

// NewTrackerTypeFromValue returns a pointer to a valid TrackerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackerTypeFromValue(v string) (*TrackerType, error) {
	ev := TrackerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackerType: valid values are %v", v, AllowedTrackerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackerType) IsValid() bool {
	for _, existing := range AllowedTrackerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackerType value
func (v TrackerType) Ptr() *TrackerType {
	return &v
}

type NullableTrackerType struct {
	value *TrackerType
	isSet bool
}

func (v NullableTrackerType) Get() *TrackerType {
	return v.value
}

func (v *NullableTrackerType) Set(val *TrackerType) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerType) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerType(val *TrackerType) *NullableTrackerType {
	return &NullableTrackerType{value: val, isSet: true}
}

func (v NullableTrackerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
