/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// UserPropertyNames the model 'UserPropertyNames'
type UserPropertyNames string

// List of UserPropertyNames
const (
	USERPROPERTYNAMES_ACCESS                                UserPropertyNames = "access"
	USERPROPERTYNAMES_ACCOUNT_EXPIRY                        UserPropertyNames = "accountExpiry"
	USERPROPERTYNAMES_ATTRIBUTE_VALUES                      UserPropertyNames = "attributeValues"
	USERPROPERTYNAMES_AVATAR                                UserPropertyNames = "avatar"
	USERPROPERTYNAMES_BIRTHDAY                              UserPropertyNames = "birthday"
	USERPROPERTYNAMES_CAT_DIMENSION_CONSTRAINTS             UserPropertyNames = "catDimensionConstraints"
	USERPROPERTYNAMES_CODE                                  UserPropertyNames = "code"
	USERPROPERTYNAMES_COGS_DIMENSION_CONSTRAINTS            UserPropertyNames = "cogsDimensionConstraints"
	USERPROPERTYNAMES_CREATED                               UserPropertyNames = "created"
	USERPROPERTYNAMES_CREATED_BY                            UserPropertyNames = "createdBy"
	USERPROPERTYNAMES_DATA_VIEW_MAX_ORGANISATION_UNIT_LEVEL UserPropertyNames = "dataViewMaxOrganisationUnitLevel"
	USERPROPERTYNAMES_DATA_VIEW_ORGANISATION_UNITS          UserPropertyNames = "dataViewOrganisationUnits"
	USERPROPERTYNAMES_DISABLED                              UserPropertyNames = "disabled"
	USERPROPERTYNAMES_DISPLAY_NAME                          UserPropertyNames = "displayName"
	USERPROPERTYNAMES_EDUCATION                             UserPropertyNames = "education"
	USERPROPERTYNAMES_EMAIL                                 UserPropertyNames = "email"
	USERPROPERTYNAMES_EMAIL_VERIFICATION_TOKEN              UserPropertyNames = "emailVerificationToken"
	USERPROPERTYNAMES_EMAIL_VERIFIED                        UserPropertyNames = "emailVerified"
	USERPROPERTYNAMES_EMPLOYER                              UserPropertyNames = "employer"
	USERPROPERTYNAMES_EXTERNAL_AUTH                         UserPropertyNames = "externalAuth"
	USERPROPERTYNAMES_FACEBOOK_MESSENGER                    UserPropertyNames = "facebookMessenger"
	USERPROPERTYNAMES_FAVORITE                              UserPropertyNames = "favorite"
	USERPROPERTYNAMES_FAVORITES                             UserPropertyNames = "favorites"
	USERPROPERTYNAMES_FIRST_NAME                            UserPropertyNames = "firstName"
	USERPROPERTYNAMES_GENDER                                UserPropertyNames = "gender"
	USERPROPERTYNAMES_HREF                                  UserPropertyNames = "href"
	USERPROPERTYNAMES_ID                                    UserPropertyNames = "id"
	USERPROPERTYNAMES_INTERESTS                             UserPropertyNames = "interests"
	USERPROPERTYNAMES_INTRODUCTION                          UserPropertyNames = "introduction"
	USERPROPERTYNAMES_INVITATION                            UserPropertyNames = "invitation"
	USERPROPERTYNAMES_JOB_TITLE                             UserPropertyNames = "jobTitle"
	USERPROPERTYNAMES_LANGUAGES                             UserPropertyNames = "languages"
	USERPROPERTYNAMES_LAST_CHECKED_INTERPRETATIONS          UserPropertyNames = "lastCheckedInterpretations"
	USERPROPERTYNAMES_LAST_LOGIN                            UserPropertyNames = "lastLogin"
	USERPROPERTYNAMES_LAST_UPDATED                          UserPropertyNames = "lastUpdated"
	USERPROPERTYNAMES_LAST_UPDATED_BY                       UserPropertyNames = "lastUpdatedBy"
	USERPROPERTYNAMES_LDAP_ID                               UserPropertyNames = "ldapId"
	USERPROPERTYNAMES_NAME                                  UserPropertyNames = "name"
	USERPROPERTYNAMES_NATIONALITY                           UserPropertyNames = "nationality"
	USERPROPERTYNAMES_OPEN_ID                               UserPropertyNames = "openId"
	USERPROPERTYNAMES_ORGANISATION_UNITS                    UserPropertyNames = "organisationUnits"
	USERPROPERTYNAMES_PASSWORD                              UserPropertyNames = "password"
	USERPROPERTYNAMES_PASSWORD_LAST_UPDATED                 UserPropertyNames = "passwordLastUpdated"
	USERPROPERTYNAMES_PHONE_NUMBER                          UserPropertyNames = "phoneNumber"
	USERPROPERTYNAMES_SELF_REGISTERED                       UserPropertyNames = "selfRegistered"
	USERPROPERTYNAMES_SETTINGS                              UserPropertyNames = "settings"
	USERPROPERTYNAMES_SHARING                               UserPropertyNames = "sharing"
	USERPROPERTYNAMES_SKYPE                                 UserPropertyNames = "skype"
	USERPROPERTYNAMES_SURNAME                               UserPropertyNames = "surname"
	USERPROPERTYNAMES_TEI_SEARCH_ORGANISATION_UNITS         UserPropertyNames = "teiSearchOrganisationUnits"
	USERPROPERTYNAMES_TELEGRAM                              UserPropertyNames = "telegram"
	USERPROPERTYNAMES_TRANSLATIONS                          UserPropertyNames = "translations"
	USERPROPERTYNAMES_TWITTER                               UserPropertyNames = "twitter"
	USERPROPERTYNAMES_USER_GROUPS                           UserPropertyNames = "userGroups"
	USERPROPERTYNAMES_USER_ROLES                            UserPropertyNames = "userRoles"
	USERPROPERTYNAMES_USERNAME                              UserPropertyNames = "username"
	USERPROPERTYNAMES_VERIFIED_EMAIL                        UserPropertyNames = "verifiedEmail"
	USERPROPERTYNAMES_WELCOME_MESSAGE                       UserPropertyNames = "welcomeMessage"
	USERPROPERTYNAMES_WHATS_APP                             UserPropertyNames = "whatsApp"
)

// All allowed values of UserPropertyNames enum
var AllowedUserPropertyNamesEnumValues = []UserPropertyNames{
	"access",
	"accountExpiry",
	"attributeValues",
	"avatar",
	"birthday",
	"catDimensionConstraints",
	"code",
	"cogsDimensionConstraints",
	"created",
	"createdBy",
	"dataViewMaxOrganisationUnitLevel",
	"dataViewOrganisationUnits",
	"disabled",
	"displayName",
	"education",
	"email",
	"emailVerificationToken",
	"emailVerified",
	"employer",
	"externalAuth",
	"facebookMessenger",
	"favorite",
	"favorites",
	"firstName",
	"gender",
	"href",
	"id",
	"interests",
	"introduction",
	"invitation",
	"jobTitle",
	"languages",
	"lastCheckedInterpretations",
	"lastLogin",
	"lastUpdated",
	"lastUpdatedBy",
	"ldapId",
	"name",
	"nationality",
	"openId",
	"organisationUnits",
	"password",
	"passwordLastUpdated",
	"phoneNumber",
	"selfRegistered",
	"settings",
	"sharing",
	"skype",
	"surname",
	"teiSearchOrganisationUnits",
	"telegram",
	"translations",
	"twitter",
	"userGroups",
	"userRoles",
	"username",
	"verifiedEmail",
	"welcomeMessage",
	"whatsApp",
}

func (v *UserPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserPropertyNames(value)
	for _, existing := range AllowedUserPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserPropertyNames", value)
}

// NewUserPropertyNamesFromValue returns a pointer to a valid UserPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserPropertyNamesFromValue(v string) (*UserPropertyNames, error) {
	ev := UserPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserPropertyNames: valid values are %v", v, AllowedUserPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserPropertyNames) IsValid() bool {
	for _, existing := range AllowedUserPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserPropertyNames value
func (v UserPropertyNames) Ptr() *UserPropertyNames {
	return &v
}

type NullableUserPropertyNames struct {
	value *UserPropertyNames
	isSet bool
}

func (v NullableUserPropertyNames) Get() *UserPropertyNames {
	return v.value
}

func (v *NullableUserPropertyNames) Set(val *UserPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPropertyNames(val *UserPropertyNames) *NullableUserPropertyNames {
	return &NullableUserPropertyNames{value: val, isSet: true}
}

func (v NullableUserPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
