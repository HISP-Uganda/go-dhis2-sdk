/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TrackedEntityAttributeParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackedEntityAttributeParams{}

// TrackedEntityAttributeParams struct for TrackedEntityAttributeParams
type TrackedEntityAttributeParams struct {
	AggregationType          AggregationType                       `json:"aggregationType"`
	AttributeValues          []AttributeValueParams                `json:"attributeValues,omitempty"`
	Code                     *string                               `json:"code,omitempty"`
	Confidential             *bool                                 `json:"confidential,omitempty"`
	Created                  *time.Time                            `json:"created,omitempty"`
	CreatedBy                *AggregateDataExchangeParamsCreatedBy `json:"createdBy,omitempty"`
	Description              *string                               `json:"description,omitempty"`
	DimensionItem            *string                               `json:"dimensionItem,omitempty"`
	DisplayDescription       *string                               `json:"displayDescription,omitempty"`
	DisplayFormName          *string                               `json:"displayFormName,omitempty"`
	DisplayInListNoProgram   *bool                                 `json:"displayInListNoProgram,omitempty"`
	DisplayName              *string                               `json:"displayName,omitempty"`
	DisplayOnVisitSchedule   *bool                                 `json:"displayOnVisitSchedule,omitempty"`
	DisplayShortName         *string                               `json:"displayShortName,omitempty"`
	Expression               *string                               `json:"expression,omitempty"`
	Favorite                 *bool                                 `json:"favorite,omitempty"`
	Favorites                []string                              `json:"favorites,omitempty"`
	FieldMask                *string                               `json:"fieldMask,omitempty"`
	FormName                 *string                               `json:"formName,omitempty"`
	Generated                *bool                                 `json:"generated,omitempty"`
	Id                       *string                               `json:"id,omitempty"`
	Inherit                  *bool                                 `json:"inherit,omitempty"`
	LastUpdated              *time.Time                            `json:"lastUpdated,omitempty"`
	LastUpdatedBy            *AggregateDataExchangeParamsCreatedBy `json:"lastUpdatedBy,omitempty"`
	LegendSet                *CategoryOptionComboParamsLegendSet   `json:"legendSet,omitempty"`
	LegendSets               []CategoryOptionComboParamsLegendSet  `json:"legendSets,omitempty"`
	Name                     *string                               `json:"name,omitempty"`
	OptionSet                *OptionSetParams                      `json:"optionSet,omitempty"`
	OptionSetValue           *bool                                 `json:"optionSetValue,omitempty"`
	OrgunitScope             *bool                                 `json:"orgunitScope,omitempty"`
	Pattern                  *string                               `json:"pattern,omitempty"`
	QueryMods                *QueryModifiers                       `json:"queryMods,omitempty"`
	Sharing                  *Sharing                              `json:"sharing,omitempty"`
	ShortName                *string                               `json:"shortName,omitempty"`
	SkipSynchronization      *bool                                 `json:"skipSynchronization,omitempty"`
	SortOrderInListNoProgram *int32                                `json:"sortOrderInListNoProgram,omitempty"`
	SortOrderInVisitSchedule *int32                                `json:"sortOrderInVisitSchedule,omitempty"`
	Style                    *ObjectStyle                          `json:"style,omitempty"`
	Translations             []Translation                         `json:"translations,omitempty"`
	Unique                   *bool                                 `json:"unique,omitempty"`
	ValueType                ValueType                             `json:"valueType"`
}

type _TrackedEntityAttributeParams TrackedEntityAttributeParams

// NewTrackedEntityAttributeParams instantiates a new TrackedEntityAttributeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackedEntityAttributeParams(aggregationType AggregationType, valueType ValueType) *TrackedEntityAttributeParams {
	this := TrackedEntityAttributeParams{}
	this.AggregationType = aggregationType
	this.ValueType = valueType
	return &this
}

// NewTrackedEntityAttributeParamsWithDefaults instantiates a new TrackedEntityAttributeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackedEntityAttributeParamsWithDefaults() *TrackedEntityAttributeParams {
	this := TrackedEntityAttributeParams{}
	return &this
}

// GetAggregationType returns the AggregationType field value
func (o *TrackedEntityAttributeParams) GetAggregationType() AggregationType {
	if o == nil {
		var ret AggregationType
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetAggregationTypeOk() (*AggregationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *TrackedEntityAttributeParams) SetAggregationType(v AggregationType) {
	o.AggregationType = v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *TrackedEntityAttributeParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TrackedEntityAttributeParams) SetCode(v string) {
	o.Code = &v
}

// GetConfidential returns the Confidential field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetConfidential() bool {
	if o == nil || IsNil(o.Confidential) {
		var ret bool
		return ret
	}
	return *o.Confidential
}

// GetConfidentialOk returns a tuple with the Confidential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetConfidentialOk() (*bool, bool) {
	if o == nil || IsNil(o.Confidential) {
		return nil, false
	}
	return o.Confidential, true
}

// HasConfidential returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasConfidential() bool {
	if o != nil && !IsNil(o.Confidential) {
		return true
	}

	return false
}

// SetConfidential gets a reference to the given bool and assigns it to the Confidential field.
func (o *TrackedEntityAttributeParams) SetConfidential(v bool) {
	o.Confidential = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *TrackedEntityAttributeParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *TrackedEntityAttributeParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TrackedEntityAttributeParams) SetDescription(v string) {
	o.Description = &v
}

// GetDimensionItem returns the DimensionItem field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetDimensionItem() string {
	if o == nil || IsNil(o.DimensionItem) {
		var ret string
		return ret
	}
	return *o.DimensionItem
}

// GetDimensionItemOk returns a tuple with the DimensionItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetDimensionItemOk() (*string, bool) {
	if o == nil || IsNil(o.DimensionItem) {
		return nil, false
	}
	return o.DimensionItem, true
}

// HasDimensionItem returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasDimensionItem() bool {
	if o != nil && !IsNil(o.DimensionItem) {
		return true
	}

	return false
}

// SetDimensionItem gets a reference to the given string and assigns it to the DimensionItem field.
func (o *TrackedEntityAttributeParams) SetDimensionItem(v string) {
	o.DimensionItem = &v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *TrackedEntityAttributeParams) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayFormName returns the DisplayFormName field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetDisplayFormName() string {
	if o == nil || IsNil(o.DisplayFormName) {
		var ret string
		return ret
	}
	return *o.DisplayFormName
}

// GetDisplayFormNameOk returns a tuple with the DisplayFormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetDisplayFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayFormName) {
		return nil, false
	}
	return o.DisplayFormName, true
}

// HasDisplayFormName returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasDisplayFormName() bool {
	if o != nil && !IsNil(o.DisplayFormName) {
		return true
	}

	return false
}

// SetDisplayFormName gets a reference to the given string and assigns it to the DisplayFormName field.
func (o *TrackedEntityAttributeParams) SetDisplayFormName(v string) {
	o.DisplayFormName = &v
}

// GetDisplayInListNoProgram returns the DisplayInListNoProgram field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetDisplayInListNoProgram() bool {
	if o == nil || IsNil(o.DisplayInListNoProgram) {
		var ret bool
		return ret
	}
	return *o.DisplayInListNoProgram
}

// GetDisplayInListNoProgramOk returns a tuple with the DisplayInListNoProgram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetDisplayInListNoProgramOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayInListNoProgram) {
		return nil, false
	}
	return o.DisplayInListNoProgram, true
}

// HasDisplayInListNoProgram returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasDisplayInListNoProgram() bool {
	if o != nil && !IsNil(o.DisplayInListNoProgram) {
		return true
	}

	return false
}

// SetDisplayInListNoProgram gets a reference to the given bool and assigns it to the DisplayInListNoProgram field.
func (o *TrackedEntityAttributeParams) SetDisplayInListNoProgram(v bool) {
	o.DisplayInListNoProgram = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *TrackedEntityAttributeParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayOnVisitSchedule returns the DisplayOnVisitSchedule field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetDisplayOnVisitSchedule() bool {
	if o == nil || IsNil(o.DisplayOnVisitSchedule) {
		var ret bool
		return ret
	}
	return *o.DisplayOnVisitSchedule
}

// GetDisplayOnVisitScheduleOk returns a tuple with the DisplayOnVisitSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetDisplayOnVisitScheduleOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayOnVisitSchedule) {
		return nil, false
	}
	return o.DisplayOnVisitSchedule, true
}

// HasDisplayOnVisitSchedule returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasDisplayOnVisitSchedule() bool {
	if o != nil && !IsNil(o.DisplayOnVisitSchedule) {
		return true
	}

	return false
}

// SetDisplayOnVisitSchedule gets a reference to the given bool and assigns it to the DisplayOnVisitSchedule field.
func (o *TrackedEntityAttributeParams) SetDisplayOnVisitSchedule(v bool) {
	o.DisplayOnVisitSchedule = &v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *TrackedEntityAttributeParams) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *TrackedEntityAttributeParams) SetExpression(v string) {
	o.Expression = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *TrackedEntityAttributeParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *TrackedEntityAttributeParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFieldMask returns the FieldMask field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetFieldMask() string {
	if o == nil || IsNil(o.FieldMask) {
		var ret string
		return ret
	}
	return *o.FieldMask
}

// GetFieldMaskOk returns a tuple with the FieldMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetFieldMaskOk() (*string, bool) {
	if o == nil || IsNil(o.FieldMask) {
		return nil, false
	}
	return o.FieldMask, true
}

// HasFieldMask returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasFieldMask() bool {
	if o != nil && !IsNil(o.FieldMask) {
		return true
	}

	return false
}

// SetFieldMask gets a reference to the given string and assigns it to the FieldMask field.
func (o *TrackedEntityAttributeParams) SetFieldMask(v string) {
	o.FieldMask = &v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *TrackedEntityAttributeParams) SetFormName(v string) {
	o.FormName = &v
}

// GetGenerated returns the Generated field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetGenerated() bool {
	if o == nil || IsNil(o.Generated) {
		var ret bool
		return ret
	}
	return *o.Generated
}

// GetGeneratedOk returns a tuple with the Generated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetGeneratedOk() (*bool, bool) {
	if o == nil || IsNil(o.Generated) {
		return nil, false
	}
	return o.Generated, true
}

// HasGenerated returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasGenerated() bool {
	if o != nil && !IsNil(o.Generated) {
		return true
	}

	return false
}

// SetGenerated gets a reference to the given bool and assigns it to the Generated field.
func (o *TrackedEntityAttributeParams) SetGenerated(v bool) {
	o.Generated = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TrackedEntityAttributeParams) SetId(v string) {
	o.Id = &v
}

// GetInherit returns the Inherit field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetInherit() bool {
	if o == nil || IsNil(o.Inherit) {
		var ret bool
		return ret
	}
	return *o.Inherit
}

// GetInheritOk returns a tuple with the Inherit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetInheritOk() (*bool, bool) {
	if o == nil || IsNil(o.Inherit) {
		return nil, false
	}
	return o.Inherit, true
}

// HasInherit returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasInherit() bool {
	if o != nil && !IsNil(o.Inherit) {
		return true
	}

	return false
}

// SetInherit gets a reference to the given bool and assigns it to the Inherit field.
func (o *TrackedEntityAttributeParams) SetInherit(v bool) {
	o.Inherit = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *TrackedEntityAttributeParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *TrackedEntityAttributeParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLegendSet returns the LegendSet field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetLegendSet() CategoryOptionComboParamsLegendSet {
	if o == nil || IsNil(o.LegendSet) {
		var ret CategoryOptionComboParamsLegendSet
		return ret
	}
	return *o.LegendSet
}

// GetLegendSetOk returns a tuple with the LegendSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetLegendSetOk() (*CategoryOptionComboParamsLegendSet, bool) {
	if o == nil || IsNil(o.LegendSet) {
		return nil, false
	}
	return o.LegendSet, true
}

// HasLegendSet returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasLegendSet() bool {
	if o != nil && !IsNil(o.LegendSet) {
		return true
	}

	return false
}

// SetLegendSet gets a reference to the given CategoryOptionComboParamsLegendSet and assigns it to the LegendSet field.
func (o *TrackedEntityAttributeParams) SetLegendSet(v CategoryOptionComboParamsLegendSet) {
	o.LegendSet = &v
}

// GetLegendSets returns the LegendSets field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetLegendSets() []CategoryOptionComboParamsLegendSet {
	if o == nil || IsNil(o.LegendSets) {
		var ret []CategoryOptionComboParamsLegendSet
		return ret
	}
	return o.LegendSets
}

// GetLegendSetsOk returns a tuple with the LegendSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetLegendSetsOk() ([]CategoryOptionComboParamsLegendSet, bool) {
	if o == nil || IsNil(o.LegendSets) {
		return nil, false
	}
	return o.LegendSets, true
}

// HasLegendSets returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasLegendSets() bool {
	if o != nil && !IsNil(o.LegendSets) {
		return true
	}

	return false
}

// SetLegendSets gets a reference to the given []CategoryOptionComboParamsLegendSet and assigns it to the LegendSets field.
func (o *TrackedEntityAttributeParams) SetLegendSets(v []CategoryOptionComboParamsLegendSet) {
	o.LegendSets = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TrackedEntityAttributeParams) SetName(v string) {
	o.Name = &v
}

// GetOptionSet returns the OptionSet field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetOptionSet() OptionSetParams {
	if o == nil || IsNil(o.OptionSet) {
		var ret OptionSetParams
		return ret
	}
	return *o.OptionSet
}

// GetOptionSetOk returns a tuple with the OptionSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetOptionSetOk() (*OptionSetParams, bool) {
	if o == nil || IsNil(o.OptionSet) {
		return nil, false
	}
	return o.OptionSet, true
}

// HasOptionSet returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasOptionSet() bool {
	if o != nil && !IsNil(o.OptionSet) {
		return true
	}

	return false
}

// SetOptionSet gets a reference to the given OptionSetParams and assigns it to the OptionSet field.
func (o *TrackedEntityAttributeParams) SetOptionSet(v OptionSetParams) {
	o.OptionSet = &v
}

// GetOptionSetValue returns the OptionSetValue field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetOptionSetValue() bool {
	if o == nil || IsNil(o.OptionSetValue) {
		var ret bool
		return ret
	}
	return *o.OptionSetValue
}

// GetOptionSetValueOk returns a tuple with the OptionSetValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetOptionSetValueOk() (*bool, bool) {
	if o == nil || IsNil(o.OptionSetValue) {
		return nil, false
	}
	return o.OptionSetValue, true
}

// HasOptionSetValue returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasOptionSetValue() bool {
	if o != nil && !IsNil(o.OptionSetValue) {
		return true
	}

	return false
}

// SetOptionSetValue gets a reference to the given bool and assigns it to the OptionSetValue field.
func (o *TrackedEntityAttributeParams) SetOptionSetValue(v bool) {
	o.OptionSetValue = &v
}

// GetOrgunitScope returns the OrgunitScope field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetOrgunitScope() bool {
	if o == nil || IsNil(o.OrgunitScope) {
		var ret bool
		return ret
	}
	return *o.OrgunitScope
}

// GetOrgunitScopeOk returns a tuple with the OrgunitScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetOrgunitScopeOk() (*bool, bool) {
	if o == nil || IsNil(o.OrgunitScope) {
		return nil, false
	}
	return o.OrgunitScope, true
}

// HasOrgunitScope returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasOrgunitScope() bool {
	if o != nil && !IsNil(o.OrgunitScope) {
		return true
	}

	return false
}

// SetOrgunitScope gets a reference to the given bool and assigns it to the OrgunitScope field.
func (o *TrackedEntityAttributeParams) SetOrgunitScope(v bool) {
	o.OrgunitScope = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetPattern() string {
	if o == nil || IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetPatternOk() (*string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *TrackedEntityAttributeParams) SetPattern(v string) {
	o.Pattern = &v
}

// GetQueryMods returns the QueryMods field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetQueryMods() QueryModifiers {
	if o == nil || IsNil(o.QueryMods) {
		var ret QueryModifiers
		return ret
	}
	return *o.QueryMods
}

// GetQueryModsOk returns a tuple with the QueryMods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetQueryModsOk() (*QueryModifiers, bool) {
	if o == nil || IsNil(o.QueryMods) {
		return nil, false
	}
	return o.QueryMods, true
}

// HasQueryMods returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasQueryMods() bool {
	if o != nil && !IsNil(o.QueryMods) {
		return true
	}

	return false
}

// SetQueryMods gets a reference to the given QueryModifiers and assigns it to the QueryMods field.
func (o *TrackedEntityAttributeParams) SetQueryMods(v QueryModifiers) {
	o.QueryMods = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *TrackedEntityAttributeParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *TrackedEntityAttributeParams) SetShortName(v string) {
	o.ShortName = &v
}

// GetSkipSynchronization returns the SkipSynchronization field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetSkipSynchronization() bool {
	if o == nil || IsNil(o.SkipSynchronization) {
		var ret bool
		return ret
	}
	return *o.SkipSynchronization
}

// GetSkipSynchronizationOk returns a tuple with the SkipSynchronization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetSkipSynchronizationOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSynchronization) {
		return nil, false
	}
	return o.SkipSynchronization, true
}

// HasSkipSynchronization returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasSkipSynchronization() bool {
	if o != nil && !IsNil(o.SkipSynchronization) {
		return true
	}

	return false
}

// SetSkipSynchronization gets a reference to the given bool and assigns it to the SkipSynchronization field.
func (o *TrackedEntityAttributeParams) SetSkipSynchronization(v bool) {
	o.SkipSynchronization = &v
}

// GetSortOrderInListNoProgram returns the SortOrderInListNoProgram field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetSortOrderInListNoProgram() int32 {
	if o == nil || IsNil(o.SortOrderInListNoProgram) {
		var ret int32
		return ret
	}
	return *o.SortOrderInListNoProgram
}

// GetSortOrderInListNoProgramOk returns a tuple with the SortOrderInListNoProgram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetSortOrderInListNoProgramOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrderInListNoProgram) {
		return nil, false
	}
	return o.SortOrderInListNoProgram, true
}

// HasSortOrderInListNoProgram returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasSortOrderInListNoProgram() bool {
	if o != nil && !IsNil(o.SortOrderInListNoProgram) {
		return true
	}

	return false
}

// SetSortOrderInListNoProgram gets a reference to the given int32 and assigns it to the SortOrderInListNoProgram field.
func (o *TrackedEntityAttributeParams) SetSortOrderInListNoProgram(v int32) {
	o.SortOrderInListNoProgram = &v
}

// GetSortOrderInVisitSchedule returns the SortOrderInVisitSchedule field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetSortOrderInVisitSchedule() int32 {
	if o == nil || IsNil(o.SortOrderInVisitSchedule) {
		var ret int32
		return ret
	}
	return *o.SortOrderInVisitSchedule
}

// GetSortOrderInVisitScheduleOk returns a tuple with the SortOrderInVisitSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetSortOrderInVisitScheduleOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrderInVisitSchedule) {
		return nil, false
	}
	return o.SortOrderInVisitSchedule, true
}

// HasSortOrderInVisitSchedule returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasSortOrderInVisitSchedule() bool {
	if o != nil && !IsNil(o.SortOrderInVisitSchedule) {
		return true
	}

	return false
}

// SetSortOrderInVisitSchedule gets a reference to the given int32 and assigns it to the SortOrderInVisitSchedule field.
func (o *TrackedEntityAttributeParams) SetSortOrderInVisitSchedule(v int32) {
	o.SortOrderInVisitSchedule = &v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetStyle() ObjectStyle {
	if o == nil || IsNil(o.Style) {
		var ret ObjectStyle
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetStyleOk() (*ObjectStyle, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given ObjectStyle and assigns it to the Style field.
func (o *TrackedEntityAttributeParams) SetStyle(v ObjectStyle) {
	o.Style = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *TrackedEntityAttributeParams) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUnique returns the Unique field value if set, zero value otherwise.
func (o *TrackedEntityAttributeParams) GetUnique() bool {
	if o == nil || IsNil(o.Unique) {
		var ret bool
		return ret
	}
	return *o.Unique
}

// GetUniqueOk returns a tuple with the Unique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetUniqueOk() (*bool, bool) {
	if o == nil || IsNil(o.Unique) {
		return nil, false
	}
	return o.Unique, true
}

// HasUnique returns a boolean if a field has been set.
func (o *TrackedEntityAttributeParams) HasUnique() bool {
	if o != nil && !IsNil(o.Unique) {
		return true
	}

	return false
}

// SetUnique gets a reference to the given bool and assigns it to the Unique field.
func (o *TrackedEntityAttributeParams) SetUnique(v bool) {
	o.Unique = &v
}

// GetValueType returns the ValueType field value
func (o *TrackedEntityAttributeParams) GetValueType() ValueType {
	if o == nil {
		var ret ValueType
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *TrackedEntityAttributeParams) GetValueTypeOk() (*ValueType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *TrackedEntityAttributeParams) SetValueType(v ValueType) {
	o.ValueType = v
}

func (o TrackedEntityAttributeParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackedEntityAttributeParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregationType"] = o.AggregationType
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Confidential) {
		toSerialize["confidential"] = o.Confidential
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DimensionItem) {
		toSerialize["dimensionItem"] = o.DimensionItem
	}
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayFormName) {
		toSerialize["displayFormName"] = o.DisplayFormName
	}
	if !IsNil(o.DisplayInListNoProgram) {
		toSerialize["displayInListNoProgram"] = o.DisplayInListNoProgram
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayOnVisitSchedule) {
		toSerialize["displayOnVisitSchedule"] = o.DisplayOnVisitSchedule
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FieldMask) {
		toSerialize["fieldMask"] = o.FieldMask
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.Generated) {
		toSerialize["generated"] = o.Generated
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Inherit) {
		toSerialize["inherit"] = o.Inherit
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LegendSet) {
		toSerialize["legendSet"] = o.LegendSet
	}
	if !IsNil(o.LegendSets) {
		toSerialize["legendSets"] = o.LegendSets
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OptionSet) {
		toSerialize["optionSet"] = o.OptionSet
	}
	if !IsNil(o.OptionSetValue) {
		toSerialize["optionSetValue"] = o.OptionSetValue
	}
	if !IsNil(o.OrgunitScope) {
		toSerialize["orgunitScope"] = o.OrgunitScope
	}
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !IsNil(o.QueryMods) {
		toSerialize["queryMods"] = o.QueryMods
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.SkipSynchronization) {
		toSerialize["skipSynchronization"] = o.SkipSynchronization
	}
	if !IsNil(o.SortOrderInListNoProgram) {
		toSerialize["sortOrderInListNoProgram"] = o.SortOrderInListNoProgram
	}
	if !IsNil(o.SortOrderInVisitSchedule) {
		toSerialize["sortOrderInVisitSchedule"] = o.SortOrderInVisitSchedule
	}
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.Unique) {
		toSerialize["unique"] = o.Unique
	}
	toSerialize["valueType"] = o.ValueType
	return toSerialize, nil
}

func (o *TrackedEntityAttributeParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregationType",
		"valueType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackedEntityAttributeParams := _TrackedEntityAttributeParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackedEntityAttributeParams)

	if err != nil {
		return err
	}

	*o = TrackedEntityAttributeParams(varTrackedEntityAttributeParams)

	return err
}

type NullableTrackedEntityAttributeParams struct {
	value *TrackedEntityAttributeParams
	isSet bool
}

func (v NullableTrackedEntityAttributeParams) Get() *TrackedEntityAttributeParams {
	return v.value
}

func (v *NullableTrackedEntityAttributeParams) Set(val *TrackedEntityAttributeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackedEntityAttributeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackedEntityAttributeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackedEntityAttributeParams(val *TrackedEntityAttributeParams) *NullableTrackedEntityAttributeParams {
	return &NullableTrackedEntityAttributeParams{value: val, isSet: true}
}

func (v NullableTrackedEntityAttributeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackedEntityAttributeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
