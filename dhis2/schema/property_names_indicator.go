/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesIndicator the model 'PropertyNamesIndicator'
type PropertyNamesIndicator string

// List of PropertyNames_Indicator
const (
	PROPERTYNAMESINDICATOR_ACCESS                                  PropertyNamesIndicator = "access"
	PROPERTYNAMESINDICATOR_AGGREGATE_EXPORT_ATTRIBUTE_OPTION_COMBO PropertyNamesIndicator = "aggregateExportAttributeOptionCombo"
	PROPERTYNAMESINDICATOR_AGGREGATE_EXPORT_CATEGORY_OPTION_COMBO  PropertyNamesIndicator = "aggregateExportCategoryOptionCombo"
	PROPERTYNAMESINDICATOR_AGGREGATION_TYPE                        PropertyNamesIndicator = "aggregationType"
	PROPERTYNAMESINDICATOR_ANNUALIZED                              PropertyNamesIndicator = "annualized"
	PROPERTYNAMESINDICATOR_ATTRIBUTE_VALUES                        PropertyNamesIndicator = "attributeValues"
	PROPERTYNAMESINDICATOR_CODE                                    PropertyNamesIndicator = "code"
	PROPERTYNAMESINDICATOR_CREATED                                 PropertyNamesIndicator = "created"
	PROPERTYNAMESINDICATOR_CREATED_BY                              PropertyNamesIndicator = "createdBy"
	PROPERTYNAMESINDICATOR_DATA_SETS                               PropertyNamesIndicator = "dataSets"
	PROPERTYNAMESINDICATOR_DECIMALS                                PropertyNamesIndicator = "decimals"
	PROPERTYNAMESINDICATOR_DENOMINATOR                             PropertyNamesIndicator = "denominator"
	PROPERTYNAMESINDICATOR_DENOMINATOR_DESCRIPTION                 PropertyNamesIndicator = "denominatorDescription"
	PROPERTYNAMESINDICATOR_DESCRIPTION                             PropertyNamesIndicator = "description"
	PROPERTYNAMESINDICATOR_DIMENSION_ITEM                          PropertyNamesIndicator = "dimensionItem"
	PROPERTYNAMESINDICATOR_DISPLAY_DENOMINATOR_DESCRIPTION         PropertyNamesIndicator = "displayDenominatorDescription"
	PROPERTYNAMESINDICATOR_DISPLAY_DESCRIPTION                     PropertyNamesIndicator = "displayDescription"
	PROPERTYNAMESINDICATOR_DISPLAY_FORM_NAME                       PropertyNamesIndicator = "displayFormName"
	PROPERTYNAMESINDICATOR_DISPLAY_NAME                            PropertyNamesIndicator = "displayName"
	PROPERTYNAMESINDICATOR_DISPLAY_NUMERATOR_DESCRIPTION           PropertyNamesIndicator = "displayNumeratorDescription"
	PROPERTYNAMESINDICATOR_DISPLAY_SHORT_NAME                      PropertyNamesIndicator = "displayShortName"
	PROPERTYNAMESINDICATOR_EXPLODED_DENOMINATOR                    PropertyNamesIndicator = "explodedDenominator"
	PROPERTYNAMESINDICATOR_EXPLODED_NUMERATOR                      PropertyNamesIndicator = "explodedNumerator"
	PROPERTYNAMESINDICATOR_EXTERNAL_ACCESS                         PropertyNamesIndicator = "externalAccess"
	PROPERTYNAMESINDICATOR_FAVORITE                                PropertyNamesIndicator = "favorite"
	PROPERTYNAMESINDICATOR_FAVORITES                               PropertyNamesIndicator = "favorites"
	PROPERTYNAMESINDICATOR_FORM_NAME                               PropertyNamesIndicator = "formName"
	PROPERTYNAMESINDICATOR_HREF                                    PropertyNamesIndicator = "href"
	PROPERTYNAMESINDICATOR_ID                                      PropertyNamesIndicator = "id"
	PROPERTYNAMESINDICATOR_INDICATOR_GROUPS                        PropertyNamesIndicator = "indicatorGroups"
	PROPERTYNAMESINDICATOR_INDICATOR_TYPE                          PropertyNamesIndicator = "indicatorType"
	PROPERTYNAMESINDICATOR_LAST_UPDATED                            PropertyNamesIndicator = "lastUpdated"
	PROPERTYNAMESINDICATOR_LAST_UPDATED_BY                         PropertyNamesIndicator = "lastUpdatedBy"
	PROPERTYNAMESINDICATOR_LEGEND_SET                              PropertyNamesIndicator = "legendSet"
	PROPERTYNAMESINDICATOR_LEGEND_SETS                             PropertyNamesIndicator = "legendSets"
	PROPERTYNAMESINDICATOR_NAME                                    PropertyNamesIndicator = "name"
	PROPERTYNAMESINDICATOR_NUMERATOR                               PropertyNamesIndicator = "numerator"
	PROPERTYNAMESINDICATOR_NUMERATOR_DESCRIPTION                   PropertyNamesIndicator = "numeratorDescription"
	PROPERTYNAMESINDICATOR_PUBLIC_ACCESS                           PropertyNamesIndicator = "publicAccess"
	PROPERTYNAMESINDICATOR_QUERY_MODS                              PropertyNamesIndicator = "queryMods"
	PROPERTYNAMESINDICATOR_SHARING                                 PropertyNamesIndicator = "sharing"
	PROPERTYNAMESINDICATOR_SHORT_NAME                              PropertyNamesIndicator = "shortName"
	PROPERTYNAMESINDICATOR_STYLE                                   PropertyNamesIndicator = "style"
	PROPERTYNAMESINDICATOR_TRANSLATIONS                            PropertyNamesIndicator = "translations"
	PROPERTYNAMESINDICATOR_URL                                     PropertyNamesIndicator = "url"
	PROPERTYNAMESINDICATOR_USER                                    PropertyNamesIndicator = "user"
	PROPERTYNAMESINDICATOR_USER_ACCESSES                           PropertyNamesIndicator = "userAccesses"
	PROPERTYNAMESINDICATOR_USER_GROUP_ACCESSES                     PropertyNamesIndicator = "userGroupAccesses"
)

// All allowed values of PropertyNamesIndicator enum
var AllowedPropertyNamesIndicatorEnumValues = []PropertyNamesIndicator{
	"access",
	"aggregateExportAttributeOptionCombo",
	"aggregateExportCategoryOptionCombo",
	"aggregationType",
	"annualized",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"dataSets",
	"decimals",
	"denominator",
	"denominatorDescription",
	"description",
	"dimensionItem",
	"displayDenominatorDescription",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayNumeratorDescription",
	"displayShortName",
	"explodedDenominator",
	"explodedNumerator",
	"externalAccess",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"indicatorGroups",
	"indicatorType",
	"lastUpdated",
	"lastUpdatedBy",
	"legendSet",
	"legendSets",
	"name",
	"numerator",
	"numeratorDescription",
	"publicAccess",
	"queryMods",
	"sharing",
	"shortName",
	"style",
	"translations",
	"url",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesIndicator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesIndicator(value)
	for _, existing := range AllowedPropertyNamesIndicatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesIndicator", value)
}

// NewPropertyNamesIndicatorFromValue returns a pointer to a valid PropertyNamesIndicator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesIndicatorFromValue(v string) (*PropertyNamesIndicator, error) {
	ev := PropertyNamesIndicator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesIndicator: valid values are %v", v, AllowedPropertyNamesIndicatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesIndicator) IsValid() bool {
	for _, existing := range AllowedPropertyNamesIndicatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Indicator value
func (v PropertyNamesIndicator) Ptr() *PropertyNamesIndicator {
	return &v
}

type NullablePropertyNamesIndicator struct {
	value *PropertyNamesIndicator
	isSet bool
}

func (v NullablePropertyNamesIndicator) Get() *PropertyNamesIndicator {
	return v.value
}

func (v *NullablePropertyNamesIndicator) Set(val *PropertyNamesIndicator) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesIndicator) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesIndicator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesIndicator(val *PropertyNamesIndicator) *NullablePropertyNamesIndicator {
	return &NullablePropertyNamesIndicator{value: val, isSet: true}
}

func (v NullablePropertyNamesIndicator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesIndicator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
