/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// WebMessageResponse - struct for WebMessageResponse
type WebMessageResponse struct {
	ApiTokenCreationResponse           *ApiTokenCreationResponse
	ErrorReportsWebMessageResponse     *ErrorReportsWebMessageResponse
	FileResourceWebMessageResponse     *FileResourceWebMessageResponse
	GeoJsonImportReport                *GeoJsonImportReport
	ImportCountWebMessageResponse      *ImportCountWebMessageResponse
	ImportReportWebMessageResponse     *ImportReportWebMessageResponse
	ImportSummaries                    *ImportSummaries
	ImportSummary                      *ImportSummary
	ImportTypeSummary                  *ImportTypeSummary
	JobConfigurationWebMessageResponse *JobConfigurationWebMessageResponse
	MergeWebResponse                   *MergeWebResponse
	MetadataSyncSummary                *MetadataSyncSummary
	ObjectReportWebMessageResponse     *ObjectReportWebMessageResponse
	PredictionSummary                  *PredictionSummary
	SoftwareUpdateResponse             *SoftwareUpdateResponse
	TrackerJobWebMessageResponse       *TrackerJobWebMessageResponse
}

// ApiTokenCreationResponseAsWebMessageResponse is a convenience function that returns ApiTokenCreationResponse wrapped in WebMessageResponse
func ApiTokenCreationResponseAsWebMessageResponse(v *ApiTokenCreationResponse) WebMessageResponse {
	return WebMessageResponse{
		ApiTokenCreationResponse: v,
	}
}

// ErrorReportsWebMessageResponseAsWebMessageResponse is a convenience function that returns ErrorReportsWebMessageResponse wrapped in WebMessageResponse
func ErrorReportsWebMessageResponseAsWebMessageResponse(v *ErrorReportsWebMessageResponse) WebMessageResponse {
	return WebMessageResponse{
		ErrorReportsWebMessageResponse: v,
	}
}

// FileResourceWebMessageResponseAsWebMessageResponse is a convenience function that returns FileResourceWebMessageResponse wrapped in WebMessageResponse
func FileResourceWebMessageResponseAsWebMessageResponse(v *FileResourceWebMessageResponse) WebMessageResponse {
	return WebMessageResponse{
		FileResourceWebMessageResponse: v,
	}
}

// GeoJsonImportReportAsWebMessageResponse is a convenience function that returns GeoJsonImportReport wrapped in WebMessageResponse
func GeoJsonImportReportAsWebMessageResponse(v *GeoJsonImportReport) WebMessageResponse {
	return WebMessageResponse{
		GeoJsonImportReport: v,
	}
}

// ImportCountWebMessageResponseAsWebMessageResponse is a convenience function that returns ImportCountWebMessageResponse wrapped in WebMessageResponse
func ImportCountWebMessageResponseAsWebMessageResponse(v *ImportCountWebMessageResponse) WebMessageResponse {
	return WebMessageResponse{
		ImportCountWebMessageResponse: v,
	}
}

// ImportReportWebMessageResponseAsWebMessageResponse is a convenience function that returns ImportReportWebMessageResponse wrapped in WebMessageResponse
func ImportReportWebMessageResponseAsWebMessageResponse(v *ImportReportWebMessageResponse) WebMessageResponse {
	return WebMessageResponse{
		ImportReportWebMessageResponse: v,
	}
}

// ImportSummariesAsWebMessageResponse is a convenience function that returns ImportSummaries wrapped in WebMessageResponse
func ImportSummariesAsWebMessageResponse(v *ImportSummaries) WebMessageResponse {
	return WebMessageResponse{
		ImportSummaries: v,
	}
}

// ImportSummaryAsWebMessageResponse is a convenience function that returns ImportSummary wrapped in WebMessageResponse
func ImportSummaryAsWebMessageResponse(v *ImportSummary) WebMessageResponse {
	return WebMessageResponse{
		ImportSummary: v,
	}
}

// ImportTypeSummaryAsWebMessageResponse is a convenience function that returns ImportTypeSummary wrapped in WebMessageResponse
func ImportTypeSummaryAsWebMessageResponse(v *ImportTypeSummary) WebMessageResponse {
	return WebMessageResponse{
		ImportTypeSummary: v,
	}
}

// JobConfigurationWebMessageResponseAsWebMessageResponse is a convenience function that returns JobConfigurationWebMessageResponse wrapped in WebMessageResponse
func JobConfigurationWebMessageResponseAsWebMessageResponse(v *JobConfigurationWebMessageResponse) WebMessageResponse {
	return WebMessageResponse{
		JobConfigurationWebMessageResponse: v,
	}
}

// MergeWebResponseAsWebMessageResponse is a convenience function that returns MergeWebResponse wrapped in WebMessageResponse
func MergeWebResponseAsWebMessageResponse(v *MergeWebResponse) WebMessageResponse {
	return WebMessageResponse{
		MergeWebResponse: v,
	}
}

// MetadataSyncSummaryAsWebMessageResponse is a convenience function that returns MetadataSyncSummary wrapped in WebMessageResponse
func MetadataSyncSummaryAsWebMessageResponse(v *MetadataSyncSummary) WebMessageResponse {
	return WebMessageResponse{
		MetadataSyncSummary: v,
	}
}

// ObjectReportWebMessageResponseAsWebMessageResponse is a convenience function that returns ObjectReportWebMessageResponse wrapped in WebMessageResponse
func ObjectReportWebMessageResponseAsWebMessageResponse(v *ObjectReportWebMessageResponse) WebMessageResponse {
	return WebMessageResponse{
		ObjectReportWebMessageResponse: v,
	}
}

// PredictionSummaryAsWebMessageResponse is a convenience function that returns PredictionSummary wrapped in WebMessageResponse
func PredictionSummaryAsWebMessageResponse(v *PredictionSummary) WebMessageResponse {
	return WebMessageResponse{
		PredictionSummary: v,
	}
}

// SoftwareUpdateResponseAsWebMessageResponse is a convenience function that returns SoftwareUpdateResponse wrapped in WebMessageResponse
func SoftwareUpdateResponseAsWebMessageResponse(v *SoftwareUpdateResponse) WebMessageResponse {
	return WebMessageResponse{
		SoftwareUpdateResponse: v,
	}
}

// TrackerJobWebMessageResponseAsWebMessageResponse is a convenience function that returns TrackerJobWebMessageResponse wrapped in WebMessageResponse
func TrackerJobWebMessageResponseAsWebMessageResponse(v *TrackerJobWebMessageResponse) WebMessageResponse {
	return WebMessageResponse{
		TrackerJobWebMessageResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *WebMessageResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiTokenCreationResponse
	err = newStrictDecoder(data).Decode(&dst.ApiTokenCreationResponse)
	if err == nil {
		jsonApiTokenCreationResponse, _ := json.Marshal(dst.ApiTokenCreationResponse)
		if string(jsonApiTokenCreationResponse) == "{}" { // empty struct
			dst.ApiTokenCreationResponse = nil
		} else {
			match++
		}
	} else {
		dst.ApiTokenCreationResponse = nil
	}

	// try to unmarshal data into ErrorReportsWebMessageResponse
	err = newStrictDecoder(data).Decode(&dst.ErrorReportsWebMessageResponse)
	if err == nil {
		jsonErrorReportsWebMessageResponse, _ := json.Marshal(dst.ErrorReportsWebMessageResponse)
		if string(jsonErrorReportsWebMessageResponse) == "{}" { // empty struct
			dst.ErrorReportsWebMessageResponse = nil
		} else {
			match++
		}
	} else {
		dst.ErrorReportsWebMessageResponse = nil
	}

	// try to unmarshal data into FileResourceWebMessageResponse
	err = newStrictDecoder(data).Decode(&dst.FileResourceWebMessageResponse)
	if err == nil {
		jsonFileResourceWebMessageResponse, _ := json.Marshal(dst.FileResourceWebMessageResponse)
		if string(jsonFileResourceWebMessageResponse) == "{}" { // empty struct
			dst.FileResourceWebMessageResponse = nil
		} else {
			match++
		}
	} else {
		dst.FileResourceWebMessageResponse = nil
	}

	// try to unmarshal data into GeoJsonImportReport
	err = newStrictDecoder(data).Decode(&dst.GeoJsonImportReport)
	if err == nil {
		jsonGeoJsonImportReport, _ := json.Marshal(dst.GeoJsonImportReport)
		if string(jsonGeoJsonImportReport) == "{}" { // empty struct
			dst.GeoJsonImportReport = nil
		} else {
			match++
		}
	} else {
		dst.GeoJsonImportReport = nil
	}

	// try to unmarshal data into ImportCountWebMessageResponse
	err = newStrictDecoder(data).Decode(&dst.ImportCountWebMessageResponse)
	if err == nil {
		jsonImportCountWebMessageResponse, _ := json.Marshal(dst.ImportCountWebMessageResponse)
		if string(jsonImportCountWebMessageResponse) == "{}" { // empty struct
			dst.ImportCountWebMessageResponse = nil
		} else {
			match++
		}
	} else {
		dst.ImportCountWebMessageResponse = nil
	}

	// try to unmarshal data into ImportReportWebMessageResponse
	err = newStrictDecoder(data).Decode(&dst.ImportReportWebMessageResponse)
	if err == nil {
		jsonImportReportWebMessageResponse, _ := json.Marshal(dst.ImportReportWebMessageResponse)
		if string(jsonImportReportWebMessageResponse) == "{}" { // empty struct
			dst.ImportReportWebMessageResponse = nil
		} else {
			match++
		}
	} else {
		dst.ImportReportWebMessageResponse = nil
	}

	// try to unmarshal data into ImportSummaries
	err = newStrictDecoder(data).Decode(&dst.ImportSummaries)
	if err == nil {
		jsonImportSummaries, _ := json.Marshal(dst.ImportSummaries)
		if string(jsonImportSummaries) == "{}" { // empty struct
			dst.ImportSummaries = nil
		} else {
			match++
		}
	} else {
		dst.ImportSummaries = nil
	}

	// try to unmarshal data into ImportSummary
	err = newStrictDecoder(data).Decode(&dst.ImportSummary)
	if err == nil {
		jsonImportSummary, _ := json.Marshal(dst.ImportSummary)
		if string(jsonImportSummary) == "{}" { // empty struct
			dst.ImportSummary = nil
		} else {
			match++
		}
	} else {
		dst.ImportSummary = nil
	}

	// try to unmarshal data into ImportTypeSummary
	err = newStrictDecoder(data).Decode(&dst.ImportTypeSummary)
	if err == nil {
		jsonImportTypeSummary, _ := json.Marshal(dst.ImportTypeSummary)
		if string(jsonImportTypeSummary) == "{}" { // empty struct
			dst.ImportTypeSummary = nil
		} else {
			match++
		}
	} else {
		dst.ImportTypeSummary = nil
	}

	// try to unmarshal data into JobConfigurationWebMessageResponse
	err = newStrictDecoder(data).Decode(&dst.JobConfigurationWebMessageResponse)
	if err == nil {
		jsonJobConfigurationWebMessageResponse, _ := json.Marshal(dst.JobConfigurationWebMessageResponse)
		if string(jsonJobConfigurationWebMessageResponse) == "{}" { // empty struct
			dst.JobConfigurationWebMessageResponse = nil
		} else {
			match++
		}
	} else {
		dst.JobConfigurationWebMessageResponse = nil
	}

	// try to unmarshal data into MergeWebResponse
	err = newStrictDecoder(data).Decode(&dst.MergeWebResponse)
	if err == nil {
		jsonMergeWebResponse, _ := json.Marshal(dst.MergeWebResponse)
		if string(jsonMergeWebResponse) == "{}" { // empty struct
			dst.MergeWebResponse = nil
		} else {
			match++
		}
	} else {
		dst.MergeWebResponse = nil
	}

	// try to unmarshal data into MetadataSyncSummary
	err = newStrictDecoder(data).Decode(&dst.MetadataSyncSummary)
	if err == nil {
		jsonMetadataSyncSummary, _ := json.Marshal(dst.MetadataSyncSummary)
		if string(jsonMetadataSyncSummary) == "{}" { // empty struct
			dst.MetadataSyncSummary = nil
		} else {
			match++
		}
	} else {
		dst.MetadataSyncSummary = nil
	}

	// try to unmarshal data into ObjectReportWebMessageResponse
	err = newStrictDecoder(data).Decode(&dst.ObjectReportWebMessageResponse)
	if err == nil {
		jsonObjectReportWebMessageResponse, _ := json.Marshal(dst.ObjectReportWebMessageResponse)
		if string(jsonObjectReportWebMessageResponse) == "{}" { // empty struct
			dst.ObjectReportWebMessageResponse = nil
		} else {
			match++
		}
	} else {
		dst.ObjectReportWebMessageResponse = nil
	}

	// try to unmarshal data into PredictionSummary
	err = newStrictDecoder(data).Decode(&dst.PredictionSummary)
	if err == nil {
		jsonPredictionSummary, _ := json.Marshal(dst.PredictionSummary)
		if string(jsonPredictionSummary) == "{}" { // empty struct
			dst.PredictionSummary = nil
		} else {
			match++
		}
	} else {
		dst.PredictionSummary = nil
	}

	// try to unmarshal data into SoftwareUpdateResponse
	err = newStrictDecoder(data).Decode(&dst.SoftwareUpdateResponse)
	if err == nil {
		jsonSoftwareUpdateResponse, _ := json.Marshal(dst.SoftwareUpdateResponse)
		if string(jsonSoftwareUpdateResponse) == "{}" { // empty struct
			dst.SoftwareUpdateResponse = nil
		} else {
			match++
		}
	} else {
		dst.SoftwareUpdateResponse = nil
	}

	// try to unmarshal data into TrackerJobWebMessageResponse
	err = newStrictDecoder(data).Decode(&dst.TrackerJobWebMessageResponse)
	if err == nil {
		jsonTrackerJobWebMessageResponse, _ := json.Marshal(dst.TrackerJobWebMessageResponse)
		if string(jsonTrackerJobWebMessageResponse) == "{}" { // empty struct
			dst.TrackerJobWebMessageResponse = nil
		} else {
			match++
		}
	} else {
		dst.TrackerJobWebMessageResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiTokenCreationResponse = nil
		dst.ErrorReportsWebMessageResponse = nil
		dst.FileResourceWebMessageResponse = nil
		dst.GeoJsonImportReport = nil
		dst.ImportCountWebMessageResponse = nil
		dst.ImportReportWebMessageResponse = nil
		dst.ImportSummaries = nil
		dst.ImportSummary = nil
		dst.ImportTypeSummary = nil
		dst.JobConfigurationWebMessageResponse = nil
		dst.MergeWebResponse = nil
		dst.MetadataSyncSummary = nil
		dst.ObjectReportWebMessageResponse = nil
		dst.PredictionSummary = nil
		dst.SoftwareUpdateResponse = nil
		dst.TrackerJobWebMessageResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WebMessageResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WebMessageResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WebMessageResponse) MarshalJSON() ([]byte, error) {
	if src.ApiTokenCreationResponse != nil {
		return json.Marshal(&src.ApiTokenCreationResponse)
	}

	if src.ErrorReportsWebMessageResponse != nil {
		return json.Marshal(&src.ErrorReportsWebMessageResponse)
	}

	if src.FileResourceWebMessageResponse != nil {
		return json.Marshal(&src.FileResourceWebMessageResponse)
	}

	if src.GeoJsonImportReport != nil {
		return json.Marshal(&src.GeoJsonImportReport)
	}

	if src.ImportCountWebMessageResponse != nil {
		return json.Marshal(&src.ImportCountWebMessageResponse)
	}

	if src.ImportReportWebMessageResponse != nil {
		return json.Marshal(&src.ImportReportWebMessageResponse)
	}

	if src.ImportSummaries != nil {
		return json.Marshal(&src.ImportSummaries)
	}

	if src.ImportSummary != nil {
		return json.Marshal(&src.ImportSummary)
	}

	if src.ImportTypeSummary != nil {
		return json.Marshal(&src.ImportTypeSummary)
	}

	if src.JobConfigurationWebMessageResponse != nil {
		return json.Marshal(&src.JobConfigurationWebMessageResponse)
	}

	if src.MergeWebResponse != nil {
		return json.Marshal(&src.MergeWebResponse)
	}

	if src.MetadataSyncSummary != nil {
		return json.Marshal(&src.MetadataSyncSummary)
	}

	if src.ObjectReportWebMessageResponse != nil {
		return json.Marshal(&src.ObjectReportWebMessageResponse)
	}

	if src.PredictionSummary != nil {
		return json.Marshal(&src.PredictionSummary)
	}

	if src.SoftwareUpdateResponse != nil {
		return json.Marshal(&src.SoftwareUpdateResponse)
	}

	if src.TrackerJobWebMessageResponse != nil {
		return json.Marshal(&src.TrackerJobWebMessageResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WebMessageResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ApiTokenCreationResponse != nil {
		return obj.ApiTokenCreationResponse
	}

	if obj.ErrorReportsWebMessageResponse != nil {
		return obj.ErrorReportsWebMessageResponse
	}

	if obj.FileResourceWebMessageResponse != nil {
		return obj.FileResourceWebMessageResponse
	}

	if obj.GeoJsonImportReport != nil {
		return obj.GeoJsonImportReport
	}

	if obj.ImportCountWebMessageResponse != nil {
		return obj.ImportCountWebMessageResponse
	}

	if obj.ImportReportWebMessageResponse != nil {
		return obj.ImportReportWebMessageResponse
	}

	if obj.ImportSummaries != nil {
		return obj.ImportSummaries
	}

	if obj.ImportSummary != nil {
		return obj.ImportSummary
	}

	if obj.ImportTypeSummary != nil {
		return obj.ImportTypeSummary
	}

	if obj.JobConfigurationWebMessageResponse != nil {
		return obj.JobConfigurationWebMessageResponse
	}

	if obj.MergeWebResponse != nil {
		return obj.MergeWebResponse
	}

	if obj.MetadataSyncSummary != nil {
		return obj.MetadataSyncSummary
	}

	if obj.ObjectReportWebMessageResponse != nil {
		return obj.ObjectReportWebMessageResponse
	}

	if obj.PredictionSummary != nil {
		return obj.PredictionSummary
	}

	if obj.SoftwareUpdateResponse != nil {
		return obj.SoftwareUpdateResponse
	}

	if obj.TrackerJobWebMessageResponse != nil {
		return obj.TrackerJobWebMessageResponse
	}

	// all schemas are nil
	return nil
}

type NullableWebMessageResponse struct {
	value *WebMessageResponse
	isSet bool
}

func (v NullableWebMessageResponse) Get() *WebMessageResponse {
	return v.value
}

func (v *NullableWebMessageResponse) Set(val *WebMessageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWebMessageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWebMessageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebMessageResponse(val *WebMessageResponse) *NullableWebMessageResponse {
	return &NullableWebMessageResponse{value: val, isSet: true}
}

func (v NullableWebMessageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebMessageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
