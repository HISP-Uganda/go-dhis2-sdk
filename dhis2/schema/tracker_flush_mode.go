/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// TrackerFlushMode the model 'TrackerFlushMode'
type TrackerFlushMode string

// List of TrackerFlushMode
const (
	TRACKERFLUSHMODE_OBJECT TrackerFlushMode = "OBJECT"
	TRACKERFLUSHMODE_AUTO   TrackerFlushMode = "AUTO"
)

// All allowed values of TrackerFlushMode enum
var AllowedTrackerFlushModeEnumValues = []TrackerFlushMode{
	"OBJECT",
	"AUTO",
}

func (v *TrackerFlushMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackerFlushMode(value)
	for _, existing := range AllowedTrackerFlushModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackerFlushMode", value)
}

// NewTrackerFlushModeFromValue returns a pointer to a valid TrackerFlushMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackerFlushModeFromValue(v string) (*TrackerFlushMode, error) {
	ev := TrackerFlushMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackerFlushMode: valid values are %v", v, AllowedTrackerFlushModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackerFlushMode) IsValid() bool {
	for _, existing := range AllowedTrackerFlushModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackerFlushMode value
func (v TrackerFlushMode) Ptr() *TrackerFlushMode {
	return &v
}

type NullableTrackerFlushMode struct {
	value *TrackerFlushMode
	isSet bool
}

func (v NullableTrackerFlushMode) Get() *TrackerFlushMode {
	return v.value
}

func (v *NullableTrackerFlushMode) Set(val *TrackerFlushMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerFlushMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerFlushMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerFlushMode(val *TrackerFlushMode) *NullableTrackerFlushMode {
	return &NullableTrackerFlushMode{value: val, isSet: true}
}

func (v NullableTrackerFlushMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerFlushMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
