/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// CategoryComboPropertyNames the model 'CategoryComboPropertyNames'
type CategoryComboPropertyNames string

// List of CategoryComboPropertyNames
const (
	CATEGORYCOMBOPROPERTYNAMES_ACCESS                 CategoryComboPropertyNames = "access"
	CATEGORYCOMBOPROPERTYNAMES_ATTRIBUTE_VALUES       CategoryComboPropertyNames = "attributeValues"
	CATEGORYCOMBOPROPERTYNAMES_CATEGORIES             CategoryComboPropertyNames = "categories"
	CATEGORYCOMBOPROPERTYNAMES_CATEGORY_OPTION_COMBOS CategoryComboPropertyNames = "categoryOptionCombos"
	CATEGORYCOMBOPROPERTYNAMES_CODE                   CategoryComboPropertyNames = "code"
	CATEGORYCOMBOPROPERTYNAMES_CREATED                CategoryComboPropertyNames = "created"
	CATEGORYCOMBOPROPERTYNAMES_CREATED_BY             CategoryComboPropertyNames = "createdBy"
	CATEGORYCOMBOPROPERTYNAMES_DATA_DIMENSION_TYPE    CategoryComboPropertyNames = "dataDimensionType"
	CATEGORYCOMBOPROPERTYNAMES_DISPLAY_NAME           CategoryComboPropertyNames = "displayName"
	CATEGORYCOMBOPROPERTYNAMES_FAVORITE               CategoryComboPropertyNames = "favorite"
	CATEGORYCOMBOPROPERTYNAMES_FAVORITES              CategoryComboPropertyNames = "favorites"
	CATEGORYCOMBOPROPERTYNAMES_HREF                   CategoryComboPropertyNames = "href"
	CATEGORYCOMBOPROPERTYNAMES_ID                     CategoryComboPropertyNames = "id"
	CATEGORYCOMBOPROPERTYNAMES_IS_DEFAULT             CategoryComboPropertyNames = "isDefault"
	CATEGORYCOMBOPROPERTYNAMES_LAST_UPDATED           CategoryComboPropertyNames = "lastUpdated"
	CATEGORYCOMBOPROPERTYNAMES_LAST_UPDATED_BY        CategoryComboPropertyNames = "lastUpdatedBy"
	CATEGORYCOMBOPROPERTYNAMES_NAME                   CategoryComboPropertyNames = "name"
	CATEGORYCOMBOPROPERTYNAMES_SHARING                CategoryComboPropertyNames = "sharing"
	CATEGORYCOMBOPROPERTYNAMES_SKIP_TOTAL             CategoryComboPropertyNames = "skipTotal"
	CATEGORYCOMBOPROPERTYNAMES_TRANSLATIONS           CategoryComboPropertyNames = "translations"
)

// All allowed values of CategoryComboPropertyNames enum
var AllowedCategoryComboPropertyNamesEnumValues = []CategoryComboPropertyNames{
	"access",
	"attributeValues",
	"categories",
	"categoryOptionCombos",
	"code",
	"created",
	"createdBy",
	"dataDimensionType",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"isDefault",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"sharing",
	"skipTotal",
	"translations",
}

func (v *CategoryComboPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CategoryComboPropertyNames(value)
	for _, existing := range AllowedCategoryComboPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CategoryComboPropertyNames", value)
}

// NewCategoryComboPropertyNamesFromValue returns a pointer to a valid CategoryComboPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCategoryComboPropertyNamesFromValue(v string) (*CategoryComboPropertyNames, error) {
	ev := CategoryComboPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CategoryComboPropertyNames: valid values are %v", v, AllowedCategoryComboPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CategoryComboPropertyNames) IsValid() bool {
	for _, existing := range AllowedCategoryComboPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CategoryComboPropertyNames value
func (v CategoryComboPropertyNames) Ptr() *CategoryComboPropertyNames {
	return &v
}

type NullableCategoryComboPropertyNames struct {
	value *CategoryComboPropertyNames
	isSet bool
}

func (v NullableCategoryComboPropertyNames) Get() *CategoryComboPropertyNames {
	return v.value
}

func (v *NullableCategoryComboPropertyNames) Set(val *CategoryComboPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryComboPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryComboPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryComboPropertyNames(val *CategoryComboPropertyNames) *NullableCategoryComboPropertyNames {
	return &NullableCategoryComboPropertyNames{value: val, isSet: true}
}

func (v NullableCategoryComboPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryComboPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
