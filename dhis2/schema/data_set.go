/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DataSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSet{}

// DataSet struct for DataSet
type DataSet struct {
	Access                        *Access                  `json:"access,omitempty"`
	AggregationType               AggregationType          `json:"aggregationType"`
	AttributeValues               []AttributeValue         `json:"attributeValues,omitempty"`
	CategoryCombo                 *BaseIdentifiableObject  `json:"categoryCombo,omitempty"`
	Code                          *string                  `json:"code,omitempty"`
	CompulsoryDataElementOperands []DataElementOperand     `json:"compulsoryDataElementOperands,omitempty"`
	CompulsoryFieldsCompleteOnly  *bool                    `json:"compulsoryFieldsCompleteOnly,omitempty"`
	Created                       *time.Time               `json:"created,omitempty"`
	CreatedBy                     *UserDto                 `json:"createdBy,omitempty"`
	DataElementDecoration         *bool                    `json:"dataElementDecoration,omitempty"`
	DataEntryForm                 *DataEntryForm           `json:"dataEntryForm,omitempty"`
	DataInputPeriods              []DataInputPeriod        `json:"dataInputPeriods,omitempty"`
	DataSetElements               []DataSetElement         `json:"dataSetElements,omitempty"`
	Description                   *string                  `json:"description,omitempty"`
	DimensionItem                 *string                  `json:"dimensionItem,omitempty"`
	DisplayDescription            *string                  `json:"displayDescription,omitempty"`
	DisplayFormName               *string                  `json:"displayFormName,omitempty"`
	DisplayName                   *string                  `json:"displayName,omitempty"`
	DisplayOptions                map[string]interface{}   `json:"displayOptions,omitempty"`
	DisplayShortName              *string                  `json:"displayShortName,omitempty"`
	ExpiryDays                    float64                  `json:"expiryDays"`
	Favorite                      *bool                    `json:"favorite,omitempty"`
	Favorites                     []string                 `json:"favorites,omitempty"`
	FieldCombinationRequired      *bool                    `json:"fieldCombinationRequired,omitempty"`
	FormName                      *string                  `json:"formName,omitempty"`
	FormType                      FormType                 `json:"formType"`
	Href                          *string                  `json:"href,omitempty"`
	Id                            *string                  `json:"id,omitempty"`
	Indicators                    []BaseIdentifiableObject `json:"indicators,omitempty"`
	Interpretations               []BaseIdentifiableObject `json:"interpretations,omitempty"`
	LastUpdated                   *time.Time               `json:"lastUpdated,omitempty"`
	LastUpdatedBy                 *UserDto                 `json:"lastUpdatedBy,omitempty"`
	LegendSet                     *LegendSet               `json:"legendSet,omitempty"`
	LegendSets                    []LegendSet              `json:"legendSets,omitempty"`
	Mobile                        *bool                    `json:"mobile,omitempty"`
	Name                          *string                  `json:"name,omitempty"`
	NoValueRequiresComment        *bool                    `json:"noValueRequiresComment,omitempty"`
	NotificationRecipients        *UserGroup               `json:"notificationRecipients,omitempty"`
	NotifyCompletingUser          *bool                    `json:"notifyCompletingUser,omitempty"`
	OpenFuturePeriods             int32                    `json:"openFuturePeriods"`
	OpenPeriodsAfterCoEndDate     int32                    `json:"openPeriodsAfterCoEndDate"`
	OrganisationUnits             []BaseIdentifiableObject `json:"organisationUnits,omitempty"`
	PeriodType                    *string                  `json:"periodType,omitempty"`
	QueryMods                     *QueryModifiers          `json:"queryMods,omitempty"`
	RenderAsTabs                  *bool                    `json:"renderAsTabs,omitempty"`
	RenderHorizontally            *bool                    `json:"renderHorizontally,omitempty"`
	Sections                      []BaseIdentifiableObject `json:"sections,omitempty"`
	Sharing                       *Sharing                 `json:"sharing,omitempty"`
	ShortName                     *string                  `json:"shortName,omitempty"`
	SkipOffline                   *bool                    `json:"skipOffline,omitempty"`
	Style                         *ObjectStyle             `json:"style,omitempty"`
	TimelyDays                    float64                  `json:"timelyDays"`
	Translations                  []Translation            `json:"translations,omitempty"`
	ValidCompleteOnly             *bool                    `json:"validCompleteOnly,omitempty"`
	Version                       int32                    `json:"version"`
	Workflow                      *DataApprovalWorkflow    `json:"workflow,omitempty"`
}

type _DataSet DataSet

// NewDataSet instantiates a new DataSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSet(aggregationType AggregationType, expiryDays float64, formType FormType, openFuturePeriods int32, openPeriodsAfterCoEndDate int32, timelyDays float64, version int32) *DataSet {
	this := DataSet{}
	this.AggregationType = aggregationType
	this.ExpiryDays = expiryDays
	this.FormType = formType
	this.OpenFuturePeriods = openFuturePeriods
	this.OpenPeriodsAfterCoEndDate = openPeriodsAfterCoEndDate
	this.TimelyDays = timelyDays
	this.Version = version
	return &this
}

// NewDataSetWithDefaults instantiates a new DataSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSetWithDefaults() *DataSet {
	this := DataSet{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *DataSet) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *DataSet) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *DataSet) SetAccess(v Access) {
	o.Access = &v
}

// GetAggregationType returns the AggregationType field value
func (o *DataSet) GetAggregationType() AggregationType {
	if o == nil {
		var ret AggregationType
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *DataSet) GetAggregationTypeOk() (*AggregationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *DataSet) SetAggregationType(v AggregationType) {
	o.AggregationType = v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *DataSet) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *DataSet) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *DataSet) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCategoryCombo returns the CategoryCombo field value if set, zero value otherwise.
func (o *DataSet) GetCategoryCombo() BaseIdentifiableObject {
	if o == nil || IsNil(o.CategoryCombo) {
		var ret BaseIdentifiableObject
		return ret
	}
	return *o.CategoryCombo
}

// GetCategoryComboOk returns a tuple with the CategoryCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetCategoryComboOk() (*BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.CategoryCombo) {
		return nil, false
	}
	return o.CategoryCombo, true
}

// HasCategoryCombo returns a boolean if a field has been set.
func (o *DataSet) HasCategoryCombo() bool {
	if o != nil && !IsNil(o.CategoryCombo) {
		return true
	}

	return false
}

// SetCategoryCombo gets a reference to the given BaseIdentifiableObject and assigns it to the CategoryCombo field.
func (o *DataSet) SetCategoryCombo(v BaseIdentifiableObject) {
	o.CategoryCombo = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *DataSet) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *DataSet) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *DataSet) SetCode(v string) {
	o.Code = &v
}

// GetCompulsoryDataElementOperands returns the CompulsoryDataElementOperands field value if set, zero value otherwise.
func (o *DataSet) GetCompulsoryDataElementOperands() []DataElementOperand {
	if o == nil || IsNil(o.CompulsoryDataElementOperands) {
		var ret []DataElementOperand
		return ret
	}
	return o.CompulsoryDataElementOperands
}

// GetCompulsoryDataElementOperandsOk returns a tuple with the CompulsoryDataElementOperands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetCompulsoryDataElementOperandsOk() ([]DataElementOperand, bool) {
	if o == nil || IsNil(o.CompulsoryDataElementOperands) {
		return nil, false
	}
	return o.CompulsoryDataElementOperands, true
}

// HasCompulsoryDataElementOperands returns a boolean if a field has been set.
func (o *DataSet) HasCompulsoryDataElementOperands() bool {
	if o != nil && !IsNil(o.CompulsoryDataElementOperands) {
		return true
	}

	return false
}

// SetCompulsoryDataElementOperands gets a reference to the given []DataElementOperand and assigns it to the CompulsoryDataElementOperands field.
func (o *DataSet) SetCompulsoryDataElementOperands(v []DataElementOperand) {
	o.CompulsoryDataElementOperands = v
}

// GetCompulsoryFieldsCompleteOnly returns the CompulsoryFieldsCompleteOnly field value if set, zero value otherwise.
func (o *DataSet) GetCompulsoryFieldsCompleteOnly() bool {
	if o == nil || IsNil(o.CompulsoryFieldsCompleteOnly) {
		var ret bool
		return ret
	}
	return *o.CompulsoryFieldsCompleteOnly
}

// GetCompulsoryFieldsCompleteOnlyOk returns a tuple with the CompulsoryFieldsCompleteOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetCompulsoryFieldsCompleteOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.CompulsoryFieldsCompleteOnly) {
		return nil, false
	}
	return o.CompulsoryFieldsCompleteOnly, true
}

// HasCompulsoryFieldsCompleteOnly returns a boolean if a field has been set.
func (o *DataSet) HasCompulsoryFieldsCompleteOnly() bool {
	if o != nil && !IsNil(o.CompulsoryFieldsCompleteOnly) {
		return true
	}

	return false
}

// SetCompulsoryFieldsCompleteOnly gets a reference to the given bool and assigns it to the CompulsoryFieldsCompleteOnly field.
func (o *DataSet) SetCompulsoryFieldsCompleteOnly(v bool) {
	o.CompulsoryFieldsCompleteOnly = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DataSet) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DataSet) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *DataSet) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DataSet) GetCreatedBy() UserDto {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserDto
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetCreatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DataSet) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserDto and assigns it to the CreatedBy field.
func (o *DataSet) SetCreatedBy(v UserDto) {
	o.CreatedBy = &v
}

// GetDataElementDecoration returns the DataElementDecoration field value if set, zero value otherwise.
func (o *DataSet) GetDataElementDecoration() bool {
	if o == nil || IsNil(o.DataElementDecoration) {
		var ret bool
		return ret
	}
	return *o.DataElementDecoration
}

// GetDataElementDecorationOk returns a tuple with the DataElementDecoration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetDataElementDecorationOk() (*bool, bool) {
	if o == nil || IsNil(o.DataElementDecoration) {
		return nil, false
	}
	return o.DataElementDecoration, true
}

// HasDataElementDecoration returns a boolean if a field has been set.
func (o *DataSet) HasDataElementDecoration() bool {
	if o != nil && !IsNil(o.DataElementDecoration) {
		return true
	}

	return false
}

// SetDataElementDecoration gets a reference to the given bool and assigns it to the DataElementDecoration field.
func (o *DataSet) SetDataElementDecoration(v bool) {
	o.DataElementDecoration = &v
}

// GetDataEntryForm returns the DataEntryForm field value if set, zero value otherwise.
func (o *DataSet) GetDataEntryForm() DataEntryForm {
	if o == nil || IsNil(o.DataEntryForm) {
		var ret DataEntryForm
		return ret
	}
	return *o.DataEntryForm
}

// GetDataEntryFormOk returns a tuple with the DataEntryForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetDataEntryFormOk() (*DataEntryForm, bool) {
	if o == nil || IsNil(o.DataEntryForm) {
		return nil, false
	}
	return o.DataEntryForm, true
}

// HasDataEntryForm returns a boolean if a field has been set.
func (o *DataSet) HasDataEntryForm() bool {
	if o != nil && !IsNil(o.DataEntryForm) {
		return true
	}

	return false
}

// SetDataEntryForm gets a reference to the given DataEntryForm and assigns it to the DataEntryForm field.
func (o *DataSet) SetDataEntryForm(v DataEntryForm) {
	o.DataEntryForm = &v
}

// GetDataInputPeriods returns the DataInputPeriods field value if set, zero value otherwise.
func (o *DataSet) GetDataInputPeriods() []DataInputPeriod {
	if o == nil || IsNil(o.DataInputPeriods) {
		var ret []DataInputPeriod
		return ret
	}
	return o.DataInputPeriods
}

// GetDataInputPeriodsOk returns a tuple with the DataInputPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetDataInputPeriodsOk() ([]DataInputPeriod, bool) {
	if o == nil || IsNil(o.DataInputPeriods) {
		return nil, false
	}
	return o.DataInputPeriods, true
}

// HasDataInputPeriods returns a boolean if a field has been set.
func (o *DataSet) HasDataInputPeriods() bool {
	if o != nil && !IsNil(o.DataInputPeriods) {
		return true
	}

	return false
}

// SetDataInputPeriods gets a reference to the given []DataInputPeriod and assigns it to the DataInputPeriods field.
func (o *DataSet) SetDataInputPeriods(v []DataInputPeriod) {
	o.DataInputPeriods = v
}

// GetDataSetElements returns the DataSetElements field value if set, zero value otherwise.
func (o *DataSet) GetDataSetElements() []DataSetElement {
	if o == nil || IsNil(o.DataSetElements) {
		var ret []DataSetElement
		return ret
	}
	return o.DataSetElements
}

// GetDataSetElementsOk returns a tuple with the DataSetElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetDataSetElementsOk() ([]DataSetElement, bool) {
	if o == nil || IsNil(o.DataSetElements) {
		return nil, false
	}
	return o.DataSetElements, true
}

// HasDataSetElements returns a boolean if a field has been set.
func (o *DataSet) HasDataSetElements() bool {
	if o != nil && !IsNil(o.DataSetElements) {
		return true
	}

	return false
}

// SetDataSetElements gets a reference to the given []DataSetElement and assigns it to the DataSetElements field.
func (o *DataSet) SetDataSetElements(v []DataSetElement) {
	o.DataSetElements = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DataSet) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DataSet) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DataSet) SetDescription(v string) {
	o.Description = &v
}

// GetDimensionItem returns the DimensionItem field value if set, zero value otherwise.
func (o *DataSet) GetDimensionItem() string {
	if o == nil || IsNil(o.DimensionItem) {
		var ret string
		return ret
	}
	return *o.DimensionItem
}

// GetDimensionItemOk returns a tuple with the DimensionItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetDimensionItemOk() (*string, bool) {
	if o == nil || IsNil(o.DimensionItem) {
		return nil, false
	}
	return o.DimensionItem, true
}

// HasDimensionItem returns a boolean if a field has been set.
func (o *DataSet) HasDimensionItem() bool {
	if o != nil && !IsNil(o.DimensionItem) {
		return true
	}

	return false
}

// SetDimensionItem gets a reference to the given string and assigns it to the DimensionItem field.
func (o *DataSet) SetDimensionItem(v string) {
	o.DimensionItem = &v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *DataSet) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *DataSet) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *DataSet) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayFormName returns the DisplayFormName field value if set, zero value otherwise.
func (o *DataSet) GetDisplayFormName() string {
	if o == nil || IsNil(o.DisplayFormName) {
		var ret string
		return ret
	}
	return *o.DisplayFormName
}

// GetDisplayFormNameOk returns a tuple with the DisplayFormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetDisplayFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayFormName) {
		return nil, false
	}
	return o.DisplayFormName, true
}

// HasDisplayFormName returns a boolean if a field has been set.
func (o *DataSet) HasDisplayFormName() bool {
	if o != nil && !IsNil(o.DisplayFormName) {
		return true
	}

	return false
}

// SetDisplayFormName gets a reference to the given string and assigns it to the DisplayFormName field.
func (o *DataSet) SetDisplayFormName(v string) {
	o.DisplayFormName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DataSet) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DataSet) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DataSet) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayOptions returns the DisplayOptions field value if set, zero value otherwise.
func (o *DataSet) GetDisplayOptions() map[string]interface{} {
	if o == nil || IsNil(o.DisplayOptions) {
		var ret map[string]interface{}
		return ret
	}
	return o.DisplayOptions
}

// GetDisplayOptionsOk returns a tuple with the DisplayOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetDisplayOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DisplayOptions) {
		return map[string]interface{}{}, false
	}
	return o.DisplayOptions, true
}

// HasDisplayOptions returns a boolean if a field has been set.
func (o *DataSet) HasDisplayOptions() bool {
	if o != nil && !IsNil(o.DisplayOptions) {
		return true
	}

	return false
}

// SetDisplayOptions gets a reference to the given map[string]interface{} and assigns it to the DisplayOptions field.
func (o *DataSet) SetDisplayOptions(v map[string]interface{}) {
	o.DisplayOptions = v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *DataSet) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *DataSet) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *DataSet) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetExpiryDays returns the ExpiryDays field value
func (o *DataSet) GetExpiryDays() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ExpiryDays
}

// GetExpiryDaysOk returns a tuple with the ExpiryDays field value
// and a boolean to check if the value has been set.
func (o *DataSet) GetExpiryDaysOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiryDays, true
}

// SetExpiryDays sets field value
func (o *DataSet) SetExpiryDays(v float64) {
	o.ExpiryDays = v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *DataSet) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *DataSet) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *DataSet) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *DataSet) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *DataSet) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *DataSet) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFieldCombinationRequired returns the FieldCombinationRequired field value if set, zero value otherwise.
func (o *DataSet) GetFieldCombinationRequired() bool {
	if o == nil || IsNil(o.FieldCombinationRequired) {
		var ret bool
		return ret
	}
	return *o.FieldCombinationRequired
}

// GetFieldCombinationRequiredOk returns a tuple with the FieldCombinationRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetFieldCombinationRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.FieldCombinationRequired) {
		return nil, false
	}
	return o.FieldCombinationRequired, true
}

// HasFieldCombinationRequired returns a boolean if a field has been set.
func (o *DataSet) HasFieldCombinationRequired() bool {
	if o != nil && !IsNil(o.FieldCombinationRequired) {
		return true
	}

	return false
}

// SetFieldCombinationRequired gets a reference to the given bool and assigns it to the FieldCombinationRequired field.
func (o *DataSet) SetFieldCombinationRequired(v bool) {
	o.FieldCombinationRequired = &v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *DataSet) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *DataSet) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *DataSet) SetFormName(v string) {
	o.FormName = &v
}

// GetFormType returns the FormType field value
func (o *DataSet) GetFormType() FormType {
	if o == nil {
		var ret FormType
		return ret
	}

	return o.FormType
}

// GetFormTypeOk returns a tuple with the FormType field value
// and a boolean to check if the value has been set.
func (o *DataSet) GetFormTypeOk() (*FormType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FormType, true
}

// SetFormType sets field value
func (o *DataSet) SetFormType(v FormType) {
	o.FormType = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *DataSet) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *DataSet) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *DataSet) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataSet) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataSet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataSet) SetId(v string) {
	o.Id = &v
}

// GetIndicators returns the Indicators field value if set, zero value otherwise.
func (o *DataSet) GetIndicators() []BaseIdentifiableObject {
	if o == nil || IsNil(o.Indicators) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.Indicators
}

// GetIndicatorsOk returns a tuple with the Indicators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetIndicatorsOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.Indicators) {
		return nil, false
	}
	return o.Indicators, true
}

// HasIndicators returns a boolean if a field has been set.
func (o *DataSet) HasIndicators() bool {
	if o != nil && !IsNil(o.Indicators) {
		return true
	}

	return false
}

// SetIndicators gets a reference to the given []BaseIdentifiableObject and assigns it to the Indicators field.
func (o *DataSet) SetIndicators(v []BaseIdentifiableObject) {
	o.Indicators = v
}

// GetInterpretations returns the Interpretations field value if set, zero value otherwise.
func (o *DataSet) GetInterpretations() []BaseIdentifiableObject {
	if o == nil || IsNil(o.Interpretations) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.Interpretations
}

// GetInterpretationsOk returns a tuple with the Interpretations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetInterpretationsOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.Interpretations) {
		return nil, false
	}
	return o.Interpretations, true
}

// HasInterpretations returns a boolean if a field has been set.
func (o *DataSet) HasInterpretations() bool {
	if o != nil && !IsNil(o.Interpretations) {
		return true
	}

	return false
}

// SetInterpretations gets a reference to the given []BaseIdentifiableObject and assigns it to the Interpretations field.
func (o *DataSet) SetInterpretations(v []BaseIdentifiableObject) {
	o.Interpretations = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *DataSet) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *DataSet) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *DataSet) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *DataSet) GetLastUpdatedBy() UserDto {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret UserDto
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetLastUpdatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *DataSet) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given UserDto and assigns it to the LastUpdatedBy field.
func (o *DataSet) SetLastUpdatedBy(v UserDto) {
	o.LastUpdatedBy = &v
}

// GetLegendSet returns the LegendSet field value if set, zero value otherwise.
func (o *DataSet) GetLegendSet() LegendSet {
	if o == nil || IsNil(o.LegendSet) {
		var ret LegendSet
		return ret
	}
	return *o.LegendSet
}

// GetLegendSetOk returns a tuple with the LegendSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetLegendSetOk() (*LegendSet, bool) {
	if o == nil || IsNil(o.LegendSet) {
		return nil, false
	}
	return o.LegendSet, true
}

// HasLegendSet returns a boolean if a field has been set.
func (o *DataSet) HasLegendSet() bool {
	if o != nil && !IsNil(o.LegendSet) {
		return true
	}

	return false
}

// SetLegendSet gets a reference to the given LegendSet and assigns it to the LegendSet field.
func (o *DataSet) SetLegendSet(v LegendSet) {
	o.LegendSet = &v
}

// GetLegendSets returns the LegendSets field value if set, zero value otherwise.
func (o *DataSet) GetLegendSets() []LegendSet {
	if o == nil || IsNil(o.LegendSets) {
		var ret []LegendSet
		return ret
	}
	return o.LegendSets
}

// GetLegendSetsOk returns a tuple with the LegendSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetLegendSetsOk() ([]LegendSet, bool) {
	if o == nil || IsNil(o.LegendSets) {
		return nil, false
	}
	return o.LegendSets, true
}

// HasLegendSets returns a boolean if a field has been set.
func (o *DataSet) HasLegendSets() bool {
	if o != nil && !IsNil(o.LegendSets) {
		return true
	}

	return false
}

// SetLegendSets gets a reference to the given []LegendSet and assigns it to the LegendSets field.
func (o *DataSet) SetLegendSets(v []LegendSet) {
	o.LegendSets = v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *DataSet) GetMobile() bool {
	if o == nil || IsNil(o.Mobile) {
		var ret bool
		return ret
	}
	return *o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetMobileOk() (*bool, bool) {
	if o == nil || IsNil(o.Mobile) {
		return nil, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *DataSet) HasMobile() bool {
	if o != nil && !IsNil(o.Mobile) {
		return true
	}

	return false
}

// SetMobile gets a reference to the given bool and assigns it to the Mobile field.
func (o *DataSet) SetMobile(v bool) {
	o.Mobile = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataSet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataSet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataSet) SetName(v string) {
	o.Name = &v
}

// GetNoValueRequiresComment returns the NoValueRequiresComment field value if set, zero value otherwise.
func (o *DataSet) GetNoValueRequiresComment() bool {
	if o == nil || IsNil(o.NoValueRequiresComment) {
		var ret bool
		return ret
	}
	return *o.NoValueRequiresComment
}

// GetNoValueRequiresCommentOk returns a tuple with the NoValueRequiresComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetNoValueRequiresCommentOk() (*bool, bool) {
	if o == nil || IsNil(o.NoValueRequiresComment) {
		return nil, false
	}
	return o.NoValueRequiresComment, true
}

// HasNoValueRequiresComment returns a boolean if a field has been set.
func (o *DataSet) HasNoValueRequiresComment() bool {
	if o != nil && !IsNil(o.NoValueRequiresComment) {
		return true
	}

	return false
}

// SetNoValueRequiresComment gets a reference to the given bool and assigns it to the NoValueRequiresComment field.
func (o *DataSet) SetNoValueRequiresComment(v bool) {
	o.NoValueRequiresComment = &v
}

// GetNotificationRecipients returns the NotificationRecipients field value if set, zero value otherwise.
func (o *DataSet) GetNotificationRecipients() UserGroup {
	if o == nil || IsNil(o.NotificationRecipients) {
		var ret UserGroup
		return ret
	}
	return *o.NotificationRecipients
}

// GetNotificationRecipientsOk returns a tuple with the NotificationRecipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetNotificationRecipientsOk() (*UserGroup, bool) {
	if o == nil || IsNil(o.NotificationRecipients) {
		return nil, false
	}
	return o.NotificationRecipients, true
}

// HasNotificationRecipients returns a boolean if a field has been set.
func (o *DataSet) HasNotificationRecipients() bool {
	if o != nil && !IsNil(o.NotificationRecipients) {
		return true
	}

	return false
}

// SetNotificationRecipients gets a reference to the given UserGroup and assigns it to the NotificationRecipients field.
func (o *DataSet) SetNotificationRecipients(v UserGroup) {
	o.NotificationRecipients = &v
}

// GetNotifyCompletingUser returns the NotifyCompletingUser field value if set, zero value otherwise.
func (o *DataSet) GetNotifyCompletingUser() bool {
	if o == nil || IsNil(o.NotifyCompletingUser) {
		var ret bool
		return ret
	}
	return *o.NotifyCompletingUser
}

// GetNotifyCompletingUserOk returns a tuple with the NotifyCompletingUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetNotifyCompletingUserOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyCompletingUser) {
		return nil, false
	}
	return o.NotifyCompletingUser, true
}

// HasNotifyCompletingUser returns a boolean if a field has been set.
func (o *DataSet) HasNotifyCompletingUser() bool {
	if o != nil && !IsNil(o.NotifyCompletingUser) {
		return true
	}

	return false
}

// SetNotifyCompletingUser gets a reference to the given bool and assigns it to the NotifyCompletingUser field.
func (o *DataSet) SetNotifyCompletingUser(v bool) {
	o.NotifyCompletingUser = &v
}

// GetOpenFuturePeriods returns the OpenFuturePeriods field value
func (o *DataSet) GetOpenFuturePeriods() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OpenFuturePeriods
}

// GetOpenFuturePeriodsOk returns a tuple with the OpenFuturePeriods field value
// and a boolean to check if the value has been set.
func (o *DataSet) GetOpenFuturePeriodsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenFuturePeriods, true
}

// SetOpenFuturePeriods sets field value
func (o *DataSet) SetOpenFuturePeriods(v int32) {
	o.OpenFuturePeriods = v
}

// GetOpenPeriodsAfterCoEndDate returns the OpenPeriodsAfterCoEndDate field value
func (o *DataSet) GetOpenPeriodsAfterCoEndDate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OpenPeriodsAfterCoEndDate
}

// GetOpenPeriodsAfterCoEndDateOk returns a tuple with the OpenPeriodsAfterCoEndDate field value
// and a boolean to check if the value has been set.
func (o *DataSet) GetOpenPeriodsAfterCoEndDateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenPeriodsAfterCoEndDate, true
}

// SetOpenPeriodsAfterCoEndDate sets field value
func (o *DataSet) SetOpenPeriodsAfterCoEndDate(v int32) {
	o.OpenPeriodsAfterCoEndDate = v
}

// GetOrganisationUnits returns the OrganisationUnits field value if set, zero value otherwise.
func (o *DataSet) GetOrganisationUnits() []BaseIdentifiableObject {
	if o == nil || IsNil(o.OrganisationUnits) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.OrganisationUnits
}

// GetOrganisationUnitsOk returns a tuple with the OrganisationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetOrganisationUnitsOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.OrganisationUnits) {
		return nil, false
	}
	return o.OrganisationUnits, true
}

// HasOrganisationUnits returns a boolean if a field has been set.
func (o *DataSet) HasOrganisationUnits() bool {
	if o != nil && !IsNil(o.OrganisationUnits) {
		return true
	}

	return false
}

// SetOrganisationUnits gets a reference to the given []BaseIdentifiableObject and assigns it to the OrganisationUnits field.
func (o *DataSet) SetOrganisationUnits(v []BaseIdentifiableObject) {
	o.OrganisationUnits = v
}

// GetPeriodType returns the PeriodType field value if set, zero value otherwise.
func (o *DataSet) GetPeriodType() string {
	if o == nil || IsNil(o.PeriodType) {
		var ret string
		return ret
	}
	return *o.PeriodType
}

// GetPeriodTypeOk returns a tuple with the PeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetPeriodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodType) {
		return nil, false
	}
	return o.PeriodType, true
}

// HasPeriodType returns a boolean if a field has been set.
func (o *DataSet) HasPeriodType() bool {
	if o != nil && !IsNil(o.PeriodType) {
		return true
	}

	return false
}

// SetPeriodType gets a reference to the given string and assigns it to the PeriodType field.
func (o *DataSet) SetPeriodType(v string) {
	o.PeriodType = &v
}

// GetQueryMods returns the QueryMods field value if set, zero value otherwise.
func (o *DataSet) GetQueryMods() QueryModifiers {
	if o == nil || IsNil(o.QueryMods) {
		var ret QueryModifiers
		return ret
	}
	return *o.QueryMods
}

// GetQueryModsOk returns a tuple with the QueryMods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetQueryModsOk() (*QueryModifiers, bool) {
	if o == nil || IsNil(o.QueryMods) {
		return nil, false
	}
	return o.QueryMods, true
}

// HasQueryMods returns a boolean if a field has been set.
func (o *DataSet) HasQueryMods() bool {
	if o != nil && !IsNil(o.QueryMods) {
		return true
	}

	return false
}

// SetQueryMods gets a reference to the given QueryModifiers and assigns it to the QueryMods field.
func (o *DataSet) SetQueryMods(v QueryModifiers) {
	o.QueryMods = &v
}

// GetRenderAsTabs returns the RenderAsTabs field value if set, zero value otherwise.
func (o *DataSet) GetRenderAsTabs() bool {
	if o == nil || IsNil(o.RenderAsTabs) {
		var ret bool
		return ret
	}
	return *o.RenderAsTabs
}

// GetRenderAsTabsOk returns a tuple with the RenderAsTabs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetRenderAsTabsOk() (*bool, bool) {
	if o == nil || IsNil(o.RenderAsTabs) {
		return nil, false
	}
	return o.RenderAsTabs, true
}

// HasRenderAsTabs returns a boolean if a field has been set.
func (o *DataSet) HasRenderAsTabs() bool {
	if o != nil && !IsNil(o.RenderAsTabs) {
		return true
	}

	return false
}

// SetRenderAsTabs gets a reference to the given bool and assigns it to the RenderAsTabs field.
func (o *DataSet) SetRenderAsTabs(v bool) {
	o.RenderAsTabs = &v
}

// GetRenderHorizontally returns the RenderHorizontally field value if set, zero value otherwise.
func (o *DataSet) GetRenderHorizontally() bool {
	if o == nil || IsNil(o.RenderHorizontally) {
		var ret bool
		return ret
	}
	return *o.RenderHorizontally
}

// GetRenderHorizontallyOk returns a tuple with the RenderHorizontally field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetRenderHorizontallyOk() (*bool, bool) {
	if o == nil || IsNil(o.RenderHorizontally) {
		return nil, false
	}
	return o.RenderHorizontally, true
}

// HasRenderHorizontally returns a boolean if a field has been set.
func (o *DataSet) HasRenderHorizontally() bool {
	if o != nil && !IsNil(o.RenderHorizontally) {
		return true
	}

	return false
}

// SetRenderHorizontally gets a reference to the given bool and assigns it to the RenderHorizontally field.
func (o *DataSet) SetRenderHorizontally(v bool) {
	o.RenderHorizontally = &v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *DataSet) GetSections() []BaseIdentifiableObject {
	if o == nil || IsNil(o.Sections) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetSectionsOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.Sections) {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *DataSet) HasSections() bool {
	if o != nil && !IsNil(o.Sections) {
		return true
	}

	return false
}

// SetSections gets a reference to the given []BaseIdentifiableObject and assigns it to the Sections field.
func (o *DataSet) SetSections(v []BaseIdentifiableObject) {
	o.Sections = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *DataSet) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *DataSet) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *DataSet) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *DataSet) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *DataSet) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *DataSet) SetShortName(v string) {
	o.ShortName = &v
}

// GetSkipOffline returns the SkipOffline field value if set, zero value otherwise.
func (o *DataSet) GetSkipOffline() bool {
	if o == nil || IsNil(o.SkipOffline) {
		var ret bool
		return ret
	}
	return *o.SkipOffline
}

// GetSkipOfflineOk returns a tuple with the SkipOffline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetSkipOfflineOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipOffline) {
		return nil, false
	}
	return o.SkipOffline, true
}

// HasSkipOffline returns a boolean if a field has been set.
func (o *DataSet) HasSkipOffline() bool {
	if o != nil && !IsNil(o.SkipOffline) {
		return true
	}

	return false
}

// SetSkipOffline gets a reference to the given bool and assigns it to the SkipOffline field.
func (o *DataSet) SetSkipOffline(v bool) {
	o.SkipOffline = &v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *DataSet) GetStyle() ObjectStyle {
	if o == nil || IsNil(o.Style) {
		var ret ObjectStyle
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetStyleOk() (*ObjectStyle, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *DataSet) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given ObjectStyle and assigns it to the Style field.
func (o *DataSet) SetStyle(v ObjectStyle) {
	o.Style = &v
}

// GetTimelyDays returns the TimelyDays field value
func (o *DataSet) GetTimelyDays() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TimelyDays
}

// GetTimelyDaysOk returns a tuple with the TimelyDays field value
// and a boolean to check if the value has been set.
func (o *DataSet) GetTimelyDaysOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimelyDays, true
}

// SetTimelyDays sets field value
func (o *DataSet) SetTimelyDays(v float64) {
	o.TimelyDays = v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *DataSet) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *DataSet) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *DataSet) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetValidCompleteOnly returns the ValidCompleteOnly field value if set, zero value otherwise.
func (o *DataSet) GetValidCompleteOnly() bool {
	if o == nil || IsNil(o.ValidCompleteOnly) {
		var ret bool
		return ret
	}
	return *o.ValidCompleteOnly
}

// GetValidCompleteOnlyOk returns a tuple with the ValidCompleteOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetValidCompleteOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidCompleteOnly) {
		return nil, false
	}
	return o.ValidCompleteOnly, true
}

// HasValidCompleteOnly returns a boolean if a field has been set.
func (o *DataSet) HasValidCompleteOnly() bool {
	if o != nil && !IsNil(o.ValidCompleteOnly) {
		return true
	}

	return false
}

// SetValidCompleteOnly gets a reference to the given bool and assigns it to the ValidCompleteOnly field.
func (o *DataSet) SetValidCompleteOnly(v bool) {
	o.ValidCompleteOnly = &v
}

// GetVersion returns the Version field value
func (o *DataSet) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DataSet) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DataSet) SetVersion(v int32) {
	o.Version = v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise.
func (o *DataSet) GetWorkflow() DataApprovalWorkflow {
	if o == nil || IsNil(o.Workflow) {
		var ret DataApprovalWorkflow
		return ret
	}
	return *o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetWorkflowOk() (*DataApprovalWorkflow, bool) {
	if o == nil || IsNil(o.Workflow) {
		return nil, false
	}
	return o.Workflow, true
}

// HasWorkflow returns a boolean if a field has been set.
func (o *DataSet) HasWorkflow() bool {
	if o != nil && !IsNil(o.Workflow) {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given DataApprovalWorkflow and assigns it to the Workflow field.
func (o *DataSet) SetWorkflow(v DataApprovalWorkflow) {
	o.Workflow = &v
}

func (o DataSet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	toSerialize["aggregationType"] = o.AggregationType
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.CategoryCombo) {
		toSerialize["categoryCombo"] = o.CategoryCombo
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CompulsoryDataElementOperands) {
		toSerialize["compulsoryDataElementOperands"] = o.CompulsoryDataElementOperands
	}
	if !IsNil(o.CompulsoryFieldsCompleteOnly) {
		toSerialize["compulsoryFieldsCompleteOnly"] = o.CompulsoryFieldsCompleteOnly
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DataElementDecoration) {
		toSerialize["dataElementDecoration"] = o.DataElementDecoration
	}
	if !IsNil(o.DataEntryForm) {
		toSerialize["dataEntryForm"] = o.DataEntryForm
	}
	if !IsNil(o.DataInputPeriods) {
		toSerialize["dataInputPeriods"] = o.DataInputPeriods
	}
	if !IsNil(o.DataSetElements) {
		toSerialize["dataSetElements"] = o.DataSetElements
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DimensionItem) {
		toSerialize["dimensionItem"] = o.DimensionItem
	}
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayFormName) {
		toSerialize["displayFormName"] = o.DisplayFormName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayOptions) {
		toSerialize["displayOptions"] = o.DisplayOptions
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	toSerialize["expiryDays"] = o.ExpiryDays
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FieldCombinationRequired) {
		toSerialize["fieldCombinationRequired"] = o.FieldCombinationRequired
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	toSerialize["formType"] = o.FormType
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Indicators) {
		toSerialize["indicators"] = o.Indicators
	}
	if !IsNil(o.Interpretations) {
		toSerialize["interpretations"] = o.Interpretations
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LegendSet) {
		toSerialize["legendSet"] = o.LegendSet
	}
	if !IsNil(o.LegendSets) {
		toSerialize["legendSets"] = o.LegendSets
	}
	if !IsNil(o.Mobile) {
		toSerialize["mobile"] = o.Mobile
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NoValueRequiresComment) {
		toSerialize["noValueRequiresComment"] = o.NoValueRequiresComment
	}
	if !IsNil(o.NotificationRecipients) {
		toSerialize["notificationRecipients"] = o.NotificationRecipients
	}
	if !IsNil(o.NotifyCompletingUser) {
		toSerialize["notifyCompletingUser"] = o.NotifyCompletingUser
	}
	toSerialize["openFuturePeriods"] = o.OpenFuturePeriods
	toSerialize["openPeriodsAfterCoEndDate"] = o.OpenPeriodsAfterCoEndDate
	if !IsNil(o.OrganisationUnits) {
		toSerialize["organisationUnits"] = o.OrganisationUnits
	}
	if !IsNil(o.PeriodType) {
		toSerialize["periodType"] = o.PeriodType
	}
	if !IsNil(o.QueryMods) {
		toSerialize["queryMods"] = o.QueryMods
	}
	if !IsNil(o.RenderAsTabs) {
		toSerialize["renderAsTabs"] = o.RenderAsTabs
	}
	if !IsNil(o.RenderHorizontally) {
		toSerialize["renderHorizontally"] = o.RenderHorizontally
	}
	if !IsNil(o.Sections) {
		toSerialize["sections"] = o.Sections
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.SkipOffline) {
		toSerialize["skipOffline"] = o.SkipOffline
	}
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	toSerialize["timelyDays"] = o.TimelyDays
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.ValidCompleteOnly) {
		toSerialize["validCompleteOnly"] = o.ValidCompleteOnly
	}
	toSerialize["version"] = o.Version
	if !IsNil(o.Workflow) {
		toSerialize["workflow"] = o.Workflow
	}
	return toSerialize, nil
}

func (o *DataSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregationType",
		"expiryDays",
		"formType",
		"openFuturePeriods",
		"openPeriodsAfterCoEndDate",
		"timelyDays",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataSet := _DataSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataSet)

	if err != nil {
		return err
	}

	*o = DataSet(varDataSet)

	return err
}

type NullableDataSet struct {
	value *DataSet
	isSet bool
}

func (v NullableDataSet) Get() *DataSet {
	return v.value
}

func (v *NullableDataSet) Set(val *DataSet) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSet) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSet(val *DataSet) *NullableDataSet {
	return &NullableDataSet{value: val, isSet: true}
}

func (v NullableDataSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
