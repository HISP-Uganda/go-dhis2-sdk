/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TrackerImportError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackerImportError{}

// TrackerImportError struct for TrackerImportError
type TrackerImportError struct {
	Args        []string `json:"args"`
	ErrorCode   string   `json:"errorCode"`
	Message     string   `json:"message"`
	TrackerType string   `json:"trackerType"`
	Uid         string   `json:"uid"`
}

type _TrackerImportError TrackerImportError

// NewTrackerImportError instantiates a new TrackerImportError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackerImportError(args []string, errorCode string, message string, trackerType string, uid string) *TrackerImportError {
	this := TrackerImportError{}
	this.Args = args
	this.ErrorCode = errorCode
	this.Message = message
	this.TrackerType = trackerType
	this.Uid = uid
	return &this
}

// NewTrackerImportErrorWithDefaults instantiates a new TrackerImportError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackerImportErrorWithDefaults() *TrackerImportError {
	this := TrackerImportError{}
	return &this
}

// GetArgs returns the Args field value
func (o *TrackerImportError) GetArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Args
}

// GetArgsOk returns a tuple with the Args field value
// and a boolean to check if the value has been set.
func (o *TrackerImportError) GetArgsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Args, true
}

// SetArgs sets field value
func (o *TrackerImportError) SetArgs(v []string) {
	o.Args = v
}

// GetErrorCode returns the ErrorCode field value
func (o *TrackerImportError) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *TrackerImportError) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *TrackerImportError) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetMessage returns the Message field value
func (o *TrackerImportError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *TrackerImportError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *TrackerImportError) SetMessage(v string) {
	o.Message = v
}

// GetTrackerType returns the TrackerType field value
func (o *TrackerImportError) GetTrackerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrackerType
}

// GetTrackerTypeOk returns a tuple with the TrackerType field value
// and a boolean to check if the value has been set.
func (o *TrackerImportError) GetTrackerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackerType, true
}

// SetTrackerType sets field value
func (o *TrackerImportError) SetTrackerType(v string) {
	o.TrackerType = v
}

// GetUid returns the Uid field value
func (o *TrackerImportError) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *TrackerImportError) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *TrackerImportError) SetUid(v string) {
	o.Uid = v
}

func (o TrackerImportError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackerImportError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["args"] = o.Args
	toSerialize["errorCode"] = o.ErrorCode
	toSerialize["message"] = o.Message
	toSerialize["trackerType"] = o.TrackerType
	toSerialize["uid"] = o.Uid
	return toSerialize, nil
}

func (o *TrackerImportError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"args",
		"errorCode",
		"message",
		"trackerType",
		"uid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackerImportError := _TrackerImportError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackerImportError)

	if err != nil {
		return err
	}

	*o = TrackerImportError(varTrackerImportError)

	return err
}

type NullableTrackerImportError struct {
	value *TrackerImportError
	isSet bool
}

func (v NullableTrackerImportError) Get() *TrackerImportError {
	return v.value
}

func (v *NullableTrackerImportError) Set(val *TrackerImportError) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerImportError) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerImportError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerImportError(val *TrackerImportError) *NullableTrackerImportError {
	return &NullableTrackerImportError{value: val, isSet: true}
}

func (v NullableTrackerImportError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerImportError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
