/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// Transform the model 'Transform'
type Transform string

// List of Transform
const (
	TRANSFORM_AUTO         Transform = "AUTO"
	TRANSFORM_NONE         Transform = "NONE"
	TRANSFORM_IS_EMPTY     Transform = "IS_EMPTY"
	TRANSFORM_IS_NOT_EMPTY Transform = "IS_NOT_EMPTY"
	TRANSFORM_SIZE         Transform = "SIZE"
	TRANSFORM_MEMBER       Transform = "MEMBER"
	TRANSFORM_NOT_MEMBER   Transform = "NOT_MEMBER"
	TRANSFORM_IDS          Transform = "IDS"
	TRANSFORM_ID_OBJECTS   Transform = "ID_OBJECTS"
	TRANSFORM_PLUCK        Transform = "PLUCK"
	TRANSFORM_FROM         Transform = "FROM"
)

// All allowed values of Transform enum
var AllowedTransformEnumValues = []Transform{
	"AUTO",
	"NONE",
	"IS_EMPTY",
	"IS_NOT_EMPTY",
	"SIZE",
	"MEMBER",
	"NOT_MEMBER",
	"IDS",
	"ID_OBJECTS",
	"PLUCK",
	"FROM",
}

func (v *Transform) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Transform(value)
	for _, existing := range AllowedTransformEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Transform", value)
}

// NewTransformFromValue returns a pointer to a valid Transform
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransformFromValue(v string) (*Transform, error) {
	ev := Transform(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Transform: valid values are %v", v, AllowedTransformEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Transform) IsValid() bool {
	for _, existing := range AllowedTransformEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Transform value
func (v Transform) Ptr() *Transform {
	return &v
}

type NullableTransform struct {
	value *Transform
	isSet bool
}

func (v NullableTransform) Get() *Transform {
	return v.value
}

func (v *NullableTransform) Set(val *Transform) {
	v.value = val
	v.isSet = true
}

func (v NullableTransform) IsSet() bool {
	return v.isSet
}

func (v *NullableTransform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransform(val *Transform) *NullableTransform {
	return &NullableTransform{value: val, isSet: true}
}

func (v NullableTransform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
