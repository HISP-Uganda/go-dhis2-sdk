/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the FieldPathTransformer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldPathTransformer{}

// FieldPathTransformer struct for FieldPathTransformer
type FieldPathTransformer struct {
	Name       *string  `json:"name,omitempty"`
	Parameters []string `json:"parameters,omitempty"`
}

// NewFieldPathTransformer instantiates a new FieldPathTransformer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldPathTransformer() *FieldPathTransformer {
	this := FieldPathTransformer{}
	return &this
}

// NewFieldPathTransformerWithDefaults instantiates a new FieldPathTransformer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldPathTransformerWithDefaults() *FieldPathTransformer {
	this := FieldPathTransformer{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FieldPathTransformer) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldPathTransformer) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FieldPathTransformer) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FieldPathTransformer) SetName(v string) {
	o.Name = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *FieldPathTransformer) GetParameters() []string {
	if o == nil || IsNil(o.Parameters) {
		var ret []string
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldPathTransformer) GetParametersOk() ([]string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *FieldPathTransformer) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []string and assigns it to the Parameters field.
func (o *FieldPathTransformer) SetParameters(v []string) {
	o.Parameters = v
}

func (o FieldPathTransformer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldPathTransformer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableFieldPathTransformer struct {
	value *FieldPathTransformer
	isSet bool
}

func (v NullableFieldPathTransformer) Get() *FieldPathTransformer {
	return v.value
}

func (v *NullableFieldPathTransformer) Set(val *FieldPathTransformer) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldPathTransformer) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldPathTransformer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldPathTransformer(val *FieldPathTransformer) *NullableFieldPathTransformer {
	return &NullableFieldPathTransformer{value: val, isSet: true}
}

func (v NullableFieldPathTransformer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldPathTransformer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
