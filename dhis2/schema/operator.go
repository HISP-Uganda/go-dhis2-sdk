/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// Operator the model 'Operator'
type Operator string

// List of Operator
const (
	OPERATOR_EQUAL_TO                 Operator = "equal_to"
	OPERATOR_NOT_EQUAL_TO             Operator = "not_equal_to"
	OPERATOR_GREATER_THAN             Operator = "greater_than"
	OPERATOR_GREATER_THAN_OR_EQUAL_TO Operator = "greater_than_or_equal_to"
	OPERATOR_LESS_THAN                Operator = "less_than"
	OPERATOR_LESS_THAN_OR_EQUAL_TO    Operator = "less_than_or_equal_to"
	OPERATOR_COMPULSORY_PAIR          Operator = "compulsory_pair"
	OPERATOR_EXCLUSIVE_PAIR           Operator = "exclusive_pair"
)

// All allowed values of Operator enum
var AllowedOperatorEnumValues = []Operator{
	"equal_to",
	"not_equal_to",
	"greater_than",
	"greater_than_or_equal_to",
	"less_than",
	"less_than_or_equal_to",
	"compulsory_pair",
	"exclusive_pair",
}

func (v *Operator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Operator(value)
	for _, existing := range AllowedOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Operator", value)
}

// NewOperatorFromValue returns a pointer to a valid Operator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperatorFromValue(v string) (*Operator, error) {
	ev := Operator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Operator: valid values are %v", v, AllowedOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Operator) IsValid() bool {
	for _, existing := range AllowedOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Operator value
func (v Operator) Ptr() *Operator {
	return &v
}

type NullableOperator struct {
	value *Operator
	isSet bool
}

func (v NullableOperator) Get() *Operator {
	return v.value
}

func (v *NullableOperator) Set(val *Operator) {
	v.value = val
	v.isSet = true
}

func (v NullableOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperator(val *Operator) *NullableOperator {
	return &NullableOperator{value: val, isSet: true}
}

func (v NullableOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
