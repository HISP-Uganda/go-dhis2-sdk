/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// EndpointAction the model 'EndpointAction'
type EndpointAction string

// List of EndpointAction
const (
	ENDPOINTACTION_AGGREGATE EndpointAction = "AGGREGATE"
	ENDPOINTACTION_QUERY     EndpointAction = "QUERY"
	ENDPOINTACTION_OTHER     EndpointAction = "OTHER"
)

// All allowed values of EndpointAction enum
var AllowedEndpointActionEnumValues = []EndpointAction{
	"AGGREGATE",
	"QUERY",
	"OTHER",
}

func (v *EndpointAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointAction(value)
	for _, existing := range AllowedEndpointActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointAction", value)
}

// NewEndpointActionFromValue returns a pointer to a valid EndpointAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointActionFromValue(v string) (*EndpointAction, error) {
	ev := EndpointAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointAction: valid values are %v", v, AllowedEndpointActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointAction) IsValid() bool {
	for _, existing := range AllowedEndpointActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointAction value
func (v EndpointAction) Ptr() *EndpointAction {
	return &v
}

type NullableEndpointAction struct {
	value *EndpointAction
	isSet bool
}

func (v NullableEndpointAction) Get() *EndpointAction {
	return v.value
}

func (v *NullableEndpointAction) Set(val *EndpointAction) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointAction) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointAction(val *EndpointAction) *NullableEndpointAction {
	return &NullableEndpointAction{value: val, isSet: true}
}

func (v NullableEndpointAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
