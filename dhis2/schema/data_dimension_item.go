/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DataDimensionItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataDimensionItem{}

// DataDimensionItem struct for DataDimensionItem
type DataDimensionItem struct {
	DataDimensionItemType      DataDimensionItemType `json:"dataDimensionItemType"`
	DataElementOperand         *BaseNameableObject   `json:"dataElementOperand,omitempty"`
	ExpressionDimensionItem    *BaseNameableObject   `json:"expressionDimensionItem,omitempty"`
	Indicator                  *BaseNameableObject   `json:"indicator,omitempty"`
	ProgramAttribute           *BaseNameableObject   `json:"programAttribute,omitempty"`
	ProgramAttributeOption     *BaseNameableObject   `json:"programAttributeOption,omitempty"`
	ProgramDataElement         *BaseNameableObject   `json:"programDataElement,omitempty"`
	ProgramDataElementOption   *BaseNameableObject   `json:"programDataElementOption,omitempty"`
	ProgramIndicator           *BaseNameableObject   `json:"programIndicator,omitempty"`
	ReportingRate              *BaseNameableObject   `json:"reportingRate,omitempty"`
	SubexpressionDimensionItem *BaseNameableObject   `json:"subexpressionDimensionItem,omitempty"`
}

type _DataDimensionItem DataDimensionItem

// NewDataDimensionItem instantiates a new DataDimensionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataDimensionItem(dataDimensionItemType DataDimensionItemType) *DataDimensionItem {
	this := DataDimensionItem{}
	this.DataDimensionItemType = dataDimensionItemType
	return &this
}

// NewDataDimensionItemWithDefaults instantiates a new DataDimensionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataDimensionItemWithDefaults() *DataDimensionItem {
	this := DataDimensionItem{}
	return &this
}

// GetDataDimensionItemType returns the DataDimensionItemType field value
func (o *DataDimensionItem) GetDataDimensionItemType() DataDimensionItemType {
	if o == nil {
		var ret DataDimensionItemType
		return ret
	}

	return o.DataDimensionItemType
}

// GetDataDimensionItemTypeOk returns a tuple with the DataDimensionItemType field value
// and a boolean to check if the value has been set.
func (o *DataDimensionItem) GetDataDimensionItemTypeOk() (*DataDimensionItemType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataDimensionItemType, true
}

// SetDataDimensionItemType sets field value
func (o *DataDimensionItem) SetDataDimensionItemType(v DataDimensionItemType) {
	o.DataDimensionItemType = v
}

// GetDataElementOperand returns the DataElementOperand field value if set, zero value otherwise.
func (o *DataDimensionItem) GetDataElementOperand() BaseNameableObject {
	if o == nil || IsNil(o.DataElementOperand) {
		var ret BaseNameableObject
		return ret
	}
	return *o.DataElementOperand
}

// GetDataElementOperandOk returns a tuple with the DataElementOperand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDimensionItem) GetDataElementOperandOk() (*BaseNameableObject, bool) {
	if o == nil || IsNil(o.DataElementOperand) {
		return nil, false
	}
	return o.DataElementOperand, true
}

// HasDataElementOperand returns a boolean if a field has been set.
func (o *DataDimensionItem) HasDataElementOperand() bool {
	if o != nil && !IsNil(o.DataElementOperand) {
		return true
	}

	return false
}

// SetDataElementOperand gets a reference to the given BaseNameableObject and assigns it to the DataElementOperand field.
func (o *DataDimensionItem) SetDataElementOperand(v BaseNameableObject) {
	o.DataElementOperand = &v
}

// GetExpressionDimensionItem returns the ExpressionDimensionItem field value if set, zero value otherwise.
func (o *DataDimensionItem) GetExpressionDimensionItem() BaseNameableObject {
	if o == nil || IsNil(o.ExpressionDimensionItem) {
		var ret BaseNameableObject
		return ret
	}
	return *o.ExpressionDimensionItem
}

// GetExpressionDimensionItemOk returns a tuple with the ExpressionDimensionItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDimensionItem) GetExpressionDimensionItemOk() (*BaseNameableObject, bool) {
	if o == nil || IsNil(o.ExpressionDimensionItem) {
		return nil, false
	}
	return o.ExpressionDimensionItem, true
}

// HasExpressionDimensionItem returns a boolean if a field has been set.
func (o *DataDimensionItem) HasExpressionDimensionItem() bool {
	if o != nil && !IsNil(o.ExpressionDimensionItem) {
		return true
	}

	return false
}

// SetExpressionDimensionItem gets a reference to the given BaseNameableObject and assigns it to the ExpressionDimensionItem field.
func (o *DataDimensionItem) SetExpressionDimensionItem(v BaseNameableObject) {
	o.ExpressionDimensionItem = &v
}

// GetIndicator returns the Indicator field value if set, zero value otherwise.
func (o *DataDimensionItem) GetIndicator() BaseNameableObject {
	if o == nil || IsNil(o.Indicator) {
		var ret BaseNameableObject
		return ret
	}
	return *o.Indicator
}

// GetIndicatorOk returns a tuple with the Indicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDimensionItem) GetIndicatorOk() (*BaseNameableObject, bool) {
	if o == nil || IsNil(o.Indicator) {
		return nil, false
	}
	return o.Indicator, true
}

// HasIndicator returns a boolean if a field has been set.
func (o *DataDimensionItem) HasIndicator() bool {
	if o != nil && !IsNil(o.Indicator) {
		return true
	}

	return false
}

// SetIndicator gets a reference to the given BaseNameableObject and assigns it to the Indicator field.
func (o *DataDimensionItem) SetIndicator(v BaseNameableObject) {
	o.Indicator = &v
}

// GetProgramAttribute returns the ProgramAttribute field value if set, zero value otherwise.
func (o *DataDimensionItem) GetProgramAttribute() BaseNameableObject {
	if o == nil || IsNil(o.ProgramAttribute) {
		var ret BaseNameableObject
		return ret
	}
	return *o.ProgramAttribute
}

// GetProgramAttributeOk returns a tuple with the ProgramAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDimensionItem) GetProgramAttributeOk() (*BaseNameableObject, bool) {
	if o == nil || IsNil(o.ProgramAttribute) {
		return nil, false
	}
	return o.ProgramAttribute, true
}

// HasProgramAttribute returns a boolean if a field has been set.
func (o *DataDimensionItem) HasProgramAttribute() bool {
	if o != nil && !IsNil(o.ProgramAttribute) {
		return true
	}

	return false
}

// SetProgramAttribute gets a reference to the given BaseNameableObject and assigns it to the ProgramAttribute field.
func (o *DataDimensionItem) SetProgramAttribute(v BaseNameableObject) {
	o.ProgramAttribute = &v
}

// GetProgramAttributeOption returns the ProgramAttributeOption field value if set, zero value otherwise.
func (o *DataDimensionItem) GetProgramAttributeOption() BaseNameableObject {
	if o == nil || IsNil(o.ProgramAttributeOption) {
		var ret BaseNameableObject
		return ret
	}
	return *o.ProgramAttributeOption
}

// GetProgramAttributeOptionOk returns a tuple with the ProgramAttributeOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDimensionItem) GetProgramAttributeOptionOk() (*BaseNameableObject, bool) {
	if o == nil || IsNil(o.ProgramAttributeOption) {
		return nil, false
	}
	return o.ProgramAttributeOption, true
}

// HasProgramAttributeOption returns a boolean if a field has been set.
func (o *DataDimensionItem) HasProgramAttributeOption() bool {
	if o != nil && !IsNil(o.ProgramAttributeOption) {
		return true
	}

	return false
}

// SetProgramAttributeOption gets a reference to the given BaseNameableObject and assigns it to the ProgramAttributeOption field.
func (o *DataDimensionItem) SetProgramAttributeOption(v BaseNameableObject) {
	o.ProgramAttributeOption = &v
}

// GetProgramDataElement returns the ProgramDataElement field value if set, zero value otherwise.
func (o *DataDimensionItem) GetProgramDataElement() BaseNameableObject {
	if o == nil || IsNil(o.ProgramDataElement) {
		var ret BaseNameableObject
		return ret
	}
	return *o.ProgramDataElement
}

// GetProgramDataElementOk returns a tuple with the ProgramDataElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDimensionItem) GetProgramDataElementOk() (*BaseNameableObject, bool) {
	if o == nil || IsNil(o.ProgramDataElement) {
		return nil, false
	}
	return o.ProgramDataElement, true
}

// HasProgramDataElement returns a boolean if a field has been set.
func (o *DataDimensionItem) HasProgramDataElement() bool {
	if o != nil && !IsNil(o.ProgramDataElement) {
		return true
	}

	return false
}

// SetProgramDataElement gets a reference to the given BaseNameableObject and assigns it to the ProgramDataElement field.
func (o *DataDimensionItem) SetProgramDataElement(v BaseNameableObject) {
	o.ProgramDataElement = &v
}

// GetProgramDataElementOption returns the ProgramDataElementOption field value if set, zero value otherwise.
func (o *DataDimensionItem) GetProgramDataElementOption() BaseNameableObject {
	if o == nil || IsNil(o.ProgramDataElementOption) {
		var ret BaseNameableObject
		return ret
	}
	return *o.ProgramDataElementOption
}

// GetProgramDataElementOptionOk returns a tuple with the ProgramDataElementOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDimensionItem) GetProgramDataElementOptionOk() (*BaseNameableObject, bool) {
	if o == nil || IsNil(o.ProgramDataElementOption) {
		return nil, false
	}
	return o.ProgramDataElementOption, true
}

// HasProgramDataElementOption returns a boolean if a field has been set.
func (o *DataDimensionItem) HasProgramDataElementOption() bool {
	if o != nil && !IsNil(o.ProgramDataElementOption) {
		return true
	}

	return false
}

// SetProgramDataElementOption gets a reference to the given BaseNameableObject and assigns it to the ProgramDataElementOption field.
func (o *DataDimensionItem) SetProgramDataElementOption(v BaseNameableObject) {
	o.ProgramDataElementOption = &v
}

// GetProgramIndicator returns the ProgramIndicator field value if set, zero value otherwise.
func (o *DataDimensionItem) GetProgramIndicator() BaseNameableObject {
	if o == nil || IsNil(o.ProgramIndicator) {
		var ret BaseNameableObject
		return ret
	}
	return *o.ProgramIndicator
}

// GetProgramIndicatorOk returns a tuple with the ProgramIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDimensionItem) GetProgramIndicatorOk() (*BaseNameableObject, bool) {
	if o == nil || IsNil(o.ProgramIndicator) {
		return nil, false
	}
	return o.ProgramIndicator, true
}

// HasProgramIndicator returns a boolean if a field has been set.
func (o *DataDimensionItem) HasProgramIndicator() bool {
	if o != nil && !IsNil(o.ProgramIndicator) {
		return true
	}

	return false
}

// SetProgramIndicator gets a reference to the given BaseNameableObject and assigns it to the ProgramIndicator field.
func (o *DataDimensionItem) SetProgramIndicator(v BaseNameableObject) {
	o.ProgramIndicator = &v
}

// GetReportingRate returns the ReportingRate field value if set, zero value otherwise.
func (o *DataDimensionItem) GetReportingRate() BaseNameableObject {
	if o == nil || IsNil(o.ReportingRate) {
		var ret BaseNameableObject
		return ret
	}
	return *o.ReportingRate
}

// GetReportingRateOk returns a tuple with the ReportingRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDimensionItem) GetReportingRateOk() (*BaseNameableObject, bool) {
	if o == nil || IsNil(o.ReportingRate) {
		return nil, false
	}
	return o.ReportingRate, true
}

// HasReportingRate returns a boolean if a field has been set.
func (o *DataDimensionItem) HasReportingRate() bool {
	if o != nil && !IsNil(o.ReportingRate) {
		return true
	}

	return false
}

// SetReportingRate gets a reference to the given BaseNameableObject and assigns it to the ReportingRate field.
func (o *DataDimensionItem) SetReportingRate(v BaseNameableObject) {
	o.ReportingRate = &v
}

// GetSubexpressionDimensionItem returns the SubexpressionDimensionItem field value if set, zero value otherwise.
func (o *DataDimensionItem) GetSubexpressionDimensionItem() BaseNameableObject {
	if o == nil || IsNil(o.SubexpressionDimensionItem) {
		var ret BaseNameableObject
		return ret
	}
	return *o.SubexpressionDimensionItem
}

// GetSubexpressionDimensionItemOk returns a tuple with the SubexpressionDimensionItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataDimensionItem) GetSubexpressionDimensionItemOk() (*BaseNameableObject, bool) {
	if o == nil || IsNil(o.SubexpressionDimensionItem) {
		return nil, false
	}
	return o.SubexpressionDimensionItem, true
}

// HasSubexpressionDimensionItem returns a boolean if a field has been set.
func (o *DataDimensionItem) HasSubexpressionDimensionItem() bool {
	if o != nil && !IsNil(o.SubexpressionDimensionItem) {
		return true
	}

	return false
}

// SetSubexpressionDimensionItem gets a reference to the given BaseNameableObject and assigns it to the SubexpressionDimensionItem field.
func (o *DataDimensionItem) SetSubexpressionDimensionItem(v BaseNameableObject) {
	o.SubexpressionDimensionItem = &v
}

func (o DataDimensionItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataDimensionItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataDimensionItemType"] = o.DataDimensionItemType
	if !IsNil(o.DataElementOperand) {
		toSerialize["dataElementOperand"] = o.DataElementOperand
	}
	if !IsNil(o.ExpressionDimensionItem) {
		toSerialize["expressionDimensionItem"] = o.ExpressionDimensionItem
	}
	if !IsNil(o.Indicator) {
		toSerialize["indicator"] = o.Indicator
	}
	if !IsNil(o.ProgramAttribute) {
		toSerialize["programAttribute"] = o.ProgramAttribute
	}
	if !IsNil(o.ProgramAttributeOption) {
		toSerialize["programAttributeOption"] = o.ProgramAttributeOption
	}
	if !IsNil(o.ProgramDataElement) {
		toSerialize["programDataElement"] = o.ProgramDataElement
	}
	if !IsNil(o.ProgramDataElementOption) {
		toSerialize["programDataElementOption"] = o.ProgramDataElementOption
	}
	if !IsNil(o.ProgramIndicator) {
		toSerialize["programIndicator"] = o.ProgramIndicator
	}
	if !IsNil(o.ReportingRate) {
		toSerialize["reportingRate"] = o.ReportingRate
	}
	if !IsNil(o.SubexpressionDimensionItem) {
		toSerialize["subexpressionDimensionItem"] = o.SubexpressionDimensionItem
	}
	return toSerialize, nil
}

func (o *DataDimensionItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataDimensionItemType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataDimensionItem := _DataDimensionItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataDimensionItem)

	if err != nil {
		return err
	}

	*o = DataDimensionItem(varDataDimensionItem)

	return err
}

type NullableDataDimensionItem struct {
	value *DataDimensionItem
	isSet bool
}

func (v NullableDataDimensionItem) Get() *DataDimensionItem {
	return v.value
}

func (v *NullableDataDimensionItem) Set(val *DataDimensionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDataDimensionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDataDimensionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataDimensionItem(val *DataDimensionItem) *NullableDataDimensionItem {
	return &NullableDataDimensionItem{value: val, isSet: true}
}

func (v NullableDataDimensionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataDimensionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
