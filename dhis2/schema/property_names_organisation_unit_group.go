/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesOrganisationUnitGroup the model 'PropertyNamesOrganisationUnitGroup'
type PropertyNamesOrganisationUnitGroup string

// List of PropertyNames_OrganisationUnitGroup
const (
	PROPERTYNAMESORGANISATIONUNITGROUP_ACCESS              PropertyNamesOrganisationUnitGroup = "access"
	PROPERTYNAMESORGANISATIONUNITGROUP_AGGREGATION_TYPE    PropertyNamesOrganisationUnitGroup = "aggregationType"
	PROPERTYNAMESORGANISATIONUNITGROUP_ATTRIBUTE_VALUES    PropertyNamesOrganisationUnitGroup = "attributeValues"
	PROPERTYNAMESORGANISATIONUNITGROUP_CODE                PropertyNamesOrganisationUnitGroup = "code"
	PROPERTYNAMESORGANISATIONUNITGROUP_COLOR               PropertyNamesOrganisationUnitGroup = "color"
	PROPERTYNAMESORGANISATIONUNITGROUP_CREATED             PropertyNamesOrganisationUnitGroup = "created"
	PROPERTYNAMESORGANISATIONUNITGROUP_CREATED_BY          PropertyNamesOrganisationUnitGroup = "createdBy"
	PROPERTYNAMESORGANISATIONUNITGROUP_DESCRIPTION         PropertyNamesOrganisationUnitGroup = "description"
	PROPERTYNAMESORGANISATIONUNITGROUP_DIMENSION_ITEM      PropertyNamesOrganisationUnitGroup = "dimensionItem"
	PROPERTYNAMESORGANISATIONUNITGROUP_DISPLAY_DESCRIPTION PropertyNamesOrganisationUnitGroup = "displayDescription"
	PROPERTYNAMESORGANISATIONUNITGROUP_DISPLAY_FORM_NAME   PropertyNamesOrganisationUnitGroup = "displayFormName"
	PROPERTYNAMESORGANISATIONUNITGROUP_DISPLAY_NAME        PropertyNamesOrganisationUnitGroup = "displayName"
	PROPERTYNAMESORGANISATIONUNITGROUP_DISPLAY_SHORT_NAME  PropertyNamesOrganisationUnitGroup = "displayShortName"
	PROPERTYNAMESORGANISATIONUNITGROUP_EXTERNAL_ACCESS     PropertyNamesOrganisationUnitGroup = "externalAccess"
	PROPERTYNAMESORGANISATIONUNITGROUP_FAVORITE            PropertyNamesOrganisationUnitGroup = "favorite"
	PROPERTYNAMESORGANISATIONUNITGROUP_FAVORITES           PropertyNamesOrganisationUnitGroup = "favorites"
	PROPERTYNAMESORGANISATIONUNITGROUP_FEATURE_TYPE        PropertyNamesOrganisationUnitGroup = "featureType"
	PROPERTYNAMESORGANISATIONUNITGROUP_FORM_NAME           PropertyNamesOrganisationUnitGroup = "formName"
	PROPERTYNAMESORGANISATIONUNITGROUP_GEOMETRY            PropertyNamesOrganisationUnitGroup = "geometry"
	PROPERTYNAMESORGANISATIONUNITGROUP_GROUP_SETS          PropertyNamesOrganisationUnitGroup = "groupSets"
	PROPERTYNAMESORGANISATIONUNITGROUP_HREF                PropertyNamesOrganisationUnitGroup = "href"
	PROPERTYNAMESORGANISATIONUNITGROUP_ID                  PropertyNamesOrganisationUnitGroup = "id"
	PROPERTYNAMESORGANISATIONUNITGROUP_LAST_UPDATED        PropertyNamesOrganisationUnitGroup = "lastUpdated"
	PROPERTYNAMESORGANISATIONUNITGROUP_LAST_UPDATED_BY     PropertyNamesOrganisationUnitGroup = "lastUpdatedBy"
	PROPERTYNAMESORGANISATIONUNITGROUP_LEGEND_SET          PropertyNamesOrganisationUnitGroup = "legendSet"
	PROPERTYNAMESORGANISATIONUNITGROUP_LEGEND_SETS         PropertyNamesOrganisationUnitGroup = "legendSets"
	PROPERTYNAMESORGANISATIONUNITGROUP_NAME                PropertyNamesOrganisationUnitGroup = "name"
	PROPERTYNAMESORGANISATIONUNITGROUP_ORGANISATION_UNITS  PropertyNamesOrganisationUnitGroup = "organisationUnits"
	PROPERTYNAMESORGANISATIONUNITGROUP_PUBLIC_ACCESS       PropertyNamesOrganisationUnitGroup = "publicAccess"
	PROPERTYNAMESORGANISATIONUNITGROUP_QUERY_MODS          PropertyNamesOrganisationUnitGroup = "queryMods"
	PROPERTYNAMESORGANISATIONUNITGROUP_SHARING             PropertyNamesOrganisationUnitGroup = "sharing"
	PROPERTYNAMESORGANISATIONUNITGROUP_SHORT_NAME          PropertyNamesOrganisationUnitGroup = "shortName"
	PROPERTYNAMESORGANISATIONUNITGROUP_SYMBOL              PropertyNamesOrganisationUnitGroup = "symbol"
	PROPERTYNAMESORGANISATIONUNITGROUP_TRANSLATIONS        PropertyNamesOrganisationUnitGroup = "translations"
	PROPERTYNAMESORGANISATIONUNITGROUP_USER                PropertyNamesOrganisationUnitGroup = "user"
	PROPERTYNAMESORGANISATIONUNITGROUP_USER_ACCESSES       PropertyNamesOrganisationUnitGroup = "userAccesses"
	PROPERTYNAMESORGANISATIONUNITGROUP_USER_GROUP_ACCESSES PropertyNamesOrganisationUnitGroup = "userGroupAccesses"
)

// All allowed values of PropertyNamesOrganisationUnitGroup enum
var AllowedPropertyNamesOrganisationUnitGroupEnumValues = []PropertyNamesOrganisationUnitGroup{
	"access",
	"aggregationType",
	"attributeValues",
	"code",
	"color",
	"created",
	"createdBy",
	"description",
	"dimensionItem",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"externalAccess",
	"favorite",
	"favorites",
	"featureType",
	"formName",
	"geometry",
	"groupSets",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"legendSet",
	"legendSets",
	"name",
	"organisationUnits",
	"publicAccess",
	"queryMods",
	"sharing",
	"shortName",
	"symbol",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesOrganisationUnitGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesOrganisationUnitGroup(value)
	for _, existing := range AllowedPropertyNamesOrganisationUnitGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesOrganisationUnitGroup", value)
}

// NewPropertyNamesOrganisationUnitGroupFromValue returns a pointer to a valid PropertyNamesOrganisationUnitGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesOrganisationUnitGroupFromValue(v string) (*PropertyNamesOrganisationUnitGroup, error) {
	ev := PropertyNamesOrganisationUnitGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesOrganisationUnitGroup: valid values are %v", v, AllowedPropertyNamesOrganisationUnitGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesOrganisationUnitGroup) IsValid() bool {
	for _, existing := range AllowedPropertyNamesOrganisationUnitGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_OrganisationUnitGroup value
func (v PropertyNamesOrganisationUnitGroup) Ptr() *PropertyNamesOrganisationUnitGroup {
	return &v
}

type NullablePropertyNamesOrganisationUnitGroup struct {
	value *PropertyNamesOrganisationUnitGroup
	isSet bool
}

func (v NullablePropertyNamesOrganisationUnitGroup) Get() *PropertyNamesOrganisationUnitGroup {
	return v.value
}

func (v *NullablePropertyNamesOrganisationUnitGroup) Set(val *PropertyNamesOrganisationUnitGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesOrganisationUnitGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesOrganisationUnitGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesOrganisationUnitGroup(val *PropertyNamesOrganisationUnitGroup) *NullablePropertyNamesOrganisationUnitGroup {
	return &NullablePropertyNamesOrganisationUnitGroup{value: val, isSet: true}
}

func (v NullablePropertyNamesOrganisationUnitGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesOrganisationUnitGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
