/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DataElementGroupSetPropertyNames the model 'DataElementGroupSetPropertyNames'
type DataElementGroupSetPropertyNames string

// List of DataElementGroupSetPropertyNames
const (
	DATAELEMENTGROUPSETPROPERTYNAMES_ACCESS                  DataElementGroupSetPropertyNames = "access"
	DATAELEMENTGROUPSETPROPERTYNAMES_AGGREGATION_TYPE        DataElementGroupSetPropertyNames = "aggregationType"
	DATAELEMENTGROUPSETPROPERTYNAMES_ALL_ITEMS               DataElementGroupSetPropertyNames = "allItems"
	DATAELEMENTGROUPSETPROPERTYNAMES_ATTRIBUTE_VALUES        DataElementGroupSetPropertyNames = "attributeValues"
	DATAELEMENTGROUPSETPROPERTYNAMES_CODE                    DataElementGroupSetPropertyNames = "code"
	DATAELEMENTGROUPSETPROPERTYNAMES_COMPULSORY              DataElementGroupSetPropertyNames = "compulsory"
	DATAELEMENTGROUPSETPROPERTYNAMES_CREATED                 DataElementGroupSetPropertyNames = "created"
	DATAELEMENTGROUPSETPROPERTYNAMES_CREATED_BY              DataElementGroupSetPropertyNames = "createdBy"
	DATAELEMENTGROUPSETPROPERTYNAMES_DATA_DIMENSION          DataElementGroupSetPropertyNames = "dataDimension"
	DATAELEMENTGROUPSETPROPERTYNAMES_DATA_DIMENSION_TYPE     DataElementGroupSetPropertyNames = "dataDimensionType"
	DATAELEMENTGROUPSETPROPERTYNAMES_DATA_ELEMENT_GROUPS     DataElementGroupSetPropertyNames = "dataElementGroups"
	DATAELEMENTGROUPSETPROPERTYNAMES_DESCRIPTION             DataElementGroupSetPropertyNames = "description"
	DATAELEMENTGROUPSETPROPERTYNAMES_DIMENSION               DataElementGroupSetPropertyNames = "dimension"
	DATAELEMENTGROUPSETPROPERTYNAMES_DIMENSION_ITEM_KEYWORDS DataElementGroupSetPropertyNames = "dimensionItemKeywords"
	DATAELEMENTGROUPSETPROPERTYNAMES_DISPLAY_DESCRIPTION     DataElementGroupSetPropertyNames = "displayDescription"
	DATAELEMENTGROUPSETPROPERTYNAMES_DISPLAY_FORM_NAME       DataElementGroupSetPropertyNames = "displayFormName"
	DATAELEMENTGROUPSETPROPERTYNAMES_DISPLAY_NAME            DataElementGroupSetPropertyNames = "displayName"
	DATAELEMENTGROUPSETPROPERTYNAMES_DISPLAY_SHORT_NAME      DataElementGroupSetPropertyNames = "displayShortName"
	DATAELEMENTGROUPSETPROPERTYNAMES_FAVORITE                DataElementGroupSetPropertyNames = "favorite"
	DATAELEMENTGROUPSETPROPERTYNAMES_FAVORITES               DataElementGroupSetPropertyNames = "favorites"
	DATAELEMENTGROUPSETPROPERTYNAMES_FILTER                  DataElementGroupSetPropertyNames = "filter"
	DATAELEMENTGROUPSETPROPERTYNAMES_FORM_NAME               DataElementGroupSetPropertyNames = "formName"
	DATAELEMENTGROUPSETPROPERTYNAMES_HREF                    DataElementGroupSetPropertyNames = "href"
	DATAELEMENTGROUPSETPROPERTYNAMES_ID                      DataElementGroupSetPropertyNames = "id"
	DATAELEMENTGROUPSETPROPERTYNAMES_ITEMS                   DataElementGroupSetPropertyNames = "items"
	DATAELEMENTGROUPSETPROPERTYNAMES_LAST_UPDATED            DataElementGroupSetPropertyNames = "lastUpdated"
	DATAELEMENTGROUPSETPROPERTYNAMES_LAST_UPDATED_BY         DataElementGroupSetPropertyNames = "lastUpdatedBy"
	DATAELEMENTGROUPSETPROPERTYNAMES_LEGEND_SET              DataElementGroupSetPropertyNames = "legendSet"
	DATAELEMENTGROUPSETPROPERTYNAMES_NAME                    DataElementGroupSetPropertyNames = "name"
	DATAELEMENTGROUPSETPROPERTYNAMES_OPTION_SET              DataElementGroupSetPropertyNames = "optionSet"
	DATAELEMENTGROUPSETPROPERTYNAMES_PROGRAM                 DataElementGroupSetPropertyNames = "program"
	DATAELEMENTGROUPSETPROPERTYNAMES_PROGRAM_STAGE           DataElementGroupSetPropertyNames = "programStage"
	DATAELEMENTGROUPSETPROPERTYNAMES_REPETITION              DataElementGroupSetPropertyNames = "repetition"
	DATAELEMENTGROUPSETPROPERTYNAMES_SHARING                 DataElementGroupSetPropertyNames = "sharing"
	DATAELEMENTGROUPSETPROPERTYNAMES_SHORT_NAME              DataElementGroupSetPropertyNames = "shortName"
	DATAELEMENTGROUPSETPROPERTYNAMES_TRANSLATIONS            DataElementGroupSetPropertyNames = "translations"
	DATAELEMENTGROUPSETPROPERTYNAMES_VALUE_TYPE              DataElementGroupSetPropertyNames = "valueType"
)

// All allowed values of DataElementGroupSetPropertyNames enum
var AllowedDataElementGroupSetPropertyNamesEnumValues = []DataElementGroupSetPropertyNames{
	"access",
	"aggregationType",
	"allItems",
	"attributeValues",
	"code",
	"compulsory",
	"created",
	"createdBy",
	"dataDimension",
	"dataDimensionType",
	"dataElementGroups",
	"description",
	"dimension",
	"dimensionItemKeywords",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"favorite",
	"favorites",
	"filter",
	"formName",
	"href",
	"id",
	"items",
	"lastUpdated",
	"lastUpdatedBy",
	"legendSet",
	"name",
	"optionSet",
	"program",
	"programStage",
	"repetition",
	"sharing",
	"shortName",
	"translations",
	"valueType",
}

func (v *DataElementGroupSetPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataElementGroupSetPropertyNames(value)
	for _, existing := range AllowedDataElementGroupSetPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataElementGroupSetPropertyNames", value)
}

// NewDataElementGroupSetPropertyNamesFromValue returns a pointer to a valid DataElementGroupSetPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataElementGroupSetPropertyNamesFromValue(v string) (*DataElementGroupSetPropertyNames, error) {
	ev := DataElementGroupSetPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataElementGroupSetPropertyNames: valid values are %v", v, AllowedDataElementGroupSetPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataElementGroupSetPropertyNames) IsValid() bool {
	for _, existing := range AllowedDataElementGroupSetPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataElementGroupSetPropertyNames value
func (v DataElementGroupSetPropertyNames) Ptr() *DataElementGroupSetPropertyNames {
	return &v
}

type NullableDataElementGroupSetPropertyNames struct {
	value *DataElementGroupSetPropertyNames
	isSet bool
}

func (v NullableDataElementGroupSetPropertyNames) Get() *DataElementGroupSetPropertyNames {
	return v.value
}

func (v *NullableDataElementGroupSetPropertyNames) Set(val *DataElementGroupSetPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableDataElementGroupSetPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableDataElementGroupSetPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataElementGroupSetPropertyNames(val *DataElementGroupSetPropertyNames) *NullableDataElementGroupSetPropertyNames {
	return &NullableDataElementGroupSetPropertyNames{value: val, isSet: true}
}

func (v NullableDataElementGroupSetPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataElementGroupSetPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
