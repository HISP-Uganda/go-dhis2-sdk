/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// UserOrgUnitType the model 'UserOrgUnitType'
type UserOrgUnitType string

// List of UserOrgUnitType
const (
	USERORGUNITTYPE_DATA_CAPTURE UserOrgUnitType = "DATA_CAPTURE"
	USERORGUNITTYPE_DATA_OUTPUT  UserOrgUnitType = "DATA_OUTPUT"
	USERORGUNITTYPE_TEI_SEARCH   UserOrgUnitType = "TEI_SEARCH"
)

// All allowed values of UserOrgUnitType enum
var AllowedUserOrgUnitTypeEnumValues = []UserOrgUnitType{
	"DATA_CAPTURE",
	"DATA_OUTPUT",
	"TEI_SEARCH",
}

func (v *UserOrgUnitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserOrgUnitType(value)
	for _, existing := range AllowedUserOrgUnitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserOrgUnitType", value)
}

// NewUserOrgUnitTypeFromValue returns a pointer to a valid UserOrgUnitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserOrgUnitTypeFromValue(v string) (*UserOrgUnitType, error) {
	ev := UserOrgUnitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserOrgUnitType: valid values are %v", v, AllowedUserOrgUnitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserOrgUnitType) IsValid() bool {
	for _, existing := range AllowedUserOrgUnitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserOrgUnitType value
func (v UserOrgUnitType) Ptr() *UserOrgUnitType {
	return &v
}

type NullableUserOrgUnitType struct {
	value *UserOrgUnitType
	isSet bool
}

func (v NullableUserOrgUnitType) Get() *UserOrgUnitType {
	return v.value
}

func (v *NullableUserOrgUnitType) Set(val *UserOrgUnitType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserOrgUnitType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserOrgUnitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserOrgUnitType(val *UserOrgUnitType) *NullableUserOrgUnitType {
	return &NullableUserOrgUnitType{value: val, isSet: true}
}

func (v NullableUserOrgUnitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserOrgUnitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
