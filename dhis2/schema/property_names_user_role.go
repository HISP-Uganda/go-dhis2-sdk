/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesUserRole the model 'PropertyNamesUserRole'
type PropertyNamesUserRole string

// List of PropertyNames_UserRole
const (
	PROPERTYNAMESUSERROLE_ACCESS              PropertyNamesUserRole = "access"
	PROPERTYNAMESUSERROLE_ATTRIBUTE_VALUES    PropertyNamesUserRole = "attributeValues"
	PROPERTYNAMESUSERROLE_AUTHORITIES         PropertyNamesUserRole = "authorities"
	PROPERTYNAMESUSERROLE_CODE                PropertyNamesUserRole = "code"
	PROPERTYNAMESUSERROLE_CREATED             PropertyNamesUserRole = "created"
	PROPERTYNAMESUSERROLE_CREATED_BY          PropertyNamesUserRole = "createdBy"
	PROPERTYNAMESUSERROLE_DESCRIPTION         PropertyNamesUserRole = "description"
	PROPERTYNAMESUSERROLE_DISPLAY_NAME        PropertyNamesUserRole = "displayName"
	PROPERTYNAMESUSERROLE_EXTERNAL_ACCESS     PropertyNamesUserRole = "externalAccess"
	PROPERTYNAMESUSERROLE_FAVORITE            PropertyNamesUserRole = "favorite"
	PROPERTYNAMESUSERROLE_FAVORITES           PropertyNamesUserRole = "favorites"
	PROPERTYNAMESUSERROLE_HREF                PropertyNamesUserRole = "href"
	PROPERTYNAMESUSERROLE_ID                  PropertyNamesUserRole = "id"
	PROPERTYNAMESUSERROLE_LAST_UPDATED        PropertyNamesUserRole = "lastUpdated"
	PROPERTYNAMESUSERROLE_LAST_UPDATED_BY     PropertyNamesUserRole = "lastUpdatedBy"
	PROPERTYNAMESUSERROLE_NAME                PropertyNamesUserRole = "name"
	PROPERTYNAMESUSERROLE_PUBLIC_ACCESS       PropertyNamesUserRole = "publicAccess"
	PROPERTYNAMESUSERROLE_RESTRICTIONS        PropertyNamesUserRole = "restrictions"
	PROPERTYNAMESUSERROLE_SHARING             PropertyNamesUserRole = "sharing"
	PROPERTYNAMESUSERROLE_TRANSLATIONS        PropertyNamesUserRole = "translations"
	PROPERTYNAMESUSERROLE_USER                PropertyNamesUserRole = "user"
	PROPERTYNAMESUSERROLE_USER_ACCESSES       PropertyNamesUserRole = "userAccesses"
	PROPERTYNAMESUSERROLE_USER_GROUP_ACCESSES PropertyNamesUserRole = "userGroupAccesses"
	PROPERTYNAMESUSERROLE_USERS               PropertyNamesUserRole = "users"
)

// All allowed values of PropertyNamesUserRole enum
var AllowedPropertyNamesUserRoleEnumValues = []PropertyNamesUserRole{
	"access",
	"attributeValues",
	"authorities",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"restrictions",
	"sharing",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"users",
}

func (v *PropertyNamesUserRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesUserRole(value)
	for _, existing := range AllowedPropertyNamesUserRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesUserRole", value)
}

// NewPropertyNamesUserRoleFromValue returns a pointer to a valid PropertyNamesUserRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesUserRoleFromValue(v string) (*PropertyNamesUserRole, error) {
	ev := PropertyNamesUserRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesUserRole: valid values are %v", v, AllowedPropertyNamesUserRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesUserRole) IsValid() bool {
	for _, existing := range AllowedPropertyNamesUserRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_UserRole value
func (v PropertyNamesUserRole) Ptr() *PropertyNamesUserRole {
	return &v
}

type NullablePropertyNamesUserRole struct {
	value *PropertyNamesUserRole
	isSet bool
}

func (v NullablePropertyNamesUserRole) Get() *PropertyNamesUserRole {
	return v.value
}

func (v *NullablePropertyNamesUserRole) Set(val *PropertyNamesUserRole) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesUserRole) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesUserRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesUserRole(val *PropertyNamesUserRole) *NullablePropertyNamesUserRole {
	return &NullablePropertyNamesUserRole{value: val, isSet: true}
}

func (v NullablePropertyNamesUserRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesUserRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
