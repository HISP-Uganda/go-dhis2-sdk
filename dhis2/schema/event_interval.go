/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// EventInterval the model 'EventInterval'
type EventInterval string

// List of EventInterval
const (
	EVENTINTERVAL_DAY   EventInterval = "DAY"
	EVENTINTERVAL_WEEK  EventInterval = "WEEK"
	EVENTINTERVAL_MONTH EventInterval = "MONTH"
	EVENTINTERVAL_YEAR  EventInterval = "YEAR"
)

// All allowed values of EventInterval enum
var AllowedEventIntervalEnumValues = []EventInterval{
	"DAY",
	"WEEK",
	"MONTH",
	"YEAR",
}

func (v *EventInterval) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventInterval(value)
	for _, existing := range AllowedEventIntervalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventInterval", value)
}

// NewEventIntervalFromValue returns a pointer to a valid EventInterval
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventIntervalFromValue(v string) (*EventInterval, error) {
	ev := EventInterval(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventInterval: valid values are %v", v, AllowedEventIntervalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventInterval) IsValid() bool {
	for _, existing := range AllowedEventIntervalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventInterval value
func (v EventInterval) Ptr() *EventInterval {
	return &v
}

type NullableEventInterval struct {
	value *EventInterval
	isSet bool
}

func (v NullableEventInterval) Get() *EventInterval {
	return v.value
}

func (v *NullableEventInterval) Set(val *EventInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableEventInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableEventInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventInterval(val *EventInterval) *NullableEventInterval {
	return &NullableEventInterval{value: val, isSet: true}
}

func (v NullableEventInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
