/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesPredictorGroup the model 'PropertyNamesPredictorGroup'
type PropertyNamesPredictorGroup string

// List of PropertyNames_PredictorGroup
const (
	PROPERTYNAMESPREDICTORGROUP_ACCESS              PropertyNamesPredictorGroup = "access"
	PROPERTYNAMESPREDICTORGROUP_ATTRIBUTE_VALUES    PropertyNamesPredictorGroup = "attributeValues"
	PROPERTYNAMESPREDICTORGROUP_CODE                PropertyNamesPredictorGroup = "code"
	PROPERTYNAMESPREDICTORGROUP_CREATED             PropertyNamesPredictorGroup = "created"
	PROPERTYNAMESPREDICTORGROUP_CREATED_BY          PropertyNamesPredictorGroup = "createdBy"
	PROPERTYNAMESPREDICTORGROUP_DESCRIPTION         PropertyNamesPredictorGroup = "description"
	PROPERTYNAMESPREDICTORGROUP_DISPLAY_NAME        PropertyNamesPredictorGroup = "displayName"
	PROPERTYNAMESPREDICTORGROUP_EXTERNAL_ACCESS     PropertyNamesPredictorGroup = "externalAccess"
	PROPERTYNAMESPREDICTORGROUP_FAVORITE            PropertyNamesPredictorGroup = "favorite"
	PROPERTYNAMESPREDICTORGROUP_FAVORITES           PropertyNamesPredictorGroup = "favorites"
	PROPERTYNAMESPREDICTORGROUP_HREF                PropertyNamesPredictorGroup = "href"
	PROPERTYNAMESPREDICTORGROUP_ID                  PropertyNamesPredictorGroup = "id"
	PROPERTYNAMESPREDICTORGROUP_LAST_UPDATED        PropertyNamesPredictorGroup = "lastUpdated"
	PROPERTYNAMESPREDICTORGROUP_LAST_UPDATED_BY     PropertyNamesPredictorGroup = "lastUpdatedBy"
	PROPERTYNAMESPREDICTORGROUP_NAME                PropertyNamesPredictorGroup = "name"
	PROPERTYNAMESPREDICTORGROUP_PREDICTORS          PropertyNamesPredictorGroup = "predictors"
	PROPERTYNAMESPREDICTORGROUP_PUBLIC_ACCESS       PropertyNamesPredictorGroup = "publicAccess"
	PROPERTYNAMESPREDICTORGROUP_SHARING             PropertyNamesPredictorGroup = "sharing"
	PROPERTYNAMESPREDICTORGROUP_TRANSLATIONS        PropertyNamesPredictorGroup = "translations"
	PROPERTYNAMESPREDICTORGROUP_USER                PropertyNamesPredictorGroup = "user"
	PROPERTYNAMESPREDICTORGROUP_USER_ACCESSES       PropertyNamesPredictorGroup = "userAccesses"
	PROPERTYNAMESPREDICTORGROUP_USER_GROUP_ACCESSES PropertyNamesPredictorGroup = "userGroupAccesses"
)

// All allowed values of PropertyNamesPredictorGroup enum
var AllowedPropertyNamesPredictorGroupEnumValues = []PropertyNamesPredictorGroup{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"predictors",
	"publicAccess",
	"sharing",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesPredictorGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesPredictorGroup(value)
	for _, existing := range AllowedPropertyNamesPredictorGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesPredictorGroup", value)
}

// NewPropertyNamesPredictorGroupFromValue returns a pointer to a valid PropertyNamesPredictorGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesPredictorGroupFromValue(v string) (*PropertyNamesPredictorGroup, error) {
	ev := PropertyNamesPredictorGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesPredictorGroup: valid values are %v", v, AllowedPropertyNamesPredictorGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesPredictorGroup) IsValid() bool {
	for _, existing := range AllowedPropertyNamesPredictorGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_PredictorGroup value
func (v PropertyNamesPredictorGroup) Ptr() *PropertyNamesPredictorGroup {
	return &v
}

type NullablePropertyNamesPredictorGroup struct {
	value *PropertyNamesPredictorGroup
	isSet bool
}

func (v NullablePropertyNamesPredictorGroup) Get() *PropertyNamesPredictorGroup {
	return v.value
}

func (v *NullablePropertyNamesPredictorGroup) Set(val *PropertyNamesPredictorGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesPredictorGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesPredictorGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesPredictorGroup(val *PropertyNamesPredictorGroup) *NullablePropertyNamesPredictorGroup {
	return &NullablePropertyNamesPredictorGroup{value: val, isSet: true}
}

func (v NullablePropertyNamesPredictorGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesPredictorGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
