/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesIndicatorGroupSet the model 'PropertyNamesIndicatorGroupSet'
type PropertyNamesIndicatorGroupSet string

// List of PropertyNames_IndicatorGroupSet
const (
	PROPERTYNAMESINDICATORGROUPSET_ACCESS              PropertyNamesIndicatorGroupSet = "access"
	PROPERTYNAMESINDICATORGROUPSET_ATTRIBUTE_VALUES    PropertyNamesIndicatorGroupSet = "attributeValues"
	PROPERTYNAMESINDICATORGROUPSET_CODE                PropertyNamesIndicatorGroupSet = "code"
	PROPERTYNAMESINDICATORGROUPSET_COMPULSORY          PropertyNamesIndicatorGroupSet = "compulsory"
	PROPERTYNAMESINDICATORGROUPSET_CREATED             PropertyNamesIndicatorGroupSet = "created"
	PROPERTYNAMESINDICATORGROUPSET_CREATED_BY          PropertyNamesIndicatorGroupSet = "createdBy"
	PROPERTYNAMESINDICATORGROUPSET_DESCRIPTION         PropertyNamesIndicatorGroupSet = "description"
	PROPERTYNAMESINDICATORGROUPSET_DISPLAY_NAME        PropertyNamesIndicatorGroupSet = "displayName"
	PROPERTYNAMESINDICATORGROUPSET_EXTERNAL_ACCESS     PropertyNamesIndicatorGroupSet = "externalAccess"
	PROPERTYNAMESINDICATORGROUPSET_FAVORITE            PropertyNamesIndicatorGroupSet = "favorite"
	PROPERTYNAMESINDICATORGROUPSET_FAVORITES           PropertyNamesIndicatorGroupSet = "favorites"
	PROPERTYNAMESINDICATORGROUPSET_HREF                PropertyNamesIndicatorGroupSet = "href"
	PROPERTYNAMESINDICATORGROUPSET_ID                  PropertyNamesIndicatorGroupSet = "id"
	PROPERTYNAMESINDICATORGROUPSET_INDICATOR_GROUPS    PropertyNamesIndicatorGroupSet = "indicatorGroups"
	PROPERTYNAMESINDICATORGROUPSET_LAST_UPDATED        PropertyNamesIndicatorGroupSet = "lastUpdated"
	PROPERTYNAMESINDICATORGROUPSET_LAST_UPDATED_BY     PropertyNamesIndicatorGroupSet = "lastUpdatedBy"
	PROPERTYNAMESINDICATORGROUPSET_NAME                PropertyNamesIndicatorGroupSet = "name"
	PROPERTYNAMESINDICATORGROUPSET_PUBLIC_ACCESS       PropertyNamesIndicatorGroupSet = "publicAccess"
	PROPERTYNAMESINDICATORGROUPSET_SHARING             PropertyNamesIndicatorGroupSet = "sharing"
	PROPERTYNAMESINDICATORGROUPSET_SHORT_NAME          PropertyNamesIndicatorGroupSet = "shortName"
	PROPERTYNAMESINDICATORGROUPSET_TRANSLATIONS        PropertyNamesIndicatorGroupSet = "translations"
	PROPERTYNAMESINDICATORGROUPSET_USER                PropertyNamesIndicatorGroupSet = "user"
	PROPERTYNAMESINDICATORGROUPSET_USER_ACCESSES       PropertyNamesIndicatorGroupSet = "userAccesses"
	PROPERTYNAMESINDICATORGROUPSET_USER_GROUP_ACCESSES PropertyNamesIndicatorGroupSet = "userGroupAccesses"
)

// All allowed values of PropertyNamesIndicatorGroupSet enum
var AllowedPropertyNamesIndicatorGroupSetEnumValues = []PropertyNamesIndicatorGroupSet{
	"access",
	"attributeValues",
	"code",
	"compulsory",
	"created",
	"createdBy",
	"description",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"indicatorGroups",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"shortName",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesIndicatorGroupSet) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesIndicatorGroupSet(value)
	for _, existing := range AllowedPropertyNamesIndicatorGroupSetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesIndicatorGroupSet", value)
}

// NewPropertyNamesIndicatorGroupSetFromValue returns a pointer to a valid PropertyNamesIndicatorGroupSet
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesIndicatorGroupSetFromValue(v string) (*PropertyNamesIndicatorGroupSet, error) {
	ev := PropertyNamesIndicatorGroupSet(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesIndicatorGroupSet: valid values are %v", v, AllowedPropertyNamesIndicatorGroupSetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesIndicatorGroupSet) IsValid() bool {
	for _, existing := range AllowedPropertyNamesIndicatorGroupSetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_IndicatorGroupSet value
func (v PropertyNamesIndicatorGroupSet) Ptr() *PropertyNamesIndicatorGroupSet {
	return &v
}

type NullablePropertyNamesIndicatorGroupSet struct {
	value *PropertyNamesIndicatorGroupSet
	isSet bool
}

func (v NullablePropertyNamesIndicatorGroupSet) Get() *PropertyNamesIndicatorGroupSet {
	return v.value
}

func (v *NullablePropertyNamesIndicatorGroupSet) Set(val *PropertyNamesIndicatorGroupSet) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesIndicatorGroupSet) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesIndicatorGroupSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesIndicatorGroupSet(val *PropertyNamesIndicatorGroupSet) *NullablePropertyNamesIndicatorGroupSet {
	return &NullablePropertyNamesIndicatorGroupSet{value: val, isSet: true}
}

func (v NullablePropertyNamesIndicatorGroupSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesIndicatorGroupSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
