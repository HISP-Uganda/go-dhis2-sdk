/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AccessLevel the model 'AccessLevel'
type AccessLevel string

// List of AccessLevel
const (
	ACCESSLEVEL_OPEN      AccessLevel = "OPEN"
	ACCESSLEVEL_AUDITED   AccessLevel = "AUDITED"
	ACCESSLEVEL_PROTECTED AccessLevel = "PROTECTED"
	ACCESSLEVEL_CLOSED    AccessLevel = "CLOSED"
)

// All allowed values of AccessLevel enum
var AllowedAccessLevelEnumValues = []AccessLevel{
	"OPEN",
	"AUDITED",
	"PROTECTED",
	"CLOSED",
}

func (v *AccessLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessLevel(value)
	for _, existing := range AllowedAccessLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessLevel", value)
}

// NewAccessLevelFromValue returns a pointer to a valid AccessLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessLevelFromValue(v string) (*AccessLevel, error) {
	ev := AccessLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessLevel: valid values are %v", v, AllowedAccessLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessLevel) IsValid() bool {
	for _, existing := range AllowedAccessLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessLevel value
func (v AccessLevel) Ptr() *AccessLevel {
	return &v
}

type NullableAccessLevel struct {
	value *AccessLevel
	isSet bool
}

func (v NullableAccessLevel) Get() *AccessLevel {
	return v.value
}

func (v *NullableAccessLevel) Set(val *AccessLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessLevel(val *AccessLevel) *NullableAccessLevel {
	return &NullableAccessLevel{value: val, isSet: true}
}

func (v NullableAccessLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
