/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AnalyticsTableType the model 'AnalyticsTableType'
type AnalyticsTableType string

// List of AnalyticsTableType
const (
	ANALYTICSTABLETYPE_DATA_VALUE                          AnalyticsTableType = "DATA_VALUE"
	ANALYTICSTABLETYPE_COMPLETENESS                        AnalyticsTableType = "COMPLETENESS"
	ANALYTICSTABLETYPE_COMPLETENESS_TARGET                 AnalyticsTableType = "COMPLETENESS_TARGET"
	ANALYTICSTABLETYPE_ORG_UNIT_TARGET                     AnalyticsTableType = "ORG_UNIT_TARGET"
	ANALYTICSTABLETYPE_VALIDATION_RESULT                   AnalyticsTableType = "VALIDATION_RESULT"
	ANALYTICSTABLETYPE_EVENT                               AnalyticsTableType = "EVENT"
	ANALYTICSTABLETYPE_ENROLLMENT                          AnalyticsTableType = "ENROLLMENT"
	ANALYTICSTABLETYPE_OWNERSHIP                           AnalyticsTableType = "OWNERSHIP"
	ANALYTICSTABLETYPE_TRACKED_ENTITY_INSTANCE_EVENTS      AnalyticsTableType = "TRACKED_ENTITY_INSTANCE_EVENTS"
	ANALYTICSTABLETYPE_TRACKED_ENTITY_INSTANCE_ENROLLMENTS AnalyticsTableType = "TRACKED_ENTITY_INSTANCE_ENROLLMENTS"
	ANALYTICSTABLETYPE_TRACKED_ENTITY_INSTANCE             AnalyticsTableType = "TRACKED_ENTITY_INSTANCE"
)

// All allowed values of AnalyticsTableType enum
var AllowedAnalyticsTableTypeEnumValues = []AnalyticsTableType{
	"DATA_VALUE",
	"COMPLETENESS",
	"COMPLETENESS_TARGET",
	"ORG_UNIT_TARGET",
	"VALIDATION_RESULT",
	"EVENT",
	"ENROLLMENT",
	"OWNERSHIP",
	"TRACKED_ENTITY_INSTANCE_EVENTS",
	"TRACKED_ENTITY_INSTANCE_ENROLLMENTS",
	"TRACKED_ENTITY_INSTANCE",
}

func (v *AnalyticsTableType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsTableType(value)
	for _, existing := range AllowedAnalyticsTableTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsTableType", value)
}

// NewAnalyticsTableTypeFromValue returns a pointer to a valid AnalyticsTableType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsTableTypeFromValue(v string) (*AnalyticsTableType, error) {
	ev := AnalyticsTableType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsTableType: valid values are %v", v, AllowedAnalyticsTableTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsTableType) IsValid() bool {
	for _, existing := range AllowedAnalyticsTableTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsTableType value
func (v AnalyticsTableType) Ptr() *AnalyticsTableType {
	return &v
}

type NullableAnalyticsTableType struct {
	value *AnalyticsTableType
	isSet bool
}

func (v NullableAnalyticsTableType) Get() *AnalyticsTableType {
	return v.value
}

func (v *NullableAnalyticsTableType) Set(val *AnalyticsTableType) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsTableType) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsTableType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsTableType(val *AnalyticsTableType) *NullableAnalyticsTableType {
	return &NullableAnalyticsTableType{value: val, isSet: true}
}

func (v NullableAnalyticsTableType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsTableType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
