/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// AuthorityType the model 'AuthorityType'
type AuthorityType string

// List of AuthorityType
const (
	AUTHORITYTYPE_CREATE         AuthorityType = "CREATE"
	AUTHORITYTYPE_DATA_CREATE    AuthorityType = "DATA_CREATE"
	AUTHORITYTYPE_CREATE_PUBLIC  AuthorityType = "CREATE_PUBLIC"
	AUTHORITYTYPE_CREATE_PRIVATE AuthorityType = "CREATE_PRIVATE"
	AUTHORITYTYPE_EXTERNALIZE    AuthorityType = "EXTERNALIZE"
	AUTHORITYTYPE_READ           AuthorityType = "READ"
	AUTHORITYTYPE_DATA_READ      AuthorityType = "DATA_READ"
	AUTHORITYTYPE_UPDATE         AuthorityType = "UPDATE"
	AUTHORITYTYPE_DELETE         AuthorityType = "DELETE"
)

// All allowed values of AuthorityType enum
var AllowedAuthorityTypeEnumValues = []AuthorityType{
	"CREATE",
	"DATA_CREATE",
	"CREATE_PUBLIC",
	"CREATE_PRIVATE",
	"EXTERNALIZE",
	"READ",
	"DATA_READ",
	"UPDATE",
	"DELETE",
}

func (v *AuthorityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthorityType(value)
	for _, existing := range AllowedAuthorityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthorityType", value)
}

// NewAuthorityTypeFromValue returns a pointer to a valid AuthorityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthorityTypeFromValue(v string) (*AuthorityType, error) {
	ev := AuthorityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthorityType: valid values are %v", v, AllowedAuthorityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthorityType) IsValid() bool {
	for _, existing := range AllowedAuthorityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthorityType value
func (v AuthorityType) Ptr() *AuthorityType {
	return &v
}

type NullableAuthorityType struct {
	value *AuthorityType
	isSet bool
}

func (v NullableAuthorityType) Get() *AuthorityType {
	return v.value
}

func (v *NullableAuthorityType) Set(val *AuthorityType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorityType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorityType(val *AuthorityType) *NullableAuthorityType {
	return &NullableAuthorityType{value: val, isSet: true}
}

func (v NullableAuthorityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
