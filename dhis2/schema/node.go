/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Node type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Node{}

// Node struct for Node
type Node struct {
	Children          []Node    `json:"children,omitempty"`
	Collection        *bool     `json:"collection,omitempty"`
	Comment           *string   `json:"comment,omitempty"`
	Complex           *bool     `json:"complex,omitempty"`
	Metadata          *bool     `json:"metadata,omitempty"`
	Name              *string   `json:"name,omitempty"`
	Namespace         *string   `json:"namespace,omitempty"`
	Order             int32     `json:"order"`
	Parent            *Node     `json:"parent,omitempty"`
	Property          *Property `json:"property,omitempty"`
	Simple            *bool     `json:"simple,omitempty"`
	Type              string    `json:"type"`
	UnorderedChildren []Node    `json:"unorderedChildren,omitempty"`
}

type _Node Node

// NewNode instantiates a new Node object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNode(order int32, type_ string) *Node {
	this := Node{}
	this.Order = order
	this.Type = type_
	return &this
}

// NewNodeWithDefaults instantiates a new Node object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeWithDefaults() *Node {
	this := Node{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *Node) GetChildren() []Node {
	if o == nil || IsNil(o.Children) {
		var ret []Node
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetChildrenOk() ([]Node, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Node) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []Node and assigns it to the Children field.
func (o *Node) SetChildren(v []Node) {
	o.Children = v
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *Node) GetCollection() bool {
	if o == nil || IsNil(o.Collection) {
		var ret bool
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCollectionOk() (*bool, bool) {
	if o == nil || IsNil(o.Collection) {
		return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *Node) HasCollection() bool {
	if o != nil && !IsNil(o.Collection) {
		return true
	}

	return false
}

// SetCollection gets a reference to the given bool and assigns it to the Collection field.
func (o *Node) SetCollection(v bool) {
	o.Collection = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Node) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Node) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Node) SetComment(v string) {
	o.Comment = &v
}

// GetComplex returns the Complex field value if set, zero value otherwise.
func (o *Node) GetComplex() bool {
	if o == nil || IsNil(o.Complex) {
		var ret bool
		return ret
	}
	return *o.Complex
}

// GetComplexOk returns a tuple with the Complex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetComplexOk() (*bool, bool) {
	if o == nil || IsNil(o.Complex) {
		return nil, false
	}
	return o.Complex, true
}

// HasComplex returns a boolean if a field has been set.
func (o *Node) HasComplex() bool {
	if o != nil && !IsNil(o.Complex) {
		return true
	}

	return false
}

// SetComplex gets a reference to the given bool and assigns it to the Complex field.
func (o *Node) SetComplex(v bool) {
	o.Complex = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Node) GetMetadata() bool {
	if o == nil || IsNil(o.Metadata) {
		var ret bool
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetMetadataOk() (*bool, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Node) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given bool and assigns it to the Metadata field.
func (o *Node) SetMetadata(v bool) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Node) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Node) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Node) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Node) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Node) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *Node) SetNamespace(v string) {
	o.Namespace = &v
}

// GetOrder returns the Order field value
func (o *Node) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *Node) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *Node) SetOrder(v int32) {
	o.Order = v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *Node) GetParent() Node {
	if o == nil || IsNil(o.Parent) {
		var ret Node
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetParentOk() (*Node, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *Node) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given Node and assigns it to the Parent field.
func (o *Node) SetParent(v Node) {
	o.Parent = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *Node) GetProperty() Property {
	if o == nil || IsNil(o.Property) {
		var ret Property
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetPropertyOk() (*Property, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *Node) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given Property and assigns it to the Property field.
func (o *Node) SetProperty(v Property) {
	o.Property = &v
}

// GetSimple returns the Simple field value if set, zero value otherwise.
func (o *Node) GetSimple() bool {
	if o == nil || IsNil(o.Simple) {
		var ret bool
		return ret
	}
	return *o.Simple
}

// GetSimpleOk returns a tuple with the Simple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetSimpleOk() (*bool, bool) {
	if o == nil || IsNil(o.Simple) {
		return nil, false
	}
	return o.Simple, true
}

// HasSimple returns a boolean if a field has been set.
func (o *Node) HasSimple() bool {
	if o != nil && !IsNil(o.Simple) {
		return true
	}

	return false
}

// SetSimple gets a reference to the given bool and assigns it to the Simple field.
func (o *Node) SetSimple(v bool) {
	o.Simple = &v
}

// GetType returns the Type field value
func (o *Node) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Node) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Node) SetType(v string) {
	o.Type = v
}

// GetUnorderedChildren returns the UnorderedChildren field value if set, zero value otherwise.
func (o *Node) GetUnorderedChildren() []Node {
	if o == nil || IsNil(o.UnorderedChildren) {
		var ret []Node
		return ret
	}
	return o.UnorderedChildren
}

// GetUnorderedChildrenOk returns a tuple with the UnorderedChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetUnorderedChildrenOk() ([]Node, bool) {
	if o == nil || IsNil(o.UnorderedChildren) {
		return nil, false
	}
	return o.UnorderedChildren, true
}

// HasUnorderedChildren returns a boolean if a field has been set.
func (o *Node) HasUnorderedChildren() bool {
	if o != nil && !IsNil(o.UnorderedChildren) {
		return true
	}

	return false
}

// SetUnorderedChildren gets a reference to the given []Node and assigns it to the UnorderedChildren field.
func (o *Node) SetUnorderedChildren(v []Node) {
	o.UnorderedChildren = v
}

func (o Node) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Node) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.Collection) {
		toSerialize["collection"] = o.Collection
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Complex) {
		toSerialize["complex"] = o.Complex
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	toSerialize["order"] = o.Order
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Simple) {
		toSerialize["simple"] = o.Simple
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UnorderedChildren) {
		toSerialize["unorderedChildren"] = o.UnorderedChildren
	}
	return toSerialize, nil
}

func (o *Node) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"order",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNode := _Node{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNode)

	if err != nil {
		return err
	}

	*o = Node(varNode)

	return err
}

type NullableNode struct {
	value *Node
	isSet bool
}

func (v NullableNode) Get() *Node {
	return v.value
}

func (v *NullableNode) Set(val *Node) {
	v.value = val
	v.isSet = true
}

func (v NullableNode) IsSet() bool {
	return v.isSet
}

func (v *NullableNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNode(val *Node) *NullableNode {
	return &NullableNode{value: val, isSet: true}
}

func (v NullableNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
