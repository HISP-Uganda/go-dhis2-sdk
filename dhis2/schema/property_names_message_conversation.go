/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesMessageConversation the model 'PropertyNamesMessageConversation'
type PropertyNamesMessageConversation string

// List of PropertyNames_MessageConversation
const (
	PROPERTYNAMESMESSAGECONVERSATION_ACCESS                PropertyNamesMessageConversation = "access"
	PROPERTYNAMESMESSAGECONVERSATION_ASSIGNEE              PropertyNamesMessageConversation = "assignee"
	PROPERTYNAMESMESSAGECONVERSATION_ATTRIBUTE_VALUES      PropertyNamesMessageConversation = "attributeValues"
	PROPERTYNAMESMESSAGECONVERSATION_CODE                  PropertyNamesMessageConversation = "code"
	PROPERTYNAMESMESSAGECONVERSATION_CREATED               PropertyNamesMessageConversation = "created"
	PROPERTYNAMESMESSAGECONVERSATION_CREATED_BY            PropertyNamesMessageConversation = "createdBy"
	PROPERTYNAMESMESSAGECONVERSATION_DISPLAY_NAME          PropertyNamesMessageConversation = "displayName"
	PROPERTYNAMESMESSAGECONVERSATION_EXT_MESSAGE_ID        PropertyNamesMessageConversation = "extMessageId"
	PROPERTYNAMESMESSAGECONVERSATION_EXTERNAL_ACCESS       PropertyNamesMessageConversation = "externalAccess"
	PROPERTYNAMESMESSAGECONVERSATION_FAVORITE              PropertyNamesMessageConversation = "favorite"
	PROPERTYNAMESMESSAGECONVERSATION_FAVORITES             PropertyNamesMessageConversation = "favorites"
	PROPERTYNAMESMESSAGECONVERSATION_FOLLOW_UP             PropertyNamesMessageConversation = "followUp"
	PROPERTYNAMESMESSAGECONVERSATION_HREF                  PropertyNamesMessageConversation = "href"
	PROPERTYNAMESMESSAGECONVERSATION_ID                    PropertyNamesMessageConversation = "id"
	PROPERTYNAMESMESSAGECONVERSATION_LAST_MESSAGE          PropertyNamesMessageConversation = "lastMessage"
	PROPERTYNAMESMESSAGECONVERSATION_LAST_SENDER           PropertyNamesMessageConversation = "lastSender"
	PROPERTYNAMESMESSAGECONVERSATION_LAST_SENDER_FIRSTNAME PropertyNamesMessageConversation = "lastSenderFirstname"
	PROPERTYNAMESMESSAGECONVERSATION_LAST_SENDER_SURNAME   PropertyNamesMessageConversation = "lastSenderSurname"
	PROPERTYNAMESMESSAGECONVERSATION_LAST_UPDATED          PropertyNamesMessageConversation = "lastUpdated"
	PROPERTYNAMESMESSAGECONVERSATION_LAST_UPDATED_BY       PropertyNamesMessageConversation = "lastUpdatedBy"
	PROPERTYNAMESMESSAGECONVERSATION_MESSAGE_COUNT         PropertyNamesMessageConversation = "messageCount"
	PROPERTYNAMESMESSAGECONVERSATION_MESSAGE_TYPE          PropertyNamesMessageConversation = "messageType"
	PROPERTYNAMESMESSAGECONVERSATION_MESSAGES              PropertyNamesMessageConversation = "messages"
	PROPERTYNAMESMESSAGECONVERSATION_PRIORITY              PropertyNamesMessageConversation = "priority"
	PROPERTYNAMESMESSAGECONVERSATION_PUBLIC_ACCESS         PropertyNamesMessageConversation = "publicAccess"
	PROPERTYNAMESMESSAGECONVERSATION_READ                  PropertyNamesMessageConversation = "read"
	PROPERTYNAMESMESSAGECONVERSATION_SHARING               PropertyNamesMessageConversation = "sharing"
	PROPERTYNAMESMESSAGECONVERSATION_STATUS                PropertyNamesMessageConversation = "status"
	PROPERTYNAMESMESSAGECONVERSATION_SUBJECT               PropertyNamesMessageConversation = "subject"
	PROPERTYNAMESMESSAGECONVERSATION_TRANSLATIONS          PropertyNamesMessageConversation = "translations"
	PROPERTYNAMESMESSAGECONVERSATION_USER                  PropertyNamesMessageConversation = "user"
	PROPERTYNAMESMESSAGECONVERSATION_USER_ACCESSES         PropertyNamesMessageConversation = "userAccesses"
	PROPERTYNAMESMESSAGECONVERSATION_USER_FIRSTNAME        PropertyNamesMessageConversation = "userFirstname"
	PROPERTYNAMESMESSAGECONVERSATION_USER_GROUP_ACCESSES   PropertyNamesMessageConversation = "userGroupAccesses"
	PROPERTYNAMESMESSAGECONVERSATION_USER_MESSAGES         PropertyNamesMessageConversation = "userMessages"
	PROPERTYNAMESMESSAGECONVERSATION_USER_SURNAME          PropertyNamesMessageConversation = "userSurname"
)

// All allowed values of PropertyNamesMessageConversation enum
var AllowedPropertyNamesMessageConversationEnumValues = []PropertyNamesMessageConversation{
	"access",
	"assignee",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"displayName",
	"extMessageId",
	"externalAccess",
	"favorite",
	"favorites",
	"followUp",
	"href",
	"id",
	"lastMessage",
	"lastSender",
	"lastSenderFirstname",
	"lastSenderSurname",
	"lastUpdated",
	"lastUpdatedBy",
	"messageCount",
	"messageType",
	"messages",
	"priority",
	"publicAccess",
	"read",
	"sharing",
	"status",
	"subject",
	"translations",
	"user",
	"userAccesses",
	"userFirstname",
	"userGroupAccesses",
	"userMessages",
	"userSurname",
}

func (v *PropertyNamesMessageConversation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesMessageConversation(value)
	for _, existing := range AllowedPropertyNamesMessageConversationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesMessageConversation", value)
}

// NewPropertyNamesMessageConversationFromValue returns a pointer to a valid PropertyNamesMessageConversation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesMessageConversationFromValue(v string) (*PropertyNamesMessageConversation, error) {
	ev := PropertyNamesMessageConversation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesMessageConversation: valid values are %v", v, AllowedPropertyNamesMessageConversationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesMessageConversation) IsValid() bool {
	for _, existing := range AllowedPropertyNamesMessageConversationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_MessageConversation value
func (v PropertyNamesMessageConversation) Ptr() *PropertyNamesMessageConversation {
	return &v
}

type NullablePropertyNamesMessageConversation struct {
	value *PropertyNamesMessageConversation
	isSet bool
}

func (v NullablePropertyNamesMessageConversation) Get() *PropertyNamesMessageConversation {
	return v.value
}

func (v *NullablePropertyNamesMessageConversation) Set(val *PropertyNamesMessageConversation) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesMessageConversation) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesMessageConversation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesMessageConversation(val *PropertyNamesMessageConversation) *NullablePropertyNamesMessageConversation {
	return &NullablePropertyNamesMessageConversation{value: val, isSet: true}
}

func (v NullablePropertyNamesMessageConversation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesMessageConversation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
