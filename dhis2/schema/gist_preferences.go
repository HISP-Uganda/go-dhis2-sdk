/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GistPreferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GistPreferences{}

// GistPreferences struct for GistPreferences
type GistPreferences struct {
	Included       Include   `json:"included"`
	Transformation Transform `json:"transformation"`
}

type _GistPreferences GistPreferences

// NewGistPreferences instantiates a new GistPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGistPreferences(included Include, transformation Transform) *GistPreferences {
	this := GistPreferences{}
	this.Included = included
	this.Transformation = transformation
	return &this
}

// NewGistPreferencesWithDefaults instantiates a new GistPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGistPreferencesWithDefaults() *GistPreferences {
	this := GistPreferences{}
	return &this
}

// GetIncluded returns the Included field value
func (o *GistPreferences) GetIncluded() Include {
	if o == nil {
		var ret Include
		return ret
	}

	return o.Included
}

// GetIncludedOk returns a tuple with the Included field value
// and a boolean to check if the value has been set.
func (o *GistPreferences) GetIncludedOk() (*Include, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Included, true
}

// SetIncluded sets field value
func (o *GistPreferences) SetIncluded(v Include) {
	o.Included = v
}

// GetTransformation returns the Transformation field value
func (o *GistPreferences) GetTransformation() Transform {
	if o == nil {
		var ret Transform
		return ret
	}

	return o.Transformation
}

// GetTransformationOk returns a tuple with the Transformation field value
// and a boolean to check if the value has been set.
func (o *GistPreferences) GetTransformationOk() (*Transform, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transformation, true
}

// SetTransformation sets field value
func (o *GistPreferences) SetTransformation(v Transform) {
	o.Transformation = v
}

func (o GistPreferences) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GistPreferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["included"] = o.Included
	toSerialize["transformation"] = o.Transformation
	return toSerialize, nil
}

func (o *GistPreferences) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"included",
		"transformation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGistPreferences := _GistPreferences{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGistPreferences)

	if err != nil {
		return err
	}

	*o = GistPreferences(varGistPreferences)

	return err
}

type NullableGistPreferences struct {
	value *GistPreferences
	isSet bool
}

func (v NullableGistPreferences) Get() *GistPreferences {
	return v.value
}

func (v *NullableGistPreferences) Set(val *GistPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableGistPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableGistPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGistPreferences(val *GistPreferences) *NullableGistPreferences {
	return &NullableGistPreferences{value: val, isSet: true}
}

func (v NullableGistPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGistPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
