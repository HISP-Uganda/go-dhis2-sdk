/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Sorting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sorting{}

// Sorting struct for Sorting
type Sorting struct {
	Dimension string    `json:"dimension"`
	Direction SortOrder `json:"direction"`
}

type _Sorting Sorting

// NewSorting instantiates a new Sorting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSorting(dimension string, direction SortOrder) *Sorting {
	this := Sorting{}
	this.Dimension = dimension
	this.Direction = direction
	return &this
}

// NewSortingWithDefaults instantiates a new Sorting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSortingWithDefaults() *Sorting {
	this := Sorting{}
	return &this
}

// GetDimension returns the Dimension field value
func (o *Sorting) GetDimension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *Sorting) GetDimensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *Sorting) SetDimension(v string) {
	o.Dimension = v
}

// GetDirection returns the Direction field value
func (o *Sorting) GetDirection() SortOrder {
	if o == nil {
		var ret SortOrder
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *Sorting) GetDirectionOk() (*SortOrder, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *Sorting) SetDirection(v SortOrder) {
	o.Direction = v
}

func (o Sorting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sorting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dimension"] = o.Dimension
	toSerialize["direction"] = o.Direction
	return toSerialize, nil
}

func (o *Sorting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dimension",
		"direction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSorting := _Sorting{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSorting)

	if err != nil {
		return err
	}

	*o = Sorting(varSorting)

	return err
}

type NullableSorting struct {
	value *Sorting
	isSet bool
}

func (v NullableSorting) Get() *Sorting {
	return v.value
}

func (v *NullableSorting) Set(val *Sorting) {
	v.value = val
	v.isSet = true
}

func (v NullableSorting) IsSet() bool {
	return v.isSet
}

func (v *NullableSorting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSorting(val *Sorting) *NullableSorting {
	return &NullableSorting{value: val, isSet: true}
}

func (v NullableSorting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSorting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
