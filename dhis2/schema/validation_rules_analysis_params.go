/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ValidationRulesAnalysisParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationRulesAnalysisParams{}

// ValidationRulesAnalysisParams struct for ValidationRulesAnalysisParams
type ValidationRulesAnalysisParams struct {
	EndDate      *string `json:"endDate,omitempty"`
	Notification *bool   `json:"notification,omitempty"`
	Ou           *string `json:"ou,omitempty"`
	Persist      *bool   `json:"persist,omitempty"`
	StartDate    *string `json:"startDate,omitempty"`
	Vrg          *string `json:"vrg,omitempty"`
}

// NewValidationRulesAnalysisParams instantiates a new ValidationRulesAnalysisParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationRulesAnalysisParams() *ValidationRulesAnalysisParams {
	this := ValidationRulesAnalysisParams{}
	return &this
}

// NewValidationRulesAnalysisParamsWithDefaults instantiates a new ValidationRulesAnalysisParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationRulesAnalysisParamsWithDefaults() *ValidationRulesAnalysisParams {
	this := ValidationRulesAnalysisParams{}
	return &this
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ValidationRulesAnalysisParams) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRulesAnalysisParams) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ValidationRulesAnalysisParams) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ValidationRulesAnalysisParams) SetEndDate(v string) {
	o.EndDate = &v
}

// GetNotification returns the Notification field value if set, zero value otherwise.
func (o *ValidationRulesAnalysisParams) GetNotification() bool {
	if o == nil || IsNil(o.Notification) {
		var ret bool
		return ret
	}
	return *o.Notification
}

// GetNotificationOk returns a tuple with the Notification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRulesAnalysisParams) GetNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.Notification) {
		return nil, false
	}
	return o.Notification, true
}

// HasNotification returns a boolean if a field has been set.
func (o *ValidationRulesAnalysisParams) HasNotification() bool {
	if o != nil && !IsNil(o.Notification) {
		return true
	}

	return false
}

// SetNotification gets a reference to the given bool and assigns it to the Notification field.
func (o *ValidationRulesAnalysisParams) SetNotification(v bool) {
	o.Notification = &v
}

// GetOu returns the Ou field value if set, zero value otherwise.
func (o *ValidationRulesAnalysisParams) GetOu() string {
	if o == nil || IsNil(o.Ou) {
		var ret string
		return ret
	}
	return *o.Ou
}

// GetOuOk returns a tuple with the Ou field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRulesAnalysisParams) GetOuOk() (*string, bool) {
	if o == nil || IsNil(o.Ou) {
		return nil, false
	}
	return o.Ou, true
}

// HasOu returns a boolean if a field has been set.
func (o *ValidationRulesAnalysisParams) HasOu() bool {
	if o != nil && !IsNil(o.Ou) {
		return true
	}

	return false
}

// SetOu gets a reference to the given string and assigns it to the Ou field.
func (o *ValidationRulesAnalysisParams) SetOu(v string) {
	o.Ou = &v
}

// GetPersist returns the Persist field value if set, zero value otherwise.
func (o *ValidationRulesAnalysisParams) GetPersist() bool {
	if o == nil || IsNil(o.Persist) {
		var ret bool
		return ret
	}
	return *o.Persist
}

// GetPersistOk returns a tuple with the Persist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRulesAnalysisParams) GetPersistOk() (*bool, bool) {
	if o == nil || IsNil(o.Persist) {
		return nil, false
	}
	return o.Persist, true
}

// HasPersist returns a boolean if a field has been set.
func (o *ValidationRulesAnalysisParams) HasPersist() bool {
	if o != nil && !IsNil(o.Persist) {
		return true
	}

	return false
}

// SetPersist gets a reference to the given bool and assigns it to the Persist field.
func (o *ValidationRulesAnalysisParams) SetPersist(v bool) {
	o.Persist = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ValidationRulesAnalysisParams) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRulesAnalysisParams) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ValidationRulesAnalysisParams) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ValidationRulesAnalysisParams) SetStartDate(v string) {
	o.StartDate = &v
}

// GetVrg returns the Vrg field value if set, zero value otherwise.
func (o *ValidationRulesAnalysisParams) GetVrg() string {
	if o == nil || IsNil(o.Vrg) {
		var ret string
		return ret
	}
	return *o.Vrg
}

// GetVrgOk returns a tuple with the Vrg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRulesAnalysisParams) GetVrgOk() (*string, bool) {
	if o == nil || IsNil(o.Vrg) {
		return nil, false
	}
	return o.Vrg, true
}

// HasVrg returns a boolean if a field has been set.
func (o *ValidationRulesAnalysisParams) HasVrg() bool {
	if o != nil && !IsNil(o.Vrg) {
		return true
	}

	return false
}

// SetVrg gets a reference to the given string and assigns it to the Vrg field.
func (o *ValidationRulesAnalysisParams) SetVrg(v string) {
	o.Vrg = &v
}

func (o ValidationRulesAnalysisParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationRulesAnalysisParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Notification) {
		toSerialize["notification"] = o.Notification
	}
	if !IsNil(o.Ou) {
		toSerialize["ou"] = o.Ou
	}
	if !IsNil(o.Persist) {
		toSerialize["persist"] = o.Persist
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.Vrg) {
		toSerialize["vrg"] = o.Vrg
	}
	return toSerialize, nil
}

type NullableValidationRulesAnalysisParams struct {
	value *ValidationRulesAnalysisParams
	isSet bool
}

func (v NullableValidationRulesAnalysisParams) Get() *ValidationRulesAnalysisParams {
	return v.value
}

func (v *NullableValidationRulesAnalysisParams) Set(val *ValidationRulesAnalysisParams) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationRulesAnalysisParams) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationRulesAnalysisParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationRulesAnalysisParams(val *ValidationRulesAnalysisParams) *NullableValidationRulesAnalysisParams {
	return &NullableValidationRulesAnalysisParams{value: val, isSet: true}
}

func (v NullableValidationRulesAnalysisParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationRulesAnalysisParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
