/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesDataApprovalWorkflow the model 'PropertyNamesDataApprovalWorkflow'
type PropertyNamesDataApprovalWorkflow string

// List of PropertyNames_DataApprovalWorkflow
const (
	PROPERTYNAMESDATAAPPROVALWORKFLOW_ACCESS               PropertyNamesDataApprovalWorkflow = "access"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_ATTRIBUTE_VALUES     PropertyNamesDataApprovalWorkflow = "attributeValues"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_CATEGORY_COMBO       PropertyNamesDataApprovalWorkflow = "categoryCombo"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_CODE                 PropertyNamesDataApprovalWorkflow = "code"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_CREATED              PropertyNamesDataApprovalWorkflow = "created"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_CREATED_BY           PropertyNamesDataApprovalWorkflow = "createdBy"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_DATA_APPROVAL_LEVELS PropertyNamesDataApprovalWorkflow = "dataApprovalLevels"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_DATA_SETS            PropertyNamesDataApprovalWorkflow = "dataSets"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_DISPLAY_NAME         PropertyNamesDataApprovalWorkflow = "displayName"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_EXTERNAL_ACCESS      PropertyNamesDataApprovalWorkflow = "externalAccess"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_FAVORITE             PropertyNamesDataApprovalWorkflow = "favorite"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_FAVORITES            PropertyNamesDataApprovalWorkflow = "favorites"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_HREF                 PropertyNamesDataApprovalWorkflow = "href"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_ID                   PropertyNamesDataApprovalWorkflow = "id"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_LAST_UPDATED         PropertyNamesDataApprovalWorkflow = "lastUpdated"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_LAST_UPDATED_BY      PropertyNamesDataApprovalWorkflow = "lastUpdatedBy"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_NAME                 PropertyNamesDataApprovalWorkflow = "name"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_PERIOD_TYPE          PropertyNamesDataApprovalWorkflow = "periodType"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_PUBLIC_ACCESS        PropertyNamesDataApprovalWorkflow = "publicAccess"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_SHARING              PropertyNamesDataApprovalWorkflow = "sharing"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_TRANSLATIONS         PropertyNamesDataApprovalWorkflow = "translations"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_USER                 PropertyNamesDataApprovalWorkflow = "user"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_USER_ACCESSES        PropertyNamesDataApprovalWorkflow = "userAccesses"
	PROPERTYNAMESDATAAPPROVALWORKFLOW_USER_GROUP_ACCESSES  PropertyNamesDataApprovalWorkflow = "userGroupAccesses"
)

// All allowed values of PropertyNamesDataApprovalWorkflow enum
var AllowedPropertyNamesDataApprovalWorkflowEnumValues = []PropertyNamesDataApprovalWorkflow{
	"access",
	"attributeValues",
	"categoryCombo",
	"code",
	"created",
	"createdBy",
	"dataApprovalLevels",
	"dataSets",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"periodType",
	"publicAccess",
	"sharing",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesDataApprovalWorkflow) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesDataApprovalWorkflow(value)
	for _, existing := range AllowedPropertyNamesDataApprovalWorkflowEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesDataApprovalWorkflow", value)
}

// NewPropertyNamesDataApprovalWorkflowFromValue returns a pointer to a valid PropertyNamesDataApprovalWorkflow
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesDataApprovalWorkflowFromValue(v string) (*PropertyNamesDataApprovalWorkflow, error) {
	ev := PropertyNamesDataApprovalWorkflow(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesDataApprovalWorkflow: valid values are %v", v, AllowedPropertyNamesDataApprovalWorkflowEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesDataApprovalWorkflow) IsValid() bool {
	for _, existing := range AllowedPropertyNamesDataApprovalWorkflowEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_DataApprovalWorkflow value
func (v PropertyNamesDataApprovalWorkflow) Ptr() *PropertyNamesDataApprovalWorkflow {
	return &v
}

type NullablePropertyNamesDataApprovalWorkflow struct {
	value *PropertyNamesDataApprovalWorkflow
	isSet bool
}

func (v NullablePropertyNamesDataApprovalWorkflow) Get() *PropertyNamesDataApprovalWorkflow {
	return v.value
}

func (v *NullablePropertyNamesDataApprovalWorkflow) Set(val *PropertyNamesDataApprovalWorkflow) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesDataApprovalWorkflow) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesDataApprovalWorkflow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesDataApprovalWorkflow(val *PropertyNamesDataApprovalWorkflow) *NullablePropertyNamesDataApprovalWorkflow {
	return &NullablePropertyNamesDataApprovalWorkflow{value: val, isSet: true}
}

func (v NullablePropertyNamesDataApprovalWorkflow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesDataApprovalWorkflow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
