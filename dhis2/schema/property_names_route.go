/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesRoute the model 'PropertyNamesRoute'
type PropertyNamesRoute string

// List of PropertyNames_Route
const (
	PROPERTYNAMESROUTE_ACCESS              PropertyNamesRoute = "access"
	PROPERTYNAMESROUTE_ATTRIBUTE_VALUES    PropertyNamesRoute = "attributeValues"
	PROPERTYNAMESROUTE_AUTH                PropertyNamesRoute = "auth"
	PROPERTYNAMESROUTE_AUTHORITIES         PropertyNamesRoute = "authorities"
	PROPERTYNAMESROUTE_CODE                PropertyNamesRoute = "code"
	PROPERTYNAMESROUTE_CREATED             PropertyNamesRoute = "created"
	PROPERTYNAMESROUTE_CREATED_BY          PropertyNamesRoute = "createdBy"
	PROPERTYNAMESROUTE_DESCRIPTION         PropertyNamesRoute = "description"
	PROPERTYNAMESROUTE_DISABLED            PropertyNamesRoute = "disabled"
	PROPERTYNAMESROUTE_DISPLAY_NAME        PropertyNamesRoute = "displayName"
	PROPERTYNAMESROUTE_EXTERNAL_ACCESS     PropertyNamesRoute = "externalAccess"
	PROPERTYNAMESROUTE_FAVORITE            PropertyNamesRoute = "favorite"
	PROPERTYNAMESROUTE_FAVORITES           PropertyNamesRoute = "favorites"
	PROPERTYNAMESROUTE_HEADERS             PropertyNamesRoute = "headers"
	PROPERTYNAMESROUTE_HREF                PropertyNamesRoute = "href"
	PROPERTYNAMESROUTE_ID                  PropertyNamesRoute = "id"
	PROPERTYNAMESROUTE_LAST_UPDATED        PropertyNamesRoute = "lastUpdated"
	PROPERTYNAMESROUTE_LAST_UPDATED_BY     PropertyNamesRoute = "lastUpdatedBy"
	PROPERTYNAMESROUTE_NAME                PropertyNamesRoute = "name"
	PROPERTYNAMESROUTE_PUBLIC_ACCESS       PropertyNamesRoute = "publicAccess"
	PROPERTYNAMESROUTE_SHARING             PropertyNamesRoute = "sharing"
	PROPERTYNAMESROUTE_TRANSLATIONS        PropertyNamesRoute = "translations"
	PROPERTYNAMESROUTE_URL                 PropertyNamesRoute = "url"
	PROPERTYNAMESROUTE_USER                PropertyNamesRoute = "user"
	PROPERTYNAMESROUTE_USER_ACCESSES       PropertyNamesRoute = "userAccesses"
	PROPERTYNAMESROUTE_USER_GROUP_ACCESSES PropertyNamesRoute = "userGroupAccesses"
)

// All allowed values of PropertyNamesRoute enum
var AllowedPropertyNamesRouteEnumValues = []PropertyNamesRoute{
	"access",
	"attributeValues",
	"auth",
	"authorities",
	"code",
	"created",
	"createdBy",
	"description",
	"disabled",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"headers",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"translations",
	"url",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesRoute) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesRoute(value)
	for _, existing := range AllowedPropertyNamesRouteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesRoute", value)
}

// NewPropertyNamesRouteFromValue returns a pointer to a valid PropertyNamesRoute
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesRouteFromValue(v string) (*PropertyNamesRoute, error) {
	ev := PropertyNamesRoute(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesRoute: valid values are %v", v, AllowedPropertyNamesRouteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesRoute) IsValid() bool {
	for _, existing := range AllowedPropertyNamesRouteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Route value
func (v PropertyNamesRoute) Ptr() *PropertyNamesRoute {
	return &v
}

type NullablePropertyNamesRoute struct {
	value *PropertyNamesRoute
	isSet bool
}

func (v NullablePropertyNamesRoute) Get() *PropertyNamesRoute {
	return v.value
}

func (v *NullablePropertyNamesRoute) Set(val *PropertyNamesRoute) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesRoute) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesRoute(val *PropertyNamesRoute) *NullablePropertyNamesRoute {
	return &NullablePropertyNamesRoute{value: val, isSet: true}
}

func (v NullablePropertyNamesRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
