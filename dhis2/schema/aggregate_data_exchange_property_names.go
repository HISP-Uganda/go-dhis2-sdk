/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// AggregateDataExchangePropertyNames the model 'AggregateDataExchangePropertyNames'
type AggregateDataExchangePropertyNames string

// List of AggregateDataExchangePropertyNames
const (
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_ACCESS           AggregateDataExchangePropertyNames = "access"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_ATTRIBUTE_VALUES AggregateDataExchangePropertyNames = "attributeValues"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_CODE             AggregateDataExchangePropertyNames = "code"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_CREATED          AggregateDataExchangePropertyNames = "created"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_CREATED_BY       AggregateDataExchangePropertyNames = "createdBy"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_DISPLAY_NAME     AggregateDataExchangePropertyNames = "displayName"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_FAVORITE         AggregateDataExchangePropertyNames = "favorite"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_FAVORITES        AggregateDataExchangePropertyNames = "favorites"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_HREF             AggregateDataExchangePropertyNames = "href"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_ID               AggregateDataExchangePropertyNames = "id"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_LAST_UPDATED     AggregateDataExchangePropertyNames = "lastUpdated"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_LAST_UPDATED_BY  AggregateDataExchangePropertyNames = "lastUpdatedBy"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_NAME             AggregateDataExchangePropertyNames = "name"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_SHARING          AggregateDataExchangePropertyNames = "sharing"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_SOURCE           AggregateDataExchangePropertyNames = "source"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_TARGET           AggregateDataExchangePropertyNames = "target"
	AGGREGATEDATAEXCHANGEPROPERTYNAMES_TRANSLATIONS     AggregateDataExchangePropertyNames = "translations"
)

// All allowed values of AggregateDataExchangePropertyNames enum
var AllowedAggregateDataExchangePropertyNamesEnumValues = []AggregateDataExchangePropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"sharing",
	"source",
	"target",
	"translations",
}

func (v *AggregateDataExchangePropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AggregateDataExchangePropertyNames(value)
	for _, existing := range AllowedAggregateDataExchangePropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AggregateDataExchangePropertyNames", value)
}

// NewAggregateDataExchangePropertyNamesFromValue returns a pointer to a valid AggregateDataExchangePropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregateDataExchangePropertyNamesFromValue(v string) (*AggregateDataExchangePropertyNames, error) {
	ev := AggregateDataExchangePropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AggregateDataExchangePropertyNames: valid values are %v", v, AllowedAggregateDataExchangePropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggregateDataExchangePropertyNames) IsValid() bool {
	for _, existing := range AllowedAggregateDataExchangePropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AggregateDataExchangePropertyNames value
func (v AggregateDataExchangePropertyNames) Ptr() *AggregateDataExchangePropertyNames {
	return &v
}

type NullableAggregateDataExchangePropertyNames struct {
	value *AggregateDataExchangePropertyNames
	isSet bool
}

func (v NullableAggregateDataExchangePropertyNames) Get() *AggregateDataExchangePropertyNames {
	return v.value
}

func (v *NullableAggregateDataExchangePropertyNames) Set(val *AggregateDataExchangePropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateDataExchangePropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateDataExchangePropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateDataExchangePropertyNames(val *AggregateDataExchangePropertyNames) *NullableAggregateDataExchangePropertyNames {
	return &NullableAggregateDataExchangePropertyNames{value: val, isSet: true}
}

func (v NullableAggregateDataExchangePropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateDataExchangePropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
