/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CascadeSharingReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CascadeSharingReport{}

// CascadeSharingReport struct for CascadeSharingReport
type CascadeSharingReport struct {
	CountUpdatedDashboardItems int32                  `json:"countUpdatedDashboardItems"`
	ErrorReports               []ErrorReport          `json:"errorReports,omitempty"`
	UpdateObjects              *map[string][]IdObject `json:"updateObjects,omitempty"`
}

type _CascadeSharingReport CascadeSharingReport

// NewCascadeSharingReport instantiates a new CascadeSharingReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCascadeSharingReport(countUpdatedDashboardItems int32) *CascadeSharingReport {
	this := CascadeSharingReport{}
	this.CountUpdatedDashboardItems = countUpdatedDashboardItems
	return &this
}

// NewCascadeSharingReportWithDefaults instantiates a new CascadeSharingReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCascadeSharingReportWithDefaults() *CascadeSharingReport {
	this := CascadeSharingReport{}
	return &this
}

// GetCountUpdatedDashboardItems returns the CountUpdatedDashboardItems field value
func (o *CascadeSharingReport) GetCountUpdatedDashboardItems() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CountUpdatedDashboardItems
}

// GetCountUpdatedDashboardItemsOk returns a tuple with the CountUpdatedDashboardItems field value
// and a boolean to check if the value has been set.
func (o *CascadeSharingReport) GetCountUpdatedDashboardItemsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountUpdatedDashboardItems, true
}

// SetCountUpdatedDashboardItems sets field value
func (o *CascadeSharingReport) SetCountUpdatedDashboardItems(v int32) {
	o.CountUpdatedDashboardItems = v
}

// GetErrorReports returns the ErrorReports field value if set, zero value otherwise.
func (o *CascadeSharingReport) GetErrorReports() []ErrorReport {
	if o == nil || IsNil(o.ErrorReports) {
		var ret []ErrorReport
		return ret
	}
	return o.ErrorReports
}

// GetErrorReportsOk returns a tuple with the ErrorReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CascadeSharingReport) GetErrorReportsOk() ([]ErrorReport, bool) {
	if o == nil || IsNil(o.ErrorReports) {
		return nil, false
	}
	return o.ErrorReports, true
}

// HasErrorReports returns a boolean if a field has been set.
func (o *CascadeSharingReport) HasErrorReports() bool {
	if o != nil && !IsNil(o.ErrorReports) {
		return true
	}

	return false
}

// SetErrorReports gets a reference to the given []ErrorReport and assigns it to the ErrorReports field.
func (o *CascadeSharingReport) SetErrorReports(v []ErrorReport) {
	o.ErrorReports = v
}

// GetUpdateObjects returns the UpdateObjects field value if set, zero value otherwise.
func (o *CascadeSharingReport) GetUpdateObjects() map[string][]IdObject {
	if o == nil || IsNil(o.UpdateObjects) {
		var ret map[string][]IdObject
		return ret
	}
	return *o.UpdateObjects
}

// GetUpdateObjectsOk returns a tuple with the UpdateObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CascadeSharingReport) GetUpdateObjectsOk() (*map[string][]IdObject, bool) {
	if o == nil || IsNil(o.UpdateObjects) {
		return nil, false
	}
	return o.UpdateObjects, true
}

// HasUpdateObjects returns a boolean if a field has been set.
func (o *CascadeSharingReport) HasUpdateObjects() bool {
	if o != nil && !IsNil(o.UpdateObjects) {
		return true
	}

	return false
}

// SetUpdateObjects gets a reference to the given map[string][]IdObject and assigns it to the UpdateObjects field.
func (o *CascadeSharingReport) SetUpdateObjects(v map[string][]IdObject) {
	o.UpdateObjects = &v
}

func (o CascadeSharingReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CascadeSharingReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["countUpdatedDashboardItems"] = o.CountUpdatedDashboardItems
	if !IsNil(o.ErrorReports) {
		toSerialize["errorReports"] = o.ErrorReports
	}
	if !IsNil(o.UpdateObjects) {
		toSerialize["updateObjects"] = o.UpdateObjects
	}
	return toSerialize, nil
}

func (o *CascadeSharingReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"countUpdatedDashboardItems",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCascadeSharingReport := _CascadeSharingReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCascadeSharingReport)

	if err != nil {
		return err
	}

	*o = CascadeSharingReport(varCascadeSharingReport)

	return err
}

type NullableCascadeSharingReport struct {
	value *CascadeSharingReport
	isSet bool
}

func (v NullableCascadeSharingReport) Get() *CascadeSharingReport {
	return v.value
}

func (v *NullableCascadeSharingReport) Set(val *CascadeSharingReport) {
	v.value = val
	v.isSet = true
}

func (v NullableCascadeSharingReport) IsSet() bool {
	return v.isSet
}

func (v *NullableCascadeSharingReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCascadeSharingReport(val *CascadeSharingReport) *NullableCascadeSharingReport {
	return &NullableCascadeSharingReport{value: val, isSet: true}
}

func (v NullableCascadeSharingReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCascadeSharingReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
