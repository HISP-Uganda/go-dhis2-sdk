/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ProgramCategoryMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProgramCategoryMapping{}

// ProgramCategoryMapping struct for ProgramCategoryMapping
type ProgramCategoryMapping struct {
	CategoryId     *string                        `json:"categoryId,omitempty"`
	Id             *string                        `json:"id,omitempty"`
	MappingName    *string                        `json:"mappingName,omitempty"`
	OptionMappings []ProgramCategoryOptionMapping `json:"optionMappings,omitempty"`
}

// NewProgramCategoryMapping instantiates a new ProgramCategoryMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgramCategoryMapping() *ProgramCategoryMapping {
	this := ProgramCategoryMapping{}
	return &this
}

// NewProgramCategoryMappingWithDefaults instantiates a new ProgramCategoryMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgramCategoryMappingWithDefaults() *ProgramCategoryMapping {
	this := ProgramCategoryMapping{}
	return &this
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *ProgramCategoryMapping) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramCategoryMapping) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *ProgramCategoryMapping) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *ProgramCategoryMapping) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProgramCategoryMapping) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramCategoryMapping) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProgramCategoryMapping) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProgramCategoryMapping) SetId(v string) {
	o.Id = &v
}

// GetMappingName returns the MappingName field value if set, zero value otherwise.
func (o *ProgramCategoryMapping) GetMappingName() string {
	if o == nil || IsNil(o.MappingName) {
		var ret string
		return ret
	}
	return *o.MappingName
}

// GetMappingNameOk returns a tuple with the MappingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramCategoryMapping) GetMappingNameOk() (*string, bool) {
	if o == nil || IsNil(o.MappingName) {
		return nil, false
	}
	return o.MappingName, true
}

// HasMappingName returns a boolean if a field has been set.
func (o *ProgramCategoryMapping) HasMappingName() bool {
	if o != nil && !IsNil(o.MappingName) {
		return true
	}

	return false
}

// SetMappingName gets a reference to the given string and assigns it to the MappingName field.
func (o *ProgramCategoryMapping) SetMappingName(v string) {
	o.MappingName = &v
}

// GetOptionMappings returns the OptionMappings field value if set, zero value otherwise.
func (o *ProgramCategoryMapping) GetOptionMappings() []ProgramCategoryOptionMapping {
	if o == nil || IsNil(o.OptionMappings) {
		var ret []ProgramCategoryOptionMapping
		return ret
	}
	return o.OptionMappings
}

// GetOptionMappingsOk returns a tuple with the OptionMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramCategoryMapping) GetOptionMappingsOk() ([]ProgramCategoryOptionMapping, bool) {
	if o == nil || IsNil(o.OptionMappings) {
		return nil, false
	}
	return o.OptionMappings, true
}

// HasOptionMappings returns a boolean if a field has been set.
func (o *ProgramCategoryMapping) HasOptionMappings() bool {
	if o != nil && !IsNil(o.OptionMappings) {
		return true
	}

	return false
}

// SetOptionMappings gets a reference to the given []ProgramCategoryOptionMapping and assigns it to the OptionMappings field.
func (o *ProgramCategoryMapping) SetOptionMappings(v []ProgramCategoryOptionMapping) {
	o.OptionMappings = v
}

func (o ProgramCategoryMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProgramCategoryMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryId) {
		toSerialize["categoryId"] = o.CategoryId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MappingName) {
		toSerialize["mappingName"] = o.MappingName
	}
	if !IsNil(o.OptionMappings) {
		toSerialize["optionMappings"] = o.OptionMappings
	}
	return toSerialize, nil
}

type NullableProgramCategoryMapping struct {
	value *ProgramCategoryMapping
	isSet bool
}

func (v NullableProgramCategoryMapping) Get() *ProgramCategoryMapping {
	return v.value
}

func (v *NullableProgramCategoryMapping) Set(val *ProgramCategoryMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramCategoryMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramCategoryMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramCategoryMapping(val *ProgramCategoryMapping) *NullableProgramCategoryMapping {
	return &NullableProgramCategoryMapping{value: val, isSet: true}
}

func (v NullableProgramCategoryMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramCategoryMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
