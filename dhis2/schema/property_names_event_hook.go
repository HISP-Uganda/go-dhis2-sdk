/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesEventHook the model 'PropertyNamesEventHook'
type PropertyNamesEventHook string

// List of PropertyNames_EventHook
const (
	PROPERTYNAMESEVENTHOOK_ACCESS              PropertyNamesEventHook = "access"
	PROPERTYNAMESEVENTHOOK_ATTRIBUTE_VALUES    PropertyNamesEventHook = "attributeValues"
	PROPERTYNAMESEVENTHOOK_CODE                PropertyNamesEventHook = "code"
	PROPERTYNAMESEVENTHOOK_CREATED             PropertyNamesEventHook = "created"
	PROPERTYNAMESEVENTHOOK_CREATED_BY          PropertyNamesEventHook = "createdBy"
	PROPERTYNAMESEVENTHOOK_DESCRIPTION         PropertyNamesEventHook = "description"
	PROPERTYNAMESEVENTHOOK_DISABLED            PropertyNamesEventHook = "disabled"
	PROPERTYNAMESEVENTHOOK_DISPLAY_NAME        PropertyNamesEventHook = "displayName"
	PROPERTYNAMESEVENTHOOK_EXTERNAL_ACCESS     PropertyNamesEventHook = "externalAccess"
	PROPERTYNAMESEVENTHOOK_FAVORITE            PropertyNamesEventHook = "favorite"
	PROPERTYNAMESEVENTHOOK_FAVORITES           PropertyNamesEventHook = "favorites"
	PROPERTYNAMESEVENTHOOK_HREF                PropertyNamesEventHook = "href"
	PROPERTYNAMESEVENTHOOK_ID                  PropertyNamesEventHook = "id"
	PROPERTYNAMESEVENTHOOK_LAST_UPDATED        PropertyNamesEventHook = "lastUpdated"
	PROPERTYNAMESEVENTHOOK_LAST_UPDATED_BY     PropertyNamesEventHook = "lastUpdatedBy"
	PROPERTYNAMESEVENTHOOK_NAME                PropertyNamesEventHook = "name"
	PROPERTYNAMESEVENTHOOK_PUBLIC_ACCESS       PropertyNamesEventHook = "publicAccess"
	PROPERTYNAMESEVENTHOOK_SHARING             PropertyNamesEventHook = "sharing"
	PROPERTYNAMESEVENTHOOK_SOURCE              PropertyNamesEventHook = "source"
	PROPERTYNAMESEVENTHOOK_TARGETS             PropertyNamesEventHook = "targets"
	PROPERTYNAMESEVENTHOOK_TRANSLATIONS        PropertyNamesEventHook = "translations"
	PROPERTYNAMESEVENTHOOK_USER                PropertyNamesEventHook = "user"
	PROPERTYNAMESEVENTHOOK_USER_ACCESSES       PropertyNamesEventHook = "userAccesses"
	PROPERTYNAMESEVENTHOOK_USER_GROUP_ACCESSES PropertyNamesEventHook = "userGroupAccesses"
)

// All allowed values of PropertyNamesEventHook enum
var AllowedPropertyNamesEventHookEnumValues = []PropertyNamesEventHook{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"disabled",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"source",
	"targets",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesEventHook) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesEventHook(value)
	for _, existing := range AllowedPropertyNamesEventHookEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesEventHook", value)
}

// NewPropertyNamesEventHookFromValue returns a pointer to a valid PropertyNamesEventHook
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesEventHookFromValue(v string) (*PropertyNamesEventHook, error) {
	ev := PropertyNamesEventHook(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesEventHook: valid values are %v", v, AllowedPropertyNamesEventHookEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesEventHook) IsValid() bool {
	for _, existing := range AllowedPropertyNamesEventHookEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_EventHook value
func (v PropertyNamesEventHook) Ptr() *PropertyNamesEventHook {
	return &v
}

type NullablePropertyNamesEventHook struct {
	value *PropertyNamesEventHook
	isSet bool
}

func (v NullablePropertyNamesEventHook) Get() *PropertyNamesEventHook {
	return v.value
}

func (v *NullablePropertyNamesEventHook) Set(val *PropertyNamesEventHook) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesEventHook) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesEventHook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesEventHook(val *PropertyNamesEventHook) *NullablePropertyNamesEventHook {
	return &NullablePropertyNamesEventHook{value: val, isSet: true}
}

func (v NullablePropertyNamesEventHook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesEventHook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
