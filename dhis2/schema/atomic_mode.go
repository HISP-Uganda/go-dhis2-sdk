/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AtomicMode the model 'AtomicMode'
type AtomicMode string

// List of AtomicMode
const (
	ATOMICMODE_ALL  AtomicMode = "ALL"
	ATOMICMODE_NONE AtomicMode = "NONE"
)

// All allowed values of AtomicMode enum
var AllowedAtomicModeEnumValues = []AtomicMode{
	"ALL",
	"NONE",
}

func (v *AtomicMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AtomicMode(value)
	for _, existing := range AllowedAtomicModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AtomicMode", value)
}

// NewAtomicModeFromValue returns a pointer to a valid AtomicMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAtomicModeFromValue(v string) (*AtomicMode, error) {
	ev := AtomicMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AtomicMode: valid values are %v", v, AllowedAtomicModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AtomicMode) IsValid() bool {
	for _, existing := range AllowedAtomicModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AtomicMode value
func (v AtomicMode) Ptr() *AtomicMode {
	return &v
}

type NullableAtomicMode struct {
	value *AtomicMode
	isSet bool
}

func (v NullableAtomicMode) Get() *AtomicMode {
	return v.value
}

func (v *NullableAtomicMode) Set(val *AtomicMode) {
	v.value = val
	v.isSet = true
}

func (v NullableAtomicMode) IsSet() bool {
	return v.isSet
}

func (v *NullableAtomicMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtomicMode(val *AtomicMode) *NullableAtomicMode {
	return &NullableAtomicMode{value: val, isSet: true}
}

func (v NullableAtomicMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtomicMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
