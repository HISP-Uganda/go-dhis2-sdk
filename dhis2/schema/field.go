/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Field type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Field{}

// Field struct for Field
type Field struct {
	CategoryOptionCombo *string   `json:"categoryOptionCombo,omitempty"`
	Comment             *string   `json:"comment,omitempty"`
	DataElement         *string   `json:"dataElement,omitempty"`
	Label               *string   `json:"label,omitempty"`
	OptionSet           *string   `json:"optionSet,omitempty"`
	Type                ValueType `json:"type"`
	Value               *string   `json:"value,omitempty"`
}

type _Field Field

// NewField instantiates a new Field object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewField(type_ ValueType) *Field {
	this := Field{}
	this.Type = type_
	return &this
}

// NewFieldWithDefaults instantiates a new Field object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldWithDefaults() *Field {
	this := Field{}
	return &this
}

// GetCategoryOptionCombo returns the CategoryOptionCombo field value if set, zero value otherwise.
func (o *Field) GetCategoryOptionCombo() string {
	if o == nil || IsNil(o.CategoryOptionCombo) {
		var ret string
		return ret
	}
	return *o.CategoryOptionCombo
}

// GetCategoryOptionComboOk returns a tuple with the CategoryOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetCategoryOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryOptionCombo) {
		return nil, false
	}
	return o.CategoryOptionCombo, true
}

// HasCategoryOptionCombo returns a boolean if a field has been set.
func (o *Field) HasCategoryOptionCombo() bool {
	if o != nil && !IsNil(o.CategoryOptionCombo) {
		return true
	}

	return false
}

// SetCategoryOptionCombo gets a reference to the given string and assigns it to the CategoryOptionCombo field.
func (o *Field) SetCategoryOptionCombo(v string) {
	o.CategoryOptionCombo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Field) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Field) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Field) SetComment(v string) {
	o.Comment = &v
}

// GetDataElement returns the DataElement field value if set, zero value otherwise.
func (o *Field) GetDataElement() string {
	if o == nil || IsNil(o.DataElement) {
		var ret string
		return ret
	}
	return *o.DataElement
}

// GetDataElementOk returns a tuple with the DataElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetDataElementOk() (*string, bool) {
	if o == nil || IsNil(o.DataElement) {
		return nil, false
	}
	return o.DataElement, true
}

// HasDataElement returns a boolean if a field has been set.
func (o *Field) HasDataElement() bool {
	if o != nil && !IsNil(o.DataElement) {
		return true
	}

	return false
}

// SetDataElement gets a reference to the given string and assigns it to the DataElement field.
func (o *Field) SetDataElement(v string) {
	o.DataElement = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Field) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Field) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Field) SetLabel(v string) {
	o.Label = &v
}

// GetOptionSet returns the OptionSet field value if set, zero value otherwise.
func (o *Field) GetOptionSet() string {
	if o == nil || IsNil(o.OptionSet) {
		var ret string
		return ret
	}
	return *o.OptionSet
}

// GetOptionSetOk returns a tuple with the OptionSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetOptionSetOk() (*string, bool) {
	if o == nil || IsNil(o.OptionSet) {
		return nil, false
	}
	return o.OptionSet, true
}

// HasOptionSet returns a boolean if a field has been set.
func (o *Field) HasOptionSet() bool {
	if o != nil && !IsNil(o.OptionSet) {
		return true
	}

	return false
}

// SetOptionSet gets a reference to the given string and assigns it to the OptionSet field.
func (o *Field) SetOptionSet(v string) {
	o.OptionSet = &v
}

// GetType returns the Type field value
func (o *Field) GetType() ValueType {
	if o == nil {
		var ret ValueType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Field) GetTypeOk() (*ValueType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Field) SetType(v ValueType) {
	o.Type = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Field) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Field) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Field) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Field) SetValue(v string) {
	o.Value = &v
}

func (o Field) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Field) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryOptionCombo) {
		toSerialize["categoryOptionCombo"] = o.CategoryOptionCombo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DataElement) {
		toSerialize["dataElement"] = o.DataElement
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.OptionSet) {
		toSerialize["optionSet"] = o.OptionSet
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *Field) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varField := _Field{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varField)

	if err != nil {
		return err
	}

	*o = Field(varField)

	return err
}

type NullableField struct {
	value *Field
	isSet bool
}

func (v NullableField) Get() *Field {
	return v.value
}

func (v *NullableField) Set(val *Field) {
	v.value = val
	v.isSet = true
}

func (v NullableField) IsSet() bool {
	return v.isSet
}

func (v *NullableField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableField(val *Field) *NullableField {
	return &NullableField{value: val, isSet: true}
}

func (v NullableField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
