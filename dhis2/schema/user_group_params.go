/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// checks if the UserGroupParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserGroupParams{}

// UserGroupParams struct for UserGroupParams
type UserGroupParams struct {
	AttributeValues []AttributeValueParams                                `json:"attributeValues,omitempty"`
	Code            *string                                               `json:"code,omitempty"`
	Created         *time.Time                                            `json:"created,omitempty"`
	CreatedBy       *AggregateDataExchangeParamsCreatedBy                 `json:"createdBy,omitempty"`
	DisplayName     *string                                               `json:"displayName,omitempty"`
	Favorite        *bool                                                 `json:"favorite,omitempty"`
	Favorites       []string                                              `json:"favorites,omitempty"`
	Id              *string                                               `json:"id,omitempty"`
	LastUpdated     *time.Time                                            `json:"lastUpdated,omitempty"`
	LastUpdatedBy   *AggregateDataExchangeParamsCreatedBy                 `json:"lastUpdatedBy,omitempty"`
	ManagedByGroups []DataSetNotificationTemplateParamsRecipientUserGroup `json:"managedByGroups,omitempty"`
	ManagedGroups   []DataSetNotificationTemplateParamsRecipientUserGroup `json:"managedGroups,omitempty"`
	Name            *string                                               `json:"name,omitempty"`
	Sharing         *Sharing                                              `json:"sharing,omitempty"`
	Translations    []Translation                                         `json:"translations,omitempty"`
	Users           []AggregateDataExchangeParamsCreatedBy                `json:"users,omitempty"`
}

// NewUserGroupParams instantiates a new UserGroupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGroupParams() *UserGroupParams {
	this := UserGroupParams{}
	return &this
}

// NewUserGroupParamsWithDefaults instantiates a new UserGroupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGroupParamsWithDefaults() *UserGroupParams {
	this := UserGroupParams{}
	return &this
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *UserGroupParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *UserGroupParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *UserGroupParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UserGroupParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UserGroupParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *UserGroupParams) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *UserGroupParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *UserGroupParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *UserGroupParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *UserGroupParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *UserGroupParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *UserGroupParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UserGroupParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UserGroupParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UserGroupParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *UserGroupParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *UserGroupParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *UserGroupParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *UserGroupParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *UserGroupParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *UserGroupParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserGroupParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserGroupParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserGroupParams) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *UserGroupParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *UserGroupParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *UserGroupParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *UserGroupParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *UserGroupParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *UserGroupParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetManagedByGroups returns the ManagedByGroups field value if set, zero value otherwise.
func (o *UserGroupParams) GetManagedByGroups() []DataSetNotificationTemplateParamsRecipientUserGroup {
	if o == nil || IsNil(o.ManagedByGroups) {
		var ret []DataSetNotificationTemplateParamsRecipientUserGroup
		return ret
	}
	return o.ManagedByGroups
}

// GetManagedByGroupsOk returns a tuple with the ManagedByGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetManagedByGroupsOk() ([]DataSetNotificationTemplateParamsRecipientUserGroup, bool) {
	if o == nil || IsNil(o.ManagedByGroups) {
		return nil, false
	}
	return o.ManagedByGroups, true
}

// HasManagedByGroups returns a boolean if a field has been set.
func (o *UserGroupParams) HasManagedByGroups() bool {
	if o != nil && !IsNil(o.ManagedByGroups) {
		return true
	}

	return false
}

// SetManagedByGroups gets a reference to the given []DataSetNotificationTemplateParamsRecipientUserGroup and assigns it to the ManagedByGroups field.
func (o *UserGroupParams) SetManagedByGroups(v []DataSetNotificationTemplateParamsRecipientUserGroup) {
	o.ManagedByGroups = v
}

// GetManagedGroups returns the ManagedGroups field value if set, zero value otherwise.
func (o *UserGroupParams) GetManagedGroups() []DataSetNotificationTemplateParamsRecipientUserGroup {
	if o == nil || IsNil(o.ManagedGroups) {
		var ret []DataSetNotificationTemplateParamsRecipientUserGroup
		return ret
	}
	return o.ManagedGroups
}

// GetManagedGroupsOk returns a tuple with the ManagedGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetManagedGroupsOk() ([]DataSetNotificationTemplateParamsRecipientUserGroup, bool) {
	if o == nil || IsNil(o.ManagedGroups) {
		return nil, false
	}
	return o.ManagedGroups, true
}

// HasManagedGroups returns a boolean if a field has been set.
func (o *UserGroupParams) HasManagedGroups() bool {
	if o != nil && !IsNil(o.ManagedGroups) {
		return true
	}

	return false
}

// SetManagedGroups gets a reference to the given []DataSetNotificationTemplateParamsRecipientUserGroup and assigns it to the ManagedGroups field.
func (o *UserGroupParams) SetManagedGroups(v []DataSetNotificationTemplateParamsRecipientUserGroup) {
	o.ManagedGroups = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserGroupParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserGroupParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserGroupParams) SetName(v string) {
	o.Name = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *UserGroupParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *UserGroupParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *UserGroupParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *UserGroupParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *UserGroupParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *UserGroupParams) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UserGroupParams) GetUsers() []AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.Users) {
		var ret []AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupParams) GetUsersOk() ([]AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UserGroupParams) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []AggregateDataExchangeParamsCreatedBy and assigns it to the Users field.
func (o *UserGroupParams) SetUsers(v []AggregateDataExchangeParamsCreatedBy) {
	o.Users = v
}

func (o UserGroupParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserGroupParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.ManagedByGroups) {
		toSerialize["managedByGroups"] = o.ManagedByGroups
	}
	if !IsNil(o.ManagedGroups) {
		toSerialize["managedGroups"] = o.ManagedGroups
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableUserGroupParams struct {
	value *UserGroupParams
	isSet bool
}

func (v NullableUserGroupParams) Get() *UserGroupParams {
	return v.value
}

func (v *NullableUserGroupParams) Set(val *UserGroupParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGroupParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGroupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGroupParams(val *UserGroupParams) *NullableUserGroupParams {
	return &NullableUserGroupParams{value: val, isSet: true}
}

func (v NullableUserGroupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGroupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
