/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the QueryModifiers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryModifiers{}

// QueryModifiers struct for QueryModifiers
type QueryModifiers struct {
	AggregationType AggregationType `json:"aggregationType"`
	MaxDate         *time.Time      `json:"maxDate,omitempty"`
	MinDate         *time.Time      `json:"minDate,omitempty"`
	PeriodOffset    int32           `json:"periodOffset"`
	ValueType       ValueType       `json:"valueType"`
	YearToDate      *bool           `json:"yearToDate,omitempty"`
}

type _QueryModifiers QueryModifiers

// NewQueryModifiers instantiates a new QueryModifiers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryModifiers(aggregationType AggregationType, periodOffset int32, valueType ValueType) *QueryModifiers {
	this := QueryModifiers{}
	this.AggregationType = aggregationType
	this.PeriodOffset = periodOffset
	this.ValueType = valueType
	return &this
}

// NewQueryModifiersWithDefaults instantiates a new QueryModifiers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryModifiersWithDefaults() *QueryModifiers {
	this := QueryModifiers{}
	return &this
}

// GetAggregationType returns the AggregationType field value
func (o *QueryModifiers) GetAggregationType() AggregationType {
	if o == nil {
		var ret AggregationType
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *QueryModifiers) GetAggregationTypeOk() (*AggregationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *QueryModifiers) SetAggregationType(v AggregationType) {
	o.AggregationType = v
}

// GetMaxDate returns the MaxDate field value if set, zero value otherwise.
func (o *QueryModifiers) GetMaxDate() time.Time {
	if o == nil || IsNil(o.MaxDate) {
		var ret time.Time
		return ret
	}
	return *o.MaxDate
}

// GetMaxDateOk returns a tuple with the MaxDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryModifiers) GetMaxDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.MaxDate) {
		return nil, false
	}
	return o.MaxDate, true
}

// HasMaxDate returns a boolean if a field has been set.
func (o *QueryModifiers) HasMaxDate() bool {
	if o != nil && !IsNil(o.MaxDate) {
		return true
	}

	return false
}

// SetMaxDate gets a reference to the given time.Time and assigns it to the MaxDate field.
func (o *QueryModifiers) SetMaxDate(v time.Time) {
	o.MaxDate = &v
}

// GetMinDate returns the MinDate field value if set, zero value otherwise.
func (o *QueryModifiers) GetMinDate() time.Time {
	if o == nil || IsNil(o.MinDate) {
		var ret time.Time
		return ret
	}
	return *o.MinDate
}

// GetMinDateOk returns a tuple with the MinDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryModifiers) GetMinDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.MinDate) {
		return nil, false
	}
	return o.MinDate, true
}

// HasMinDate returns a boolean if a field has been set.
func (o *QueryModifiers) HasMinDate() bool {
	if o != nil && !IsNil(o.MinDate) {
		return true
	}

	return false
}

// SetMinDate gets a reference to the given time.Time and assigns it to the MinDate field.
func (o *QueryModifiers) SetMinDate(v time.Time) {
	o.MinDate = &v
}

// GetPeriodOffset returns the PeriodOffset field value
func (o *QueryModifiers) GetPeriodOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PeriodOffset
}

// GetPeriodOffsetOk returns a tuple with the PeriodOffset field value
// and a boolean to check if the value has been set.
func (o *QueryModifiers) GetPeriodOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeriodOffset, true
}

// SetPeriodOffset sets field value
func (o *QueryModifiers) SetPeriodOffset(v int32) {
	o.PeriodOffset = v
}

// GetValueType returns the ValueType field value
func (o *QueryModifiers) GetValueType() ValueType {
	if o == nil {
		var ret ValueType
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *QueryModifiers) GetValueTypeOk() (*ValueType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *QueryModifiers) SetValueType(v ValueType) {
	o.ValueType = v
}

// GetYearToDate returns the YearToDate field value if set, zero value otherwise.
func (o *QueryModifiers) GetYearToDate() bool {
	if o == nil || IsNil(o.YearToDate) {
		var ret bool
		return ret
	}
	return *o.YearToDate
}

// GetYearToDateOk returns a tuple with the YearToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryModifiers) GetYearToDateOk() (*bool, bool) {
	if o == nil || IsNil(o.YearToDate) {
		return nil, false
	}
	return o.YearToDate, true
}

// HasYearToDate returns a boolean if a field has been set.
func (o *QueryModifiers) HasYearToDate() bool {
	if o != nil && !IsNil(o.YearToDate) {
		return true
	}

	return false
}

// SetYearToDate gets a reference to the given bool and assigns it to the YearToDate field.
func (o *QueryModifiers) SetYearToDate(v bool) {
	o.YearToDate = &v
}

func (o QueryModifiers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryModifiers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregationType"] = o.AggregationType
	if !IsNil(o.MaxDate) {
		toSerialize["maxDate"] = o.MaxDate
	}
	if !IsNil(o.MinDate) {
		toSerialize["minDate"] = o.MinDate
	}
	toSerialize["periodOffset"] = o.PeriodOffset
	toSerialize["valueType"] = o.ValueType
	if !IsNil(o.YearToDate) {
		toSerialize["yearToDate"] = o.YearToDate
	}
	return toSerialize, nil
}

func (o *QueryModifiers) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregationType",
		"periodOffset",
		"valueType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryModifiers := _QueryModifiers{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryModifiers)

	if err != nil {
		return err
	}

	*o = QueryModifiers(varQueryModifiers)

	return err
}

type NullableQueryModifiers struct {
	value *QueryModifiers
	isSet bool
}

func (v NullableQueryModifiers) Get() *QueryModifiers {
	return v.value
}

func (v *NullableQueryModifiers) Set(val *QueryModifiers) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryModifiers) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryModifiers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryModifiers(val *QueryModifiers) *NullableQueryModifiers {
	return &NullableQueryModifiers{value: val, isSet: true}
}

func (v NullableQueryModifiers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryModifiers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
