/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// Include the model 'Include'
type Include string

// List of Include
const (
	INCLUDE_FALSE Include = "FALSE"
	INCLUDE_TRUE  Include = "TRUE"
	INCLUDE_AUTO  Include = "AUTO"
)

// All allowed values of Include enum
var AllowedIncludeEnumValues = []Include{
	"FALSE",
	"TRUE",
	"AUTO",
}

func (v *Include) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Include(value)
	for _, existing := range AllowedIncludeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Include", value)
}

// NewIncludeFromValue returns a pointer to a valid Include
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIncludeFromValue(v string) (*Include, error) {
	ev := Include(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Include: valid values are %v", v, AllowedIncludeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Include) IsValid() bool {
	for _, existing := range AllowedIncludeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Include value
func (v Include) Ptr() *Include {
	return &v
}

type NullableInclude struct {
	value *Include
	isSet bool
}

func (v NullableInclude) Get() *Include {
	return v.value
}

func (v *NullableInclude) Set(val *Include) {
	v.value = val
	v.isSet = true
}

func (v NullableInclude) IsSet() bool {
	return v.isSet
}

func (v *NullableInclude) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInclude(val *Include) *NullableInclude {
	return &NullableInclude{value: val, isSet: true}
}

func (v NullableInclude) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInclude) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
