/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the DataAnalysisParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataAnalysisParams{}

// DataAnalysisParams struct for DataAnalysisParams
type DataAnalysisParams struct {
	Ds                []string `json:"ds,omitempty"`
	EndDate           *string  `json:"endDate,omitempty"`
	Ou                *string  `json:"ou,omitempty"`
	StandardDeviation *float64 `json:"standardDeviation,omitempty"`
	StartDate         *string  `json:"startDate,omitempty"`
}

// NewDataAnalysisParams instantiates a new DataAnalysisParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataAnalysisParams() *DataAnalysisParams {
	this := DataAnalysisParams{}
	return &this
}

// NewDataAnalysisParamsWithDefaults instantiates a new DataAnalysisParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataAnalysisParamsWithDefaults() *DataAnalysisParams {
	this := DataAnalysisParams{}
	return &this
}

// GetDs returns the Ds field value if set, zero value otherwise.
func (o *DataAnalysisParams) GetDs() []string {
	if o == nil || IsNil(o.Ds) {
		var ret []string
		return ret
	}
	return o.Ds
}

// GetDsOk returns a tuple with the Ds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAnalysisParams) GetDsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ds) {
		return nil, false
	}
	return o.Ds, true
}

// HasDs returns a boolean if a field has been set.
func (o *DataAnalysisParams) HasDs() bool {
	if o != nil && !IsNil(o.Ds) {
		return true
	}

	return false
}

// SetDs gets a reference to the given []string and assigns it to the Ds field.
func (o *DataAnalysisParams) SetDs(v []string) {
	o.Ds = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *DataAnalysisParams) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAnalysisParams) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *DataAnalysisParams) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *DataAnalysisParams) SetEndDate(v string) {
	o.EndDate = &v
}

// GetOu returns the Ou field value if set, zero value otherwise.
func (o *DataAnalysisParams) GetOu() string {
	if o == nil || IsNil(o.Ou) {
		var ret string
		return ret
	}
	return *o.Ou
}

// GetOuOk returns a tuple with the Ou field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAnalysisParams) GetOuOk() (*string, bool) {
	if o == nil || IsNil(o.Ou) {
		return nil, false
	}
	return o.Ou, true
}

// HasOu returns a boolean if a field has been set.
func (o *DataAnalysisParams) HasOu() bool {
	if o != nil && !IsNil(o.Ou) {
		return true
	}

	return false
}

// SetOu gets a reference to the given string and assigns it to the Ou field.
func (o *DataAnalysisParams) SetOu(v string) {
	o.Ou = &v
}

// GetStandardDeviation returns the StandardDeviation field value if set, zero value otherwise.
func (o *DataAnalysisParams) GetStandardDeviation() float64 {
	if o == nil || IsNil(o.StandardDeviation) {
		var ret float64
		return ret
	}
	return *o.StandardDeviation
}

// GetStandardDeviationOk returns a tuple with the StandardDeviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAnalysisParams) GetStandardDeviationOk() (*float64, bool) {
	if o == nil || IsNil(o.StandardDeviation) {
		return nil, false
	}
	return o.StandardDeviation, true
}

// HasStandardDeviation returns a boolean if a field has been set.
func (o *DataAnalysisParams) HasStandardDeviation() bool {
	if o != nil && !IsNil(o.StandardDeviation) {
		return true
	}

	return false
}

// SetStandardDeviation gets a reference to the given float64 and assigns it to the StandardDeviation field.
func (o *DataAnalysisParams) SetStandardDeviation(v float64) {
	o.StandardDeviation = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *DataAnalysisParams) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAnalysisParams) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *DataAnalysisParams) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *DataAnalysisParams) SetStartDate(v string) {
	o.StartDate = &v
}

func (o DataAnalysisParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataAnalysisParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ds) {
		toSerialize["ds"] = o.Ds
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Ou) {
		toSerialize["ou"] = o.Ou
	}
	if !IsNil(o.StandardDeviation) {
		toSerialize["standardDeviation"] = o.StandardDeviation
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	return toSerialize, nil
}

type NullableDataAnalysisParams struct {
	value *DataAnalysisParams
	isSet bool
}

func (v NullableDataAnalysisParams) Get() *DataAnalysisParams {
	return v.value
}

func (v *NullableDataAnalysisParams) Set(val *DataAnalysisParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDataAnalysisParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDataAnalysisParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataAnalysisParams(val *DataAnalysisParams) *NullableDataAnalysisParams {
	return &NullableDataAnalysisParams{value: val, isSet: true}
}

func (v NullableDataAnalysisParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataAnalysisParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
