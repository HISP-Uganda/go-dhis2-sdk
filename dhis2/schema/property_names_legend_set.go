/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesLegendSet the model 'PropertyNamesLegendSet'
type PropertyNamesLegendSet string

// List of PropertyNames_LegendSet
const (
	PROPERTYNAMESLEGENDSET_ACCESS              PropertyNamesLegendSet = "access"
	PROPERTYNAMESLEGENDSET_ATTRIBUTE_VALUES    PropertyNamesLegendSet = "attributeValues"
	PROPERTYNAMESLEGENDSET_CODE                PropertyNamesLegendSet = "code"
	PROPERTYNAMESLEGENDSET_CREATED             PropertyNamesLegendSet = "created"
	PROPERTYNAMESLEGENDSET_CREATED_BY          PropertyNamesLegendSet = "createdBy"
	PROPERTYNAMESLEGENDSET_DISPLAY_NAME        PropertyNamesLegendSet = "displayName"
	PROPERTYNAMESLEGENDSET_EXTERNAL_ACCESS     PropertyNamesLegendSet = "externalAccess"
	PROPERTYNAMESLEGENDSET_FAVORITE            PropertyNamesLegendSet = "favorite"
	PROPERTYNAMESLEGENDSET_FAVORITES           PropertyNamesLegendSet = "favorites"
	PROPERTYNAMESLEGENDSET_HREF                PropertyNamesLegendSet = "href"
	PROPERTYNAMESLEGENDSET_ID                  PropertyNamesLegendSet = "id"
	PROPERTYNAMESLEGENDSET_LAST_UPDATED        PropertyNamesLegendSet = "lastUpdated"
	PROPERTYNAMESLEGENDSET_LAST_UPDATED_BY     PropertyNamesLegendSet = "lastUpdatedBy"
	PROPERTYNAMESLEGENDSET_LEGENDS             PropertyNamesLegendSet = "legends"
	PROPERTYNAMESLEGENDSET_NAME                PropertyNamesLegendSet = "name"
	PROPERTYNAMESLEGENDSET_PUBLIC_ACCESS       PropertyNamesLegendSet = "publicAccess"
	PROPERTYNAMESLEGENDSET_SHARING             PropertyNamesLegendSet = "sharing"
	PROPERTYNAMESLEGENDSET_SYMBOLIZER          PropertyNamesLegendSet = "symbolizer"
	PROPERTYNAMESLEGENDSET_TRANSLATIONS        PropertyNamesLegendSet = "translations"
	PROPERTYNAMESLEGENDSET_USER                PropertyNamesLegendSet = "user"
	PROPERTYNAMESLEGENDSET_USER_ACCESSES       PropertyNamesLegendSet = "userAccesses"
	PROPERTYNAMESLEGENDSET_USER_GROUP_ACCESSES PropertyNamesLegendSet = "userGroupAccesses"
)

// All allowed values of PropertyNamesLegendSet enum
var AllowedPropertyNamesLegendSetEnumValues = []PropertyNamesLegendSet{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"legends",
	"name",
	"publicAccess",
	"sharing",
	"symbolizer",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesLegendSet) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesLegendSet(value)
	for _, existing := range AllowedPropertyNamesLegendSetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesLegendSet", value)
}

// NewPropertyNamesLegendSetFromValue returns a pointer to a valid PropertyNamesLegendSet
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesLegendSetFromValue(v string) (*PropertyNamesLegendSet, error) {
	ev := PropertyNamesLegendSet(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesLegendSet: valid values are %v", v, AllowedPropertyNamesLegendSetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesLegendSet) IsValid() bool {
	for _, existing := range AllowedPropertyNamesLegendSetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_LegendSet value
func (v PropertyNamesLegendSet) Ptr() *PropertyNamesLegendSet {
	return &v
}

type NullablePropertyNamesLegendSet struct {
	value *PropertyNamesLegendSet
	isSet bool
}

func (v NullablePropertyNamesLegendSet) Get() *PropertyNamesLegendSet {
	return v.value
}

func (v *NullablePropertyNamesLegendSet) Set(val *PropertyNamesLegendSet) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesLegendSet) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesLegendSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesLegendSet(val *PropertyNamesLegendSet) *NullablePropertyNamesLegendSet {
	return &NullablePropertyNamesLegendSet{value: val, isSet: true}
}

func (v NullablePropertyNamesLegendSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesLegendSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
