/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DeliveryChannel the model 'DeliveryChannel'
type DeliveryChannel string

// List of DeliveryChannel
const (
	DELIVERYCHANNEL_SMS   DeliveryChannel = "SMS"
	DELIVERYCHANNEL_EMAIL DeliveryChannel = "EMAIL"
	DELIVERYCHANNEL_HTTP  DeliveryChannel = "HTTP"
)

// All allowed values of DeliveryChannel enum
var AllowedDeliveryChannelEnumValues = []DeliveryChannel{
	"SMS",
	"EMAIL",
	"HTTP",
}

func (v *DeliveryChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeliveryChannel(value)
	for _, existing := range AllowedDeliveryChannelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeliveryChannel", value)
}

// NewDeliveryChannelFromValue returns a pointer to a valid DeliveryChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeliveryChannelFromValue(v string) (*DeliveryChannel, error) {
	ev := DeliveryChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeliveryChannel: valid values are %v", v, AllowedDeliveryChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeliveryChannel) IsValid() bool {
	for _, existing := range AllowedDeliveryChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeliveryChannel value
func (v DeliveryChannel) Ptr() *DeliveryChannel {
	return &v
}

type NullableDeliveryChannel struct {
	value *DeliveryChannel
	isSet bool
}

func (v NullableDeliveryChannel) Get() *DeliveryChannel {
	return v.value
}

func (v *NullableDeliveryChannel) Set(val *DeliveryChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryChannel(val *DeliveryChannel) *NullableDeliveryChannel {
	return &NullableDeliveryChannel{value: val, isSet: true}
}

func (v NullableDeliveryChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
