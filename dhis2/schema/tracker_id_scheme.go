/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// TrackerIdScheme the model 'TrackerIdScheme'
type TrackerIdScheme string

// List of TrackerIdScheme
const (
	TRACKERIDSCHEME_UID       TrackerIdScheme = "UID"
	TRACKERIDSCHEME_CODE      TrackerIdScheme = "CODE"
	TRACKERIDSCHEME_NAME      TrackerIdScheme = "NAME"
	TRACKERIDSCHEME_ATTRIBUTE TrackerIdScheme = "ATTRIBUTE"
)

// All allowed values of TrackerIdScheme enum
var AllowedTrackerIdSchemeEnumValues = []TrackerIdScheme{
	"UID",
	"CODE",
	"NAME",
	"ATTRIBUTE",
}

func (v *TrackerIdScheme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackerIdScheme(value)
	for _, existing := range AllowedTrackerIdSchemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackerIdScheme", value)
}

// NewTrackerIdSchemeFromValue returns a pointer to a valid TrackerIdScheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackerIdSchemeFromValue(v string) (*TrackerIdScheme, error) {
	ev := TrackerIdScheme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackerIdScheme: valid values are %v", v, AllowedTrackerIdSchemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackerIdScheme) IsValid() bool {
	for _, existing := range AllowedTrackerIdSchemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackerIdScheme value
func (v TrackerIdScheme) Ptr() *TrackerIdScheme {
	return &v
}

type NullableTrackerIdScheme struct {
	value *TrackerIdScheme
	isSet bool
}

func (v NullableTrackerIdScheme) Get() *TrackerIdScheme {
	return v.value
}

func (v *NullableTrackerIdScheme) Set(val *TrackerIdScheme) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerIdScheme) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerIdScheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerIdScheme(val *TrackerIdScheme) *NullableTrackerIdScheme {
	return &NullableTrackerIdScheme{value: val, isSet: true}
}

func (v NullableTrackerIdScheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerIdScheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
