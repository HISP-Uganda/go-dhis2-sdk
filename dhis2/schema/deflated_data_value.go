/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DeflatedDataValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeflatedDataValue{}

// DeflatedDataValue struct for DeflatedDataValue
type DeflatedDataValue struct {
	AttributeOptionComboId  int64   `json:"attributeOptionComboId"`
	CategoryOptionComboId   int64   `json:"categoryOptionComboId"`
	CategoryOptionComboName *string `json:"categoryOptionComboName,omitempty"`
	Comment                 *string `json:"comment,omitempty"`
	DataElementId           int64   `json:"dataElementId"`
	DataElementName         *string `json:"dataElementName,omitempty"`
	Deleted                 *bool   `json:"deleted,omitempty"`
	Followup                *bool   `json:"followup,omitempty"`
	Max                     int32   `json:"max"`
	Min                     int32   `json:"min"`
	Period                  *string `json:"period,omitempty"`
	PeriodId                int64   `json:"periodId"`
	SourceId                int64   `json:"sourceId"`
	SourceName              *string `json:"sourceName,omitempty"`
	SourcePath              *string `json:"sourcePath,omitempty"`
	Value                   *string `json:"value,omitempty"`
}

type _DeflatedDataValue DeflatedDataValue

// NewDeflatedDataValue instantiates a new DeflatedDataValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeflatedDataValue(attributeOptionComboId int64, categoryOptionComboId int64, dataElementId int64, max int32, min int32, periodId int64, sourceId int64) *DeflatedDataValue {
	this := DeflatedDataValue{}
	this.AttributeOptionComboId = attributeOptionComboId
	this.CategoryOptionComboId = categoryOptionComboId
	this.DataElementId = dataElementId
	this.Max = max
	this.Min = min
	this.PeriodId = periodId
	this.SourceId = sourceId
	return &this
}

// NewDeflatedDataValueWithDefaults instantiates a new DeflatedDataValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeflatedDataValueWithDefaults() *DeflatedDataValue {
	this := DeflatedDataValue{}
	return &this
}

// GetAttributeOptionComboId returns the AttributeOptionComboId field value
func (o *DeflatedDataValue) GetAttributeOptionComboId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AttributeOptionComboId
}

// GetAttributeOptionComboIdOk returns a tuple with the AttributeOptionComboId field value
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetAttributeOptionComboIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeOptionComboId, true
}

// SetAttributeOptionComboId sets field value
func (o *DeflatedDataValue) SetAttributeOptionComboId(v int64) {
	o.AttributeOptionComboId = v
}

// GetCategoryOptionComboId returns the CategoryOptionComboId field value
func (o *DeflatedDataValue) GetCategoryOptionComboId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CategoryOptionComboId
}

// GetCategoryOptionComboIdOk returns a tuple with the CategoryOptionComboId field value
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetCategoryOptionComboIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryOptionComboId, true
}

// SetCategoryOptionComboId sets field value
func (o *DeflatedDataValue) SetCategoryOptionComboId(v int64) {
	o.CategoryOptionComboId = v
}

// GetCategoryOptionComboName returns the CategoryOptionComboName field value if set, zero value otherwise.
func (o *DeflatedDataValue) GetCategoryOptionComboName() string {
	if o == nil || IsNil(o.CategoryOptionComboName) {
		var ret string
		return ret
	}
	return *o.CategoryOptionComboName
}

// GetCategoryOptionComboNameOk returns a tuple with the CategoryOptionComboName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetCategoryOptionComboNameOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryOptionComboName) {
		return nil, false
	}
	return o.CategoryOptionComboName, true
}

// HasCategoryOptionComboName returns a boolean if a field has been set.
func (o *DeflatedDataValue) HasCategoryOptionComboName() bool {
	if o != nil && !IsNil(o.CategoryOptionComboName) {
		return true
	}

	return false
}

// SetCategoryOptionComboName gets a reference to the given string and assigns it to the CategoryOptionComboName field.
func (o *DeflatedDataValue) SetCategoryOptionComboName(v string) {
	o.CategoryOptionComboName = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DeflatedDataValue) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DeflatedDataValue) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DeflatedDataValue) SetComment(v string) {
	o.Comment = &v
}

// GetDataElementId returns the DataElementId field value
func (o *DeflatedDataValue) GetDataElementId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DataElementId
}

// GetDataElementIdOk returns a tuple with the DataElementId field value
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetDataElementIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataElementId, true
}

// SetDataElementId sets field value
func (o *DeflatedDataValue) SetDataElementId(v int64) {
	o.DataElementId = v
}

// GetDataElementName returns the DataElementName field value if set, zero value otherwise.
func (o *DeflatedDataValue) GetDataElementName() string {
	if o == nil || IsNil(o.DataElementName) {
		var ret string
		return ret
	}
	return *o.DataElementName
}

// GetDataElementNameOk returns a tuple with the DataElementName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetDataElementNameOk() (*string, bool) {
	if o == nil || IsNil(o.DataElementName) {
		return nil, false
	}
	return o.DataElementName, true
}

// HasDataElementName returns a boolean if a field has been set.
func (o *DeflatedDataValue) HasDataElementName() bool {
	if o != nil && !IsNil(o.DataElementName) {
		return true
	}

	return false
}

// SetDataElementName gets a reference to the given string and assigns it to the DataElementName field.
func (o *DeflatedDataValue) SetDataElementName(v string) {
	o.DataElementName = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *DeflatedDataValue) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *DeflatedDataValue) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *DeflatedDataValue) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetFollowup returns the Followup field value if set, zero value otherwise.
func (o *DeflatedDataValue) GetFollowup() bool {
	if o == nil || IsNil(o.Followup) {
		var ret bool
		return ret
	}
	return *o.Followup
}

// GetFollowupOk returns a tuple with the Followup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetFollowupOk() (*bool, bool) {
	if o == nil || IsNil(o.Followup) {
		return nil, false
	}
	return o.Followup, true
}

// HasFollowup returns a boolean if a field has been set.
func (o *DeflatedDataValue) HasFollowup() bool {
	if o != nil && !IsNil(o.Followup) {
		return true
	}

	return false
}

// SetFollowup gets a reference to the given bool and assigns it to the Followup field.
func (o *DeflatedDataValue) SetFollowup(v bool) {
	o.Followup = &v
}

// GetMax returns the Max field value
func (o *DeflatedDataValue) GetMax() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Max
}

// GetMaxOk returns a tuple with the Max field value
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetMaxOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Max, true
}

// SetMax sets field value
func (o *DeflatedDataValue) SetMax(v int32) {
	o.Max = v
}

// GetMin returns the Min field value
func (o *DeflatedDataValue) GetMin() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Min
}

// GetMinOk returns a tuple with the Min field value
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetMinOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Min, true
}

// SetMin sets field value
func (o *DeflatedDataValue) SetMin(v int32) {
	o.Min = v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *DeflatedDataValue) GetPeriod() string {
	if o == nil || IsNil(o.Period) {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *DeflatedDataValue) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *DeflatedDataValue) SetPeriod(v string) {
	o.Period = &v
}

// GetPeriodId returns the PeriodId field value
func (o *DeflatedDataValue) GetPeriodId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PeriodId
}

// GetPeriodIdOk returns a tuple with the PeriodId field value
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetPeriodIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeriodId, true
}

// SetPeriodId sets field value
func (o *DeflatedDataValue) SetPeriodId(v int64) {
	o.PeriodId = v
}

// GetSourceId returns the SourceId field value
func (o *DeflatedDataValue) GetSourceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetSourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *DeflatedDataValue) SetSourceId(v int64) {
	o.SourceId = v
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *DeflatedDataValue) GetSourceName() string {
	if o == nil || IsNil(o.SourceName) {
		var ret string
		return ret
	}
	return *o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceName) {
		return nil, false
	}
	return o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *DeflatedDataValue) HasSourceName() bool {
	if o != nil && !IsNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the SourceName field.
func (o *DeflatedDataValue) SetSourceName(v string) {
	o.SourceName = &v
}

// GetSourcePath returns the SourcePath field value if set, zero value otherwise.
func (o *DeflatedDataValue) GetSourcePath() string {
	if o == nil || IsNil(o.SourcePath) {
		var ret string
		return ret
	}
	return *o.SourcePath
}

// GetSourcePathOk returns a tuple with the SourcePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetSourcePathOk() (*string, bool) {
	if o == nil || IsNil(o.SourcePath) {
		return nil, false
	}
	return o.SourcePath, true
}

// HasSourcePath returns a boolean if a field has been set.
func (o *DeflatedDataValue) HasSourcePath() bool {
	if o != nil && !IsNil(o.SourcePath) {
		return true
	}

	return false
}

// SetSourcePath gets a reference to the given string and assigns it to the SourcePath field.
func (o *DeflatedDataValue) SetSourcePath(v string) {
	o.SourcePath = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DeflatedDataValue) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeflatedDataValue) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DeflatedDataValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DeflatedDataValue) SetValue(v string) {
	o.Value = &v
}

func (o DeflatedDataValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeflatedDataValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attributeOptionComboId"] = o.AttributeOptionComboId
	toSerialize["categoryOptionComboId"] = o.CategoryOptionComboId
	if !IsNil(o.CategoryOptionComboName) {
		toSerialize["categoryOptionComboName"] = o.CategoryOptionComboName
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	toSerialize["dataElementId"] = o.DataElementId
	if !IsNil(o.DataElementName) {
		toSerialize["dataElementName"] = o.DataElementName
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Followup) {
		toSerialize["followup"] = o.Followup
	}
	toSerialize["max"] = o.Max
	toSerialize["min"] = o.Min
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	toSerialize["periodId"] = o.PeriodId
	toSerialize["sourceId"] = o.SourceId
	if !IsNil(o.SourceName) {
		toSerialize["sourceName"] = o.SourceName
	}
	if !IsNil(o.SourcePath) {
		toSerialize["sourcePath"] = o.SourcePath
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *DeflatedDataValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attributeOptionComboId",
		"categoryOptionComboId",
		"dataElementId",
		"max",
		"min",
		"periodId",
		"sourceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeflatedDataValue := _DeflatedDataValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeflatedDataValue)

	if err != nil {
		return err
	}

	*o = DeflatedDataValue(varDeflatedDataValue)

	return err
}

type NullableDeflatedDataValue struct {
	value *DeflatedDataValue
	isSet bool
}

func (v NullableDeflatedDataValue) Get() *DeflatedDataValue {
	return v.value
}

func (v *NullableDeflatedDataValue) Set(val *DeflatedDataValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDeflatedDataValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDeflatedDataValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeflatedDataValue(val *DeflatedDataValue) *NullableDeflatedDataValue {
	return &NullableDeflatedDataValue{value: val, isSet: true}
}

func (v NullableDeflatedDataValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeflatedDataValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
