/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Stage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stage{}

// Stage struct for Stage
type Stage struct {
	Complete      *bool             `json:"complete,omitempty"`
	CompletedTime *time.Time        `json:"completedTime,omitempty"`
	Description   *string           `json:"description,omitempty"`
	Duration      int64             `json:"duration"`
	Error         *string           `json:"error,omitempty"`
	Items         []Item            `json:"items,omitempty"`
	OnFailure     FailurePolicy     `json:"onFailure"`
	Status        JobProgressStatus `json:"status"`
	Summary       *string           `json:"summary,omitempty"`
	TotalItems    int32             `json:"totalItems"`
}

type _Stage Stage

// NewStage instantiates a new Stage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStage(duration int64, onFailure FailurePolicy, status JobProgressStatus, totalItems int32) *Stage {
	this := Stage{}
	this.Duration = duration
	this.OnFailure = onFailure
	this.Status = status
	this.TotalItems = totalItems
	return &this
}

// NewStageWithDefaults instantiates a new Stage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStageWithDefaults() *Stage {
	this := Stage{}
	return &this
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *Stage) GetComplete() bool {
	if o == nil || IsNil(o.Complete) {
		var ret bool
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetCompleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Complete) {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *Stage) HasComplete() bool {
	if o != nil && !IsNil(o.Complete) {
		return true
	}

	return false
}

// SetComplete gets a reference to the given bool and assigns it to the Complete field.
func (o *Stage) SetComplete(v bool) {
	o.Complete = &v
}

// GetCompletedTime returns the CompletedTime field value if set, zero value otherwise.
func (o *Stage) GetCompletedTime() time.Time {
	if o == nil || IsNil(o.CompletedTime) {
		var ret time.Time
		return ret
	}
	return *o.CompletedTime
}

// GetCompletedTimeOk returns a tuple with the CompletedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetCompletedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedTime) {
		return nil, false
	}
	return o.CompletedTime, true
}

// HasCompletedTime returns a boolean if a field has been set.
func (o *Stage) HasCompletedTime() bool {
	if o != nil && !IsNil(o.CompletedTime) {
		return true
	}

	return false
}

// SetCompletedTime gets a reference to the given time.Time and assigns it to the CompletedTime field.
func (o *Stage) SetCompletedTime(v time.Time) {
	o.CompletedTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Stage) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Stage) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Stage) SetDescription(v string) {
	o.Description = &v
}

// GetDuration returns the Duration field value
func (o *Stage) GetDuration() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *Stage) GetDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *Stage) SetDuration(v int64) {
	o.Duration = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Stage) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Stage) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *Stage) SetError(v string) {
	o.Error = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Stage) GetItems() []Item {
	if o == nil || IsNil(o.Items) {
		var ret []Item
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetItemsOk() ([]Item, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Stage) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Item and assigns it to the Items field.
func (o *Stage) SetItems(v []Item) {
	o.Items = v
}

// GetOnFailure returns the OnFailure field value
func (o *Stage) GetOnFailure() FailurePolicy {
	if o == nil {
		var ret FailurePolicy
		return ret
	}

	return o.OnFailure
}

// GetOnFailureOk returns a tuple with the OnFailure field value
// and a boolean to check if the value has been set.
func (o *Stage) GetOnFailureOk() (*FailurePolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnFailure, true
}

// SetOnFailure sets field value
func (o *Stage) SetOnFailure(v FailurePolicy) {
	o.OnFailure = v
}

// GetStatus returns the Status field value
func (o *Stage) GetStatus() JobProgressStatus {
	if o == nil {
		var ret JobProgressStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Stage) GetStatusOk() (*JobProgressStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Stage) SetStatus(v JobProgressStatus) {
	o.Status = v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *Stage) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *Stage) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *Stage) SetSummary(v string) {
	o.Summary = &v
}

// GetTotalItems returns the TotalItems field value
func (o *Stage) GetTotalItems() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalItems
}

// GetTotalItemsOk returns a tuple with the TotalItems field value
// and a boolean to check if the value has been set.
func (o *Stage) GetTotalItemsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalItems, true
}

// SetTotalItems sets field value
func (o *Stage) SetTotalItems(v int32) {
	o.TotalItems = v
}

func (o Stage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Complete) {
		toSerialize["complete"] = o.Complete
	}
	if !IsNil(o.CompletedTime) {
		toSerialize["completedTime"] = o.CompletedTime
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["duration"] = o.Duration
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	toSerialize["onFailure"] = o.OnFailure
	toSerialize["status"] = o.Status
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	toSerialize["totalItems"] = o.TotalItems
	return toSerialize, nil
}

func (o *Stage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"duration",
		"onFailure",
		"status",
		"totalItems",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStage := _Stage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStage)

	if err != nil {
		return err
	}

	*o = Stage(varStage)

	return err
}

type NullableStage struct {
	value *Stage
	isSet bool
}

func (v NullableStage) Get() *Stage {
	return v.value
}

func (v *NullableStage) Set(val *Stage) {
	v.value = val
	v.isSet = true
}

func (v NullableStage) IsSet() bool {
	return v.isSet
}

func (v *NullableStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStage(val *Stage) *NullableStage {
	return &NullableStage{value: val, isSet: true}
}

func (v NullableStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
