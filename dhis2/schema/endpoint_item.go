/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// EndpointItem the model 'EndpointItem'
type EndpointItem string

// List of EndpointItem
const (
	ENDPOINTITEM_EVENT                   EndpointItem = "EVENT"
	ENDPOINTITEM_ENROLLMENT              EndpointItem = "ENROLLMENT"
	ENDPOINTITEM_TRACKED_ENTITY_INSTANCE EndpointItem = "TRACKED_ENTITY_INSTANCE"
)

// All allowed values of EndpointItem enum
var AllowedEndpointItemEnumValues = []EndpointItem{
	"EVENT",
	"ENROLLMENT",
	"TRACKED_ENTITY_INSTANCE",
}

func (v *EndpointItem) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointItem(value)
	for _, existing := range AllowedEndpointItemEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointItem", value)
}

// NewEndpointItemFromValue returns a pointer to a valid EndpointItem
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointItemFromValue(v string) (*EndpointItem, error) {
	ev := EndpointItem(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointItem: valid values are %v", v, AllowedEndpointItemEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointItem) IsValid() bool {
	for _, existing := range AllowedEndpointItemEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointItem value
func (v EndpointItem) Ptr() *EndpointItem {
	return &v
}

type NullableEndpointItem struct {
	value *EndpointItem
	isSet bool
}

func (v NullableEndpointItem) Get() *EndpointItem {
	return v.value
}

func (v *NullableEndpointItem) Set(val *EndpointItem) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointItem) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointItem(val *EndpointItem) *NullableEndpointItem {
	return &NullableEndpointItem{value: val, isSet: true}
}

func (v NullableEndpointItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
