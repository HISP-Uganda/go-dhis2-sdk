/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the MapViewParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MapViewParams{}

// MapViewParams struct for MapViewParams
type MapViewParams struct {
	AggregationType                    AggregationType                                   `json:"aggregationType"`
	AreaRadius                         *int32                                            `json:"areaRadius,omitempty"`
	AttributeDimensions                []TrackedEntityAttributeDimensionParams           `json:"attributeDimensions,omitempty"`
	AttributeValues                    []AttributeValueParams                            `json:"attributeValues,omitempty"`
	CategoryDimensions                 []CategoryDimensionParams                         `json:"categoryDimensions,omitempty"`
	CategoryOptionGroupSetDimensions   []CategoryOptionGroupSetDimensionParams           `json:"categoryOptionGroupSetDimensions,omitempty"`
	Classes                            *int32                                            `json:"classes,omitempty"`
	Code                               *string                                           `json:"code,omitempty"`
	ColSubTotals                       *bool                                             `json:"colSubTotals,omitempty"`
	ColTotals                          *bool                                             `json:"colTotals,omitempty"`
	ColorHigh                          *string                                           `json:"colorHigh,omitempty"`
	ColorLow                           *string                                           `json:"colorLow,omitempty"`
	ColorScale                         *string                                           `json:"colorScale,omitempty"`
	ColumnDimensions                   []string                                          `json:"columnDimensions,omitempty"`
	Columns                            []EventChartParamsColumnsInner                    `json:"columns,omitempty"`
	CompletedOnly                      *bool                                             `json:"completedOnly,omitempty"`
	Config                             *string                                           `json:"config,omitempty"`
	Created                            *time.Time                                        `json:"created,omitempty"`
	CreatedBy                          *AggregateDataExchangeParamsCreatedBy             `json:"createdBy,omitempty"`
	CumulativeValues                   *bool                                             `json:"cumulativeValues,omitempty"`
	DataDimensionItems                 []DataDimensionItemParams                         `json:"dataDimensionItems,omitempty"`
	DataElementDimensions              []TrackedEntityDataElementDimensionParams         `json:"dataElementDimensions,omitempty"`
	DataElementGroupSetDimensions      []DataElementGroupSetDimensionParams              `json:"dataElementGroupSetDimensions,omitempty"`
	Description                        *string                                           `json:"description,omitempty"`
	DigitGroupSeparator                DigitGroupSeparator                               `json:"digitGroupSeparator"`
	DisplayBaseLineLabel               *string                                           `json:"displayBaseLineLabel,omitempty"`
	DisplayDescription                 *string                                           `json:"displayDescription,omitempty"`
	DisplayFormName                    *string                                           `json:"displayFormName,omitempty"`
	DisplayName                        *string                                           `json:"displayName,omitempty"`
	DisplayShortName                   *string                                           `json:"displayShortName,omitempty"`
	DisplaySubtitle                    *string                                           `json:"displaySubtitle,omitempty"`
	DisplayTargetLineLabel             *string                                           `json:"displayTargetLineLabel,omitempty"`
	DisplayTitle                       *string                                           `json:"displayTitle,omitempty"`
	EndDate                            *time.Time                                        `json:"endDate,omitempty"`
	EventClustering                    *bool                                             `json:"eventClustering,omitempty"`
	EventCoordinateField               *string                                           `json:"eventCoordinateField,omitempty"`
	EventPointColor                    *string                                           `json:"eventPointColor,omitempty"`
	EventPointRadius                   int32                                             `json:"eventPointRadius"`
	EventStatus                        EventStatus                                       `json:"eventStatus"`
	Favorite                           *bool                                             `json:"favorite,omitempty"`
	Favorites                          []string                                          `json:"favorites,omitempty"`
	FilterDimensions                   []string                                          `json:"filterDimensions,omitempty"`
	Filters                            []EventChartParamsColumnsInner                    `json:"filters,omitempty"`
	FollowUp                           *bool                                             `json:"followUp,omitempty"`
	FormName                           *string                                           `json:"formName,omitempty"`
	Hidden                             *bool                                             `json:"hidden,omitempty"`
	HideEmptyRowItems                  HideEmptyItemStrategy                             `json:"hideEmptyRowItems"`
	HideEmptyRows                      *bool                                             `json:"hideEmptyRows,omitempty"`
	HideLegend                         *bool                                             `json:"hideLegend,omitempty"`
	HideSubtitle                       *bool                                             `json:"hideSubtitle,omitempty"`
	HideTitle                          *bool                                             `json:"hideTitle,omitempty"`
	Id                                 *string                                           `json:"id,omitempty"`
	Interpretations                    []DataSetParamsInterpretationsInner               `json:"interpretations,omitempty"`
	ItemOrganisationUnitGroups         []EventChartParamsItemOrganisationUnitGroupsInner `json:"itemOrganisationUnitGroups,omitempty"`
	LabelFontColor                     *string                                           `json:"labelFontColor,omitempty"`
	LabelFontSize                      *string                                           `json:"labelFontSize,omitempty"`
	LabelFontStyle                     *string                                           `json:"labelFontStyle,omitempty"`
	LabelFontWeight                    *string                                           `json:"labelFontWeight,omitempty"`
	LabelTemplate                      *string                                           `json:"labelTemplate,omitempty"`
	Labels                             *bool                                             `json:"labels,omitempty"`
	LastUpdated                        *time.Time                                        `json:"lastUpdated,omitempty"`
	LastUpdatedBy                      *AggregateDataExchangeParamsCreatedBy             `json:"lastUpdatedBy,omitempty"`
	Layer                              *string                                           `json:"layer,omitempty"`
	Legend                             *LegendDefinitionsParams                          `json:"legend,omitempty"`
	LegendSet                          *LegendSetParams                                  `json:"legendSet,omitempty"`
	MetaData                           *map[string]MetadataItemParams                    `json:"metaData,omitempty"`
	Method                             *int32                                            `json:"method,omitempty"`
	Name                               *string                                           `json:"name,omitempty"`
	NoDataColor                        *string                                           `json:"noDataColor,omitempty"`
	NoSpaceBetweenColumns              *bool                                             `json:"noSpaceBetweenColumns,omitempty"`
	Opacity                            *float64                                          `json:"opacity,omitempty"`
	OrgUnitField                       *string                                           `json:"orgUnitField,omitempty"`
	OrgUnitFieldDisplayName            *string                                           `json:"orgUnitFieldDisplayName,omitempty"`
	OrganisationUnitColor              *string                                           `json:"organisationUnitColor,omitempty"`
	OrganisationUnitGroupSet           *OrganisationUnitGroupSetParams                   `json:"organisationUnitGroupSet,omitempty"`
	OrganisationUnitGroupSetDimensions []OrganisationUnitGroupSetDimensionParams         `json:"organisationUnitGroupSetDimensions,omitempty"`
	OrganisationUnitLevels             []int32                                           `json:"organisationUnitLevels,omitempty"`
	OrganisationUnitSelectionMode      OrganisationUnitSelectionMode                     `json:"organisationUnitSelectionMode"`
	OrganisationUnits                  []CategoryOptionParamsOrganisationUnitsInner      `json:"organisationUnits,omitempty"`
	ParentGraph                        *string                                           `json:"parentGraph,omitempty"`
	ParentLevel                        int32                                             `json:"parentLevel"`
	PercentStackedValues               *bool                                             `json:"percentStackedValues,omitempty"`
	Periods                            []string                                          `json:"periods,omitempty"`
	Program                            *ProgramParams                                    `json:"program,omitempty"`
	ProgramIndicatorDimensions         []TrackedEntityProgramIndicatorDimensionParams    `json:"programIndicatorDimensions,omitempty"`
	ProgramStage                       *ProgramStageParams                               `json:"programStage,omitempty"`
	ProgramStatus                      EnrollmentStatus                                  `json:"programStatus"`
	RadiusHigh                         *int32                                            `json:"radiusHigh,omitempty"`
	RadiusLow                          *int32                                            `json:"radiusLow,omitempty"`
	RegressionType                     RegressionType                                    `json:"regressionType"`
	RelativePeriods                    *RelativePeriods                                  `json:"relativePeriods,omitempty"`
	RenderingStrategy                  MapViewRenderingStrategy                          `json:"renderingStrategy"`
	RowSubTotals                       *bool                                             `json:"rowSubTotals,omitempty"`
	RowTotals                          *bool                                             `json:"rowTotals,omitempty"`
	Rows                               []EventChartParamsColumnsInner                    `json:"rows,omitempty"`
	Sharing                            *Sharing                                          `json:"sharing,omitempty"`
	ShortName                          *string                                           `json:"shortName,omitempty"`
	ShowData                           *bool                                             `json:"showData,omitempty"`
	ShowDimensionLabels                *bool                                             `json:"showDimensionLabels,omitempty"`
	ShowHierarchy                      *bool                                             `json:"showHierarchy,omitempty"`
	SkipRounding                       *bool                                             `json:"skipRounding,omitempty"`
	SortOrder                          int32                                             `json:"sortOrder"`
	StartDate                          *time.Time                                        `json:"startDate,omitempty"`
	// The actual type is unknown.   (Java type was: `class java.lang.Object`)
	StyleDataItem                     *Any                            `json:"styleDataItem,omitempty"`
	Subscribed                        *bool                           `json:"subscribed,omitempty"`
	Subscribers                       []string                        `json:"subscribers,omitempty"`
	Subtitle                          *string                         `json:"subtitle,omitempty"`
	ThematicMapType                   ThematicMapType                 `json:"thematicMapType"`
	TimeField                         *string                         `json:"timeField,omitempty"`
	Title                             *string                         `json:"title,omitempty"`
	TopLimit                          int32                           `json:"topLimit"`
	TrackedEntityType                 *MapViewParamsTrackedEntityType `json:"trackedEntityType,omitempty"`
	Translations                      []Translation                   `json:"translations,omitempty"`
	UserOrgUnitType                   UserOrgUnitType                 `json:"userOrgUnitType"`
	UserOrganisationUnit              *bool                           `json:"userOrganisationUnit,omitempty"`
	UserOrganisationUnitChildren      *bool                           `json:"userOrganisationUnitChildren,omitempty"`
	UserOrganisationUnitGrandChildren *bool                           `json:"userOrganisationUnitGrandChildren,omitempty"`
}

type _MapViewParams MapViewParams

// NewMapViewParams instantiates a new MapViewParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapViewParams(aggregationType AggregationType, digitGroupSeparator DigitGroupSeparator, eventPointRadius int32, eventStatus EventStatus, hideEmptyRowItems HideEmptyItemStrategy, organisationUnitSelectionMode OrganisationUnitSelectionMode, parentLevel int32, programStatus EnrollmentStatus, regressionType RegressionType, renderingStrategy MapViewRenderingStrategy, sortOrder int32, thematicMapType ThematicMapType, topLimit int32, userOrgUnitType UserOrgUnitType) *MapViewParams {
	this := MapViewParams{}
	this.AggregationType = aggregationType
	this.DigitGroupSeparator = digitGroupSeparator
	this.EventPointRadius = eventPointRadius
	this.EventStatus = eventStatus
	this.HideEmptyRowItems = hideEmptyRowItems
	this.OrganisationUnitSelectionMode = organisationUnitSelectionMode
	this.ParentLevel = parentLevel
	this.ProgramStatus = programStatus
	this.RegressionType = regressionType
	this.RenderingStrategy = renderingStrategy
	this.SortOrder = sortOrder
	this.ThematicMapType = thematicMapType
	this.TopLimit = topLimit
	this.UserOrgUnitType = userOrgUnitType
	return &this
}

// NewMapViewParamsWithDefaults instantiates a new MapViewParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapViewParamsWithDefaults() *MapViewParams {
	this := MapViewParams{}
	return &this
}

// GetAggregationType returns the AggregationType field value
func (o *MapViewParams) GetAggregationType() AggregationType {
	if o == nil {
		var ret AggregationType
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetAggregationTypeOk() (*AggregationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *MapViewParams) SetAggregationType(v AggregationType) {
	o.AggregationType = v
}

// GetAreaRadius returns the AreaRadius field value if set, zero value otherwise.
func (o *MapViewParams) GetAreaRadius() int32 {
	if o == nil || IsNil(o.AreaRadius) {
		var ret int32
		return ret
	}
	return *o.AreaRadius
}

// GetAreaRadiusOk returns a tuple with the AreaRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetAreaRadiusOk() (*int32, bool) {
	if o == nil || IsNil(o.AreaRadius) {
		return nil, false
	}
	return o.AreaRadius, true
}

// HasAreaRadius returns a boolean if a field has been set.
func (o *MapViewParams) HasAreaRadius() bool {
	if o != nil && !IsNil(o.AreaRadius) {
		return true
	}

	return false
}

// SetAreaRadius gets a reference to the given int32 and assigns it to the AreaRadius field.
func (o *MapViewParams) SetAreaRadius(v int32) {
	o.AreaRadius = &v
}

// GetAttributeDimensions returns the AttributeDimensions field value if set, zero value otherwise.
func (o *MapViewParams) GetAttributeDimensions() []TrackedEntityAttributeDimensionParams {
	if o == nil || IsNil(o.AttributeDimensions) {
		var ret []TrackedEntityAttributeDimensionParams
		return ret
	}
	return o.AttributeDimensions
}

// GetAttributeDimensionsOk returns a tuple with the AttributeDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetAttributeDimensionsOk() ([]TrackedEntityAttributeDimensionParams, bool) {
	if o == nil || IsNil(o.AttributeDimensions) {
		return nil, false
	}
	return o.AttributeDimensions, true
}

// HasAttributeDimensions returns a boolean if a field has been set.
func (o *MapViewParams) HasAttributeDimensions() bool {
	if o != nil && !IsNil(o.AttributeDimensions) {
		return true
	}

	return false
}

// SetAttributeDimensions gets a reference to the given []TrackedEntityAttributeDimensionParams and assigns it to the AttributeDimensions field.
func (o *MapViewParams) SetAttributeDimensions(v []TrackedEntityAttributeDimensionParams) {
	o.AttributeDimensions = v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *MapViewParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *MapViewParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *MapViewParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCategoryDimensions returns the CategoryDimensions field value if set, zero value otherwise.
func (o *MapViewParams) GetCategoryDimensions() []CategoryDimensionParams {
	if o == nil || IsNil(o.CategoryDimensions) {
		var ret []CategoryDimensionParams
		return ret
	}
	return o.CategoryDimensions
}

// GetCategoryDimensionsOk returns a tuple with the CategoryDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetCategoryDimensionsOk() ([]CategoryDimensionParams, bool) {
	if o == nil || IsNil(o.CategoryDimensions) {
		return nil, false
	}
	return o.CategoryDimensions, true
}

// HasCategoryDimensions returns a boolean if a field has been set.
func (o *MapViewParams) HasCategoryDimensions() bool {
	if o != nil && !IsNil(o.CategoryDimensions) {
		return true
	}

	return false
}

// SetCategoryDimensions gets a reference to the given []CategoryDimensionParams and assigns it to the CategoryDimensions field.
func (o *MapViewParams) SetCategoryDimensions(v []CategoryDimensionParams) {
	o.CategoryDimensions = v
}

// GetCategoryOptionGroupSetDimensions returns the CategoryOptionGroupSetDimensions field value if set, zero value otherwise.
func (o *MapViewParams) GetCategoryOptionGroupSetDimensions() []CategoryOptionGroupSetDimensionParams {
	if o == nil || IsNil(o.CategoryOptionGroupSetDimensions) {
		var ret []CategoryOptionGroupSetDimensionParams
		return ret
	}
	return o.CategoryOptionGroupSetDimensions
}

// GetCategoryOptionGroupSetDimensionsOk returns a tuple with the CategoryOptionGroupSetDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetCategoryOptionGroupSetDimensionsOk() ([]CategoryOptionGroupSetDimensionParams, bool) {
	if o == nil || IsNil(o.CategoryOptionGroupSetDimensions) {
		return nil, false
	}
	return o.CategoryOptionGroupSetDimensions, true
}

// HasCategoryOptionGroupSetDimensions returns a boolean if a field has been set.
func (o *MapViewParams) HasCategoryOptionGroupSetDimensions() bool {
	if o != nil && !IsNil(o.CategoryOptionGroupSetDimensions) {
		return true
	}

	return false
}

// SetCategoryOptionGroupSetDimensions gets a reference to the given []CategoryOptionGroupSetDimensionParams and assigns it to the CategoryOptionGroupSetDimensions field.
func (o *MapViewParams) SetCategoryOptionGroupSetDimensions(v []CategoryOptionGroupSetDimensionParams) {
	o.CategoryOptionGroupSetDimensions = v
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *MapViewParams) GetClasses() int32 {
	if o == nil || IsNil(o.Classes) {
		var ret int32
		return ret
	}
	return *o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetClassesOk() (*int32, bool) {
	if o == nil || IsNil(o.Classes) {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *MapViewParams) HasClasses() bool {
	if o != nil && !IsNil(o.Classes) {
		return true
	}

	return false
}

// SetClasses gets a reference to the given int32 and assigns it to the Classes field.
func (o *MapViewParams) SetClasses(v int32) {
	o.Classes = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MapViewParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MapViewParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *MapViewParams) SetCode(v string) {
	o.Code = &v
}

// GetColSubTotals returns the ColSubTotals field value if set, zero value otherwise.
func (o *MapViewParams) GetColSubTotals() bool {
	if o == nil || IsNil(o.ColSubTotals) {
		var ret bool
		return ret
	}
	return *o.ColSubTotals
}

// GetColSubTotalsOk returns a tuple with the ColSubTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetColSubTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.ColSubTotals) {
		return nil, false
	}
	return o.ColSubTotals, true
}

// HasColSubTotals returns a boolean if a field has been set.
func (o *MapViewParams) HasColSubTotals() bool {
	if o != nil && !IsNil(o.ColSubTotals) {
		return true
	}

	return false
}

// SetColSubTotals gets a reference to the given bool and assigns it to the ColSubTotals field.
func (o *MapViewParams) SetColSubTotals(v bool) {
	o.ColSubTotals = &v
}

// GetColTotals returns the ColTotals field value if set, zero value otherwise.
func (o *MapViewParams) GetColTotals() bool {
	if o == nil || IsNil(o.ColTotals) {
		var ret bool
		return ret
	}
	return *o.ColTotals
}

// GetColTotalsOk returns a tuple with the ColTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetColTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.ColTotals) {
		return nil, false
	}
	return o.ColTotals, true
}

// HasColTotals returns a boolean if a field has been set.
func (o *MapViewParams) HasColTotals() bool {
	if o != nil && !IsNil(o.ColTotals) {
		return true
	}

	return false
}

// SetColTotals gets a reference to the given bool and assigns it to the ColTotals field.
func (o *MapViewParams) SetColTotals(v bool) {
	o.ColTotals = &v
}

// GetColorHigh returns the ColorHigh field value if set, zero value otherwise.
func (o *MapViewParams) GetColorHigh() string {
	if o == nil || IsNil(o.ColorHigh) {
		var ret string
		return ret
	}
	return *o.ColorHigh
}

// GetColorHighOk returns a tuple with the ColorHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetColorHighOk() (*string, bool) {
	if o == nil || IsNil(o.ColorHigh) {
		return nil, false
	}
	return o.ColorHigh, true
}

// HasColorHigh returns a boolean if a field has been set.
func (o *MapViewParams) HasColorHigh() bool {
	if o != nil && !IsNil(o.ColorHigh) {
		return true
	}

	return false
}

// SetColorHigh gets a reference to the given string and assigns it to the ColorHigh field.
func (o *MapViewParams) SetColorHigh(v string) {
	o.ColorHigh = &v
}

// GetColorLow returns the ColorLow field value if set, zero value otherwise.
func (o *MapViewParams) GetColorLow() string {
	if o == nil || IsNil(o.ColorLow) {
		var ret string
		return ret
	}
	return *o.ColorLow
}

// GetColorLowOk returns a tuple with the ColorLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetColorLowOk() (*string, bool) {
	if o == nil || IsNil(o.ColorLow) {
		return nil, false
	}
	return o.ColorLow, true
}

// HasColorLow returns a boolean if a field has been set.
func (o *MapViewParams) HasColorLow() bool {
	if o != nil && !IsNil(o.ColorLow) {
		return true
	}

	return false
}

// SetColorLow gets a reference to the given string and assigns it to the ColorLow field.
func (o *MapViewParams) SetColorLow(v string) {
	o.ColorLow = &v
}

// GetColorScale returns the ColorScale field value if set, zero value otherwise.
func (o *MapViewParams) GetColorScale() string {
	if o == nil || IsNil(o.ColorScale) {
		var ret string
		return ret
	}
	return *o.ColorScale
}

// GetColorScaleOk returns a tuple with the ColorScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetColorScaleOk() (*string, bool) {
	if o == nil || IsNil(o.ColorScale) {
		return nil, false
	}
	return o.ColorScale, true
}

// HasColorScale returns a boolean if a field has been set.
func (o *MapViewParams) HasColorScale() bool {
	if o != nil && !IsNil(o.ColorScale) {
		return true
	}

	return false
}

// SetColorScale gets a reference to the given string and assigns it to the ColorScale field.
func (o *MapViewParams) SetColorScale(v string) {
	o.ColorScale = &v
}

// GetColumnDimensions returns the ColumnDimensions field value if set, zero value otherwise.
func (o *MapViewParams) GetColumnDimensions() []string {
	if o == nil || IsNil(o.ColumnDimensions) {
		var ret []string
		return ret
	}
	return o.ColumnDimensions
}

// GetColumnDimensionsOk returns a tuple with the ColumnDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetColumnDimensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ColumnDimensions) {
		return nil, false
	}
	return o.ColumnDimensions, true
}

// HasColumnDimensions returns a boolean if a field has been set.
func (o *MapViewParams) HasColumnDimensions() bool {
	if o != nil && !IsNil(o.ColumnDimensions) {
		return true
	}

	return false
}

// SetColumnDimensions gets a reference to the given []string and assigns it to the ColumnDimensions field.
func (o *MapViewParams) SetColumnDimensions(v []string) {
	o.ColumnDimensions = v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *MapViewParams) GetColumns() []EventChartParamsColumnsInner {
	if o == nil || IsNil(o.Columns) {
		var ret []EventChartParamsColumnsInner
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetColumnsOk() ([]EventChartParamsColumnsInner, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *MapViewParams) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []EventChartParamsColumnsInner and assigns it to the Columns field.
func (o *MapViewParams) SetColumns(v []EventChartParamsColumnsInner) {
	o.Columns = v
}

// GetCompletedOnly returns the CompletedOnly field value if set, zero value otherwise.
func (o *MapViewParams) GetCompletedOnly() bool {
	if o == nil || IsNil(o.CompletedOnly) {
		var ret bool
		return ret
	}
	return *o.CompletedOnly
}

// GetCompletedOnlyOk returns a tuple with the CompletedOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetCompletedOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.CompletedOnly) {
		return nil, false
	}
	return o.CompletedOnly, true
}

// HasCompletedOnly returns a boolean if a field has been set.
func (o *MapViewParams) HasCompletedOnly() bool {
	if o != nil && !IsNil(o.CompletedOnly) {
		return true
	}

	return false
}

// SetCompletedOnly gets a reference to the given bool and assigns it to the CompletedOnly field.
func (o *MapViewParams) SetCompletedOnly(v bool) {
	o.CompletedOnly = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *MapViewParams) GetConfig() string {
	if o == nil || IsNil(o.Config) {
		var ret string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetConfigOk() (*string, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *MapViewParams) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given string and assigns it to the Config field.
func (o *MapViewParams) SetConfig(v string) {
	o.Config = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *MapViewParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *MapViewParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *MapViewParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *MapViewParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *MapViewParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *MapViewParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetCumulativeValues returns the CumulativeValues field value if set, zero value otherwise.
func (o *MapViewParams) GetCumulativeValues() bool {
	if o == nil || IsNil(o.CumulativeValues) {
		var ret bool
		return ret
	}
	return *o.CumulativeValues
}

// GetCumulativeValuesOk returns a tuple with the CumulativeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetCumulativeValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.CumulativeValues) {
		return nil, false
	}
	return o.CumulativeValues, true
}

// HasCumulativeValues returns a boolean if a field has been set.
func (o *MapViewParams) HasCumulativeValues() bool {
	if o != nil && !IsNil(o.CumulativeValues) {
		return true
	}

	return false
}

// SetCumulativeValues gets a reference to the given bool and assigns it to the CumulativeValues field.
func (o *MapViewParams) SetCumulativeValues(v bool) {
	o.CumulativeValues = &v
}

// GetDataDimensionItems returns the DataDimensionItems field value if set, zero value otherwise.
func (o *MapViewParams) GetDataDimensionItems() []DataDimensionItemParams {
	if o == nil || IsNil(o.DataDimensionItems) {
		var ret []DataDimensionItemParams
		return ret
	}
	return o.DataDimensionItems
}

// GetDataDimensionItemsOk returns a tuple with the DataDimensionItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDataDimensionItemsOk() ([]DataDimensionItemParams, bool) {
	if o == nil || IsNil(o.DataDimensionItems) {
		return nil, false
	}
	return o.DataDimensionItems, true
}

// HasDataDimensionItems returns a boolean if a field has been set.
func (o *MapViewParams) HasDataDimensionItems() bool {
	if o != nil && !IsNil(o.DataDimensionItems) {
		return true
	}

	return false
}

// SetDataDimensionItems gets a reference to the given []DataDimensionItemParams and assigns it to the DataDimensionItems field.
func (o *MapViewParams) SetDataDimensionItems(v []DataDimensionItemParams) {
	o.DataDimensionItems = v
}

// GetDataElementDimensions returns the DataElementDimensions field value if set, zero value otherwise.
func (o *MapViewParams) GetDataElementDimensions() []TrackedEntityDataElementDimensionParams {
	if o == nil || IsNil(o.DataElementDimensions) {
		var ret []TrackedEntityDataElementDimensionParams
		return ret
	}
	return o.DataElementDimensions
}

// GetDataElementDimensionsOk returns a tuple with the DataElementDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDataElementDimensionsOk() ([]TrackedEntityDataElementDimensionParams, bool) {
	if o == nil || IsNil(o.DataElementDimensions) {
		return nil, false
	}
	return o.DataElementDimensions, true
}

// HasDataElementDimensions returns a boolean if a field has been set.
func (o *MapViewParams) HasDataElementDimensions() bool {
	if o != nil && !IsNil(o.DataElementDimensions) {
		return true
	}

	return false
}

// SetDataElementDimensions gets a reference to the given []TrackedEntityDataElementDimensionParams and assigns it to the DataElementDimensions field.
func (o *MapViewParams) SetDataElementDimensions(v []TrackedEntityDataElementDimensionParams) {
	o.DataElementDimensions = v
}

// GetDataElementGroupSetDimensions returns the DataElementGroupSetDimensions field value if set, zero value otherwise.
func (o *MapViewParams) GetDataElementGroupSetDimensions() []DataElementGroupSetDimensionParams {
	if o == nil || IsNil(o.DataElementGroupSetDimensions) {
		var ret []DataElementGroupSetDimensionParams
		return ret
	}
	return o.DataElementGroupSetDimensions
}

// GetDataElementGroupSetDimensionsOk returns a tuple with the DataElementGroupSetDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDataElementGroupSetDimensionsOk() ([]DataElementGroupSetDimensionParams, bool) {
	if o == nil || IsNil(o.DataElementGroupSetDimensions) {
		return nil, false
	}
	return o.DataElementGroupSetDimensions, true
}

// HasDataElementGroupSetDimensions returns a boolean if a field has been set.
func (o *MapViewParams) HasDataElementGroupSetDimensions() bool {
	if o != nil && !IsNil(o.DataElementGroupSetDimensions) {
		return true
	}

	return false
}

// SetDataElementGroupSetDimensions gets a reference to the given []DataElementGroupSetDimensionParams and assigns it to the DataElementGroupSetDimensions field.
func (o *MapViewParams) SetDataElementGroupSetDimensions(v []DataElementGroupSetDimensionParams) {
	o.DataElementGroupSetDimensions = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MapViewParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MapViewParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MapViewParams) SetDescription(v string) {
	o.Description = &v
}

// GetDigitGroupSeparator returns the DigitGroupSeparator field value
func (o *MapViewParams) GetDigitGroupSeparator() DigitGroupSeparator {
	if o == nil {
		var ret DigitGroupSeparator
		return ret
	}

	return o.DigitGroupSeparator
}

// GetDigitGroupSeparatorOk returns a tuple with the DigitGroupSeparator field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDigitGroupSeparatorOk() (*DigitGroupSeparator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DigitGroupSeparator, true
}

// SetDigitGroupSeparator sets field value
func (o *MapViewParams) SetDigitGroupSeparator(v DigitGroupSeparator) {
	o.DigitGroupSeparator = v
}

// GetDisplayBaseLineLabel returns the DisplayBaseLineLabel field value if set, zero value otherwise.
func (o *MapViewParams) GetDisplayBaseLineLabel() string {
	if o == nil || IsNil(o.DisplayBaseLineLabel) {
		var ret string
		return ret
	}
	return *o.DisplayBaseLineLabel
}

// GetDisplayBaseLineLabelOk returns a tuple with the DisplayBaseLineLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDisplayBaseLineLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayBaseLineLabel) {
		return nil, false
	}
	return o.DisplayBaseLineLabel, true
}

// HasDisplayBaseLineLabel returns a boolean if a field has been set.
func (o *MapViewParams) HasDisplayBaseLineLabel() bool {
	if o != nil && !IsNil(o.DisplayBaseLineLabel) {
		return true
	}

	return false
}

// SetDisplayBaseLineLabel gets a reference to the given string and assigns it to the DisplayBaseLineLabel field.
func (o *MapViewParams) SetDisplayBaseLineLabel(v string) {
	o.DisplayBaseLineLabel = &v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *MapViewParams) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *MapViewParams) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *MapViewParams) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayFormName returns the DisplayFormName field value if set, zero value otherwise.
func (o *MapViewParams) GetDisplayFormName() string {
	if o == nil || IsNil(o.DisplayFormName) {
		var ret string
		return ret
	}
	return *o.DisplayFormName
}

// GetDisplayFormNameOk returns a tuple with the DisplayFormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDisplayFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayFormName) {
		return nil, false
	}
	return o.DisplayFormName, true
}

// HasDisplayFormName returns a boolean if a field has been set.
func (o *MapViewParams) HasDisplayFormName() bool {
	if o != nil && !IsNil(o.DisplayFormName) {
		return true
	}

	return false
}

// SetDisplayFormName gets a reference to the given string and assigns it to the DisplayFormName field.
func (o *MapViewParams) SetDisplayFormName(v string) {
	o.DisplayFormName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *MapViewParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MapViewParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MapViewParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *MapViewParams) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *MapViewParams) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *MapViewParams) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetDisplaySubtitle returns the DisplaySubtitle field value if set, zero value otherwise.
func (o *MapViewParams) GetDisplaySubtitle() string {
	if o == nil || IsNil(o.DisplaySubtitle) {
		var ret string
		return ret
	}
	return *o.DisplaySubtitle
}

// GetDisplaySubtitleOk returns a tuple with the DisplaySubtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDisplaySubtitleOk() (*string, bool) {
	if o == nil || IsNil(o.DisplaySubtitle) {
		return nil, false
	}
	return o.DisplaySubtitle, true
}

// HasDisplaySubtitle returns a boolean if a field has been set.
func (o *MapViewParams) HasDisplaySubtitle() bool {
	if o != nil && !IsNil(o.DisplaySubtitle) {
		return true
	}

	return false
}

// SetDisplaySubtitle gets a reference to the given string and assigns it to the DisplaySubtitle field.
func (o *MapViewParams) SetDisplaySubtitle(v string) {
	o.DisplaySubtitle = &v
}

// GetDisplayTargetLineLabel returns the DisplayTargetLineLabel field value if set, zero value otherwise.
func (o *MapViewParams) GetDisplayTargetLineLabel() string {
	if o == nil || IsNil(o.DisplayTargetLineLabel) {
		var ret string
		return ret
	}
	return *o.DisplayTargetLineLabel
}

// GetDisplayTargetLineLabelOk returns a tuple with the DisplayTargetLineLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDisplayTargetLineLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayTargetLineLabel) {
		return nil, false
	}
	return o.DisplayTargetLineLabel, true
}

// HasDisplayTargetLineLabel returns a boolean if a field has been set.
func (o *MapViewParams) HasDisplayTargetLineLabel() bool {
	if o != nil && !IsNil(o.DisplayTargetLineLabel) {
		return true
	}

	return false
}

// SetDisplayTargetLineLabel gets a reference to the given string and assigns it to the DisplayTargetLineLabel field.
func (o *MapViewParams) SetDisplayTargetLineLabel(v string) {
	o.DisplayTargetLineLabel = &v
}

// GetDisplayTitle returns the DisplayTitle field value if set, zero value otherwise.
func (o *MapViewParams) GetDisplayTitle() string {
	if o == nil || IsNil(o.DisplayTitle) {
		var ret string
		return ret
	}
	return *o.DisplayTitle
}

// GetDisplayTitleOk returns a tuple with the DisplayTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetDisplayTitleOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayTitle) {
		return nil, false
	}
	return o.DisplayTitle, true
}

// HasDisplayTitle returns a boolean if a field has been set.
func (o *MapViewParams) HasDisplayTitle() bool {
	if o != nil && !IsNil(o.DisplayTitle) {
		return true
	}

	return false
}

// SetDisplayTitle gets a reference to the given string and assigns it to the DisplayTitle field.
func (o *MapViewParams) SetDisplayTitle(v string) {
	o.DisplayTitle = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *MapViewParams) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *MapViewParams) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *MapViewParams) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetEventClustering returns the EventClustering field value if set, zero value otherwise.
func (o *MapViewParams) GetEventClustering() bool {
	if o == nil || IsNil(o.EventClustering) {
		var ret bool
		return ret
	}
	return *o.EventClustering
}

// GetEventClusteringOk returns a tuple with the EventClustering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetEventClusteringOk() (*bool, bool) {
	if o == nil || IsNil(o.EventClustering) {
		return nil, false
	}
	return o.EventClustering, true
}

// HasEventClustering returns a boolean if a field has been set.
func (o *MapViewParams) HasEventClustering() bool {
	if o != nil && !IsNil(o.EventClustering) {
		return true
	}

	return false
}

// SetEventClustering gets a reference to the given bool and assigns it to the EventClustering field.
func (o *MapViewParams) SetEventClustering(v bool) {
	o.EventClustering = &v
}

// GetEventCoordinateField returns the EventCoordinateField field value if set, zero value otherwise.
func (o *MapViewParams) GetEventCoordinateField() string {
	if o == nil || IsNil(o.EventCoordinateField) {
		var ret string
		return ret
	}
	return *o.EventCoordinateField
}

// GetEventCoordinateFieldOk returns a tuple with the EventCoordinateField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetEventCoordinateFieldOk() (*string, bool) {
	if o == nil || IsNil(o.EventCoordinateField) {
		return nil, false
	}
	return o.EventCoordinateField, true
}

// HasEventCoordinateField returns a boolean if a field has been set.
func (o *MapViewParams) HasEventCoordinateField() bool {
	if o != nil && !IsNil(o.EventCoordinateField) {
		return true
	}

	return false
}

// SetEventCoordinateField gets a reference to the given string and assigns it to the EventCoordinateField field.
func (o *MapViewParams) SetEventCoordinateField(v string) {
	o.EventCoordinateField = &v
}

// GetEventPointColor returns the EventPointColor field value if set, zero value otherwise.
func (o *MapViewParams) GetEventPointColor() string {
	if o == nil || IsNil(o.EventPointColor) {
		var ret string
		return ret
	}
	return *o.EventPointColor
}

// GetEventPointColorOk returns a tuple with the EventPointColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetEventPointColorOk() (*string, bool) {
	if o == nil || IsNil(o.EventPointColor) {
		return nil, false
	}
	return o.EventPointColor, true
}

// HasEventPointColor returns a boolean if a field has been set.
func (o *MapViewParams) HasEventPointColor() bool {
	if o != nil && !IsNil(o.EventPointColor) {
		return true
	}

	return false
}

// SetEventPointColor gets a reference to the given string and assigns it to the EventPointColor field.
func (o *MapViewParams) SetEventPointColor(v string) {
	o.EventPointColor = &v
}

// GetEventPointRadius returns the EventPointRadius field value
func (o *MapViewParams) GetEventPointRadius() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventPointRadius
}

// GetEventPointRadiusOk returns a tuple with the EventPointRadius field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetEventPointRadiusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventPointRadius, true
}

// SetEventPointRadius sets field value
func (o *MapViewParams) SetEventPointRadius(v int32) {
	o.EventPointRadius = v
}

// GetEventStatus returns the EventStatus field value
func (o *MapViewParams) GetEventStatus() EventStatus {
	if o == nil {
		var ret EventStatus
		return ret
	}

	return o.EventStatus
}

// GetEventStatusOk returns a tuple with the EventStatus field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetEventStatusOk() (*EventStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventStatus, true
}

// SetEventStatus sets field value
func (o *MapViewParams) SetEventStatus(v EventStatus) {
	o.EventStatus = v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *MapViewParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *MapViewParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *MapViewParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *MapViewParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *MapViewParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *MapViewParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFilterDimensions returns the FilterDimensions field value if set, zero value otherwise.
func (o *MapViewParams) GetFilterDimensions() []string {
	if o == nil || IsNil(o.FilterDimensions) {
		var ret []string
		return ret
	}
	return o.FilterDimensions
}

// GetFilterDimensionsOk returns a tuple with the FilterDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetFilterDimensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterDimensions) {
		return nil, false
	}
	return o.FilterDimensions, true
}

// HasFilterDimensions returns a boolean if a field has been set.
func (o *MapViewParams) HasFilterDimensions() bool {
	if o != nil && !IsNil(o.FilterDimensions) {
		return true
	}

	return false
}

// SetFilterDimensions gets a reference to the given []string and assigns it to the FilterDimensions field.
func (o *MapViewParams) SetFilterDimensions(v []string) {
	o.FilterDimensions = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *MapViewParams) GetFilters() []EventChartParamsColumnsInner {
	if o == nil || IsNil(o.Filters) {
		var ret []EventChartParamsColumnsInner
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetFiltersOk() ([]EventChartParamsColumnsInner, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *MapViewParams) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []EventChartParamsColumnsInner and assigns it to the Filters field.
func (o *MapViewParams) SetFilters(v []EventChartParamsColumnsInner) {
	o.Filters = v
}

// GetFollowUp returns the FollowUp field value if set, zero value otherwise.
func (o *MapViewParams) GetFollowUp() bool {
	if o == nil || IsNil(o.FollowUp) {
		var ret bool
		return ret
	}
	return *o.FollowUp
}

// GetFollowUpOk returns a tuple with the FollowUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetFollowUpOk() (*bool, bool) {
	if o == nil || IsNil(o.FollowUp) {
		return nil, false
	}
	return o.FollowUp, true
}

// HasFollowUp returns a boolean if a field has been set.
func (o *MapViewParams) HasFollowUp() bool {
	if o != nil && !IsNil(o.FollowUp) {
		return true
	}

	return false
}

// SetFollowUp gets a reference to the given bool and assigns it to the FollowUp field.
func (o *MapViewParams) SetFollowUp(v bool) {
	o.FollowUp = &v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *MapViewParams) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *MapViewParams) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *MapViewParams) SetFormName(v string) {
	o.FormName = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *MapViewParams) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *MapViewParams) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *MapViewParams) SetHidden(v bool) {
	o.Hidden = &v
}

// GetHideEmptyRowItems returns the HideEmptyRowItems field value
func (o *MapViewParams) GetHideEmptyRowItems() HideEmptyItemStrategy {
	if o == nil {
		var ret HideEmptyItemStrategy
		return ret
	}

	return o.HideEmptyRowItems
}

// GetHideEmptyRowItemsOk returns a tuple with the HideEmptyRowItems field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetHideEmptyRowItemsOk() (*HideEmptyItemStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HideEmptyRowItems, true
}

// SetHideEmptyRowItems sets field value
func (o *MapViewParams) SetHideEmptyRowItems(v HideEmptyItemStrategy) {
	o.HideEmptyRowItems = v
}

// GetHideEmptyRows returns the HideEmptyRows field value if set, zero value otherwise.
func (o *MapViewParams) GetHideEmptyRows() bool {
	if o == nil || IsNil(o.HideEmptyRows) {
		var ret bool
		return ret
	}
	return *o.HideEmptyRows
}

// GetHideEmptyRowsOk returns a tuple with the HideEmptyRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetHideEmptyRowsOk() (*bool, bool) {
	if o == nil || IsNil(o.HideEmptyRows) {
		return nil, false
	}
	return o.HideEmptyRows, true
}

// HasHideEmptyRows returns a boolean if a field has been set.
func (o *MapViewParams) HasHideEmptyRows() bool {
	if o != nil && !IsNil(o.HideEmptyRows) {
		return true
	}

	return false
}

// SetHideEmptyRows gets a reference to the given bool and assigns it to the HideEmptyRows field.
func (o *MapViewParams) SetHideEmptyRows(v bool) {
	o.HideEmptyRows = &v
}

// GetHideLegend returns the HideLegend field value if set, zero value otherwise.
func (o *MapViewParams) GetHideLegend() bool {
	if o == nil || IsNil(o.HideLegend) {
		var ret bool
		return ret
	}
	return *o.HideLegend
}

// GetHideLegendOk returns a tuple with the HideLegend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetHideLegendOk() (*bool, bool) {
	if o == nil || IsNil(o.HideLegend) {
		return nil, false
	}
	return o.HideLegend, true
}

// HasHideLegend returns a boolean if a field has been set.
func (o *MapViewParams) HasHideLegend() bool {
	if o != nil && !IsNil(o.HideLegend) {
		return true
	}

	return false
}

// SetHideLegend gets a reference to the given bool and assigns it to the HideLegend field.
func (o *MapViewParams) SetHideLegend(v bool) {
	o.HideLegend = &v
}

// GetHideSubtitle returns the HideSubtitle field value if set, zero value otherwise.
func (o *MapViewParams) GetHideSubtitle() bool {
	if o == nil || IsNil(o.HideSubtitle) {
		var ret bool
		return ret
	}
	return *o.HideSubtitle
}

// GetHideSubtitleOk returns a tuple with the HideSubtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetHideSubtitleOk() (*bool, bool) {
	if o == nil || IsNil(o.HideSubtitle) {
		return nil, false
	}
	return o.HideSubtitle, true
}

// HasHideSubtitle returns a boolean if a field has been set.
func (o *MapViewParams) HasHideSubtitle() bool {
	if o != nil && !IsNil(o.HideSubtitle) {
		return true
	}

	return false
}

// SetHideSubtitle gets a reference to the given bool and assigns it to the HideSubtitle field.
func (o *MapViewParams) SetHideSubtitle(v bool) {
	o.HideSubtitle = &v
}

// GetHideTitle returns the HideTitle field value if set, zero value otherwise.
func (o *MapViewParams) GetHideTitle() bool {
	if o == nil || IsNil(o.HideTitle) {
		var ret bool
		return ret
	}
	return *o.HideTitle
}

// GetHideTitleOk returns a tuple with the HideTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetHideTitleOk() (*bool, bool) {
	if o == nil || IsNil(o.HideTitle) {
		return nil, false
	}
	return o.HideTitle, true
}

// HasHideTitle returns a boolean if a field has been set.
func (o *MapViewParams) HasHideTitle() bool {
	if o != nil && !IsNil(o.HideTitle) {
		return true
	}

	return false
}

// SetHideTitle gets a reference to the given bool and assigns it to the HideTitle field.
func (o *MapViewParams) SetHideTitle(v bool) {
	o.HideTitle = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MapViewParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MapViewParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MapViewParams) SetId(v string) {
	o.Id = &v
}

// GetInterpretations returns the Interpretations field value if set, zero value otherwise.
func (o *MapViewParams) GetInterpretations() []DataSetParamsInterpretationsInner {
	if o == nil || IsNil(o.Interpretations) {
		var ret []DataSetParamsInterpretationsInner
		return ret
	}
	return o.Interpretations
}

// GetInterpretationsOk returns a tuple with the Interpretations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetInterpretationsOk() ([]DataSetParamsInterpretationsInner, bool) {
	if o == nil || IsNil(o.Interpretations) {
		return nil, false
	}
	return o.Interpretations, true
}

// HasInterpretations returns a boolean if a field has been set.
func (o *MapViewParams) HasInterpretations() bool {
	if o != nil && !IsNil(o.Interpretations) {
		return true
	}

	return false
}

// SetInterpretations gets a reference to the given []DataSetParamsInterpretationsInner and assigns it to the Interpretations field.
func (o *MapViewParams) SetInterpretations(v []DataSetParamsInterpretationsInner) {
	o.Interpretations = v
}

// GetItemOrganisationUnitGroups returns the ItemOrganisationUnitGroups field value if set, zero value otherwise.
func (o *MapViewParams) GetItemOrganisationUnitGroups() []EventChartParamsItemOrganisationUnitGroupsInner {
	if o == nil || IsNil(o.ItemOrganisationUnitGroups) {
		var ret []EventChartParamsItemOrganisationUnitGroupsInner
		return ret
	}
	return o.ItemOrganisationUnitGroups
}

// GetItemOrganisationUnitGroupsOk returns a tuple with the ItemOrganisationUnitGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetItemOrganisationUnitGroupsOk() ([]EventChartParamsItemOrganisationUnitGroupsInner, bool) {
	if o == nil || IsNil(o.ItemOrganisationUnitGroups) {
		return nil, false
	}
	return o.ItemOrganisationUnitGroups, true
}

// HasItemOrganisationUnitGroups returns a boolean if a field has been set.
func (o *MapViewParams) HasItemOrganisationUnitGroups() bool {
	if o != nil && !IsNil(o.ItemOrganisationUnitGroups) {
		return true
	}

	return false
}

// SetItemOrganisationUnitGroups gets a reference to the given []EventChartParamsItemOrganisationUnitGroupsInner and assigns it to the ItemOrganisationUnitGroups field.
func (o *MapViewParams) SetItemOrganisationUnitGroups(v []EventChartParamsItemOrganisationUnitGroupsInner) {
	o.ItemOrganisationUnitGroups = v
}

// GetLabelFontColor returns the LabelFontColor field value if set, zero value otherwise.
func (o *MapViewParams) GetLabelFontColor() string {
	if o == nil || IsNil(o.LabelFontColor) {
		var ret string
		return ret
	}
	return *o.LabelFontColor
}

// GetLabelFontColorOk returns a tuple with the LabelFontColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetLabelFontColorOk() (*string, bool) {
	if o == nil || IsNil(o.LabelFontColor) {
		return nil, false
	}
	return o.LabelFontColor, true
}

// HasLabelFontColor returns a boolean if a field has been set.
func (o *MapViewParams) HasLabelFontColor() bool {
	if o != nil && !IsNil(o.LabelFontColor) {
		return true
	}

	return false
}

// SetLabelFontColor gets a reference to the given string and assigns it to the LabelFontColor field.
func (o *MapViewParams) SetLabelFontColor(v string) {
	o.LabelFontColor = &v
}

// GetLabelFontSize returns the LabelFontSize field value if set, zero value otherwise.
func (o *MapViewParams) GetLabelFontSize() string {
	if o == nil || IsNil(o.LabelFontSize) {
		var ret string
		return ret
	}
	return *o.LabelFontSize
}

// GetLabelFontSizeOk returns a tuple with the LabelFontSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetLabelFontSizeOk() (*string, bool) {
	if o == nil || IsNil(o.LabelFontSize) {
		return nil, false
	}
	return o.LabelFontSize, true
}

// HasLabelFontSize returns a boolean if a field has been set.
func (o *MapViewParams) HasLabelFontSize() bool {
	if o != nil && !IsNil(o.LabelFontSize) {
		return true
	}

	return false
}

// SetLabelFontSize gets a reference to the given string and assigns it to the LabelFontSize field.
func (o *MapViewParams) SetLabelFontSize(v string) {
	o.LabelFontSize = &v
}

// GetLabelFontStyle returns the LabelFontStyle field value if set, zero value otherwise.
func (o *MapViewParams) GetLabelFontStyle() string {
	if o == nil || IsNil(o.LabelFontStyle) {
		var ret string
		return ret
	}
	return *o.LabelFontStyle
}

// GetLabelFontStyleOk returns a tuple with the LabelFontStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetLabelFontStyleOk() (*string, bool) {
	if o == nil || IsNil(o.LabelFontStyle) {
		return nil, false
	}
	return o.LabelFontStyle, true
}

// HasLabelFontStyle returns a boolean if a field has been set.
func (o *MapViewParams) HasLabelFontStyle() bool {
	if o != nil && !IsNil(o.LabelFontStyle) {
		return true
	}

	return false
}

// SetLabelFontStyle gets a reference to the given string and assigns it to the LabelFontStyle field.
func (o *MapViewParams) SetLabelFontStyle(v string) {
	o.LabelFontStyle = &v
}

// GetLabelFontWeight returns the LabelFontWeight field value if set, zero value otherwise.
func (o *MapViewParams) GetLabelFontWeight() string {
	if o == nil || IsNil(o.LabelFontWeight) {
		var ret string
		return ret
	}
	return *o.LabelFontWeight
}

// GetLabelFontWeightOk returns a tuple with the LabelFontWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetLabelFontWeightOk() (*string, bool) {
	if o == nil || IsNil(o.LabelFontWeight) {
		return nil, false
	}
	return o.LabelFontWeight, true
}

// HasLabelFontWeight returns a boolean if a field has been set.
func (o *MapViewParams) HasLabelFontWeight() bool {
	if o != nil && !IsNil(o.LabelFontWeight) {
		return true
	}

	return false
}

// SetLabelFontWeight gets a reference to the given string and assigns it to the LabelFontWeight field.
func (o *MapViewParams) SetLabelFontWeight(v string) {
	o.LabelFontWeight = &v
}

// GetLabelTemplate returns the LabelTemplate field value if set, zero value otherwise.
func (o *MapViewParams) GetLabelTemplate() string {
	if o == nil || IsNil(o.LabelTemplate) {
		var ret string
		return ret
	}
	return *o.LabelTemplate
}

// GetLabelTemplateOk returns a tuple with the LabelTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetLabelTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.LabelTemplate) {
		return nil, false
	}
	return o.LabelTemplate, true
}

// HasLabelTemplate returns a boolean if a field has been set.
func (o *MapViewParams) HasLabelTemplate() bool {
	if o != nil && !IsNil(o.LabelTemplate) {
		return true
	}

	return false
}

// SetLabelTemplate gets a reference to the given string and assigns it to the LabelTemplate field.
func (o *MapViewParams) SetLabelTemplate(v string) {
	o.LabelTemplate = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *MapViewParams) GetLabels() bool {
	if o == nil || IsNil(o.Labels) {
		var ret bool
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetLabelsOk() (*bool, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *MapViewParams) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given bool and assigns it to the Labels field.
func (o *MapViewParams) SetLabels(v bool) {
	o.Labels = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *MapViewParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *MapViewParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *MapViewParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *MapViewParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *MapViewParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *MapViewParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLayer returns the Layer field value if set, zero value otherwise.
func (o *MapViewParams) GetLayer() string {
	if o == nil || IsNil(o.Layer) {
		var ret string
		return ret
	}
	return *o.Layer
}

// GetLayerOk returns a tuple with the Layer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetLayerOk() (*string, bool) {
	if o == nil || IsNil(o.Layer) {
		return nil, false
	}
	return o.Layer, true
}

// HasLayer returns a boolean if a field has been set.
func (o *MapViewParams) HasLayer() bool {
	if o != nil && !IsNil(o.Layer) {
		return true
	}

	return false
}

// SetLayer gets a reference to the given string and assigns it to the Layer field.
func (o *MapViewParams) SetLayer(v string) {
	o.Layer = &v
}

// GetLegend returns the Legend field value if set, zero value otherwise.
func (o *MapViewParams) GetLegend() LegendDefinitionsParams {
	if o == nil || IsNil(o.Legend) {
		var ret LegendDefinitionsParams
		return ret
	}
	return *o.Legend
}

// GetLegendOk returns a tuple with the Legend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetLegendOk() (*LegendDefinitionsParams, bool) {
	if o == nil || IsNil(o.Legend) {
		return nil, false
	}
	return o.Legend, true
}

// HasLegend returns a boolean if a field has been set.
func (o *MapViewParams) HasLegend() bool {
	if o != nil && !IsNil(o.Legend) {
		return true
	}

	return false
}

// SetLegend gets a reference to the given LegendDefinitionsParams and assigns it to the Legend field.
func (o *MapViewParams) SetLegend(v LegendDefinitionsParams) {
	o.Legend = &v
}

// GetLegendSet returns the LegendSet field value if set, zero value otherwise.
func (o *MapViewParams) GetLegendSet() LegendSetParams {
	if o == nil || IsNil(o.LegendSet) {
		var ret LegendSetParams
		return ret
	}
	return *o.LegendSet
}

// GetLegendSetOk returns a tuple with the LegendSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetLegendSetOk() (*LegendSetParams, bool) {
	if o == nil || IsNil(o.LegendSet) {
		return nil, false
	}
	return o.LegendSet, true
}

// HasLegendSet returns a boolean if a field has been set.
func (o *MapViewParams) HasLegendSet() bool {
	if o != nil && !IsNil(o.LegendSet) {
		return true
	}

	return false
}

// SetLegendSet gets a reference to the given LegendSetParams and assigns it to the LegendSet field.
func (o *MapViewParams) SetLegendSet(v LegendSetParams) {
	o.LegendSet = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *MapViewParams) GetMetaData() map[string]MetadataItemParams {
	if o == nil || IsNil(o.MetaData) {
		var ret map[string]MetadataItemParams
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetMetaDataOk() (*map[string]MetadataItemParams, bool) {
	if o == nil || IsNil(o.MetaData) {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *MapViewParams) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given map[string]MetadataItemParams and assigns it to the MetaData field.
func (o *MapViewParams) SetMetaData(v map[string]MetadataItemParams) {
	o.MetaData = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *MapViewParams) GetMethod() int32 {
	if o == nil || IsNil(o.Method) {
		var ret int32
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetMethodOk() (*int32, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *MapViewParams) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given int32 and assigns it to the Method field.
func (o *MapViewParams) SetMethod(v int32) {
	o.Method = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MapViewParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MapViewParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MapViewParams) SetName(v string) {
	o.Name = &v
}

// GetNoDataColor returns the NoDataColor field value if set, zero value otherwise.
func (o *MapViewParams) GetNoDataColor() string {
	if o == nil || IsNil(o.NoDataColor) {
		var ret string
		return ret
	}
	return *o.NoDataColor
}

// GetNoDataColorOk returns a tuple with the NoDataColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetNoDataColorOk() (*string, bool) {
	if o == nil || IsNil(o.NoDataColor) {
		return nil, false
	}
	return o.NoDataColor, true
}

// HasNoDataColor returns a boolean if a field has been set.
func (o *MapViewParams) HasNoDataColor() bool {
	if o != nil && !IsNil(o.NoDataColor) {
		return true
	}

	return false
}

// SetNoDataColor gets a reference to the given string and assigns it to the NoDataColor field.
func (o *MapViewParams) SetNoDataColor(v string) {
	o.NoDataColor = &v
}

// GetNoSpaceBetweenColumns returns the NoSpaceBetweenColumns field value if set, zero value otherwise.
func (o *MapViewParams) GetNoSpaceBetweenColumns() bool {
	if o == nil || IsNil(o.NoSpaceBetweenColumns) {
		var ret bool
		return ret
	}
	return *o.NoSpaceBetweenColumns
}

// GetNoSpaceBetweenColumnsOk returns a tuple with the NoSpaceBetweenColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetNoSpaceBetweenColumnsOk() (*bool, bool) {
	if o == nil || IsNil(o.NoSpaceBetweenColumns) {
		return nil, false
	}
	return o.NoSpaceBetweenColumns, true
}

// HasNoSpaceBetweenColumns returns a boolean if a field has been set.
func (o *MapViewParams) HasNoSpaceBetweenColumns() bool {
	if o != nil && !IsNil(o.NoSpaceBetweenColumns) {
		return true
	}

	return false
}

// SetNoSpaceBetweenColumns gets a reference to the given bool and assigns it to the NoSpaceBetweenColumns field.
func (o *MapViewParams) SetNoSpaceBetweenColumns(v bool) {
	o.NoSpaceBetweenColumns = &v
}

// GetOpacity returns the Opacity field value if set, zero value otherwise.
func (o *MapViewParams) GetOpacity() float64 {
	if o == nil || IsNil(o.Opacity) {
		var ret float64
		return ret
	}
	return *o.Opacity
}

// GetOpacityOk returns a tuple with the Opacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetOpacityOk() (*float64, bool) {
	if o == nil || IsNil(o.Opacity) {
		return nil, false
	}
	return o.Opacity, true
}

// HasOpacity returns a boolean if a field has been set.
func (o *MapViewParams) HasOpacity() bool {
	if o != nil && !IsNil(o.Opacity) {
		return true
	}

	return false
}

// SetOpacity gets a reference to the given float64 and assigns it to the Opacity field.
func (o *MapViewParams) SetOpacity(v float64) {
	o.Opacity = &v
}

// GetOrgUnitField returns the OrgUnitField field value if set, zero value otherwise.
func (o *MapViewParams) GetOrgUnitField() string {
	if o == nil || IsNil(o.OrgUnitField) {
		var ret string
		return ret
	}
	return *o.OrgUnitField
}

// GetOrgUnitFieldOk returns a tuple with the OrgUnitField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetOrgUnitFieldOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnitField) {
		return nil, false
	}
	return o.OrgUnitField, true
}

// HasOrgUnitField returns a boolean if a field has been set.
func (o *MapViewParams) HasOrgUnitField() bool {
	if o != nil && !IsNil(o.OrgUnitField) {
		return true
	}

	return false
}

// SetOrgUnitField gets a reference to the given string and assigns it to the OrgUnitField field.
func (o *MapViewParams) SetOrgUnitField(v string) {
	o.OrgUnitField = &v
}

// GetOrgUnitFieldDisplayName returns the OrgUnitFieldDisplayName field value if set, zero value otherwise.
func (o *MapViewParams) GetOrgUnitFieldDisplayName() string {
	if o == nil || IsNil(o.OrgUnitFieldDisplayName) {
		var ret string
		return ret
	}
	return *o.OrgUnitFieldDisplayName
}

// GetOrgUnitFieldDisplayNameOk returns a tuple with the OrgUnitFieldDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetOrgUnitFieldDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnitFieldDisplayName) {
		return nil, false
	}
	return o.OrgUnitFieldDisplayName, true
}

// HasOrgUnitFieldDisplayName returns a boolean if a field has been set.
func (o *MapViewParams) HasOrgUnitFieldDisplayName() bool {
	if o != nil && !IsNil(o.OrgUnitFieldDisplayName) {
		return true
	}

	return false
}

// SetOrgUnitFieldDisplayName gets a reference to the given string and assigns it to the OrgUnitFieldDisplayName field.
func (o *MapViewParams) SetOrgUnitFieldDisplayName(v string) {
	o.OrgUnitFieldDisplayName = &v
}

// GetOrganisationUnitColor returns the OrganisationUnitColor field value if set, zero value otherwise.
func (o *MapViewParams) GetOrganisationUnitColor() string {
	if o == nil || IsNil(o.OrganisationUnitColor) {
		var ret string
		return ret
	}
	return *o.OrganisationUnitColor
}

// GetOrganisationUnitColorOk returns a tuple with the OrganisationUnitColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetOrganisationUnitColorOk() (*string, bool) {
	if o == nil || IsNil(o.OrganisationUnitColor) {
		return nil, false
	}
	return o.OrganisationUnitColor, true
}

// HasOrganisationUnitColor returns a boolean if a field has been set.
func (o *MapViewParams) HasOrganisationUnitColor() bool {
	if o != nil && !IsNil(o.OrganisationUnitColor) {
		return true
	}

	return false
}

// SetOrganisationUnitColor gets a reference to the given string and assigns it to the OrganisationUnitColor field.
func (o *MapViewParams) SetOrganisationUnitColor(v string) {
	o.OrganisationUnitColor = &v
}

// GetOrganisationUnitGroupSet returns the OrganisationUnitGroupSet field value if set, zero value otherwise.
func (o *MapViewParams) GetOrganisationUnitGroupSet() OrganisationUnitGroupSetParams {
	if o == nil || IsNil(o.OrganisationUnitGroupSet) {
		var ret OrganisationUnitGroupSetParams
		return ret
	}
	return *o.OrganisationUnitGroupSet
}

// GetOrganisationUnitGroupSetOk returns a tuple with the OrganisationUnitGroupSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetOrganisationUnitGroupSetOk() (*OrganisationUnitGroupSetParams, bool) {
	if o == nil || IsNil(o.OrganisationUnitGroupSet) {
		return nil, false
	}
	return o.OrganisationUnitGroupSet, true
}

// HasOrganisationUnitGroupSet returns a boolean if a field has been set.
func (o *MapViewParams) HasOrganisationUnitGroupSet() bool {
	if o != nil && !IsNil(o.OrganisationUnitGroupSet) {
		return true
	}

	return false
}

// SetOrganisationUnitGroupSet gets a reference to the given OrganisationUnitGroupSetParams and assigns it to the OrganisationUnitGroupSet field.
func (o *MapViewParams) SetOrganisationUnitGroupSet(v OrganisationUnitGroupSetParams) {
	o.OrganisationUnitGroupSet = &v
}

// GetOrganisationUnitGroupSetDimensions returns the OrganisationUnitGroupSetDimensions field value if set, zero value otherwise.
func (o *MapViewParams) GetOrganisationUnitGroupSetDimensions() []OrganisationUnitGroupSetDimensionParams {
	if o == nil || IsNil(o.OrganisationUnitGroupSetDimensions) {
		var ret []OrganisationUnitGroupSetDimensionParams
		return ret
	}
	return o.OrganisationUnitGroupSetDimensions
}

// GetOrganisationUnitGroupSetDimensionsOk returns a tuple with the OrganisationUnitGroupSetDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetOrganisationUnitGroupSetDimensionsOk() ([]OrganisationUnitGroupSetDimensionParams, bool) {
	if o == nil || IsNil(o.OrganisationUnitGroupSetDimensions) {
		return nil, false
	}
	return o.OrganisationUnitGroupSetDimensions, true
}

// HasOrganisationUnitGroupSetDimensions returns a boolean if a field has been set.
func (o *MapViewParams) HasOrganisationUnitGroupSetDimensions() bool {
	if o != nil && !IsNil(o.OrganisationUnitGroupSetDimensions) {
		return true
	}

	return false
}

// SetOrganisationUnitGroupSetDimensions gets a reference to the given []OrganisationUnitGroupSetDimensionParams and assigns it to the OrganisationUnitGroupSetDimensions field.
func (o *MapViewParams) SetOrganisationUnitGroupSetDimensions(v []OrganisationUnitGroupSetDimensionParams) {
	o.OrganisationUnitGroupSetDimensions = v
}

// GetOrganisationUnitLevels returns the OrganisationUnitLevels field value if set, zero value otherwise.
func (o *MapViewParams) GetOrganisationUnitLevels() []int32 {
	if o == nil || IsNil(o.OrganisationUnitLevels) {
		var ret []int32
		return ret
	}
	return o.OrganisationUnitLevels
}

// GetOrganisationUnitLevelsOk returns a tuple with the OrganisationUnitLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetOrganisationUnitLevelsOk() ([]int32, bool) {
	if o == nil || IsNil(o.OrganisationUnitLevels) {
		return nil, false
	}
	return o.OrganisationUnitLevels, true
}

// HasOrganisationUnitLevels returns a boolean if a field has been set.
func (o *MapViewParams) HasOrganisationUnitLevels() bool {
	if o != nil && !IsNil(o.OrganisationUnitLevels) {
		return true
	}

	return false
}

// SetOrganisationUnitLevels gets a reference to the given []int32 and assigns it to the OrganisationUnitLevels field.
func (o *MapViewParams) SetOrganisationUnitLevels(v []int32) {
	o.OrganisationUnitLevels = v
}

// GetOrganisationUnitSelectionMode returns the OrganisationUnitSelectionMode field value
func (o *MapViewParams) GetOrganisationUnitSelectionMode() OrganisationUnitSelectionMode {
	if o == nil {
		var ret OrganisationUnitSelectionMode
		return ret
	}

	return o.OrganisationUnitSelectionMode
}

// GetOrganisationUnitSelectionModeOk returns a tuple with the OrganisationUnitSelectionMode field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetOrganisationUnitSelectionModeOk() (*OrganisationUnitSelectionMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganisationUnitSelectionMode, true
}

// SetOrganisationUnitSelectionMode sets field value
func (o *MapViewParams) SetOrganisationUnitSelectionMode(v OrganisationUnitSelectionMode) {
	o.OrganisationUnitSelectionMode = v
}

// GetOrganisationUnits returns the OrganisationUnits field value if set, zero value otherwise.
func (o *MapViewParams) GetOrganisationUnits() []CategoryOptionParamsOrganisationUnitsInner {
	if o == nil || IsNil(o.OrganisationUnits) {
		var ret []CategoryOptionParamsOrganisationUnitsInner
		return ret
	}
	return o.OrganisationUnits
}

// GetOrganisationUnitsOk returns a tuple with the OrganisationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetOrganisationUnitsOk() ([]CategoryOptionParamsOrganisationUnitsInner, bool) {
	if o == nil || IsNil(o.OrganisationUnits) {
		return nil, false
	}
	return o.OrganisationUnits, true
}

// HasOrganisationUnits returns a boolean if a field has been set.
func (o *MapViewParams) HasOrganisationUnits() bool {
	if o != nil && !IsNil(o.OrganisationUnits) {
		return true
	}

	return false
}

// SetOrganisationUnits gets a reference to the given []CategoryOptionParamsOrganisationUnitsInner and assigns it to the OrganisationUnits field.
func (o *MapViewParams) SetOrganisationUnits(v []CategoryOptionParamsOrganisationUnitsInner) {
	o.OrganisationUnits = v
}

// GetParentGraph returns the ParentGraph field value if set, zero value otherwise.
func (o *MapViewParams) GetParentGraph() string {
	if o == nil || IsNil(o.ParentGraph) {
		var ret string
		return ret
	}
	return *o.ParentGraph
}

// GetParentGraphOk returns a tuple with the ParentGraph field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetParentGraphOk() (*string, bool) {
	if o == nil || IsNil(o.ParentGraph) {
		return nil, false
	}
	return o.ParentGraph, true
}

// HasParentGraph returns a boolean if a field has been set.
func (o *MapViewParams) HasParentGraph() bool {
	if o != nil && !IsNil(o.ParentGraph) {
		return true
	}

	return false
}

// SetParentGraph gets a reference to the given string and assigns it to the ParentGraph field.
func (o *MapViewParams) SetParentGraph(v string) {
	o.ParentGraph = &v
}

// GetParentLevel returns the ParentLevel field value
func (o *MapViewParams) GetParentLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ParentLevel
}

// GetParentLevelOk returns a tuple with the ParentLevel field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetParentLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentLevel, true
}

// SetParentLevel sets field value
func (o *MapViewParams) SetParentLevel(v int32) {
	o.ParentLevel = v
}

// GetPercentStackedValues returns the PercentStackedValues field value if set, zero value otherwise.
func (o *MapViewParams) GetPercentStackedValues() bool {
	if o == nil || IsNil(o.PercentStackedValues) {
		var ret bool
		return ret
	}
	return *o.PercentStackedValues
}

// GetPercentStackedValuesOk returns a tuple with the PercentStackedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetPercentStackedValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.PercentStackedValues) {
		return nil, false
	}
	return o.PercentStackedValues, true
}

// HasPercentStackedValues returns a boolean if a field has been set.
func (o *MapViewParams) HasPercentStackedValues() bool {
	if o != nil && !IsNil(o.PercentStackedValues) {
		return true
	}

	return false
}

// SetPercentStackedValues gets a reference to the given bool and assigns it to the PercentStackedValues field.
func (o *MapViewParams) SetPercentStackedValues(v bool) {
	o.PercentStackedValues = &v
}

// GetPeriods returns the Periods field value if set, zero value otherwise.
func (o *MapViewParams) GetPeriods() []string {
	if o == nil || IsNil(o.Periods) {
		var ret []string
		return ret
	}
	return o.Periods
}

// GetPeriodsOk returns a tuple with the Periods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetPeriodsOk() ([]string, bool) {
	if o == nil || IsNil(o.Periods) {
		return nil, false
	}
	return o.Periods, true
}

// HasPeriods returns a boolean if a field has been set.
func (o *MapViewParams) HasPeriods() bool {
	if o != nil && !IsNil(o.Periods) {
		return true
	}

	return false
}

// SetPeriods gets a reference to the given []string and assigns it to the Periods field.
func (o *MapViewParams) SetPeriods(v []string) {
	o.Periods = v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *MapViewParams) GetProgram() ProgramParams {
	if o == nil || IsNil(o.Program) {
		var ret ProgramParams
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetProgramOk() (*ProgramParams, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *MapViewParams) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given ProgramParams and assigns it to the Program field.
func (o *MapViewParams) SetProgram(v ProgramParams) {
	o.Program = &v
}

// GetProgramIndicatorDimensions returns the ProgramIndicatorDimensions field value if set, zero value otherwise.
func (o *MapViewParams) GetProgramIndicatorDimensions() []TrackedEntityProgramIndicatorDimensionParams {
	if o == nil || IsNil(o.ProgramIndicatorDimensions) {
		var ret []TrackedEntityProgramIndicatorDimensionParams
		return ret
	}
	return o.ProgramIndicatorDimensions
}

// GetProgramIndicatorDimensionsOk returns a tuple with the ProgramIndicatorDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetProgramIndicatorDimensionsOk() ([]TrackedEntityProgramIndicatorDimensionParams, bool) {
	if o == nil || IsNil(o.ProgramIndicatorDimensions) {
		return nil, false
	}
	return o.ProgramIndicatorDimensions, true
}

// HasProgramIndicatorDimensions returns a boolean if a field has been set.
func (o *MapViewParams) HasProgramIndicatorDimensions() bool {
	if o != nil && !IsNil(o.ProgramIndicatorDimensions) {
		return true
	}

	return false
}

// SetProgramIndicatorDimensions gets a reference to the given []TrackedEntityProgramIndicatorDimensionParams and assigns it to the ProgramIndicatorDimensions field.
func (o *MapViewParams) SetProgramIndicatorDimensions(v []TrackedEntityProgramIndicatorDimensionParams) {
	o.ProgramIndicatorDimensions = v
}

// GetProgramStage returns the ProgramStage field value if set, zero value otherwise.
func (o *MapViewParams) GetProgramStage() ProgramStageParams {
	if o == nil || IsNil(o.ProgramStage) {
		var ret ProgramStageParams
		return ret
	}
	return *o.ProgramStage
}

// GetProgramStageOk returns a tuple with the ProgramStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetProgramStageOk() (*ProgramStageParams, bool) {
	if o == nil || IsNil(o.ProgramStage) {
		return nil, false
	}
	return o.ProgramStage, true
}

// HasProgramStage returns a boolean if a field has been set.
func (o *MapViewParams) HasProgramStage() bool {
	if o != nil && !IsNil(o.ProgramStage) {
		return true
	}

	return false
}

// SetProgramStage gets a reference to the given ProgramStageParams and assigns it to the ProgramStage field.
func (o *MapViewParams) SetProgramStage(v ProgramStageParams) {
	o.ProgramStage = &v
}

// GetProgramStatus returns the ProgramStatus field value
func (o *MapViewParams) GetProgramStatus() EnrollmentStatus {
	if o == nil {
		var ret EnrollmentStatus
		return ret
	}

	return o.ProgramStatus
}

// GetProgramStatusOk returns a tuple with the ProgramStatus field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetProgramStatusOk() (*EnrollmentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgramStatus, true
}

// SetProgramStatus sets field value
func (o *MapViewParams) SetProgramStatus(v EnrollmentStatus) {
	o.ProgramStatus = v
}

// GetRadiusHigh returns the RadiusHigh field value if set, zero value otherwise.
func (o *MapViewParams) GetRadiusHigh() int32 {
	if o == nil || IsNil(o.RadiusHigh) {
		var ret int32
		return ret
	}
	return *o.RadiusHigh
}

// GetRadiusHighOk returns a tuple with the RadiusHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetRadiusHighOk() (*int32, bool) {
	if o == nil || IsNil(o.RadiusHigh) {
		return nil, false
	}
	return o.RadiusHigh, true
}

// HasRadiusHigh returns a boolean if a field has been set.
func (o *MapViewParams) HasRadiusHigh() bool {
	if o != nil && !IsNil(o.RadiusHigh) {
		return true
	}

	return false
}

// SetRadiusHigh gets a reference to the given int32 and assigns it to the RadiusHigh field.
func (o *MapViewParams) SetRadiusHigh(v int32) {
	o.RadiusHigh = &v
}

// GetRadiusLow returns the RadiusLow field value if set, zero value otherwise.
func (o *MapViewParams) GetRadiusLow() int32 {
	if o == nil || IsNil(o.RadiusLow) {
		var ret int32
		return ret
	}
	return *o.RadiusLow
}

// GetRadiusLowOk returns a tuple with the RadiusLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetRadiusLowOk() (*int32, bool) {
	if o == nil || IsNil(o.RadiusLow) {
		return nil, false
	}
	return o.RadiusLow, true
}

// HasRadiusLow returns a boolean if a field has been set.
func (o *MapViewParams) HasRadiusLow() bool {
	if o != nil && !IsNil(o.RadiusLow) {
		return true
	}

	return false
}

// SetRadiusLow gets a reference to the given int32 and assigns it to the RadiusLow field.
func (o *MapViewParams) SetRadiusLow(v int32) {
	o.RadiusLow = &v
}

// GetRegressionType returns the RegressionType field value
func (o *MapViewParams) GetRegressionType() RegressionType {
	if o == nil {
		var ret RegressionType
		return ret
	}

	return o.RegressionType
}

// GetRegressionTypeOk returns a tuple with the RegressionType field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetRegressionTypeOk() (*RegressionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegressionType, true
}

// SetRegressionType sets field value
func (o *MapViewParams) SetRegressionType(v RegressionType) {
	o.RegressionType = v
}

// GetRelativePeriods returns the RelativePeriods field value if set, zero value otherwise.
func (o *MapViewParams) GetRelativePeriods() RelativePeriods {
	if o == nil || IsNil(o.RelativePeriods) {
		var ret RelativePeriods
		return ret
	}
	return *o.RelativePeriods
}

// GetRelativePeriodsOk returns a tuple with the RelativePeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetRelativePeriodsOk() (*RelativePeriods, bool) {
	if o == nil || IsNil(o.RelativePeriods) {
		return nil, false
	}
	return o.RelativePeriods, true
}

// HasRelativePeriods returns a boolean if a field has been set.
func (o *MapViewParams) HasRelativePeriods() bool {
	if o != nil && !IsNil(o.RelativePeriods) {
		return true
	}

	return false
}

// SetRelativePeriods gets a reference to the given RelativePeriods and assigns it to the RelativePeriods field.
func (o *MapViewParams) SetRelativePeriods(v RelativePeriods) {
	o.RelativePeriods = &v
}

// GetRenderingStrategy returns the RenderingStrategy field value
func (o *MapViewParams) GetRenderingStrategy() MapViewRenderingStrategy {
	if o == nil {
		var ret MapViewRenderingStrategy
		return ret
	}

	return o.RenderingStrategy
}

// GetRenderingStrategyOk returns a tuple with the RenderingStrategy field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetRenderingStrategyOk() (*MapViewRenderingStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RenderingStrategy, true
}

// SetRenderingStrategy sets field value
func (o *MapViewParams) SetRenderingStrategy(v MapViewRenderingStrategy) {
	o.RenderingStrategy = v
}

// GetRowSubTotals returns the RowSubTotals field value if set, zero value otherwise.
func (o *MapViewParams) GetRowSubTotals() bool {
	if o == nil || IsNil(o.RowSubTotals) {
		var ret bool
		return ret
	}
	return *o.RowSubTotals
}

// GetRowSubTotalsOk returns a tuple with the RowSubTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetRowSubTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.RowSubTotals) {
		return nil, false
	}
	return o.RowSubTotals, true
}

// HasRowSubTotals returns a boolean if a field has been set.
func (o *MapViewParams) HasRowSubTotals() bool {
	if o != nil && !IsNil(o.RowSubTotals) {
		return true
	}

	return false
}

// SetRowSubTotals gets a reference to the given bool and assigns it to the RowSubTotals field.
func (o *MapViewParams) SetRowSubTotals(v bool) {
	o.RowSubTotals = &v
}

// GetRowTotals returns the RowTotals field value if set, zero value otherwise.
func (o *MapViewParams) GetRowTotals() bool {
	if o == nil || IsNil(o.RowTotals) {
		var ret bool
		return ret
	}
	return *o.RowTotals
}

// GetRowTotalsOk returns a tuple with the RowTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetRowTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.RowTotals) {
		return nil, false
	}
	return o.RowTotals, true
}

// HasRowTotals returns a boolean if a field has been set.
func (o *MapViewParams) HasRowTotals() bool {
	if o != nil && !IsNil(o.RowTotals) {
		return true
	}

	return false
}

// SetRowTotals gets a reference to the given bool and assigns it to the RowTotals field.
func (o *MapViewParams) SetRowTotals(v bool) {
	o.RowTotals = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *MapViewParams) GetRows() []EventChartParamsColumnsInner {
	if o == nil || IsNil(o.Rows) {
		var ret []EventChartParamsColumnsInner
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetRowsOk() ([]EventChartParamsColumnsInner, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *MapViewParams) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []EventChartParamsColumnsInner and assigns it to the Rows field.
func (o *MapViewParams) SetRows(v []EventChartParamsColumnsInner) {
	o.Rows = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *MapViewParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *MapViewParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *MapViewParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *MapViewParams) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *MapViewParams) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *MapViewParams) SetShortName(v string) {
	o.ShortName = &v
}

// GetShowData returns the ShowData field value if set, zero value otherwise.
func (o *MapViewParams) GetShowData() bool {
	if o == nil || IsNil(o.ShowData) {
		var ret bool
		return ret
	}
	return *o.ShowData
}

// GetShowDataOk returns a tuple with the ShowData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetShowDataOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowData) {
		return nil, false
	}
	return o.ShowData, true
}

// HasShowData returns a boolean if a field has been set.
func (o *MapViewParams) HasShowData() bool {
	if o != nil && !IsNil(o.ShowData) {
		return true
	}

	return false
}

// SetShowData gets a reference to the given bool and assigns it to the ShowData field.
func (o *MapViewParams) SetShowData(v bool) {
	o.ShowData = &v
}

// GetShowDimensionLabels returns the ShowDimensionLabels field value if set, zero value otherwise.
func (o *MapViewParams) GetShowDimensionLabels() bool {
	if o == nil || IsNil(o.ShowDimensionLabels) {
		var ret bool
		return ret
	}
	return *o.ShowDimensionLabels
}

// GetShowDimensionLabelsOk returns a tuple with the ShowDimensionLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetShowDimensionLabelsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDimensionLabels) {
		return nil, false
	}
	return o.ShowDimensionLabels, true
}

// HasShowDimensionLabels returns a boolean if a field has been set.
func (o *MapViewParams) HasShowDimensionLabels() bool {
	if o != nil && !IsNil(o.ShowDimensionLabels) {
		return true
	}

	return false
}

// SetShowDimensionLabels gets a reference to the given bool and assigns it to the ShowDimensionLabels field.
func (o *MapViewParams) SetShowDimensionLabels(v bool) {
	o.ShowDimensionLabels = &v
}

// GetShowHierarchy returns the ShowHierarchy field value if set, zero value otherwise.
func (o *MapViewParams) GetShowHierarchy() bool {
	if o == nil || IsNil(o.ShowHierarchy) {
		var ret bool
		return ret
	}
	return *o.ShowHierarchy
}

// GetShowHierarchyOk returns a tuple with the ShowHierarchy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetShowHierarchyOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowHierarchy) {
		return nil, false
	}
	return o.ShowHierarchy, true
}

// HasShowHierarchy returns a boolean if a field has been set.
func (o *MapViewParams) HasShowHierarchy() bool {
	if o != nil && !IsNil(o.ShowHierarchy) {
		return true
	}

	return false
}

// SetShowHierarchy gets a reference to the given bool and assigns it to the ShowHierarchy field.
func (o *MapViewParams) SetShowHierarchy(v bool) {
	o.ShowHierarchy = &v
}

// GetSkipRounding returns the SkipRounding field value if set, zero value otherwise.
func (o *MapViewParams) GetSkipRounding() bool {
	if o == nil || IsNil(o.SkipRounding) {
		var ret bool
		return ret
	}
	return *o.SkipRounding
}

// GetSkipRoundingOk returns a tuple with the SkipRounding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetSkipRoundingOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipRounding) {
		return nil, false
	}
	return o.SkipRounding, true
}

// HasSkipRounding returns a boolean if a field has been set.
func (o *MapViewParams) HasSkipRounding() bool {
	if o != nil && !IsNil(o.SkipRounding) {
		return true
	}

	return false
}

// SetSkipRounding gets a reference to the given bool and assigns it to the SkipRounding field.
func (o *MapViewParams) SetSkipRounding(v bool) {
	o.SkipRounding = &v
}

// GetSortOrder returns the SortOrder field value
func (o *MapViewParams) GetSortOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortOrder, true
}

// SetSortOrder sets field value
func (o *MapViewParams) SetSortOrder(v int32) {
	o.SortOrder = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *MapViewParams) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *MapViewParams) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *MapViewParams) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStyleDataItem returns the StyleDataItem field value if set, zero value otherwise.
func (o *MapViewParams) GetStyleDataItem() Any {
	if o == nil || IsNil(o.StyleDataItem) {
		var ret Any
		return ret
	}
	return *o.StyleDataItem
}

// GetStyleDataItemOk returns a tuple with the StyleDataItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetStyleDataItemOk() (*Any, bool) {
	if o == nil || IsNil(o.StyleDataItem) {
		return nil, false
	}
	return o.StyleDataItem, true
}

// HasStyleDataItem returns a boolean if a field has been set.
func (o *MapViewParams) HasStyleDataItem() bool {
	if o != nil && !IsNil(o.StyleDataItem) {
		return true
	}

	return false
}

// SetStyleDataItem gets a reference to the given Any and assigns it to the StyleDataItem field.
func (o *MapViewParams) SetStyleDataItem(v Any) {
	o.StyleDataItem = &v
}

// GetSubscribed returns the Subscribed field value if set, zero value otherwise.
func (o *MapViewParams) GetSubscribed() bool {
	if o == nil || IsNil(o.Subscribed) {
		var ret bool
		return ret
	}
	return *o.Subscribed
}

// GetSubscribedOk returns a tuple with the Subscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetSubscribedOk() (*bool, bool) {
	if o == nil || IsNil(o.Subscribed) {
		return nil, false
	}
	return o.Subscribed, true
}

// HasSubscribed returns a boolean if a field has been set.
func (o *MapViewParams) HasSubscribed() bool {
	if o != nil && !IsNil(o.Subscribed) {
		return true
	}

	return false
}

// SetSubscribed gets a reference to the given bool and assigns it to the Subscribed field.
func (o *MapViewParams) SetSubscribed(v bool) {
	o.Subscribed = &v
}

// GetSubscribers returns the Subscribers field value if set, zero value otherwise.
func (o *MapViewParams) GetSubscribers() []string {
	if o == nil || IsNil(o.Subscribers) {
		var ret []string
		return ret
	}
	return o.Subscribers
}

// GetSubscribersOk returns a tuple with the Subscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetSubscribersOk() ([]string, bool) {
	if o == nil || IsNil(o.Subscribers) {
		return nil, false
	}
	return o.Subscribers, true
}

// HasSubscribers returns a boolean if a field has been set.
func (o *MapViewParams) HasSubscribers() bool {
	if o != nil && !IsNil(o.Subscribers) {
		return true
	}

	return false
}

// SetSubscribers gets a reference to the given []string and assigns it to the Subscribers field.
func (o *MapViewParams) SetSubscribers(v []string) {
	o.Subscribers = v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *MapViewParams) GetSubtitle() string {
	if o == nil || IsNil(o.Subtitle) {
		var ret string
		return ret
	}
	return *o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetSubtitleOk() (*string, bool) {
	if o == nil || IsNil(o.Subtitle) {
		return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *MapViewParams) HasSubtitle() bool {
	if o != nil && !IsNil(o.Subtitle) {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given string and assigns it to the Subtitle field.
func (o *MapViewParams) SetSubtitle(v string) {
	o.Subtitle = &v
}

// GetThematicMapType returns the ThematicMapType field value
func (o *MapViewParams) GetThematicMapType() ThematicMapType {
	if o == nil {
		var ret ThematicMapType
		return ret
	}

	return o.ThematicMapType
}

// GetThematicMapTypeOk returns a tuple with the ThematicMapType field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetThematicMapTypeOk() (*ThematicMapType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThematicMapType, true
}

// SetThematicMapType sets field value
func (o *MapViewParams) SetThematicMapType(v ThematicMapType) {
	o.ThematicMapType = v
}

// GetTimeField returns the TimeField field value if set, zero value otherwise.
func (o *MapViewParams) GetTimeField() string {
	if o == nil || IsNil(o.TimeField) {
		var ret string
		return ret
	}
	return *o.TimeField
}

// GetTimeFieldOk returns a tuple with the TimeField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetTimeFieldOk() (*string, bool) {
	if o == nil || IsNil(o.TimeField) {
		return nil, false
	}
	return o.TimeField, true
}

// HasTimeField returns a boolean if a field has been set.
func (o *MapViewParams) HasTimeField() bool {
	if o != nil && !IsNil(o.TimeField) {
		return true
	}

	return false
}

// SetTimeField gets a reference to the given string and assigns it to the TimeField field.
func (o *MapViewParams) SetTimeField(v string) {
	o.TimeField = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *MapViewParams) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *MapViewParams) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *MapViewParams) SetTitle(v string) {
	o.Title = &v
}

// GetTopLimit returns the TopLimit field value
func (o *MapViewParams) GetTopLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TopLimit
}

// GetTopLimitOk returns a tuple with the TopLimit field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetTopLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopLimit, true
}

// SetTopLimit sets field value
func (o *MapViewParams) SetTopLimit(v int32) {
	o.TopLimit = v
}

// GetTrackedEntityType returns the TrackedEntityType field value if set, zero value otherwise.
func (o *MapViewParams) GetTrackedEntityType() MapViewParamsTrackedEntityType {
	if o == nil || IsNil(o.TrackedEntityType) {
		var ret MapViewParamsTrackedEntityType
		return ret
	}
	return *o.TrackedEntityType
}

// GetTrackedEntityTypeOk returns a tuple with the TrackedEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetTrackedEntityTypeOk() (*MapViewParamsTrackedEntityType, bool) {
	if o == nil || IsNil(o.TrackedEntityType) {
		return nil, false
	}
	return o.TrackedEntityType, true
}

// HasTrackedEntityType returns a boolean if a field has been set.
func (o *MapViewParams) HasTrackedEntityType() bool {
	if o != nil && !IsNil(o.TrackedEntityType) {
		return true
	}

	return false
}

// SetTrackedEntityType gets a reference to the given MapViewParamsTrackedEntityType and assigns it to the TrackedEntityType field.
func (o *MapViewParams) SetTrackedEntityType(v MapViewParamsTrackedEntityType) {
	o.TrackedEntityType = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *MapViewParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *MapViewParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *MapViewParams) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUserOrgUnitType returns the UserOrgUnitType field value
func (o *MapViewParams) GetUserOrgUnitType() UserOrgUnitType {
	if o == nil {
		var ret UserOrgUnitType
		return ret
	}

	return o.UserOrgUnitType
}

// GetUserOrgUnitTypeOk returns a tuple with the UserOrgUnitType field value
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetUserOrgUnitTypeOk() (*UserOrgUnitType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserOrgUnitType, true
}

// SetUserOrgUnitType sets field value
func (o *MapViewParams) SetUserOrgUnitType(v UserOrgUnitType) {
	o.UserOrgUnitType = v
}

// GetUserOrganisationUnit returns the UserOrganisationUnit field value if set, zero value otherwise.
func (o *MapViewParams) GetUserOrganisationUnit() bool {
	if o == nil || IsNil(o.UserOrganisationUnit) {
		var ret bool
		return ret
	}
	return *o.UserOrganisationUnit
}

// GetUserOrganisationUnitOk returns a tuple with the UserOrganisationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetUserOrganisationUnitOk() (*bool, bool) {
	if o == nil || IsNil(o.UserOrganisationUnit) {
		return nil, false
	}
	return o.UserOrganisationUnit, true
}

// HasUserOrganisationUnit returns a boolean if a field has been set.
func (o *MapViewParams) HasUserOrganisationUnit() bool {
	if o != nil && !IsNil(o.UserOrganisationUnit) {
		return true
	}

	return false
}

// SetUserOrganisationUnit gets a reference to the given bool and assigns it to the UserOrganisationUnit field.
func (o *MapViewParams) SetUserOrganisationUnit(v bool) {
	o.UserOrganisationUnit = &v
}

// GetUserOrganisationUnitChildren returns the UserOrganisationUnitChildren field value if set, zero value otherwise.
func (o *MapViewParams) GetUserOrganisationUnitChildren() bool {
	if o == nil || IsNil(o.UserOrganisationUnitChildren) {
		var ret bool
		return ret
	}
	return *o.UserOrganisationUnitChildren
}

// GetUserOrganisationUnitChildrenOk returns a tuple with the UserOrganisationUnitChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetUserOrganisationUnitChildrenOk() (*bool, bool) {
	if o == nil || IsNil(o.UserOrganisationUnitChildren) {
		return nil, false
	}
	return o.UserOrganisationUnitChildren, true
}

// HasUserOrganisationUnitChildren returns a boolean if a field has been set.
func (o *MapViewParams) HasUserOrganisationUnitChildren() bool {
	if o != nil && !IsNil(o.UserOrganisationUnitChildren) {
		return true
	}

	return false
}

// SetUserOrganisationUnitChildren gets a reference to the given bool and assigns it to the UserOrganisationUnitChildren field.
func (o *MapViewParams) SetUserOrganisationUnitChildren(v bool) {
	o.UserOrganisationUnitChildren = &v
}

// GetUserOrganisationUnitGrandChildren returns the UserOrganisationUnitGrandChildren field value if set, zero value otherwise.
func (o *MapViewParams) GetUserOrganisationUnitGrandChildren() bool {
	if o == nil || IsNil(o.UserOrganisationUnitGrandChildren) {
		var ret bool
		return ret
	}
	return *o.UserOrganisationUnitGrandChildren
}

// GetUserOrganisationUnitGrandChildrenOk returns a tuple with the UserOrganisationUnitGrandChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapViewParams) GetUserOrganisationUnitGrandChildrenOk() (*bool, bool) {
	if o == nil || IsNil(o.UserOrganisationUnitGrandChildren) {
		return nil, false
	}
	return o.UserOrganisationUnitGrandChildren, true
}

// HasUserOrganisationUnitGrandChildren returns a boolean if a field has been set.
func (o *MapViewParams) HasUserOrganisationUnitGrandChildren() bool {
	if o != nil && !IsNil(o.UserOrganisationUnitGrandChildren) {
		return true
	}

	return false
}

// SetUserOrganisationUnitGrandChildren gets a reference to the given bool and assigns it to the UserOrganisationUnitGrandChildren field.
func (o *MapViewParams) SetUserOrganisationUnitGrandChildren(v bool) {
	o.UserOrganisationUnitGrandChildren = &v
}

func (o MapViewParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MapViewParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregationType"] = o.AggregationType
	if !IsNil(o.AreaRadius) {
		toSerialize["areaRadius"] = o.AreaRadius
	}
	if !IsNil(o.AttributeDimensions) {
		toSerialize["attributeDimensions"] = o.AttributeDimensions
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.CategoryDimensions) {
		toSerialize["categoryDimensions"] = o.CategoryDimensions
	}
	if !IsNil(o.CategoryOptionGroupSetDimensions) {
		toSerialize["categoryOptionGroupSetDimensions"] = o.CategoryOptionGroupSetDimensions
	}
	if !IsNil(o.Classes) {
		toSerialize["classes"] = o.Classes
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.ColSubTotals) {
		toSerialize["colSubTotals"] = o.ColSubTotals
	}
	if !IsNil(o.ColTotals) {
		toSerialize["colTotals"] = o.ColTotals
	}
	if !IsNil(o.ColorHigh) {
		toSerialize["colorHigh"] = o.ColorHigh
	}
	if !IsNil(o.ColorLow) {
		toSerialize["colorLow"] = o.ColorLow
	}
	if !IsNil(o.ColorScale) {
		toSerialize["colorScale"] = o.ColorScale
	}
	if !IsNil(o.ColumnDimensions) {
		toSerialize["columnDimensions"] = o.ColumnDimensions
	}
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	if !IsNil(o.CompletedOnly) {
		toSerialize["completedOnly"] = o.CompletedOnly
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CumulativeValues) {
		toSerialize["cumulativeValues"] = o.CumulativeValues
	}
	if !IsNil(o.DataDimensionItems) {
		toSerialize["dataDimensionItems"] = o.DataDimensionItems
	}
	if !IsNil(o.DataElementDimensions) {
		toSerialize["dataElementDimensions"] = o.DataElementDimensions
	}
	if !IsNil(o.DataElementGroupSetDimensions) {
		toSerialize["dataElementGroupSetDimensions"] = o.DataElementGroupSetDimensions
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["digitGroupSeparator"] = o.DigitGroupSeparator
	if !IsNil(o.DisplayBaseLineLabel) {
		toSerialize["displayBaseLineLabel"] = o.DisplayBaseLineLabel
	}
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayFormName) {
		toSerialize["displayFormName"] = o.DisplayFormName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	if !IsNil(o.DisplaySubtitle) {
		toSerialize["displaySubtitle"] = o.DisplaySubtitle
	}
	if !IsNil(o.DisplayTargetLineLabel) {
		toSerialize["displayTargetLineLabel"] = o.DisplayTargetLineLabel
	}
	if !IsNil(o.DisplayTitle) {
		toSerialize["displayTitle"] = o.DisplayTitle
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.EventClustering) {
		toSerialize["eventClustering"] = o.EventClustering
	}
	if !IsNil(o.EventCoordinateField) {
		toSerialize["eventCoordinateField"] = o.EventCoordinateField
	}
	if !IsNil(o.EventPointColor) {
		toSerialize["eventPointColor"] = o.EventPointColor
	}
	toSerialize["eventPointRadius"] = o.EventPointRadius
	toSerialize["eventStatus"] = o.EventStatus
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FilterDimensions) {
		toSerialize["filterDimensions"] = o.FilterDimensions
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.FollowUp) {
		toSerialize["followUp"] = o.FollowUp
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	toSerialize["hideEmptyRowItems"] = o.HideEmptyRowItems
	if !IsNil(o.HideEmptyRows) {
		toSerialize["hideEmptyRows"] = o.HideEmptyRows
	}
	if !IsNil(o.HideLegend) {
		toSerialize["hideLegend"] = o.HideLegend
	}
	if !IsNil(o.HideSubtitle) {
		toSerialize["hideSubtitle"] = o.HideSubtitle
	}
	if !IsNil(o.HideTitle) {
		toSerialize["hideTitle"] = o.HideTitle
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Interpretations) {
		toSerialize["interpretations"] = o.Interpretations
	}
	if !IsNil(o.ItemOrganisationUnitGroups) {
		toSerialize["itemOrganisationUnitGroups"] = o.ItemOrganisationUnitGroups
	}
	if !IsNil(o.LabelFontColor) {
		toSerialize["labelFontColor"] = o.LabelFontColor
	}
	if !IsNil(o.LabelFontSize) {
		toSerialize["labelFontSize"] = o.LabelFontSize
	}
	if !IsNil(o.LabelFontStyle) {
		toSerialize["labelFontStyle"] = o.LabelFontStyle
	}
	if !IsNil(o.LabelFontWeight) {
		toSerialize["labelFontWeight"] = o.LabelFontWeight
	}
	if !IsNil(o.LabelTemplate) {
		toSerialize["labelTemplate"] = o.LabelTemplate
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Layer) {
		toSerialize["layer"] = o.Layer
	}
	if !IsNil(o.Legend) {
		toSerialize["legend"] = o.Legend
	}
	if !IsNil(o.LegendSet) {
		toSerialize["legendSet"] = o.LegendSet
	}
	if !IsNil(o.MetaData) {
		toSerialize["metaData"] = o.MetaData
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NoDataColor) {
		toSerialize["noDataColor"] = o.NoDataColor
	}
	if !IsNil(o.NoSpaceBetweenColumns) {
		toSerialize["noSpaceBetweenColumns"] = o.NoSpaceBetweenColumns
	}
	if !IsNil(o.Opacity) {
		toSerialize["opacity"] = o.Opacity
	}
	if !IsNil(o.OrgUnitField) {
		toSerialize["orgUnitField"] = o.OrgUnitField
	}
	if !IsNil(o.OrgUnitFieldDisplayName) {
		toSerialize["orgUnitFieldDisplayName"] = o.OrgUnitFieldDisplayName
	}
	if !IsNil(o.OrganisationUnitColor) {
		toSerialize["organisationUnitColor"] = o.OrganisationUnitColor
	}
	if !IsNil(o.OrganisationUnitGroupSet) {
		toSerialize["organisationUnitGroupSet"] = o.OrganisationUnitGroupSet
	}
	if !IsNil(o.OrganisationUnitGroupSetDimensions) {
		toSerialize["organisationUnitGroupSetDimensions"] = o.OrganisationUnitGroupSetDimensions
	}
	if !IsNil(o.OrganisationUnitLevels) {
		toSerialize["organisationUnitLevels"] = o.OrganisationUnitLevels
	}
	toSerialize["organisationUnitSelectionMode"] = o.OrganisationUnitSelectionMode
	if !IsNil(o.OrganisationUnits) {
		toSerialize["organisationUnits"] = o.OrganisationUnits
	}
	if !IsNil(o.ParentGraph) {
		toSerialize["parentGraph"] = o.ParentGraph
	}
	toSerialize["parentLevel"] = o.ParentLevel
	if !IsNil(o.PercentStackedValues) {
		toSerialize["percentStackedValues"] = o.PercentStackedValues
	}
	if !IsNil(o.Periods) {
		toSerialize["periods"] = o.Periods
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.ProgramIndicatorDimensions) {
		toSerialize["programIndicatorDimensions"] = o.ProgramIndicatorDimensions
	}
	if !IsNil(o.ProgramStage) {
		toSerialize["programStage"] = o.ProgramStage
	}
	toSerialize["programStatus"] = o.ProgramStatus
	if !IsNil(o.RadiusHigh) {
		toSerialize["radiusHigh"] = o.RadiusHigh
	}
	if !IsNil(o.RadiusLow) {
		toSerialize["radiusLow"] = o.RadiusLow
	}
	toSerialize["regressionType"] = o.RegressionType
	if !IsNil(o.RelativePeriods) {
		toSerialize["relativePeriods"] = o.RelativePeriods
	}
	toSerialize["renderingStrategy"] = o.RenderingStrategy
	if !IsNil(o.RowSubTotals) {
		toSerialize["rowSubTotals"] = o.RowSubTotals
	}
	if !IsNil(o.RowTotals) {
		toSerialize["rowTotals"] = o.RowTotals
	}
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.ShowData) {
		toSerialize["showData"] = o.ShowData
	}
	if !IsNil(o.ShowDimensionLabels) {
		toSerialize["showDimensionLabels"] = o.ShowDimensionLabels
	}
	if !IsNil(o.ShowHierarchy) {
		toSerialize["showHierarchy"] = o.ShowHierarchy
	}
	if !IsNil(o.SkipRounding) {
		toSerialize["skipRounding"] = o.SkipRounding
	}
	toSerialize["sortOrder"] = o.SortOrder
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.StyleDataItem) {
		toSerialize["styleDataItem"] = o.StyleDataItem
	}
	if !IsNil(o.Subscribed) {
		toSerialize["subscribed"] = o.Subscribed
	}
	if !IsNil(o.Subscribers) {
		toSerialize["subscribers"] = o.Subscribers
	}
	if !IsNil(o.Subtitle) {
		toSerialize["subtitle"] = o.Subtitle
	}
	toSerialize["thematicMapType"] = o.ThematicMapType
	if !IsNil(o.TimeField) {
		toSerialize["timeField"] = o.TimeField
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["topLimit"] = o.TopLimit
	if !IsNil(o.TrackedEntityType) {
		toSerialize["trackedEntityType"] = o.TrackedEntityType
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	toSerialize["userOrgUnitType"] = o.UserOrgUnitType
	if !IsNil(o.UserOrganisationUnit) {
		toSerialize["userOrganisationUnit"] = o.UserOrganisationUnit
	}
	if !IsNil(o.UserOrganisationUnitChildren) {
		toSerialize["userOrganisationUnitChildren"] = o.UserOrganisationUnitChildren
	}
	if !IsNil(o.UserOrganisationUnitGrandChildren) {
		toSerialize["userOrganisationUnitGrandChildren"] = o.UserOrganisationUnitGrandChildren
	}
	return toSerialize, nil
}

func (o *MapViewParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregationType",
		"digitGroupSeparator",
		"eventPointRadius",
		"eventStatus",
		"hideEmptyRowItems",
		"organisationUnitSelectionMode",
		"parentLevel",
		"programStatus",
		"regressionType",
		"renderingStrategy",
		"sortOrder",
		"thematicMapType",
		"topLimit",
		"userOrgUnitType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMapViewParams := _MapViewParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMapViewParams)

	if err != nil {
		return err
	}

	*o = MapViewParams(varMapViewParams)

	return err
}

type NullableMapViewParams struct {
	value *MapViewParams
	isSet bool
}

func (v NullableMapViewParams) Get() *MapViewParams {
	return v.value
}

func (v *NullableMapViewParams) Set(val *MapViewParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMapViewParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMapViewParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapViewParams(val *MapViewParams) *NullableMapViewParams {
	return &NullableMapViewParams{value: val, isSet: true}
}

func (v NullableMapViewParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapViewParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
