/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the Sharing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sharing{}

// Sharing struct for Sharing
type Sharing struct {
	External   *bool                       `json:"external,omitempty"`
	Owner      *string                     `json:"owner,omitempty"`
	Public     *string                     `json:"public,omitempty"`
	UserGroups *map[string]UserGroupAccess `json:"userGroups,omitempty"`
	Users      *map[string]UserAccess      `json:"users,omitempty"`
}

// NewSharing instantiates a new Sharing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharing() *Sharing {
	this := Sharing{}
	return &this
}

// NewSharingWithDefaults instantiates a new Sharing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharingWithDefaults() *Sharing {
	this := Sharing{}
	return &this
}

// GetExternal returns the External field value if set, zero value otherwise.
func (o *Sharing) GetExternal() bool {
	if o == nil || IsNil(o.External) {
		var ret bool
		return ret
	}
	return *o.External
}

// GetExternalOk returns a tuple with the External field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharing) GetExternalOk() (*bool, bool) {
	if o == nil || IsNil(o.External) {
		return nil, false
	}
	return o.External, true
}

// HasExternal returns a boolean if a field has been set.
func (o *Sharing) HasExternal() bool {
	if o != nil && !IsNil(o.External) {
		return true
	}

	return false
}

// SetExternal gets a reference to the given bool and assigns it to the External field.
func (o *Sharing) SetExternal(v bool) {
	o.External = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Sharing) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharing) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Sharing) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Sharing) SetOwner(v string) {
	o.Owner = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *Sharing) GetPublic() string {
	if o == nil || IsNil(o.Public) {
		var ret string
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharing) GetPublicOk() (*string, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *Sharing) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given string and assigns it to the Public field.
func (o *Sharing) SetPublic(v string) {
	o.Public = &v
}

// GetUserGroups returns the UserGroups field value if set, zero value otherwise.
func (o *Sharing) GetUserGroups() map[string]UserGroupAccess {
	if o == nil || IsNil(o.UserGroups) {
		var ret map[string]UserGroupAccess
		return ret
	}
	return *o.UserGroups
}

// GetUserGroupsOk returns a tuple with the UserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharing) GetUserGroupsOk() (*map[string]UserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroups) {
		return nil, false
	}
	return o.UserGroups, true
}

// HasUserGroups returns a boolean if a field has been set.
func (o *Sharing) HasUserGroups() bool {
	if o != nil && !IsNil(o.UserGroups) {
		return true
	}

	return false
}

// SetUserGroups gets a reference to the given map[string]UserGroupAccess and assigns it to the UserGroups field.
func (o *Sharing) SetUserGroups(v map[string]UserGroupAccess) {
	o.UserGroups = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *Sharing) GetUsers() map[string]UserAccess {
	if o == nil || IsNil(o.Users) {
		var ret map[string]UserAccess
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharing) GetUsersOk() (*map[string]UserAccess, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *Sharing) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given map[string]UserAccess and assigns it to the Users field.
func (o *Sharing) SetUsers(v map[string]UserAccess) {
	o.Users = &v
}

func (o Sharing) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sharing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.External) {
		toSerialize["external"] = o.External
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !IsNil(o.UserGroups) {
		toSerialize["userGroups"] = o.UserGroups
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableSharing struct {
	value *Sharing
	isSet bool
}

func (v NullableSharing) Get() *Sharing {
	return v.value
}

func (v *NullableSharing) Set(val *Sharing) {
	v.value = val
	v.isSet = true
}

func (v NullableSharing) IsSet() bool {
	return v.isSet
}

func (v *NullableSharing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharing(val *Sharing) *NullableSharing {
	return &NullableSharing{value: val, isSet: true}
}

func (v NullableSharing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
