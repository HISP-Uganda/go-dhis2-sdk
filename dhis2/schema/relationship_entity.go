/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// RelationshipEntity the model 'RelationshipEntity'
type RelationshipEntity string

// List of RelationshipEntity
const (
	RELATIONSHIPENTITY_TRACKED_ENTITY_INSTANCE RelationshipEntity = "TRACKED_ENTITY_INSTANCE"
	RELATIONSHIPENTITY_PROGRAM_INSTANCE        RelationshipEntity = "PROGRAM_INSTANCE"
	RELATIONSHIPENTITY_PROGRAM_STAGE_INSTANCE  RelationshipEntity = "PROGRAM_STAGE_INSTANCE"
)

// All allowed values of RelationshipEntity enum
var AllowedRelationshipEntityEnumValues = []RelationshipEntity{
	"TRACKED_ENTITY_INSTANCE",
	"PROGRAM_INSTANCE",
	"PROGRAM_STAGE_INSTANCE",
}

func (v *RelationshipEntity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RelationshipEntity(value)
	for _, existing := range AllowedRelationshipEntityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RelationshipEntity", value)
}

// NewRelationshipEntityFromValue returns a pointer to a valid RelationshipEntity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRelationshipEntityFromValue(v string) (*RelationshipEntity, error) {
	ev := RelationshipEntity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RelationshipEntity: valid values are %v", v, AllowedRelationshipEntityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RelationshipEntity) IsValid() bool {
	for _, existing := range AllowedRelationshipEntityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RelationshipEntity value
func (v RelationshipEntity) Ptr() *RelationshipEntity {
	return &v
}

type NullableRelationshipEntity struct {
	value *RelationshipEntity
	isSet bool
}

func (v NullableRelationshipEntity) Get() *RelationshipEntity {
	return v.value
}

func (v *NullableRelationshipEntity) Set(val *RelationshipEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipEntity(val *RelationshipEntity) *NullableRelationshipEntity {
	return &NullableRelationshipEntity{value: val, isSet: true}
}

func (v NullableRelationshipEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
