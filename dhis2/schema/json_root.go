/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the JsonRoot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonRoot{}

// JsonRoot struct for JsonRoot
type JsonRoot struct {
	Properties map[string]map[string]interface{} `json:"properties,omitempty"`
}

// NewJsonRoot instantiates a new JsonRoot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonRoot() *JsonRoot {
	this := JsonRoot{}
	return &this
}

// NewJsonRootWithDefaults instantiates a new JsonRoot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonRootWithDefaults() *JsonRoot {
	this := JsonRoot{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *JsonRoot) GetProperties() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonRoot) GetPropertiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *JsonRoot) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]map[string]interface{} and assigns it to the Properties field.
func (o *JsonRoot) SetProperties(v map[string]map[string]interface{}) {
	o.Properties = v
}

func (o JsonRoot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonRoot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableJsonRoot struct {
	value *JsonRoot
	isSet bool
}

func (v NullableJsonRoot) Get() *JsonRoot {
	return v.value
}

func (v *NullableJsonRoot) Set(val *JsonRoot) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonRoot) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonRoot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonRoot(val *JsonRoot) *NullableJsonRoot {
	return &NullableJsonRoot{value: val, isSet: true}
}

func (v NullableJsonRoot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonRoot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
