/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the RemoveByIdOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveByIdOperation{}

// RemoveByIdOperation struct for RemoveByIdOperation
type RemoveByIdOperation struct {
	Op   *string `json:"op,omitempty"`
	Path *string `json:"path,omitempty"`
}

// NewRemoveByIdOperation instantiates a new RemoveByIdOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveByIdOperation() *RemoveByIdOperation {
	this := RemoveByIdOperation{}
	return &this
}

// NewRemoveByIdOperationWithDefaults instantiates a new RemoveByIdOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveByIdOperationWithDefaults() *RemoveByIdOperation {
	this := RemoveByIdOperation{}
	return &this
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *RemoveByIdOperation) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveByIdOperation) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *RemoveByIdOperation) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *RemoveByIdOperation) SetOp(v string) {
	o.Op = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RemoveByIdOperation) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveByIdOperation) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RemoveByIdOperation) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *RemoveByIdOperation) SetPath(v string) {
	o.Path = &v
}

func (o RemoveByIdOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveByIdOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableRemoveByIdOperation struct {
	value *RemoveByIdOperation
	isSet bool
}

func (v NullableRemoveByIdOperation) Get() *RemoveByIdOperation {
	return v.value
}

func (v *NullableRemoveByIdOperation) Set(val *RemoveByIdOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveByIdOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveByIdOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveByIdOperation(val *RemoveByIdOperation) *NullableRemoveByIdOperation {
	return &NullableRemoveByIdOperation{value: val, isSet: true}
}

func (v NullableRemoveByIdOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveByIdOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
