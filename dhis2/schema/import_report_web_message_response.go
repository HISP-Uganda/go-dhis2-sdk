/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImportReportWebMessageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportReportWebMessageResponse{}

// ImportReportWebMessageResponse struct for ImportReportWebMessageResponse
type ImportReportWebMessageResponse struct {
	ResponseType *string      `json:"responseType,omitempty"`
	Stats        *Stats       `json:"stats,omitempty"`
	Status       Status       `json:"status"`
	TypeReports  []TypeReport `json:"typeReports,omitempty"`
}

type _ImportReportWebMessageResponse ImportReportWebMessageResponse

// NewImportReportWebMessageResponse instantiates a new ImportReportWebMessageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportReportWebMessageResponse(status Status) *ImportReportWebMessageResponse {
	this := ImportReportWebMessageResponse{}
	this.Status = status
	return &this
}

// NewImportReportWebMessageResponseWithDefaults instantiates a new ImportReportWebMessageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportReportWebMessageResponseWithDefaults() *ImportReportWebMessageResponse {
	this := ImportReportWebMessageResponse{}
	return &this
}

// GetResponseType returns the ResponseType field value if set, zero value otherwise.
func (o *ImportReportWebMessageResponse) GetResponseType() string {
	if o == nil || IsNil(o.ResponseType) {
		var ret string
		return ret
	}
	return *o.ResponseType
}

// GetResponseTypeOk returns a tuple with the ResponseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportReportWebMessageResponse) GetResponseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseType) {
		return nil, false
	}
	return o.ResponseType, true
}

// HasResponseType returns a boolean if a field has been set.
func (o *ImportReportWebMessageResponse) HasResponseType() bool {
	if o != nil && !IsNil(o.ResponseType) {
		return true
	}

	return false
}

// SetResponseType gets a reference to the given string and assigns it to the ResponseType field.
func (o *ImportReportWebMessageResponse) SetResponseType(v string) {
	o.ResponseType = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *ImportReportWebMessageResponse) GetStats() Stats {
	if o == nil || IsNil(o.Stats) {
		var ret Stats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportReportWebMessageResponse) GetStatsOk() (*Stats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ImportReportWebMessageResponse) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given Stats and assigns it to the Stats field.
func (o *ImportReportWebMessageResponse) SetStats(v Stats) {
	o.Stats = &v
}

// GetStatus returns the Status field value
func (o *ImportReportWebMessageResponse) GetStatus() Status {
	if o == nil {
		var ret Status
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ImportReportWebMessageResponse) GetStatusOk() (*Status, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ImportReportWebMessageResponse) SetStatus(v Status) {
	o.Status = v
}

// GetTypeReports returns the TypeReports field value if set, zero value otherwise.
func (o *ImportReportWebMessageResponse) GetTypeReports() []TypeReport {
	if o == nil || IsNil(o.TypeReports) {
		var ret []TypeReport
		return ret
	}
	return o.TypeReports
}

// GetTypeReportsOk returns a tuple with the TypeReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportReportWebMessageResponse) GetTypeReportsOk() ([]TypeReport, bool) {
	if o == nil || IsNil(o.TypeReports) {
		return nil, false
	}
	return o.TypeReports, true
}

// HasTypeReports returns a boolean if a field has been set.
func (o *ImportReportWebMessageResponse) HasTypeReports() bool {
	if o != nil && !IsNil(o.TypeReports) {
		return true
	}

	return false
}

// SetTypeReports gets a reference to the given []TypeReport and assigns it to the TypeReports field.
func (o *ImportReportWebMessageResponse) SetTypeReports(v []TypeReport) {
	o.TypeReports = v
}

func (o ImportReportWebMessageResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportReportWebMessageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResponseType) {
		toSerialize["responseType"] = o.ResponseType
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.TypeReports) {
		toSerialize["typeReports"] = o.TypeReports
	}
	return toSerialize, nil
}

func (o *ImportReportWebMessageResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportReportWebMessageResponse := _ImportReportWebMessageResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportReportWebMessageResponse)

	if err != nil {
		return err
	}

	*o = ImportReportWebMessageResponse(varImportReportWebMessageResponse)

	return err
}

type NullableImportReportWebMessageResponse struct {
	value *ImportReportWebMessageResponse
	isSet bool
}

func (v NullableImportReportWebMessageResponse) Get() *ImportReportWebMessageResponse {
	return v.value
}

func (v *NullableImportReportWebMessageResponse) Set(val *ImportReportWebMessageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableImportReportWebMessageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableImportReportWebMessageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportReportWebMessageResponse(val *ImportReportWebMessageResponse) *NullableImportReportWebMessageResponse {
	return &NullableImportReportWebMessageResponse{value: val, isSet: true}
}

func (v NullableImportReportWebMessageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportReportWebMessageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
