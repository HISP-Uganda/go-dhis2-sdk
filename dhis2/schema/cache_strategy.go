/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// CacheStrategy the model 'CacheStrategy'
type CacheStrategy string

// List of CacheStrategy
const (
	CACHESTRATEGY_NO_CACHE               CacheStrategy = "NO_CACHE"
	CACHESTRATEGY_CACHE_1_MINUTE         CacheStrategy = "CACHE_1_MINUTE"
	CACHESTRATEGY_CACHE_5_MINUTES        CacheStrategy = "CACHE_5_MINUTES"
	CACHESTRATEGY_CACHE_10_MINUTES       CacheStrategy = "CACHE_10_MINUTES"
	CACHESTRATEGY_CACHE_15_MINUTES       CacheStrategy = "CACHE_15_MINUTES"
	CACHESTRATEGY_CACHE_30_MINUTES       CacheStrategy = "CACHE_30_MINUTES"
	CACHESTRATEGY_CACHE_1_HOUR           CacheStrategy = "CACHE_1_HOUR"
	CACHESTRATEGY_CACHE_6_AM_TOMORROW    CacheStrategy = "CACHE_6AM_TOMORROW"
	CACHESTRATEGY_CACHE_TWO_WEEKS        CacheStrategy = "CACHE_TWO_WEEKS"
	CACHESTRATEGY_RESPECT_SYSTEM_SETTING CacheStrategy = "RESPECT_SYSTEM_SETTING"
)

// All allowed values of CacheStrategy enum
var AllowedCacheStrategyEnumValues = []CacheStrategy{
	"NO_CACHE",
	"CACHE_1_MINUTE",
	"CACHE_5_MINUTES",
	"CACHE_10_MINUTES",
	"CACHE_15_MINUTES",
	"CACHE_30_MINUTES",
	"CACHE_1_HOUR",
	"CACHE_6AM_TOMORROW",
	"CACHE_TWO_WEEKS",
	"RESPECT_SYSTEM_SETTING",
}

func (v *CacheStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CacheStrategy(value)
	for _, existing := range AllowedCacheStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CacheStrategy", value)
}

// NewCacheStrategyFromValue returns a pointer to a valid CacheStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCacheStrategyFromValue(v string) (*CacheStrategy, error) {
	ev := CacheStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CacheStrategy: valid values are %v", v, AllowedCacheStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CacheStrategy) IsValid() bool {
	for _, existing := range AllowedCacheStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CacheStrategy value
func (v CacheStrategy) Ptr() *CacheStrategy {
	return &v
}

type NullableCacheStrategy struct {
	value *CacheStrategy
	isSet bool
}

func (v NullableCacheStrategy) Get() *CacheStrategy {
	return v.value
}

func (v *NullableCacheStrategy) Set(val *CacheStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheStrategy(val *CacheStrategy) *NullableCacheStrategy {
	return &NullableCacheStrategy{value: val, isSet: true}
}

func (v NullableCacheStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
