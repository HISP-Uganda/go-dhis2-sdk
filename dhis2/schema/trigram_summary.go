/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the TrigramSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrigramSummary{}

// TrigramSummary struct for TrigramSummary
type TrigramSummary struct {
	IndexableAttributes       []map[string]interface{} `json:"indexableAttributes,omitempty"`
	IndexedAttributes         []map[string]interface{} `json:"indexedAttributes,omitempty"`
	ObsoleteIndexedAttributes []map[string]interface{} `json:"obsoleteIndexedAttributes,omitempty"`
}

// NewTrigramSummary instantiates a new TrigramSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrigramSummary() *TrigramSummary {
	this := TrigramSummary{}
	return &this
}

// NewTrigramSummaryWithDefaults instantiates a new TrigramSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrigramSummaryWithDefaults() *TrigramSummary {
	this := TrigramSummary{}
	return &this
}

// GetIndexableAttributes returns the IndexableAttributes field value if set, zero value otherwise.
func (o *TrigramSummary) GetIndexableAttributes() []map[string]interface{} {
	if o == nil || IsNil(o.IndexableAttributes) {
		var ret []map[string]interface{}
		return ret
	}
	return o.IndexableAttributes
}

// GetIndexableAttributesOk returns a tuple with the IndexableAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrigramSummary) GetIndexableAttributesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.IndexableAttributes) {
		return nil, false
	}
	return o.IndexableAttributes, true
}

// HasIndexableAttributes returns a boolean if a field has been set.
func (o *TrigramSummary) HasIndexableAttributes() bool {
	if o != nil && !IsNil(o.IndexableAttributes) {
		return true
	}

	return false
}

// SetIndexableAttributes gets a reference to the given []map[string]interface{} and assigns it to the IndexableAttributes field.
func (o *TrigramSummary) SetIndexableAttributes(v []map[string]interface{}) {
	o.IndexableAttributes = v
}

// GetIndexedAttributes returns the IndexedAttributes field value if set, zero value otherwise.
func (o *TrigramSummary) GetIndexedAttributes() []map[string]interface{} {
	if o == nil || IsNil(o.IndexedAttributes) {
		var ret []map[string]interface{}
		return ret
	}
	return o.IndexedAttributes
}

// GetIndexedAttributesOk returns a tuple with the IndexedAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrigramSummary) GetIndexedAttributesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.IndexedAttributes) {
		return nil, false
	}
	return o.IndexedAttributes, true
}

// HasIndexedAttributes returns a boolean if a field has been set.
func (o *TrigramSummary) HasIndexedAttributes() bool {
	if o != nil && !IsNil(o.IndexedAttributes) {
		return true
	}

	return false
}

// SetIndexedAttributes gets a reference to the given []map[string]interface{} and assigns it to the IndexedAttributes field.
func (o *TrigramSummary) SetIndexedAttributes(v []map[string]interface{}) {
	o.IndexedAttributes = v
}

// GetObsoleteIndexedAttributes returns the ObsoleteIndexedAttributes field value if set, zero value otherwise.
func (o *TrigramSummary) GetObsoleteIndexedAttributes() []map[string]interface{} {
	if o == nil || IsNil(o.ObsoleteIndexedAttributes) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ObsoleteIndexedAttributes
}

// GetObsoleteIndexedAttributesOk returns a tuple with the ObsoleteIndexedAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrigramSummary) GetObsoleteIndexedAttributesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ObsoleteIndexedAttributes) {
		return nil, false
	}
	return o.ObsoleteIndexedAttributes, true
}

// HasObsoleteIndexedAttributes returns a boolean if a field has been set.
func (o *TrigramSummary) HasObsoleteIndexedAttributes() bool {
	if o != nil && !IsNil(o.ObsoleteIndexedAttributes) {
		return true
	}

	return false
}

// SetObsoleteIndexedAttributes gets a reference to the given []map[string]interface{} and assigns it to the ObsoleteIndexedAttributes field.
func (o *TrigramSummary) SetObsoleteIndexedAttributes(v []map[string]interface{}) {
	o.ObsoleteIndexedAttributes = v
}

func (o TrigramSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrigramSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IndexableAttributes) {
		toSerialize["indexableAttributes"] = o.IndexableAttributes
	}
	if !IsNil(o.IndexedAttributes) {
		toSerialize["indexedAttributes"] = o.IndexedAttributes
	}
	if !IsNil(o.ObsoleteIndexedAttributes) {
		toSerialize["obsoleteIndexedAttributes"] = o.ObsoleteIndexedAttributes
	}
	return toSerialize, nil
}

type NullableTrigramSummary struct {
	value *TrigramSummary
	isSet bool
}

func (v NullableTrigramSummary) Get() *TrigramSummary {
	return v.value
}

func (v *NullableTrigramSummary) Set(val *TrigramSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableTrigramSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableTrigramSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrigramSummary(val *TrigramSummary) *NullableTrigramSummary {
	return &NullableTrigramSummary{value: val, isSet: true}
}

func (v NullableTrigramSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrigramSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
