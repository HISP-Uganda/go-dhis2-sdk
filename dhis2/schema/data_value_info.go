/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the DataValueInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataValueInfo{}

// DataValueInfo struct for DataValueInfo
type DataValueInfo struct {
	CreatedAt         *AttributeInfoCreatedAt `json:"createdAt,omitempty"`
	CreatedBy         *TrackerUser            `json:"createdBy,omitempty"`
	DataElement       *string                 `json:"dataElement,omitempty"`
	ProvidedElsewhere *bool                   `json:"providedElsewhere,omitempty"`
	StoredBy          *string                 `json:"storedBy,omitempty"`
	UpdatedAt         *AttributeInfoCreatedAt `json:"updatedAt,omitempty"`
	UpdatedBy         *TrackerUser            `json:"updatedBy,omitempty"`
	Value             *string                 `json:"value,omitempty"`
}

// NewDataValueInfo instantiates a new DataValueInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataValueInfo() *DataValueInfo {
	this := DataValueInfo{}
	return &this
}

// NewDataValueInfoWithDefaults instantiates a new DataValueInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataValueInfoWithDefaults() *DataValueInfo {
	this := DataValueInfo{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DataValueInfo) GetCreatedAt() AttributeInfoCreatedAt {
	if o == nil || IsNil(o.CreatedAt) {
		var ret AttributeInfoCreatedAt
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueInfo) GetCreatedAtOk() (*AttributeInfoCreatedAt, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DataValueInfo) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given AttributeInfoCreatedAt and assigns it to the CreatedAt field.
func (o *DataValueInfo) SetCreatedAt(v AttributeInfoCreatedAt) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DataValueInfo) GetCreatedBy() TrackerUser {
	if o == nil || IsNil(o.CreatedBy) {
		var ret TrackerUser
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueInfo) GetCreatedByOk() (*TrackerUser, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DataValueInfo) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given TrackerUser and assigns it to the CreatedBy field.
func (o *DataValueInfo) SetCreatedBy(v TrackerUser) {
	o.CreatedBy = &v
}

// GetDataElement returns the DataElement field value if set, zero value otherwise.
func (o *DataValueInfo) GetDataElement() string {
	if o == nil || IsNil(o.DataElement) {
		var ret string
		return ret
	}
	return *o.DataElement
}

// GetDataElementOk returns a tuple with the DataElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueInfo) GetDataElementOk() (*string, bool) {
	if o == nil || IsNil(o.DataElement) {
		return nil, false
	}
	return o.DataElement, true
}

// HasDataElement returns a boolean if a field has been set.
func (o *DataValueInfo) HasDataElement() bool {
	if o != nil && !IsNil(o.DataElement) {
		return true
	}

	return false
}

// SetDataElement gets a reference to the given string and assigns it to the DataElement field.
func (o *DataValueInfo) SetDataElement(v string) {
	o.DataElement = &v
}

// GetProvidedElsewhere returns the ProvidedElsewhere field value if set, zero value otherwise.
func (o *DataValueInfo) GetProvidedElsewhere() bool {
	if o == nil || IsNil(o.ProvidedElsewhere) {
		var ret bool
		return ret
	}
	return *o.ProvidedElsewhere
}

// GetProvidedElsewhereOk returns a tuple with the ProvidedElsewhere field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueInfo) GetProvidedElsewhereOk() (*bool, bool) {
	if o == nil || IsNil(o.ProvidedElsewhere) {
		return nil, false
	}
	return o.ProvidedElsewhere, true
}

// HasProvidedElsewhere returns a boolean if a field has been set.
func (o *DataValueInfo) HasProvidedElsewhere() bool {
	if o != nil && !IsNil(o.ProvidedElsewhere) {
		return true
	}

	return false
}

// SetProvidedElsewhere gets a reference to the given bool and assigns it to the ProvidedElsewhere field.
func (o *DataValueInfo) SetProvidedElsewhere(v bool) {
	o.ProvidedElsewhere = &v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *DataValueInfo) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueInfo) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *DataValueInfo) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *DataValueInfo) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DataValueInfo) GetUpdatedAt() AttributeInfoCreatedAt {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret AttributeInfoCreatedAt
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueInfo) GetUpdatedAtOk() (*AttributeInfoCreatedAt, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DataValueInfo) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given AttributeInfoCreatedAt and assigns it to the UpdatedAt field.
func (o *DataValueInfo) SetUpdatedAt(v AttributeInfoCreatedAt) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *DataValueInfo) GetUpdatedBy() TrackerUser {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret TrackerUser
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueInfo) GetUpdatedByOk() (*TrackerUser, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *DataValueInfo) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given TrackerUser and assigns it to the UpdatedBy field.
func (o *DataValueInfo) SetUpdatedBy(v TrackerUser) {
	o.UpdatedBy = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DataValueInfo) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValueInfo) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DataValueInfo) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DataValueInfo) SetValue(v string) {
	o.Value = &v
}

func (o DataValueInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataValueInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DataElement) {
		toSerialize["dataElement"] = o.DataElement
	}
	if !IsNil(o.ProvidedElsewhere) {
		toSerialize["providedElsewhere"] = o.ProvidedElsewhere
	}
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableDataValueInfo struct {
	value *DataValueInfo
	isSet bool
}

func (v NullableDataValueInfo) Get() *DataValueInfo {
	return v.value
}

func (v *NullableDataValueInfo) Set(val *DataValueInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDataValueInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDataValueInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataValueInfo(val *DataValueInfo) *NullableDataValueInfo {
	return &NullableDataValueInfo{value: val, isSet: true}
}

func (v NullableDataValueInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataValueInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
