/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the VisualizationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualizationParams{}

// VisualizationParams struct for VisualizationParams
type VisualizationParams struct {
	AggregationType                    AggregationType                                   `json:"aggregationType"`
	AttributeDimensions                []TrackedEntityAttributeDimensionParams           `json:"attributeDimensions,omitempty"`
	AttributeValues                    []AttributeValueParams                            `json:"attributeValues,omitempty"`
	Axes                               []AxisV2                                          `json:"axes,omitempty"`
	CategoryDimensions                 []CategoryDimensionParams                         `json:"categoryDimensions,omitempty"`
	CategoryOptionGroupSetDimensions   []CategoryOptionGroupSetDimensionParams           `json:"categoryOptionGroupSetDimensions,omitempty"`
	Code                               *string                                           `json:"code,omitempty"`
	ColSubTotals                       *bool                                             `json:"colSubTotals,omitempty"`
	ColTotals                          *bool                                             `json:"colTotals,omitempty"`
	ColorSet                           *string                                           `json:"colorSet,omitempty"`
	ColumnDimensions                   []string                                          `json:"columnDimensions,omitempty"`
	Columns                            []EventChartParamsColumnsInner                    `json:"columns,omitempty"`
	CompletedOnly                      *bool                                             `json:"completedOnly,omitempty"`
	Created                            *time.Time                                        `json:"created,omitempty"`
	CreatedBy                          *AggregateDataExchangeParamsCreatedBy             `json:"createdBy,omitempty"`
	CumulativeValues                   *bool                                             `json:"cumulativeValues,omitempty"`
	DataDimensionItems                 []DataDimensionItemParams                         `json:"dataDimensionItems,omitempty"`
	DataElementDimensions              []TrackedEntityDataElementDimensionParams         `json:"dataElementDimensions,omitempty"`
	DataElementGroupSetDimensions      []DataElementGroupSetDimensionParams              `json:"dataElementGroupSetDimensions,omitempty"`
	Description                        *string                                           `json:"description,omitempty"`
	DigitGroupSeparator                DigitGroupSeparator                               `json:"digitGroupSeparator"`
	DisplayBaseLineLabel               *string                                           `json:"displayBaseLineLabel,omitempty"`
	DisplayDensity                     DisplayDensity                                    `json:"displayDensity"`
	DisplayDescription                 *string                                           `json:"displayDescription,omitempty"`
	DisplayDomainAxisLabel             *string                                           `json:"displayDomainAxisLabel,omitempty"`
	DisplayFormName                    *string                                           `json:"displayFormName,omitempty"`
	DisplayName                        *string                                           `json:"displayName,omitempty"`
	DisplayRangeAxisLabel              *string                                           `json:"displayRangeAxisLabel,omitempty"`
	DisplayShortName                   *string                                           `json:"displayShortName,omitempty"`
	DisplaySubtitle                    *string                                           `json:"displaySubtitle,omitempty"`
	DisplayTargetLineLabel             *string                                           `json:"displayTargetLineLabel,omitempty"`
	DisplayTitle                       *string                                           `json:"displayTitle,omitempty"`
	EndDate                            *time.Time                                        `json:"endDate,omitempty"`
	Favorite                           *bool                                             `json:"favorite,omitempty"`
	Favorites                          []string                                          `json:"favorites,omitempty"`
	FilterDimensions                   []string                                          `json:"filterDimensions,omitempty"`
	Filters                            []EventChartParamsColumnsInner                    `json:"filters,omitempty"`
	FixColumnHeaders                   *bool                                             `json:"fixColumnHeaders,omitempty"`
	FixRowHeaders                      *bool                                             `json:"fixRowHeaders,omitempty"`
	FontSize                           FontSize                                          `json:"fontSize"`
	FontStyle                          *VisualizationFontStyle                           `json:"fontStyle,omitempty"`
	FormName                           *string                                           `json:"formName,omitempty"`
	HideEmptyColumns                   *bool                                             `json:"hideEmptyColumns,omitempty"`
	HideEmptyRowItems                  HideEmptyItemStrategy                             `json:"hideEmptyRowItems"`
	HideEmptyRows                      *bool                                             `json:"hideEmptyRows,omitempty"`
	HideLegend                         *bool                                             `json:"hideLegend,omitempty"`
	HideSubtitle                       *bool                                             `json:"hideSubtitle,omitempty"`
	HideTitle                          *bool                                             `json:"hideTitle,omitempty"`
	Icons                              []VisualizationIcon                               `json:"icons,omitempty"`
	Id                                 *string                                           `json:"id,omitempty"`
	Interpretations                    []DataSetParamsInterpretationsInner               `json:"interpretations,omitempty"`
	ItemOrganisationUnitGroups         []EventChartParamsItemOrganisationUnitGroupsInner `json:"itemOrganisationUnitGroups,omitempty"`
	LastUpdated                        *time.Time                                        `json:"lastUpdated,omitempty"`
	LastUpdatedBy                      *AggregateDataExchangeParamsCreatedBy             `json:"lastUpdatedBy,omitempty"`
	Legend                             *LegendDefinitionsParams                          `json:"legend,omitempty"`
	MeasureCriteria                    *string                                           `json:"measureCriteria,omitempty"`
	MetaData                           *map[string]MetadataItemParams                    `json:"metaData,omitempty"`
	Name                               *string                                           `json:"name,omitempty"`
	NoSpaceBetweenColumns              *bool                                             `json:"noSpaceBetweenColumns,omitempty"`
	NumberType                         NumberType                                        `json:"numberType"`
	OptionalAxes                       []Axis                                            `json:"optionalAxes,omitempty"`
	OrgUnitField                       *string                                           `json:"orgUnitField,omitempty"`
	OrganisationUnitGroupSetDimensions []OrganisationUnitGroupSetDimensionParams         `json:"organisationUnitGroupSetDimensions,omitempty"`
	OrganisationUnitLevels             []int32                                           `json:"organisationUnitLevels,omitempty"`
	OrganisationUnits                  []CategoryOptionParamsOrganisationUnitsInner      `json:"organisationUnits,omitempty"`
	OutlierAnalysis                    *OutlierAnalysis                                  `json:"outlierAnalysis,omitempty"`
	PercentStackedValues               *bool                                             `json:"percentStackedValues,omitempty"`
	Periods                            []string                                          `json:"periods,omitempty"`
	ProgramIndicatorDimensions         []TrackedEntityProgramIndicatorDimensionParams    `json:"programIndicatorDimensions,omitempty"`
	Regression                         *bool                                             `json:"regression,omitempty"`
	RegressionType                     RegressionType                                    `json:"regressionType"`
	RelativePeriods                    *RelativePeriods                                  `json:"relativePeriods,omitempty"`
	ReportingParams                    *ReportingParams                                  `json:"reportingParams,omitempty"`
	RowDimensions                      []string                                          `json:"rowDimensions,omitempty"`
	RowSubTotals                       *bool                                             `json:"rowSubTotals,omitempty"`
	RowTotals                          *bool                                             `json:"rowTotals,omitempty"`
	Rows                               []EventChartParamsColumnsInner                    `json:"rows,omitempty"`
	Series                             []Series                                          `json:"series,omitempty"`
	SeriesKey                          *SeriesKey                                        `json:"seriesKey,omitempty"`
	Sharing                            *Sharing                                          `json:"sharing,omitempty"`
	ShortName                          *string                                           `json:"shortName,omitempty"`
	ShowData                           *bool                                             `json:"showData,omitempty"`
	ShowDimensionLabels                *bool                                             `json:"showDimensionLabels,omitempty"`
	ShowHierarchy                      *bool                                             `json:"showHierarchy,omitempty"`
	SkipRounding                       *bool                                             `json:"skipRounding,omitempty"`
	SortOrder                          int32                                             `json:"sortOrder"`
	Sorting                            []Sorting                                         `json:"sorting,omitempty"`
	StartDate                          *time.Time                                        `json:"startDate,omitempty"`
	Subscribed                         *bool                                             `json:"subscribed,omitempty"`
	Subscribers                        []string                                          `json:"subscribers,omitempty"`
	Subtitle                           *string                                           `json:"subtitle,omitempty"`
	TimeField                          *string                                           `json:"timeField,omitempty"`
	Title                              *string                                           `json:"title,omitempty"`
	TopLimit                           int32                                             `json:"topLimit"`
	Translations                       []Translation                                     `json:"translations,omitempty"`
	Type                               VisualizationType                                 `json:"type"`
	UserOrgUnitType                    UserOrgUnitType                                   `json:"userOrgUnitType"`
	UserOrganisationUnit               *bool                                             `json:"userOrganisationUnit,omitempty"`
	UserOrganisationUnitChildren       *bool                                             `json:"userOrganisationUnitChildren,omitempty"`
	UserOrganisationUnitGrandChildren  *bool                                             `json:"userOrganisationUnitGrandChildren,omitempty"`
	VisualizationPeriodName            *string                                           `json:"visualizationPeriodName,omitempty"`
	YearlySeries                       []string                                          `json:"yearlySeries,omitempty"`
}

type _VisualizationParams VisualizationParams

// NewVisualizationParams instantiates a new VisualizationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualizationParams(aggregationType AggregationType, digitGroupSeparator DigitGroupSeparator, displayDensity DisplayDensity, fontSize FontSize, hideEmptyRowItems HideEmptyItemStrategy, numberType NumberType, regressionType RegressionType, sortOrder int32, topLimit int32, type_ VisualizationType, userOrgUnitType UserOrgUnitType) *VisualizationParams {
	this := VisualizationParams{}
	this.AggregationType = aggregationType
	this.DigitGroupSeparator = digitGroupSeparator
	this.DisplayDensity = displayDensity
	this.FontSize = fontSize
	this.HideEmptyRowItems = hideEmptyRowItems
	this.NumberType = numberType
	this.RegressionType = regressionType
	this.SortOrder = sortOrder
	this.TopLimit = topLimit
	this.Type = type_
	this.UserOrgUnitType = userOrgUnitType
	return &this
}

// NewVisualizationParamsWithDefaults instantiates a new VisualizationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualizationParamsWithDefaults() *VisualizationParams {
	this := VisualizationParams{}
	return &this
}

// GetAggregationType returns the AggregationType field value
func (o *VisualizationParams) GetAggregationType() AggregationType {
	if o == nil {
		var ret AggregationType
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetAggregationTypeOk() (*AggregationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *VisualizationParams) SetAggregationType(v AggregationType) {
	o.AggregationType = v
}

// GetAttributeDimensions returns the AttributeDimensions field value if set, zero value otherwise.
func (o *VisualizationParams) GetAttributeDimensions() []TrackedEntityAttributeDimensionParams {
	if o == nil || IsNil(o.AttributeDimensions) {
		var ret []TrackedEntityAttributeDimensionParams
		return ret
	}
	return o.AttributeDimensions
}

// GetAttributeDimensionsOk returns a tuple with the AttributeDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetAttributeDimensionsOk() ([]TrackedEntityAttributeDimensionParams, bool) {
	if o == nil || IsNil(o.AttributeDimensions) {
		return nil, false
	}
	return o.AttributeDimensions, true
}

// HasAttributeDimensions returns a boolean if a field has been set.
func (o *VisualizationParams) HasAttributeDimensions() bool {
	if o != nil && !IsNil(o.AttributeDimensions) {
		return true
	}

	return false
}

// SetAttributeDimensions gets a reference to the given []TrackedEntityAttributeDimensionParams and assigns it to the AttributeDimensions field.
func (o *VisualizationParams) SetAttributeDimensions(v []TrackedEntityAttributeDimensionParams) {
	o.AttributeDimensions = v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *VisualizationParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *VisualizationParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *VisualizationParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetAxes returns the Axes field value if set, zero value otherwise.
func (o *VisualizationParams) GetAxes() []AxisV2 {
	if o == nil || IsNil(o.Axes) {
		var ret []AxisV2
		return ret
	}
	return o.Axes
}

// GetAxesOk returns a tuple with the Axes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetAxesOk() ([]AxisV2, bool) {
	if o == nil || IsNil(o.Axes) {
		return nil, false
	}
	return o.Axes, true
}

// HasAxes returns a boolean if a field has been set.
func (o *VisualizationParams) HasAxes() bool {
	if o != nil && !IsNil(o.Axes) {
		return true
	}

	return false
}

// SetAxes gets a reference to the given []AxisV2 and assigns it to the Axes field.
func (o *VisualizationParams) SetAxes(v []AxisV2) {
	o.Axes = v
}

// GetCategoryDimensions returns the CategoryDimensions field value if set, zero value otherwise.
func (o *VisualizationParams) GetCategoryDimensions() []CategoryDimensionParams {
	if o == nil || IsNil(o.CategoryDimensions) {
		var ret []CategoryDimensionParams
		return ret
	}
	return o.CategoryDimensions
}

// GetCategoryDimensionsOk returns a tuple with the CategoryDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetCategoryDimensionsOk() ([]CategoryDimensionParams, bool) {
	if o == nil || IsNil(o.CategoryDimensions) {
		return nil, false
	}
	return o.CategoryDimensions, true
}

// HasCategoryDimensions returns a boolean if a field has been set.
func (o *VisualizationParams) HasCategoryDimensions() bool {
	if o != nil && !IsNil(o.CategoryDimensions) {
		return true
	}

	return false
}

// SetCategoryDimensions gets a reference to the given []CategoryDimensionParams and assigns it to the CategoryDimensions field.
func (o *VisualizationParams) SetCategoryDimensions(v []CategoryDimensionParams) {
	o.CategoryDimensions = v
}

// GetCategoryOptionGroupSetDimensions returns the CategoryOptionGroupSetDimensions field value if set, zero value otherwise.
func (o *VisualizationParams) GetCategoryOptionGroupSetDimensions() []CategoryOptionGroupSetDimensionParams {
	if o == nil || IsNil(o.CategoryOptionGroupSetDimensions) {
		var ret []CategoryOptionGroupSetDimensionParams
		return ret
	}
	return o.CategoryOptionGroupSetDimensions
}

// GetCategoryOptionGroupSetDimensionsOk returns a tuple with the CategoryOptionGroupSetDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetCategoryOptionGroupSetDimensionsOk() ([]CategoryOptionGroupSetDimensionParams, bool) {
	if o == nil || IsNil(o.CategoryOptionGroupSetDimensions) {
		return nil, false
	}
	return o.CategoryOptionGroupSetDimensions, true
}

// HasCategoryOptionGroupSetDimensions returns a boolean if a field has been set.
func (o *VisualizationParams) HasCategoryOptionGroupSetDimensions() bool {
	if o != nil && !IsNil(o.CategoryOptionGroupSetDimensions) {
		return true
	}

	return false
}

// SetCategoryOptionGroupSetDimensions gets a reference to the given []CategoryOptionGroupSetDimensionParams and assigns it to the CategoryOptionGroupSetDimensions field.
func (o *VisualizationParams) SetCategoryOptionGroupSetDimensions(v []CategoryOptionGroupSetDimensionParams) {
	o.CategoryOptionGroupSetDimensions = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *VisualizationParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *VisualizationParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *VisualizationParams) SetCode(v string) {
	o.Code = &v
}

// GetColSubTotals returns the ColSubTotals field value if set, zero value otherwise.
func (o *VisualizationParams) GetColSubTotals() bool {
	if o == nil || IsNil(o.ColSubTotals) {
		var ret bool
		return ret
	}
	return *o.ColSubTotals
}

// GetColSubTotalsOk returns a tuple with the ColSubTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetColSubTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.ColSubTotals) {
		return nil, false
	}
	return o.ColSubTotals, true
}

// HasColSubTotals returns a boolean if a field has been set.
func (o *VisualizationParams) HasColSubTotals() bool {
	if o != nil && !IsNil(o.ColSubTotals) {
		return true
	}

	return false
}

// SetColSubTotals gets a reference to the given bool and assigns it to the ColSubTotals field.
func (o *VisualizationParams) SetColSubTotals(v bool) {
	o.ColSubTotals = &v
}

// GetColTotals returns the ColTotals field value if set, zero value otherwise.
func (o *VisualizationParams) GetColTotals() bool {
	if o == nil || IsNil(o.ColTotals) {
		var ret bool
		return ret
	}
	return *o.ColTotals
}

// GetColTotalsOk returns a tuple with the ColTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetColTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.ColTotals) {
		return nil, false
	}
	return o.ColTotals, true
}

// HasColTotals returns a boolean if a field has been set.
func (o *VisualizationParams) HasColTotals() bool {
	if o != nil && !IsNil(o.ColTotals) {
		return true
	}

	return false
}

// SetColTotals gets a reference to the given bool and assigns it to the ColTotals field.
func (o *VisualizationParams) SetColTotals(v bool) {
	o.ColTotals = &v
}

// GetColorSet returns the ColorSet field value if set, zero value otherwise.
func (o *VisualizationParams) GetColorSet() string {
	if o == nil || IsNil(o.ColorSet) {
		var ret string
		return ret
	}
	return *o.ColorSet
}

// GetColorSetOk returns a tuple with the ColorSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetColorSetOk() (*string, bool) {
	if o == nil || IsNil(o.ColorSet) {
		return nil, false
	}
	return o.ColorSet, true
}

// HasColorSet returns a boolean if a field has been set.
func (o *VisualizationParams) HasColorSet() bool {
	if o != nil && !IsNil(o.ColorSet) {
		return true
	}

	return false
}

// SetColorSet gets a reference to the given string and assigns it to the ColorSet field.
func (o *VisualizationParams) SetColorSet(v string) {
	o.ColorSet = &v
}

// GetColumnDimensions returns the ColumnDimensions field value if set, zero value otherwise.
func (o *VisualizationParams) GetColumnDimensions() []string {
	if o == nil || IsNil(o.ColumnDimensions) {
		var ret []string
		return ret
	}
	return o.ColumnDimensions
}

// GetColumnDimensionsOk returns a tuple with the ColumnDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetColumnDimensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ColumnDimensions) {
		return nil, false
	}
	return o.ColumnDimensions, true
}

// HasColumnDimensions returns a boolean if a field has been set.
func (o *VisualizationParams) HasColumnDimensions() bool {
	if o != nil && !IsNil(o.ColumnDimensions) {
		return true
	}

	return false
}

// SetColumnDimensions gets a reference to the given []string and assigns it to the ColumnDimensions field.
func (o *VisualizationParams) SetColumnDimensions(v []string) {
	o.ColumnDimensions = v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *VisualizationParams) GetColumns() []EventChartParamsColumnsInner {
	if o == nil || IsNil(o.Columns) {
		var ret []EventChartParamsColumnsInner
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetColumnsOk() ([]EventChartParamsColumnsInner, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *VisualizationParams) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []EventChartParamsColumnsInner and assigns it to the Columns field.
func (o *VisualizationParams) SetColumns(v []EventChartParamsColumnsInner) {
	o.Columns = v
}

// GetCompletedOnly returns the CompletedOnly field value if set, zero value otherwise.
func (o *VisualizationParams) GetCompletedOnly() bool {
	if o == nil || IsNil(o.CompletedOnly) {
		var ret bool
		return ret
	}
	return *o.CompletedOnly
}

// GetCompletedOnlyOk returns a tuple with the CompletedOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetCompletedOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.CompletedOnly) {
		return nil, false
	}
	return o.CompletedOnly, true
}

// HasCompletedOnly returns a boolean if a field has been set.
func (o *VisualizationParams) HasCompletedOnly() bool {
	if o != nil && !IsNil(o.CompletedOnly) {
		return true
	}

	return false
}

// SetCompletedOnly gets a reference to the given bool and assigns it to the CompletedOnly field.
func (o *VisualizationParams) SetCompletedOnly(v bool) {
	o.CompletedOnly = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *VisualizationParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *VisualizationParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *VisualizationParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *VisualizationParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *VisualizationParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *VisualizationParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetCumulativeValues returns the CumulativeValues field value if set, zero value otherwise.
func (o *VisualizationParams) GetCumulativeValues() bool {
	if o == nil || IsNil(o.CumulativeValues) {
		var ret bool
		return ret
	}
	return *o.CumulativeValues
}

// GetCumulativeValuesOk returns a tuple with the CumulativeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetCumulativeValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.CumulativeValues) {
		return nil, false
	}
	return o.CumulativeValues, true
}

// HasCumulativeValues returns a boolean if a field has been set.
func (o *VisualizationParams) HasCumulativeValues() bool {
	if o != nil && !IsNil(o.CumulativeValues) {
		return true
	}

	return false
}

// SetCumulativeValues gets a reference to the given bool and assigns it to the CumulativeValues field.
func (o *VisualizationParams) SetCumulativeValues(v bool) {
	o.CumulativeValues = &v
}

// GetDataDimensionItems returns the DataDimensionItems field value if set, zero value otherwise.
func (o *VisualizationParams) GetDataDimensionItems() []DataDimensionItemParams {
	if o == nil || IsNil(o.DataDimensionItems) {
		var ret []DataDimensionItemParams
		return ret
	}
	return o.DataDimensionItems
}

// GetDataDimensionItemsOk returns a tuple with the DataDimensionItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDataDimensionItemsOk() ([]DataDimensionItemParams, bool) {
	if o == nil || IsNil(o.DataDimensionItems) {
		return nil, false
	}
	return o.DataDimensionItems, true
}

// HasDataDimensionItems returns a boolean if a field has been set.
func (o *VisualizationParams) HasDataDimensionItems() bool {
	if o != nil && !IsNil(o.DataDimensionItems) {
		return true
	}

	return false
}

// SetDataDimensionItems gets a reference to the given []DataDimensionItemParams and assigns it to the DataDimensionItems field.
func (o *VisualizationParams) SetDataDimensionItems(v []DataDimensionItemParams) {
	o.DataDimensionItems = v
}

// GetDataElementDimensions returns the DataElementDimensions field value if set, zero value otherwise.
func (o *VisualizationParams) GetDataElementDimensions() []TrackedEntityDataElementDimensionParams {
	if o == nil || IsNil(o.DataElementDimensions) {
		var ret []TrackedEntityDataElementDimensionParams
		return ret
	}
	return o.DataElementDimensions
}

// GetDataElementDimensionsOk returns a tuple with the DataElementDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDataElementDimensionsOk() ([]TrackedEntityDataElementDimensionParams, bool) {
	if o == nil || IsNil(o.DataElementDimensions) {
		return nil, false
	}
	return o.DataElementDimensions, true
}

// HasDataElementDimensions returns a boolean if a field has been set.
func (o *VisualizationParams) HasDataElementDimensions() bool {
	if o != nil && !IsNil(o.DataElementDimensions) {
		return true
	}

	return false
}

// SetDataElementDimensions gets a reference to the given []TrackedEntityDataElementDimensionParams and assigns it to the DataElementDimensions field.
func (o *VisualizationParams) SetDataElementDimensions(v []TrackedEntityDataElementDimensionParams) {
	o.DataElementDimensions = v
}

// GetDataElementGroupSetDimensions returns the DataElementGroupSetDimensions field value if set, zero value otherwise.
func (o *VisualizationParams) GetDataElementGroupSetDimensions() []DataElementGroupSetDimensionParams {
	if o == nil || IsNil(o.DataElementGroupSetDimensions) {
		var ret []DataElementGroupSetDimensionParams
		return ret
	}
	return o.DataElementGroupSetDimensions
}

// GetDataElementGroupSetDimensionsOk returns a tuple with the DataElementGroupSetDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDataElementGroupSetDimensionsOk() ([]DataElementGroupSetDimensionParams, bool) {
	if o == nil || IsNil(o.DataElementGroupSetDimensions) {
		return nil, false
	}
	return o.DataElementGroupSetDimensions, true
}

// HasDataElementGroupSetDimensions returns a boolean if a field has been set.
func (o *VisualizationParams) HasDataElementGroupSetDimensions() bool {
	if o != nil && !IsNil(o.DataElementGroupSetDimensions) {
		return true
	}

	return false
}

// SetDataElementGroupSetDimensions gets a reference to the given []DataElementGroupSetDimensionParams and assigns it to the DataElementGroupSetDimensions field.
func (o *VisualizationParams) SetDataElementGroupSetDimensions(v []DataElementGroupSetDimensionParams) {
	o.DataElementGroupSetDimensions = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VisualizationParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VisualizationParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VisualizationParams) SetDescription(v string) {
	o.Description = &v
}

// GetDigitGroupSeparator returns the DigitGroupSeparator field value
func (o *VisualizationParams) GetDigitGroupSeparator() DigitGroupSeparator {
	if o == nil {
		var ret DigitGroupSeparator
		return ret
	}

	return o.DigitGroupSeparator
}

// GetDigitGroupSeparatorOk returns a tuple with the DigitGroupSeparator field value
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDigitGroupSeparatorOk() (*DigitGroupSeparator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DigitGroupSeparator, true
}

// SetDigitGroupSeparator sets field value
func (o *VisualizationParams) SetDigitGroupSeparator(v DigitGroupSeparator) {
	o.DigitGroupSeparator = v
}

// GetDisplayBaseLineLabel returns the DisplayBaseLineLabel field value if set, zero value otherwise.
func (o *VisualizationParams) GetDisplayBaseLineLabel() string {
	if o == nil || IsNil(o.DisplayBaseLineLabel) {
		var ret string
		return ret
	}
	return *o.DisplayBaseLineLabel
}

// GetDisplayBaseLineLabelOk returns a tuple with the DisplayBaseLineLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDisplayBaseLineLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayBaseLineLabel) {
		return nil, false
	}
	return o.DisplayBaseLineLabel, true
}

// HasDisplayBaseLineLabel returns a boolean if a field has been set.
func (o *VisualizationParams) HasDisplayBaseLineLabel() bool {
	if o != nil && !IsNil(o.DisplayBaseLineLabel) {
		return true
	}

	return false
}

// SetDisplayBaseLineLabel gets a reference to the given string and assigns it to the DisplayBaseLineLabel field.
func (o *VisualizationParams) SetDisplayBaseLineLabel(v string) {
	o.DisplayBaseLineLabel = &v
}

// GetDisplayDensity returns the DisplayDensity field value
func (o *VisualizationParams) GetDisplayDensity() DisplayDensity {
	if o == nil {
		var ret DisplayDensity
		return ret
	}

	return o.DisplayDensity
}

// GetDisplayDensityOk returns a tuple with the DisplayDensity field value
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDisplayDensityOk() (*DisplayDensity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayDensity, true
}

// SetDisplayDensity sets field value
func (o *VisualizationParams) SetDisplayDensity(v DisplayDensity) {
	o.DisplayDensity = v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *VisualizationParams) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *VisualizationParams) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *VisualizationParams) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayDomainAxisLabel returns the DisplayDomainAxisLabel field value if set, zero value otherwise.
func (o *VisualizationParams) GetDisplayDomainAxisLabel() string {
	if o == nil || IsNil(o.DisplayDomainAxisLabel) {
		var ret string
		return ret
	}
	return *o.DisplayDomainAxisLabel
}

// GetDisplayDomainAxisLabelOk returns a tuple with the DisplayDomainAxisLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDisplayDomainAxisLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDomainAxisLabel) {
		return nil, false
	}
	return o.DisplayDomainAxisLabel, true
}

// HasDisplayDomainAxisLabel returns a boolean if a field has been set.
func (o *VisualizationParams) HasDisplayDomainAxisLabel() bool {
	if o != nil && !IsNil(o.DisplayDomainAxisLabel) {
		return true
	}

	return false
}

// SetDisplayDomainAxisLabel gets a reference to the given string and assigns it to the DisplayDomainAxisLabel field.
func (o *VisualizationParams) SetDisplayDomainAxisLabel(v string) {
	o.DisplayDomainAxisLabel = &v
}

// GetDisplayFormName returns the DisplayFormName field value if set, zero value otherwise.
func (o *VisualizationParams) GetDisplayFormName() string {
	if o == nil || IsNil(o.DisplayFormName) {
		var ret string
		return ret
	}
	return *o.DisplayFormName
}

// GetDisplayFormNameOk returns a tuple with the DisplayFormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDisplayFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayFormName) {
		return nil, false
	}
	return o.DisplayFormName, true
}

// HasDisplayFormName returns a boolean if a field has been set.
func (o *VisualizationParams) HasDisplayFormName() bool {
	if o != nil && !IsNil(o.DisplayFormName) {
		return true
	}

	return false
}

// SetDisplayFormName gets a reference to the given string and assigns it to the DisplayFormName field.
func (o *VisualizationParams) SetDisplayFormName(v string) {
	o.DisplayFormName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *VisualizationParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *VisualizationParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *VisualizationParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayRangeAxisLabel returns the DisplayRangeAxisLabel field value if set, zero value otherwise.
func (o *VisualizationParams) GetDisplayRangeAxisLabel() string {
	if o == nil || IsNil(o.DisplayRangeAxisLabel) {
		var ret string
		return ret
	}
	return *o.DisplayRangeAxisLabel
}

// GetDisplayRangeAxisLabelOk returns a tuple with the DisplayRangeAxisLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDisplayRangeAxisLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayRangeAxisLabel) {
		return nil, false
	}
	return o.DisplayRangeAxisLabel, true
}

// HasDisplayRangeAxisLabel returns a boolean if a field has been set.
func (o *VisualizationParams) HasDisplayRangeAxisLabel() bool {
	if o != nil && !IsNil(o.DisplayRangeAxisLabel) {
		return true
	}

	return false
}

// SetDisplayRangeAxisLabel gets a reference to the given string and assigns it to the DisplayRangeAxisLabel field.
func (o *VisualizationParams) SetDisplayRangeAxisLabel(v string) {
	o.DisplayRangeAxisLabel = &v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *VisualizationParams) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *VisualizationParams) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *VisualizationParams) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetDisplaySubtitle returns the DisplaySubtitle field value if set, zero value otherwise.
func (o *VisualizationParams) GetDisplaySubtitle() string {
	if o == nil || IsNil(o.DisplaySubtitle) {
		var ret string
		return ret
	}
	return *o.DisplaySubtitle
}

// GetDisplaySubtitleOk returns a tuple with the DisplaySubtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDisplaySubtitleOk() (*string, bool) {
	if o == nil || IsNil(o.DisplaySubtitle) {
		return nil, false
	}
	return o.DisplaySubtitle, true
}

// HasDisplaySubtitle returns a boolean if a field has been set.
func (o *VisualizationParams) HasDisplaySubtitle() bool {
	if o != nil && !IsNil(o.DisplaySubtitle) {
		return true
	}

	return false
}

// SetDisplaySubtitle gets a reference to the given string and assigns it to the DisplaySubtitle field.
func (o *VisualizationParams) SetDisplaySubtitle(v string) {
	o.DisplaySubtitle = &v
}

// GetDisplayTargetLineLabel returns the DisplayTargetLineLabel field value if set, zero value otherwise.
func (o *VisualizationParams) GetDisplayTargetLineLabel() string {
	if o == nil || IsNil(o.DisplayTargetLineLabel) {
		var ret string
		return ret
	}
	return *o.DisplayTargetLineLabel
}

// GetDisplayTargetLineLabelOk returns a tuple with the DisplayTargetLineLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDisplayTargetLineLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayTargetLineLabel) {
		return nil, false
	}
	return o.DisplayTargetLineLabel, true
}

// HasDisplayTargetLineLabel returns a boolean if a field has been set.
func (o *VisualizationParams) HasDisplayTargetLineLabel() bool {
	if o != nil && !IsNil(o.DisplayTargetLineLabel) {
		return true
	}

	return false
}

// SetDisplayTargetLineLabel gets a reference to the given string and assigns it to the DisplayTargetLineLabel field.
func (o *VisualizationParams) SetDisplayTargetLineLabel(v string) {
	o.DisplayTargetLineLabel = &v
}

// GetDisplayTitle returns the DisplayTitle field value if set, zero value otherwise.
func (o *VisualizationParams) GetDisplayTitle() string {
	if o == nil || IsNil(o.DisplayTitle) {
		var ret string
		return ret
	}
	return *o.DisplayTitle
}

// GetDisplayTitleOk returns a tuple with the DisplayTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetDisplayTitleOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayTitle) {
		return nil, false
	}
	return o.DisplayTitle, true
}

// HasDisplayTitle returns a boolean if a field has been set.
func (o *VisualizationParams) HasDisplayTitle() bool {
	if o != nil && !IsNil(o.DisplayTitle) {
		return true
	}

	return false
}

// SetDisplayTitle gets a reference to the given string and assigns it to the DisplayTitle field.
func (o *VisualizationParams) SetDisplayTitle(v string) {
	o.DisplayTitle = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *VisualizationParams) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *VisualizationParams) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *VisualizationParams) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *VisualizationParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *VisualizationParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *VisualizationParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *VisualizationParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *VisualizationParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *VisualizationParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFilterDimensions returns the FilterDimensions field value if set, zero value otherwise.
func (o *VisualizationParams) GetFilterDimensions() []string {
	if o == nil || IsNil(o.FilterDimensions) {
		var ret []string
		return ret
	}
	return o.FilterDimensions
}

// GetFilterDimensionsOk returns a tuple with the FilterDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetFilterDimensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterDimensions) {
		return nil, false
	}
	return o.FilterDimensions, true
}

// HasFilterDimensions returns a boolean if a field has been set.
func (o *VisualizationParams) HasFilterDimensions() bool {
	if o != nil && !IsNil(o.FilterDimensions) {
		return true
	}

	return false
}

// SetFilterDimensions gets a reference to the given []string and assigns it to the FilterDimensions field.
func (o *VisualizationParams) SetFilterDimensions(v []string) {
	o.FilterDimensions = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *VisualizationParams) GetFilters() []EventChartParamsColumnsInner {
	if o == nil || IsNil(o.Filters) {
		var ret []EventChartParamsColumnsInner
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetFiltersOk() ([]EventChartParamsColumnsInner, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *VisualizationParams) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []EventChartParamsColumnsInner and assigns it to the Filters field.
func (o *VisualizationParams) SetFilters(v []EventChartParamsColumnsInner) {
	o.Filters = v
}

// GetFixColumnHeaders returns the FixColumnHeaders field value if set, zero value otherwise.
func (o *VisualizationParams) GetFixColumnHeaders() bool {
	if o == nil || IsNil(o.FixColumnHeaders) {
		var ret bool
		return ret
	}
	return *o.FixColumnHeaders
}

// GetFixColumnHeadersOk returns a tuple with the FixColumnHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetFixColumnHeadersOk() (*bool, bool) {
	if o == nil || IsNil(o.FixColumnHeaders) {
		return nil, false
	}
	return o.FixColumnHeaders, true
}

// HasFixColumnHeaders returns a boolean if a field has been set.
func (o *VisualizationParams) HasFixColumnHeaders() bool {
	if o != nil && !IsNil(o.FixColumnHeaders) {
		return true
	}

	return false
}

// SetFixColumnHeaders gets a reference to the given bool and assigns it to the FixColumnHeaders field.
func (o *VisualizationParams) SetFixColumnHeaders(v bool) {
	o.FixColumnHeaders = &v
}

// GetFixRowHeaders returns the FixRowHeaders field value if set, zero value otherwise.
func (o *VisualizationParams) GetFixRowHeaders() bool {
	if o == nil || IsNil(o.FixRowHeaders) {
		var ret bool
		return ret
	}
	return *o.FixRowHeaders
}

// GetFixRowHeadersOk returns a tuple with the FixRowHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetFixRowHeadersOk() (*bool, bool) {
	if o == nil || IsNil(o.FixRowHeaders) {
		return nil, false
	}
	return o.FixRowHeaders, true
}

// HasFixRowHeaders returns a boolean if a field has been set.
func (o *VisualizationParams) HasFixRowHeaders() bool {
	if o != nil && !IsNil(o.FixRowHeaders) {
		return true
	}

	return false
}

// SetFixRowHeaders gets a reference to the given bool and assigns it to the FixRowHeaders field.
func (o *VisualizationParams) SetFixRowHeaders(v bool) {
	o.FixRowHeaders = &v
}

// GetFontSize returns the FontSize field value
func (o *VisualizationParams) GetFontSize() FontSize {
	if o == nil {
		var ret FontSize
		return ret
	}

	return o.FontSize
}

// GetFontSizeOk returns a tuple with the FontSize field value
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetFontSizeOk() (*FontSize, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FontSize, true
}

// SetFontSize sets field value
func (o *VisualizationParams) SetFontSize(v FontSize) {
	o.FontSize = v
}

// GetFontStyle returns the FontStyle field value if set, zero value otherwise.
func (o *VisualizationParams) GetFontStyle() VisualizationFontStyle {
	if o == nil || IsNil(o.FontStyle) {
		var ret VisualizationFontStyle
		return ret
	}
	return *o.FontStyle
}

// GetFontStyleOk returns a tuple with the FontStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetFontStyleOk() (*VisualizationFontStyle, bool) {
	if o == nil || IsNil(o.FontStyle) {
		return nil, false
	}
	return o.FontStyle, true
}

// HasFontStyle returns a boolean if a field has been set.
func (o *VisualizationParams) HasFontStyle() bool {
	if o != nil && !IsNil(o.FontStyle) {
		return true
	}

	return false
}

// SetFontStyle gets a reference to the given VisualizationFontStyle and assigns it to the FontStyle field.
func (o *VisualizationParams) SetFontStyle(v VisualizationFontStyle) {
	o.FontStyle = &v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *VisualizationParams) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *VisualizationParams) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *VisualizationParams) SetFormName(v string) {
	o.FormName = &v
}

// GetHideEmptyColumns returns the HideEmptyColumns field value if set, zero value otherwise.
func (o *VisualizationParams) GetHideEmptyColumns() bool {
	if o == nil || IsNil(o.HideEmptyColumns) {
		var ret bool
		return ret
	}
	return *o.HideEmptyColumns
}

// GetHideEmptyColumnsOk returns a tuple with the HideEmptyColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetHideEmptyColumnsOk() (*bool, bool) {
	if o == nil || IsNil(o.HideEmptyColumns) {
		return nil, false
	}
	return o.HideEmptyColumns, true
}

// HasHideEmptyColumns returns a boolean if a field has been set.
func (o *VisualizationParams) HasHideEmptyColumns() bool {
	if o != nil && !IsNil(o.HideEmptyColumns) {
		return true
	}

	return false
}

// SetHideEmptyColumns gets a reference to the given bool and assigns it to the HideEmptyColumns field.
func (o *VisualizationParams) SetHideEmptyColumns(v bool) {
	o.HideEmptyColumns = &v
}

// GetHideEmptyRowItems returns the HideEmptyRowItems field value
func (o *VisualizationParams) GetHideEmptyRowItems() HideEmptyItemStrategy {
	if o == nil {
		var ret HideEmptyItemStrategy
		return ret
	}

	return o.HideEmptyRowItems
}

// GetHideEmptyRowItemsOk returns a tuple with the HideEmptyRowItems field value
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetHideEmptyRowItemsOk() (*HideEmptyItemStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HideEmptyRowItems, true
}

// SetHideEmptyRowItems sets field value
func (o *VisualizationParams) SetHideEmptyRowItems(v HideEmptyItemStrategy) {
	o.HideEmptyRowItems = v
}

// GetHideEmptyRows returns the HideEmptyRows field value if set, zero value otherwise.
func (o *VisualizationParams) GetHideEmptyRows() bool {
	if o == nil || IsNil(o.HideEmptyRows) {
		var ret bool
		return ret
	}
	return *o.HideEmptyRows
}

// GetHideEmptyRowsOk returns a tuple with the HideEmptyRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetHideEmptyRowsOk() (*bool, bool) {
	if o == nil || IsNil(o.HideEmptyRows) {
		return nil, false
	}
	return o.HideEmptyRows, true
}

// HasHideEmptyRows returns a boolean if a field has been set.
func (o *VisualizationParams) HasHideEmptyRows() bool {
	if o != nil && !IsNil(o.HideEmptyRows) {
		return true
	}

	return false
}

// SetHideEmptyRows gets a reference to the given bool and assigns it to the HideEmptyRows field.
func (o *VisualizationParams) SetHideEmptyRows(v bool) {
	o.HideEmptyRows = &v
}

// GetHideLegend returns the HideLegend field value if set, zero value otherwise.
func (o *VisualizationParams) GetHideLegend() bool {
	if o == nil || IsNil(o.HideLegend) {
		var ret bool
		return ret
	}
	return *o.HideLegend
}

// GetHideLegendOk returns a tuple with the HideLegend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetHideLegendOk() (*bool, bool) {
	if o == nil || IsNil(o.HideLegend) {
		return nil, false
	}
	return o.HideLegend, true
}

// HasHideLegend returns a boolean if a field has been set.
func (o *VisualizationParams) HasHideLegend() bool {
	if o != nil && !IsNil(o.HideLegend) {
		return true
	}

	return false
}

// SetHideLegend gets a reference to the given bool and assigns it to the HideLegend field.
func (o *VisualizationParams) SetHideLegend(v bool) {
	o.HideLegend = &v
}

// GetHideSubtitle returns the HideSubtitle field value if set, zero value otherwise.
func (o *VisualizationParams) GetHideSubtitle() bool {
	if o == nil || IsNil(o.HideSubtitle) {
		var ret bool
		return ret
	}
	return *o.HideSubtitle
}

// GetHideSubtitleOk returns a tuple with the HideSubtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetHideSubtitleOk() (*bool, bool) {
	if o == nil || IsNil(o.HideSubtitle) {
		return nil, false
	}
	return o.HideSubtitle, true
}

// HasHideSubtitle returns a boolean if a field has been set.
func (o *VisualizationParams) HasHideSubtitle() bool {
	if o != nil && !IsNil(o.HideSubtitle) {
		return true
	}

	return false
}

// SetHideSubtitle gets a reference to the given bool and assigns it to the HideSubtitle field.
func (o *VisualizationParams) SetHideSubtitle(v bool) {
	o.HideSubtitle = &v
}

// GetHideTitle returns the HideTitle field value if set, zero value otherwise.
func (o *VisualizationParams) GetHideTitle() bool {
	if o == nil || IsNil(o.HideTitle) {
		var ret bool
		return ret
	}
	return *o.HideTitle
}

// GetHideTitleOk returns a tuple with the HideTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetHideTitleOk() (*bool, bool) {
	if o == nil || IsNil(o.HideTitle) {
		return nil, false
	}
	return o.HideTitle, true
}

// HasHideTitle returns a boolean if a field has been set.
func (o *VisualizationParams) HasHideTitle() bool {
	if o != nil && !IsNil(o.HideTitle) {
		return true
	}

	return false
}

// SetHideTitle gets a reference to the given bool and assigns it to the HideTitle field.
func (o *VisualizationParams) SetHideTitle(v bool) {
	o.HideTitle = &v
}

// GetIcons returns the Icons field value if set, zero value otherwise.
func (o *VisualizationParams) GetIcons() []VisualizationIcon {
	if o == nil || IsNil(o.Icons) {
		var ret []VisualizationIcon
		return ret
	}
	return o.Icons
}

// GetIconsOk returns a tuple with the Icons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetIconsOk() ([]VisualizationIcon, bool) {
	if o == nil || IsNil(o.Icons) {
		return nil, false
	}
	return o.Icons, true
}

// HasIcons returns a boolean if a field has been set.
func (o *VisualizationParams) HasIcons() bool {
	if o != nil && !IsNil(o.Icons) {
		return true
	}

	return false
}

// SetIcons gets a reference to the given []VisualizationIcon and assigns it to the Icons field.
func (o *VisualizationParams) SetIcons(v []VisualizationIcon) {
	o.Icons = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VisualizationParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VisualizationParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VisualizationParams) SetId(v string) {
	o.Id = &v
}

// GetInterpretations returns the Interpretations field value if set, zero value otherwise.
func (o *VisualizationParams) GetInterpretations() []DataSetParamsInterpretationsInner {
	if o == nil || IsNil(o.Interpretations) {
		var ret []DataSetParamsInterpretationsInner
		return ret
	}
	return o.Interpretations
}

// GetInterpretationsOk returns a tuple with the Interpretations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetInterpretationsOk() ([]DataSetParamsInterpretationsInner, bool) {
	if o == nil || IsNil(o.Interpretations) {
		return nil, false
	}
	return o.Interpretations, true
}

// HasInterpretations returns a boolean if a field has been set.
func (o *VisualizationParams) HasInterpretations() bool {
	if o != nil && !IsNil(o.Interpretations) {
		return true
	}

	return false
}

// SetInterpretations gets a reference to the given []DataSetParamsInterpretationsInner and assigns it to the Interpretations field.
func (o *VisualizationParams) SetInterpretations(v []DataSetParamsInterpretationsInner) {
	o.Interpretations = v
}

// GetItemOrganisationUnitGroups returns the ItemOrganisationUnitGroups field value if set, zero value otherwise.
func (o *VisualizationParams) GetItemOrganisationUnitGroups() []EventChartParamsItemOrganisationUnitGroupsInner {
	if o == nil || IsNil(o.ItemOrganisationUnitGroups) {
		var ret []EventChartParamsItemOrganisationUnitGroupsInner
		return ret
	}
	return o.ItemOrganisationUnitGroups
}

// GetItemOrganisationUnitGroupsOk returns a tuple with the ItemOrganisationUnitGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetItemOrganisationUnitGroupsOk() ([]EventChartParamsItemOrganisationUnitGroupsInner, bool) {
	if o == nil || IsNil(o.ItemOrganisationUnitGroups) {
		return nil, false
	}
	return o.ItemOrganisationUnitGroups, true
}

// HasItemOrganisationUnitGroups returns a boolean if a field has been set.
func (o *VisualizationParams) HasItemOrganisationUnitGroups() bool {
	if o != nil && !IsNil(o.ItemOrganisationUnitGroups) {
		return true
	}

	return false
}

// SetItemOrganisationUnitGroups gets a reference to the given []EventChartParamsItemOrganisationUnitGroupsInner and assigns it to the ItemOrganisationUnitGroups field.
func (o *VisualizationParams) SetItemOrganisationUnitGroups(v []EventChartParamsItemOrganisationUnitGroupsInner) {
	o.ItemOrganisationUnitGroups = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *VisualizationParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *VisualizationParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *VisualizationParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *VisualizationParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *VisualizationParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *VisualizationParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLegend returns the Legend field value if set, zero value otherwise.
func (o *VisualizationParams) GetLegend() LegendDefinitionsParams {
	if o == nil || IsNil(o.Legend) {
		var ret LegendDefinitionsParams
		return ret
	}
	return *o.Legend
}

// GetLegendOk returns a tuple with the Legend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetLegendOk() (*LegendDefinitionsParams, bool) {
	if o == nil || IsNil(o.Legend) {
		return nil, false
	}
	return o.Legend, true
}

// HasLegend returns a boolean if a field has been set.
func (o *VisualizationParams) HasLegend() bool {
	if o != nil && !IsNil(o.Legend) {
		return true
	}

	return false
}

// SetLegend gets a reference to the given LegendDefinitionsParams and assigns it to the Legend field.
func (o *VisualizationParams) SetLegend(v LegendDefinitionsParams) {
	o.Legend = &v
}

// GetMeasureCriteria returns the MeasureCriteria field value if set, zero value otherwise.
func (o *VisualizationParams) GetMeasureCriteria() string {
	if o == nil || IsNil(o.MeasureCriteria) {
		var ret string
		return ret
	}
	return *o.MeasureCriteria
}

// GetMeasureCriteriaOk returns a tuple with the MeasureCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetMeasureCriteriaOk() (*string, bool) {
	if o == nil || IsNil(o.MeasureCriteria) {
		return nil, false
	}
	return o.MeasureCriteria, true
}

// HasMeasureCriteria returns a boolean if a field has been set.
func (o *VisualizationParams) HasMeasureCriteria() bool {
	if o != nil && !IsNil(o.MeasureCriteria) {
		return true
	}

	return false
}

// SetMeasureCriteria gets a reference to the given string and assigns it to the MeasureCriteria field.
func (o *VisualizationParams) SetMeasureCriteria(v string) {
	o.MeasureCriteria = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *VisualizationParams) GetMetaData() map[string]MetadataItemParams {
	if o == nil || IsNil(o.MetaData) {
		var ret map[string]MetadataItemParams
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetMetaDataOk() (*map[string]MetadataItemParams, bool) {
	if o == nil || IsNil(o.MetaData) {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *VisualizationParams) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given map[string]MetadataItemParams and assigns it to the MetaData field.
func (o *VisualizationParams) SetMetaData(v map[string]MetadataItemParams) {
	o.MetaData = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VisualizationParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VisualizationParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VisualizationParams) SetName(v string) {
	o.Name = &v
}

// GetNoSpaceBetweenColumns returns the NoSpaceBetweenColumns field value if set, zero value otherwise.
func (o *VisualizationParams) GetNoSpaceBetweenColumns() bool {
	if o == nil || IsNil(o.NoSpaceBetweenColumns) {
		var ret bool
		return ret
	}
	return *o.NoSpaceBetweenColumns
}

// GetNoSpaceBetweenColumnsOk returns a tuple with the NoSpaceBetweenColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetNoSpaceBetweenColumnsOk() (*bool, bool) {
	if o == nil || IsNil(o.NoSpaceBetweenColumns) {
		return nil, false
	}
	return o.NoSpaceBetweenColumns, true
}

// HasNoSpaceBetweenColumns returns a boolean if a field has been set.
func (o *VisualizationParams) HasNoSpaceBetweenColumns() bool {
	if o != nil && !IsNil(o.NoSpaceBetweenColumns) {
		return true
	}

	return false
}

// SetNoSpaceBetweenColumns gets a reference to the given bool and assigns it to the NoSpaceBetweenColumns field.
func (o *VisualizationParams) SetNoSpaceBetweenColumns(v bool) {
	o.NoSpaceBetweenColumns = &v
}

// GetNumberType returns the NumberType field value
func (o *VisualizationParams) GetNumberType() NumberType {
	if o == nil {
		var ret NumberType
		return ret
	}

	return o.NumberType
}

// GetNumberTypeOk returns a tuple with the NumberType field value
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetNumberTypeOk() (*NumberType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberType, true
}

// SetNumberType sets field value
func (o *VisualizationParams) SetNumberType(v NumberType) {
	o.NumberType = v
}

// GetOptionalAxes returns the OptionalAxes field value if set, zero value otherwise.
func (o *VisualizationParams) GetOptionalAxes() []Axis {
	if o == nil || IsNil(o.OptionalAxes) {
		var ret []Axis
		return ret
	}
	return o.OptionalAxes
}

// GetOptionalAxesOk returns a tuple with the OptionalAxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetOptionalAxesOk() ([]Axis, bool) {
	if o == nil || IsNil(o.OptionalAxes) {
		return nil, false
	}
	return o.OptionalAxes, true
}

// HasOptionalAxes returns a boolean if a field has been set.
func (o *VisualizationParams) HasOptionalAxes() bool {
	if o != nil && !IsNil(o.OptionalAxes) {
		return true
	}

	return false
}

// SetOptionalAxes gets a reference to the given []Axis and assigns it to the OptionalAxes field.
func (o *VisualizationParams) SetOptionalAxes(v []Axis) {
	o.OptionalAxes = v
}

// GetOrgUnitField returns the OrgUnitField field value if set, zero value otherwise.
func (o *VisualizationParams) GetOrgUnitField() string {
	if o == nil || IsNil(o.OrgUnitField) {
		var ret string
		return ret
	}
	return *o.OrgUnitField
}

// GetOrgUnitFieldOk returns a tuple with the OrgUnitField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetOrgUnitFieldOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnitField) {
		return nil, false
	}
	return o.OrgUnitField, true
}

// HasOrgUnitField returns a boolean if a field has been set.
func (o *VisualizationParams) HasOrgUnitField() bool {
	if o != nil && !IsNil(o.OrgUnitField) {
		return true
	}

	return false
}

// SetOrgUnitField gets a reference to the given string and assigns it to the OrgUnitField field.
func (o *VisualizationParams) SetOrgUnitField(v string) {
	o.OrgUnitField = &v
}

// GetOrganisationUnitGroupSetDimensions returns the OrganisationUnitGroupSetDimensions field value if set, zero value otherwise.
func (o *VisualizationParams) GetOrganisationUnitGroupSetDimensions() []OrganisationUnitGroupSetDimensionParams {
	if o == nil || IsNil(o.OrganisationUnitGroupSetDimensions) {
		var ret []OrganisationUnitGroupSetDimensionParams
		return ret
	}
	return o.OrganisationUnitGroupSetDimensions
}

// GetOrganisationUnitGroupSetDimensionsOk returns a tuple with the OrganisationUnitGroupSetDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetOrganisationUnitGroupSetDimensionsOk() ([]OrganisationUnitGroupSetDimensionParams, bool) {
	if o == nil || IsNil(o.OrganisationUnitGroupSetDimensions) {
		return nil, false
	}
	return o.OrganisationUnitGroupSetDimensions, true
}

// HasOrganisationUnitGroupSetDimensions returns a boolean if a field has been set.
func (o *VisualizationParams) HasOrganisationUnitGroupSetDimensions() bool {
	if o != nil && !IsNil(o.OrganisationUnitGroupSetDimensions) {
		return true
	}

	return false
}

// SetOrganisationUnitGroupSetDimensions gets a reference to the given []OrganisationUnitGroupSetDimensionParams and assigns it to the OrganisationUnitGroupSetDimensions field.
func (o *VisualizationParams) SetOrganisationUnitGroupSetDimensions(v []OrganisationUnitGroupSetDimensionParams) {
	o.OrganisationUnitGroupSetDimensions = v
}

// GetOrganisationUnitLevels returns the OrganisationUnitLevels field value if set, zero value otherwise.
func (o *VisualizationParams) GetOrganisationUnitLevels() []int32 {
	if o == nil || IsNil(o.OrganisationUnitLevels) {
		var ret []int32
		return ret
	}
	return o.OrganisationUnitLevels
}

// GetOrganisationUnitLevelsOk returns a tuple with the OrganisationUnitLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetOrganisationUnitLevelsOk() ([]int32, bool) {
	if o == nil || IsNil(o.OrganisationUnitLevels) {
		return nil, false
	}
	return o.OrganisationUnitLevels, true
}

// HasOrganisationUnitLevels returns a boolean if a field has been set.
func (o *VisualizationParams) HasOrganisationUnitLevels() bool {
	if o != nil && !IsNil(o.OrganisationUnitLevels) {
		return true
	}

	return false
}

// SetOrganisationUnitLevels gets a reference to the given []int32 and assigns it to the OrganisationUnitLevels field.
func (o *VisualizationParams) SetOrganisationUnitLevels(v []int32) {
	o.OrganisationUnitLevels = v
}

// GetOrganisationUnits returns the OrganisationUnits field value if set, zero value otherwise.
func (o *VisualizationParams) GetOrganisationUnits() []CategoryOptionParamsOrganisationUnitsInner {
	if o == nil || IsNil(o.OrganisationUnits) {
		var ret []CategoryOptionParamsOrganisationUnitsInner
		return ret
	}
	return o.OrganisationUnits
}

// GetOrganisationUnitsOk returns a tuple with the OrganisationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetOrganisationUnitsOk() ([]CategoryOptionParamsOrganisationUnitsInner, bool) {
	if o == nil || IsNil(o.OrganisationUnits) {
		return nil, false
	}
	return o.OrganisationUnits, true
}

// HasOrganisationUnits returns a boolean if a field has been set.
func (o *VisualizationParams) HasOrganisationUnits() bool {
	if o != nil && !IsNil(o.OrganisationUnits) {
		return true
	}

	return false
}

// SetOrganisationUnits gets a reference to the given []CategoryOptionParamsOrganisationUnitsInner and assigns it to the OrganisationUnits field.
func (o *VisualizationParams) SetOrganisationUnits(v []CategoryOptionParamsOrganisationUnitsInner) {
	o.OrganisationUnits = v
}

// GetOutlierAnalysis returns the OutlierAnalysis field value if set, zero value otherwise.
func (o *VisualizationParams) GetOutlierAnalysis() OutlierAnalysis {
	if o == nil || IsNil(o.OutlierAnalysis) {
		var ret OutlierAnalysis
		return ret
	}
	return *o.OutlierAnalysis
}

// GetOutlierAnalysisOk returns a tuple with the OutlierAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetOutlierAnalysisOk() (*OutlierAnalysis, bool) {
	if o == nil || IsNil(o.OutlierAnalysis) {
		return nil, false
	}
	return o.OutlierAnalysis, true
}

// HasOutlierAnalysis returns a boolean if a field has been set.
func (o *VisualizationParams) HasOutlierAnalysis() bool {
	if o != nil && !IsNil(o.OutlierAnalysis) {
		return true
	}

	return false
}

// SetOutlierAnalysis gets a reference to the given OutlierAnalysis and assigns it to the OutlierAnalysis field.
func (o *VisualizationParams) SetOutlierAnalysis(v OutlierAnalysis) {
	o.OutlierAnalysis = &v
}

// GetPercentStackedValues returns the PercentStackedValues field value if set, zero value otherwise.
func (o *VisualizationParams) GetPercentStackedValues() bool {
	if o == nil || IsNil(o.PercentStackedValues) {
		var ret bool
		return ret
	}
	return *o.PercentStackedValues
}

// GetPercentStackedValuesOk returns a tuple with the PercentStackedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetPercentStackedValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.PercentStackedValues) {
		return nil, false
	}
	return o.PercentStackedValues, true
}

// HasPercentStackedValues returns a boolean if a field has been set.
func (o *VisualizationParams) HasPercentStackedValues() bool {
	if o != nil && !IsNil(o.PercentStackedValues) {
		return true
	}

	return false
}

// SetPercentStackedValues gets a reference to the given bool and assigns it to the PercentStackedValues field.
func (o *VisualizationParams) SetPercentStackedValues(v bool) {
	o.PercentStackedValues = &v
}

// GetPeriods returns the Periods field value if set, zero value otherwise.
func (o *VisualizationParams) GetPeriods() []string {
	if o == nil || IsNil(o.Periods) {
		var ret []string
		return ret
	}
	return o.Periods
}

// GetPeriodsOk returns a tuple with the Periods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetPeriodsOk() ([]string, bool) {
	if o == nil || IsNil(o.Periods) {
		return nil, false
	}
	return o.Periods, true
}

// HasPeriods returns a boolean if a field has been set.
func (o *VisualizationParams) HasPeriods() bool {
	if o != nil && !IsNil(o.Periods) {
		return true
	}

	return false
}

// SetPeriods gets a reference to the given []string and assigns it to the Periods field.
func (o *VisualizationParams) SetPeriods(v []string) {
	o.Periods = v
}

// GetProgramIndicatorDimensions returns the ProgramIndicatorDimensions field value if set, zero value otherwise.
func (o *VisualizationParams) GetProgramIndicatorDimensions() []TrackedEntityProgramIndicatorDimensionParams {
	if o == nil || IsNil(o.ProgramIndicatorDimensions) {
		var ret []TrackedEntityProgramIndicatorDimensionParams
		return ret
	}
	return o.ProgramIndicatorDimensions
}

// GetProgramIndicatorDimensionsOk returns a tuple with the ProgramIndicatorDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetProgramIndicatorDimensionsOk() ([]TrackedEntityProgramIndicatorDimensionParams, bool) {
	if o == nil || IsNil(o.ProgramIndicatorDimensions) {
		return nil, false
	}
	return o.ProgramIndicatorDimensions, true
}

// HasProgramIndicatorDimensions returns a boolean if a field has been set.
func (o *VisualizationParams) HasProgramIndicatorDimensions() bool {
	if o != nil && !IsNil(o.ProgramIndicatorDimensions) {
		return true
	}

	return false
}

// SetProgramIndicatorDimensions gets a reference to the given []TrackedEntityProgramIndicatorDimensionParams and assigns it to the ProgramIndicatorDimensions field.
func (o *VisualizationParams) SetProgramIndicatorDimensions(v []TrackedEntityProgramIndicatorDimensionParams) {
	o.ProgramIndicatorDimensions = v
}

// GetRegression returns the Regression field value if set, zero value otherwise.
func (o *VisualizationParams) GetRegression() bool {
	if o == nil || IsNil(o.Regression) {
		var ret bool
		return ret
	}
	return *o.Regression
}

// GetRegressionOk returns a tuple with the Regression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetRegressionOk() (*bool, bool) {
	if o == nil || IsNil(o.Regression) {
		return nil, false
	}
	return o.Regression, true
}

// HasRegression returns a boolean if a field has been set.
func (o *VisualizationParams) HasRegression() bool {
	if o != nil && !IsNil(o.Regression) {
		return true
	}

	return false
}

// SetRegression gets a reference to the given bool and assigns it to the Regression field.
func (o *VisualizationParams) SetRegression(v bool) {
	o.Regression = &v
}

// GetRegressionType returns the RegressionType field value
func (o *VisualizationParams) GetRegressionType() RegressionType {
	if o == nil {
		var ret RegressionType
		return ret
	}

	return o.RegressionType
}

// GetRegressionTypeOk returns a tuple with the RegressionType field value
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetRegressionTypeOk() (*RegressionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegressionType, true
}

// SetRegressionType sets field value
func (o *VisualizationParams) SetRegressionType(v RegressionType) {
	o.RegressionType = v
}

// GetRelativePeriods returns the RelativePeriods field value if set, zero value otherwise.
func (o *VisualizationParams) GetRelativePeriods() RelativePeriods {
	if o == nil || IsNil(o.RelativePeriods) {
		var ret RelativePeriods
		return ret
	}
	return *o.RelativePeriods
}

// GetRelativePeriodsOk returns a tuple with the RelativePeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetRelativePeriodsOk() (*RelativePeriods, bool) {
	if o == nil || IsNil(o.RelativePeriods) {
		return nil, false
	}
	return o.RelativePeriods, true
}

// HasRelativePeriods returns a boolean if a field has been set.
func (o *VisualizationParams) HasRelativePeriods() bool {
	if o != nil && !IsNil(o.RelativePeriods) {
		return true
	}

	return false
}

// SetRelativePeriods gets a reference to the given RelativePeriods and assigns it to the RelativePeriods field.
func (o *VisualizationParams) SetRelativePeriods(v RelativePeriods) {
	o.RelativePeriods = &v
}

// GetReportingParams returns the ReportingParams field value if set, zero value otherwise.
func (o *VisualizationParams) GetReportingParams() ReportingParams {
	if o == nil || IsNil(o.ReportingParams) {
		var ret ReportingParams
		return ret
	}
	return *o.ReportingParams
}

// GetReportingParamsOk returns a tuple with the ReportingParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetReportingParamsOk() (*ReportingParams, bool) {
	if o == nil || IsNil(o.ReportingParams) {
		return nil, false
	}
	return o.ReportingParams, true
}

// HasReportingParams returns a boolean if a field has been set.
func (o *VisualizationParams) HasReportingParams() bool {
	if o != nil && !IsNil(o.ReportingParams) {
		return true
	}

	return false
}

// SetReportingParams gets a reference to the given ReportingParams and assigns it to the ReportingParams field.
func (o *VisualizationParams) SetReportingParams(v ReportingParams) {
	o.ReportingParams = &v
}

// GetRowDimensions returns the RowDimensions field value if set, zero value otherwise.
func (o *VisualizationParams) GetRowDimensions() []string {
	if o == nil || IsNil(o.RowDimensions) {
		var ret []string
		return ret
	}
	return o.RowDimensions
}

// GetRowDimensionsOk returns a tuple with the RowDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetRowDimensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.RowDimensions) {
		return nil, false
	}
	return o.RowDimensions, true
}

// HasRowDimensions returns a boolean if a field has been set.
func (o *VisualizationParams) HasRowDimensions() bool {
	if o != nil && !IsNil(o.RowDimensions) {
		return true
	}

	return false
}

// SetRowDimensions gets a reference to the given []string and assigns it to the RowDimensions field.
func (o *VisualizationParams) SetRowDimensions(v []string) {
	o.RowDimensions = v
}

// GetRowSubTotals returns the RowSubTotals field value if set, zero value otherwise.
func (o *VisualizationParams) GetRowSubTotals() bool {
	if o == nil || IsNil(o.RowSubTotals) {
		var ret bool
		return ret
	}
	return *o.RowSubTotals
}

// GetRowSubTotalsOk returns a tuple with the RowSubTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetRowSubTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.RowSubTotals) {
		return nil, false
	}
	return o.RowSubTotals, true
}

// HasRowSubTotals returns a boolean if a field has been set.
func (o *VisualizationParams) HasRowSubTotals() bool {
	if o != nil && !IsNil(o.RowSubTotals) {
		return true
	}

	return false
}

// SetRowSubTotals gets a reference to the given bool and assigns it to the RowSubTotals field.
func (o *VisualizationParams) SetRowSubTotals(v bool) {
	o.RowSubTotals = &v
}

// GetRowTotals returns the RowTotals field value if set, zero value otherwise.
func (o *VisualizationParams) GetRowTotals() bool {
	if o == nil || IsNil(o.RowTotals) {
		var ret bool
		return ret
	}
	return *o.RowTotals
}

// GetRowTotalsOk returns a tuple with the RowTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetRowTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.RowTotals) {
		return nil, false
	}
	return o.RowTotals, true
}

// HasRowTotals returns a boolean if a field has been set.
func (o *VisualizationParams) HasRowTotals() bool {
	if o != nil && !IsNil(o.RowTotals) {
		return true
	}

	return false
}

// SetRowTotals gets a reference to the given bool and assigns it to the RowTotals field.
func (o *VisualizationParams) SetRowTotals(v bool) {
	o.RowTotals = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *VisualizationParams) GetRows() []EventChartParamsColumnsInner {
	if o == nil || IsNil(o.Rows) {
		var ret []EventChartParamsColumnsInner
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetRowsOk() ([]EventChartParamsColumnsInner, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *VisualizationParams) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []EventChartParamsColumnsInner and assigns it to the Rows field.
func (o *VisualizationParams) SetRows(v []EventChartParamsColumnsInner) {
	o.Rows = v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *VisualizationParams) GetSeries() []Series {
	if o == nil || IsNil(o.Series) {
		var ret []Series
		return ret
	}
	return o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetSeriesOk() ([]Series, bool) {
	if o == nil || IsNil(o.Series) {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *VisualizationParams) HasSeries() bool {
	if o != nil && !IsNil(o.Series) {
		return true
	}

	return false
}

// SetSeries gets a reference to the given []Series and assigns it to the Series field.
func (o *VisualizationParams) SetSeries(v []Series) {
	o.Series = v
}

// GetSeriesKey returns the SeriesKey field value if set, zero value otherwise.
func (o *VisualizationParams) GetSeriesKey() SeriesKey {
	if o == nil || IsNil(o.SeriesKey) {
		var ret SeriesKey
		return ret
	}
	return *o.SeriesKey
}

// GetSeriesKeyOk returns a tuple with the SeriesKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetSeriesKeyOk() (*SeriesKey, bool) {
	if o == nil || IsNil(o.SeriesKey) {
		return nil, false
	}
	return o.SeriesKey, true
}

// HasSeriesKey returns a boolean if a field has been set.
func (o *VisualizationParams) HasSeriesKey() bool {
	if o != nil && !IsNil(o.SeriesKey) {
		return true
	}

	return false
}

// SetSeriesKey gets a reference to the given SeriesKey and assigns it to the SeriesKey field.
func (o *VisualizationParams) SetSeriesKey(v SeriesKey) {
	o.SeriesKey = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *VisualizationParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *VisualizationParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *VisualizationParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *VisualizationParams) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *VisualizationParams) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *VisualizationParams) SetShortName(v string) {
	o.ShortName = &v
}

// GetShowData returns the ShowData field value if set, zero value otherwise.
func (o *VisualizationParams) GetShowData() bool {
	if o == nil || IsNil(o.ShowData) {
		var ret bool
		return ret
	}
	return *o.ShowData
}

// GetShowDataOk returns a tuple with the ShowData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetShowDataOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowData) {
		return nil, false
	}
	return o.ShowData, true
}

// HasShowData returns a boolean if a field has been set.
func (o *VisualizationParams) HasShowData() bool {
	if o != nil && !IsNil(o.ShowData) {
		return true
	}

	return false
}

// SetShowData gets a reference to the given bool and assigns it to the ShowData field.
func (o *VisualizationParams) SetShowData(v bool) {
	o.ShowData = &v
}

// GetShowDimensionLabels returns the ShowDimensionLabels field value if set, zero value otherwise.
func (o *VisualizationParams) GetShowDimensionLabels() bool {
	if o == nil || IsNil(o.ShowDimensionLabels) {
		var ret bool
		return ret
	}
	return *o.ShowDimensionLabels
}

// GetShowDimensionLabelsOk returns a tuple with the ShowDimensionLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetShowDimensionLabelsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDimensionLabels) {
		return nil, false
	}
	return o.ShowDimensionLabels, true
}

// HasShowDimensionLabels returns a boolean if a field has been set.
func (o *VisualizationParams) HasShowDimensionLabels() bool {
	if o != nil && !IsNil(o.ShowDimensionLabels) {
		return true
	}

	return false
}

// SetShowDimensionLabels gets a reference to the given bool and assigns it to the ShowDimensionLabels field.
func (o *VisualizationParams) SetShowDimensionLabels(v bool) {
	o.ShowDimensionLabels = &v
}

// GetShowHierarchy returns the ShowHierarchy field value if set, zero value otherwise.
func (o *VisualizationParams) GetShowHierarchy() bool {
	if o == nil || IsNil(o.ShowHierarchy) {
		var ret bool
		return ret
	}
	return *o.ShowHierarchy
}

// GetShowHierarchyOk returns a tuple with the ShowHierarchy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetShowHierarchyOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowHierarchy) {
		return nil, false
	}
	return o.ShowHierarchy, true
}

// HasShowHierarchy returns a boolean if a field has been set.
func (o *VisualizationParams) HasShowHierarchy() bool {
	if o != nil && !IsNil(o.ShowHierarchy) {
		return true
	}

	return false
}

// SetShowHierarchy gets a reference to the given bool and assigns it to the ShowHierarchy field.
func (o *VisualizationParams) SetShowHierarchy(v bool) {
	o.ShowHierarchy = &v
}

// GetSkipRounding returns the SkipRounding field value if set, zero value otherwise.
func (o *VisualizationParams) GetSkipRounding() bool {
	if o == nil || IsNil(o.SkipRounding) {
		var ret bool
		return ret
	}
	return *o.SkipRounding
}

// GetSkipRoundingOk returns a tuple with the SkipRounding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetSkipRoundingOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipRounding) {
		return nil, false
	}
	return o.SkipRounding, true
}

// HasSkipRounding returns a boolean if a field has been set.
func (o *VisualizationParams) HasSkipRounding() bool {
	if o != nil && !IsNil(o.SkipRounding) {
		return true
	}

	return false
}

// SetSkipRounding gets a reference to the given bool and assigns it to the SkipRounding field.
func (o *VisualizationParams) SetSkipRounding(v bool) {
	o.SkipRounding = &v
}

// GetSortOrder returns the SortOrder field value
func (o *VisualizationParams) GetSortOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortOrder, true
}

// SetSortOrder sets field value
func (o *VisualizationParams) SetSortOrder(v int32) {
	o.SortOrder = v
}

// GetSorting returns the Sorting field value if set, zero value otherwise.
func (o *VisualizationParams) GetSorting() []Sorting {
	if o == nil || IsNil(o.Sorting) {
		var ret []Sorting
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetSortingOk() ([]Sorting, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *VisualizationParams) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []Sorting and assigns it to the Sorting field.
func (o *VisualizationParams) SetSorting(v []Sorting) {
	o.Sorting = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *VisualizationParams) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *VisualizationParams) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *VisualizationParams) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetSubscribed returns the Subscribed field value if set, zero value otherwise.
func (o *VisualizationParams) GetSubscribed() bool {
	if o == nil || IsNil(o.Subscribed) {
		var ret bool
		return ret
	}
	return *o.Subscribed
}

// GetSubscribedOk returns a tuple with the Subscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetSubscribedOk() (*bool, bool) {
	if o == nil || IsNil(o.Subscribed) {
		return nil, false
	}
	return o.Subscribed, true
}

// HasSubscribed returns a boolean if a field has been set.
func (o *VisualizationParams) HasSubscribed() bool {
	if o != nil && !IsNil(o.Subscribed) {
		return true
	}

	return false
}

// SetSubscribed gets a reference to the given bool and assigns it to the Subscribed field.
func (o *VisualizationParams) SetSubscribed(v bool) {
	o.Subscribed = &v
}

// GetSubscribers returns the Subscribers field value if set, zero value otherwise.
func (o *VisualizationParams) GetSubscribers() []string {
	if o == nil || IsNil(o.Subscribers) {
		var ret []string
		return ret
	}
	return o.Subscribers
}

// GetSubscribersOk returns a tuple with the Subscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetSubscribersOk() ([]string, bool) {
	if o == nil || IsNil(o.Subscribers) {
		return nil, false
	}
	return o.Subscribers, true
}

// HasSubscribers returns a boolean if a field has been set.
func (o *VisualizationParams) HasSubscribers() bool {
	if o != nil && !IsNil(o.Subscribers) {
		return true
	}

	return false
}

// SetSubscribers gets a reference to the given []string and assigns it to the Subscribers field.
func (o *VisualizationParams) SetSubscribers(v []string) {
	o.Subscribers = v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *VisualizationParams) GetSubtitle() string {
	if o == nil || IsNil(o.Subtitle) {
		var ret string
		return ret
	}
	return *o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetSubtitleOk() (*string, bool) {
	if o == nil || IsNil(o.Subtitle) {
		return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *VisualizationParams) HasSubtitle() bool {
	if o != nil && !IsNil(o.Subtitle) {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given string and assigns it to the Subtitle field.
func (o *VisualizationParams) SetSubtitle(v string) {
	o.Subtitle = &v
}

// GetTimeField returns the TimeField field value if set, zero value otherwise.
func (o *VisualizationParams) GetTimeField() string {
	if o == nil || IsNil(o.TimeField) {
		var ret string
		return ret
	}
	return *o.TimeField
}

// GetTimeFieldOk returns a tuple with the TimeField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetTimeFieldOk() (*string, bool) {
	if o == nil || IsNil(o.TimeField) {
		return nil, false
	}
	return o.TimeField, true
}

// HasTimeField returns a boolean if a field has been set.
func (o *VisualizationParams) HasTimeField() bool {
	if o != nil && !IsNil(o.TimeField) {
		return true
	}

	return false
}

// SetTimeField gets a reference to the given string and assigns it to the TimeField field.
func (o *VisualizationParams) SetTimeField(v string) {
	o.TimeField = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *VisualizationParams) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *VisualizationParams) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *VisualizationParams) SetTitle(v string) {
	o.Title = &v
}

// GetTopLimit returns the TopLimit field value
func (o *VisualizationParams) GetTopLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TopLimit
}

// GetTopLimitOk returns a tuple with the TopLimit field value
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetTopLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopLimit, true
}

// SetTopLimit sets field value
func (o *VisualizationParams) SetTopLimit(v int32) {
	o.TopLimit = v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *VisualizationParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *VisualizationParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *VisualizationParams) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetType returns the Type field value
func (o *VisualizationParams) GetType() VisualizationType {
	if o == nil {
		var ret VisualizationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetTypeOk() (*VisualizationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VisualizationParams) SetType(v VisualizationType) {
	o.Type = v
}

// GetUserOrgUnitType returns the UserOrgUnitType field value
func (o *VisualizationParams) GetUserOrgUnitType() UserOrgUnitType {
	if o == nil {
		var ret UserOrgUnitType
		return ret
	}

	return o.UserOrgUnitType
}

// GetUserOrgUnitTypeOk returns a tuple with the UserOrgUnitType field value
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetUserOrgUnitTypeOk() (*UserOrgUnitType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserOrgUnitType, true
}

// SetUserOrgUnitType sets field value
func (o *VisualizationParams) SetUserOrgUnitType(v UserOrgUnitType) {
	o.UserOrgUnitType = v
}

// GetUserOrganisationUnit returns the UserOrganisationUnit field value if set, zero value otherwise.
func (o *VisualizationParams) GetUserOrganisationUnit() bool {
	if o == nil || IsNil(o.UserOrganisationUnit) {
		var ret bool
		return ret
	}
	return *o.UserOrganisationUnit
}

// GetUserOrganisationUnitOk returns a tuple with the UserOrganisationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetUserOrganisationUnitOk() (*bool, bool) {
	if o == nil || IsNil(o.UserOrganisationUnit) {
		return nil, false
	}
	return o.UserOrganisationUnit, true
}

// HasUserOrganisationUnit returns a boolean if a field has been set.
func (o *VisualizationParams) HasUserOrganisationUnit() bool {
	if o != nil && !IsNil(o.UserOrganisationUnit) {
		return true
	}

	return false
}

// SetUserOrganisationUnit gets a reference to the given bool and assigns it to the UserOrganisationUnit field.
func (o *VisualizationParams) SetUserOrganisationUnit(v bool) {
	o.UserOrganisationUnit = &v
}

// GetUserOrganisationUnitChildren returns the UserOrganisationUnitChildren field value if set, zero value otherwise.
func (o *VisualizationParams) GetUserOrganisationUnitChildren() bool {
	if o == nil || IsNil(o.UserOrganisationUnitChildren) {
		var ret bool
		return ret
	}
	return *o.UserOrganisationUnitChildren
}

// GetUserOrganisationUnitChildrenOk returns a tuple with the UserOrganisationUnitChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetUserOrganisationUnitChildrenOk() (*bool, bool) {
	if o == nil || IsNil(o.UserOrganisationUnitChildren) {
		return nil, false
	}
	return o.UserOrganisationUnitChildren, true
}

// HasUserOrganisationUnitChildren returns a boolean if a field has been set.
func (o *VisualizationParams) HasUserOrganisationUnitChildren() bool {
	if o != nil && !IsNil(o.UserOrganisationUnitChildren) {
		return true
	}

	return false
}

// SetUserOrganisationUnitChildren gets a reference to the given bool and assigns it to the UserOrganisationUnitChildren field.
func (o *VisualizationParams) SetUserOrganisationUnitChildren(v bool) {
	o.UserOrganisationUnitChildren = &v
}

// GetUserOrganisationUnitGrandChildren returns the UserOrganisationUnitGrandChildren field value if set, zero value otherwise.
func (o *VisualizationParams) GetUserOrganisationUnitGrandChildren() bool {
	if o == nil || IsNil(o.UserOrganisationUnitGrandChildren) {
		var ret bool
		return ret
	}
	return *o.UserOrganisationUnitGrandChildren
}

// GetUserOrganisationUnitGrandChildrenOk returns a tuple with the UserOrganisationUnitGrandChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetUserOrganisationUnitGrandChildrenOk() (*bool, bool) {
	if o == nil || IsNil(o.UserOrganisationUnitGrandChildren) {
		return nil, false
	}
	return o.UserOrganisationUnitGrandChildren, true
}

// HasUserOrganisationUnitGrandChildren returns a boolean if a field has been set.
func (o *VisualizationParams) HasUserOrganisationUnitGrandChildren() bool {
	if o != nil && !IsNil(o.UserOrganisationUnitGrandChildren) {
		return true
	}

	return false
}

// SetUserOrganisationUnitGrandChildren gets a reference to the given bool and assigns it to the UserOrganisationUnitGrandChildren field.
func (o *VisualizationParams) SetUserOrganisationUnitGrandChildren(v bool) {
	o.UserOrganisationUnitGrandChildren = &v
}

// GetVisualizationPeriodName returns the VisualizationPeriodName field value if set, zero value otherwise.
func (o *VisualizationParams) GetVisualizationPeriodName() string {
	if o == nil || IsNil(o.VisualizationPeriodName) {
		var ret string
		return ret
	}
	return *o.VisualizationPeriodName
}

// GetVisualizationPeriodNameOk returns a tuple with the VisualizationPeriodName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetVisualizationPeriodNameOk() (*string, bool) {
	if o == nil || IsNil(o.VisualizationPeriodName) {
		return nil, false
	}
	return o.VisualizationPeriodName, true
}

// HasVisualizationPeriodName returns a boolean if a field has been set.
func (o *VisualizationParams) HasVisualizationPeriodName() bool {
	if o != nil && !IsNil(o.VisualizationPeriodName) {
		return true
	}

	return false
}

// SetVisualizationPeriodName gets a reference to the given string and assigns it to the VisualizationPeriodName field.
func (o *VisualizationParams) SetVisualizationPeriodName(v string) {
	o.VisualizationPeriodName = &v
}

// GetYearlySeries returns the YearlySeries field value if set, zero value otherwise.
func (o *VisualizationParams) GetYearlySeries() []string {
	if o == nil || IsNil(o.YearlySeries) {
		var ret []string
		return ret
	}
	return o.YearlySeries
}

// GetYearlySeriesOk returns a tuple with the YearlySeries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualizationParams) GetYearlySeriesOk() ([]string, bool) {
	if o == nil || IsNil(o.YearlySeries) {
		return nil, false
	}
	return o.YearlySeries, true
}

// HasYearlySeries returns a boolean if a field has been set.
func (o *VisualizationParams) HasYearlySeries() bool {
	if o != nil && !IsNil(o.YearlySeries) {
		return true
	}

	return false
}

// SetYearlySeries gets a reference to the given []string and assigns it to the YearlySeries field.
func (o *VisualizationParams) SetYearlySeries(v []string) {
	o.YearlySeries = v
}

func (o VisualizationParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualizationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregationType"] = o.AggregationType
	if !IsNil(o.AttributeDimensions) {
		toSerialize["attributeDimensions"] = o.AttributeDimensions
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Axes) {
		toSerialize["axes"] = o.Axes
	}
	if !IsNil(o.CategoryDimensions) {
		toSerialize["categoryDimensions"] = o.CategoryDimensions
	}
	if !IsNil(o.CategoryOptionGroupSetDimensions) {
		toSerialize["categoryOptionGroupSetDimensions"] = o.CategoryOptionGroupSetDimensions
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.ColSubTotals) {
		toSerialize["colSubTotals"] = o.ColSubTotals
	}
	if !IsNil(o.ColTotals) {
		toSerialize["colTotals"] = o.ColTotals
	}
	if !IsNil(o.ColorSet) {
		toSerialize["colorSet"] = o.ColorSet
	}
	if !IsNil(o.ColumnDimensions) {
		toSerialize["columnDimensions"] = o.ColumnDimensions
	}
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	if !IsNil(o.CompletedOnly) {
		toSerialize["completedOnly"] = o.CompletedOnly
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CumulativeValues) {
		toSerialize["cumulativeValues"] = o.CumulativeValues
	}
	if !IsNil(o.DataDimensionItems) {
		toSerialize["dataDimensionItems"] = o.DataDimensionItems
	}
	if !IsNil(o.DataElementDimensions) {
		toSerialize["dataElementDimensions"] = o.DataElementDimensions
	}
	if !IsNil(o.DataElementGroupSetDimensions) {
		toSerialize["dataElementGroupSetDimensions"] = o.DataElementGroupSetDimensions
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["digitGroupSeparator"] = o.DigitGroupSeparator
	if !IsNil(o.DisplayBaseLineLabel) {
		toSerialize["displayBaseLineLabel"] = o.DisplayBaseLineLabel
	}
	toSerialize["displayDensity"] = o.DisplayDensity
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayDomainAxisLabel) {
		toSerialize["displayDomainAxisLabel"] = o.DisplayDomainAxisLabel
	}
	if !IsNil(o.DisplayFormName) {
		toSerialize["displayFormName"] = o.DisplayFormName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayRangeAxisLabel) {
		toSerialize["displayRangeAxisLabel"] = o.DisplayRangeAxisLabel
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	if !IsNil(o.DisplaySubtitle) {
		toSerialize["displaySubtitle"] = o.DisplaySubtitle
	}
	if !IsNil(o.DisplayTargetLineLabel) {
		toSerialize["displayTargetLineLabel"] = o.DisplayTargetLineLabel
	}
	if !IsNil(o.DisplayTitle) {
		toSerialize["displayTitle"] = o.DisplayTitle
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FilterDimensions) {
		toSerialize["filterDimensions"] = o.FilterDimensions
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.FixColumnHeaders) {
		toSerialize["fixColumnHeaders"] = o.FixColumnHeaders
	}
	if !IsNil(o.FixRowHeaders) {
		toSerialize["fixRowHeaders"] = o.FixRowHeaders
	}
	toSerialize["fontSize"] = o.FontSize
	if !IsNil(o.FontStyle) {
		toSerialize["fontStyle"] = o.FontStyle
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.HideEmptyColumns) {
		toSerialize["hideEmptyColumns"] = o.HideEmptyColumns
	}
	toSerialize["hideEmptyRowItems"] = o.HideEmptyRowItems
	if !IsNil(o.HideEmptyRows) {
		toSerialize["hideEmptyRows"] = o.HideEmptyRows
	}
	if !IsNil(o.HideLegend) {
		toSerialize["hideLegend"] = o.HideLegend
	}
	if !IsNil(o.HideSubtitle) {
		toSerialize["hideSubtitle"] = o.HideSubtitle
	}
	if !IsNil(o.HideTitle) {
		toSerialize["hideTitle"] = o.HideTitle
	}
	if !IsNil(o.Icons) {
		toSerialize["icons"] = o.Icons
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Interpretations) {
		toSerialize["interpretations"] = o.Interpretations
	}
	if !IsNil(o.ItemOrganisationUnitGroups) {
		toSerialize["itemOrganisationUnitGroups"] = o.ItemOrganisationUnitGroups
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Legend) {
		toSerialize["legend"] = o.Legend
	}
	if !IsNil(o.MeasureCriteria) {
		toSerialize["measureCriteria"] = o.MeasureCriteria
	}
	if !IsNil(o.MetaData) {
		toSerialize["metaData"] = o.MetaData
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NoSpaceBetweenColumns) {
		toSerialize["noSpaceBetweenColumns"] = o.NoSpaceBetweenColumns
	}
	toSerialize["numberType"] = o.NumberType
	if !IsNil(o.OptionalAxes) {
		toSerialize["optionalAxes"] = o.OptionalAxes
	}
	if !IsNil(o.OrgUnitField) {
		toSerialize["orgUnitField"] = o.OrgUnitField
	}
	if !IsNil(o.OrganisationUnitGroupSetDimensions) {
		toSerialize["organisationUnitGroupSetDimensions"] = o.OrganisationUnitGroupSetDimensions
	}
	if !IsNil(o.OrganisationUnitLevels) {
		toSerialize["organisationUnitLevels"] = o.OrganisationUnitLevels
	}
	if !IsNil(o.OrganisationUnits) {
		toSerialize["organisationUnits"] = o.OrganisationUnits
	}
	if !IsNil(o.OutlierAnalysis) {
		toSerialize["outlierAnalysis"] = o.OutlierAnalysis
	}
	if !IsNil(o.PercentStackedValues) {
		toSerialize["percentStackedValues"] = o.PercentStackedValues
	}
	if !IsNil(o.Periods) {
		toSerialize["periods"] = o.Periods
	}
	if !IsNil(o.ProgramIndicatorDimensions) {
		toSerialize["programIndicatorDimensions"] = o.ProgramIndicatorDimensions
	}
	if !IsNil(o.Regression) {
		toSerialize["regression"] = o.Regression
	}
	toSerialize["regressionType"] = o.RegressionType
	if !IsNil(o.RelativePeriods) {
		toSerialize["relativePeriods"] = o.RelativePeriods
	}
	if !IsNil(o.ReportingParams) {
		toSerialize["reportingParams"] = o.ReportingParams
	}
	if !IsNil(o.RowDimensions) {
		toSerialize["rowDimensions"] = o.RowDimensions
	}
	if !IsNil(o.RowSubTotals) {
		toSerialize["rowSubTotals"] = o.RowSubTotals
	}
	if !IsNil(o.RowTotals) {
		toSerialize["rowTotals"] = o.RowTotals
	}
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	if !IsNil(o.Series) {
		toSerialize["series"] = o.Series
	}
	if !IsNil(o.SeriesKey) {
		toSerialize["seriesKey"] = o.SeriesKey
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.ShowData) {
		toSerialize["showData"] = o.ShowData
	}
	if !IsNil(o.ShowDimensionLabels) {
		toSerialize["showDimensionLabels"] = o.ShowDimensionLabels
	}
	if !IsNil(o.ShowHierarchy) {
		toSerialize["showHierarchy"] = o.ShowHierarchy
	}
	if !IsNil(o.SkipRounding) {
		toSerialize["skipRounding"] = o.SkipRounding
	}
	toSerialize["sortOrder"] = o.SortOrder
	if !IsNil(o.Sorting) {
		toSerialize["sorting"] = o.Sorting
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.Subscribed) {
		toSerialize["subscribed"] = o.Subscribed
	}
	if !IsNil(o.Subscribers) {
		toSerialize["subscribers"] = o.Subscribers
	}
	if !IsNil(o.Subtitle) {
		toSerialize["subtitle"] = o.Subtitle
	}
	if !IsNil(o.TimeField) {
		toSerialize["timeField"] = o.TimeField
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["topLimit"] = o.TopLimit
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	toSerialize["type"] = o.Type
	toSerialize["userOrgUnitType"] = o.UserOrgUnitType
	if !IsNil(o.UserOrganisationUnit) {
		toSerialize["userOrganisationUnit"] = o.UserOrganisationUnit
	}
	if !IsNil(o.UserOrganisationUnitChildren) {
		toSerialize["userOrganisationUnitChildren"] = o.UserOrganisationUnitChildren
	}
	if !IsNil(o.UserOrganisationUnitGrandChildren) {
		toSerialize["userOrganisationUnitGrandChildren"] = o.UserOrganisationUnitGrandChildren
	}
	if !IsNil(o.VisualizationPeriodName) {
		toSerialize["visualizationPeriodName"] = o.VisualizationPeriodName
	}
	if !IsNil(o.YearlySeries) {
		toSerialize["yearlySeries"] = o.YearlySeries
	}
	return toSerialize, nil
}

func (o *VisualizationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregationType",
		"digitGroupSeparator",
		"displayDensity",
		"fontSize",
		"hideEmptyRowItems",
		"numberType",
		"regressionType",
		"sortOrder",
		"topLimit",
		"type",
		"userOrgUnitType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVisualizationParams := _VisualizationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVisualizationParams)

	if err != nil {
		return err
	}

	*o = VisualizationParams(varVisualizationParams)

	return err
}

type NullableVisualizationParams struct {
	value *VisualizationParams
	isSet bool
}

func (v NullableVisualizationParams) Get() *VisualizationParams {
	return v.value
}

func (v *NullableVisualizationParams) Set(val *VisualizationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationParams(val *VisualizationParams) *NullableVisualizationParams {
	return &NullableVisualizationParams{value: val, isSet: true}
}

func (v NullableVisualizationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
