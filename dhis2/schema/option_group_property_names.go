/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// OptionGroupPropertyNames the model 'OptionGroupPropertyNames'
type OptionGroupPropertyNames string

// List of OptionGroupPropertyNames
const (
	OPTIONGROUPPROPERTYNAMES_ACCESS              OptionGroupPropertyNames = "access"
	OPTIONGROUPPROPERTYNAMES_AGGREGATION_TYPE    OptionGroupPropertyNames = "aggregationType"
	OPTIONGROUPPROPERTYNAMES_ATTRIBUTE_VALUES    OptionGroupPropertyNames = "attributeValues"
	OPTIONGROUPPROPERTYNAMES_CODE                OptionGroupPropertyNames = "code"
	OPTIONGROUPPROPERTYNAMES_CREATED             OptionGroupPropertyNames = "created"
	OPTIONGROUPPROPERTYNAMES_CREATED_BY          OptionGroupPropertyNames = "createdBy"
	OPTIONGROUPPROPERTYNAMES_DESCRIPTION         OptionGroupPropertyNames = "description"
	OPTIONGROUPPROPERTYNAMES_DIMENSION_ITEM      OptionGroupPropertyNames = "dimensionItem"
	OPTIONGROUPPROPERTYNAMES_DISPLAY_DESCRIPTION OptionGroupPropertyNames = "displayDescription"
	OPTIONGROUPPROPERTYNAMES_DISPLAY_FORM_NAME   OptionGroupPropertyNames = "displayFormName"
	OPTIONGROUPPROPERTYNAMES_DISPLAY_NAME        OptionGroupPropertyNames = "displayName"
	OPTIONGROUPPROPERTYNAMES_DISPLAY_SHORT_NAME  OptionGroupPropertyNames = "displayShortName"
	OPTIONGROUPPROPERTYNAMES_FAVORITE            OptionGroupPropertyNames = "favorite"
	OPTIONGROUPPROPERTYNAMES_FAVORITES           OptionGroupPropertyNames = "favorites"
	OPTIONGROUPPROPERTYNAMES_FORM_NAME           OptionGroupPropertyNames = "formName"
	OPTIONGROUPPROPERTYNAMES_HREF                OptionGroupPropertyNames = "href"
	OPTIONGROUPPROPERTYNAMES_ID                  OptionGroupPropertyNames = "id"
	OPTIONGROUPPROPERTYNAMES_LAST_UPDATED        OptionGroupPropertyNames = "lastUpdated"
	OPTIONGROUPPROPERTYNAMES_LAST_UPDATED_BY     OptionGroupPropertyNames = "lastUpdatedBy"
	OPTIONGROUPPROPERTYNAMES_LEGEND_SET          OptionGroupPropertyNames = "legendSet"
	OPTIONGROUPPROPERTYNAMES_LEGEND_SETS         OptionGroupPropertyNames = "legendSets"
	OPTIONGROUPPROPERTYNAMES_NAME                OptionGroupPropertyNames = "name"
	OPTIONGROUPPROPERTYNAMES_OPTION_SET          OptionGroupPropertyNames = "optionSet"
	OPTIONGROUPPROPERTYNAMES_OPTIONS             OptionGroupPropertyNames = "options"
	OPTIONGROUPPROPERTYNAMES_QUERY_MODS          OptionGroupPropertyNames = "queryMods"
	OPTIONGROUPPROPERTYNAMES_SHARING             OptionGroupPropertyNames = "sharing"
	OPTIONGROUPPROPERTYNAMES_SHORT_NAME          OptionGroupPropertyNames = "shortName"
	OPTIONGROUPPROPERTYNAMES_TRANSLATIONS        OptionGroupPropertyNames = "translations"
)

// All allowed values of OptionGroupPropertyNames enum
var AllowedOptionGroupPropertyNamesEnumValues = []OptionGroupPropertyNames{
	"access",
	"aggregationType",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"dimensionItem",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"legendSet",
	"legendSets",
	"name",
	"optionSet",
	"options",
	"queryMods",
	"sharing",
	"shortName",
	"translations",
}

func (v *OptionGroupPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OptionGroupPropertyNames(value)
	for _, existing := range AllowedOptionGroupPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OptionGroupPropertyNames", value)
}

// NewOptionGroupPropertyNamesFromValue returns a pointer to a valid OptionGroupPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOptionGroupPropertyNamesFromValue(v string) (*OptionGroupPropertyNames, error) {
	ev := OptionGroupPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OptionGroupPropertyNames: valid values are %v", v, AllowedOptionGroupPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OptionGroupPropertyNames) IsValid() bool {
	for _, existing := range AllowedOptionGroupPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OptionGroupPropertyNames value
func (v OptionGroupPropertyNames) Ptr() *OptionGroupPropertyNames {
	return &v
}

type NullableOptionGroupPropertyNames struct {
	value *OptionGroupPropertyNames
	isSet bool
}

func (v NullableOptionGroupPropertyNames) Get() *OptionGroupPropertyNames {
	return v.value
}

func (v *NullableOptionGroupPropertyNames) Set(val *OptionGroupPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionGroupPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionGroupPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionGroupPropertyNames(val *OptionGroupPropertyNames) *NullableOptionGroupPropertyNames {
	return &NullableOptionGroupPropertyNames{value: val, isSet: true}
}

func (v NullableOptionGroupPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionGroupPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
