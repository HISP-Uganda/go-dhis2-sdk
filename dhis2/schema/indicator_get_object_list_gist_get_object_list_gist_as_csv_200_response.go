/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// IndicatorGetObjectListGistGetObjectListGistAsCsv200Response - struct for IndicatorGetObjectListGistGetObjectListGistAsCsv200Response
type IndicatorGetObjectListGistGetObjectListGistAsCsv200Response struct {
	IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf *IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf
	ArrayOfIndicator                                                 *[]Indicator
}

// IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOfAsIndicatorGetObjectListGistGetObjectListGistAsCsv200Response is a convenience function that returns IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf wrapped in IndicatorGetObjectListGistGetObjectListGistAsCsv200Response
func IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOfAsIndicatorGetObjectListGistGetObjectListGistAsCsv200Response(v *IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf) IndicatorGetObjectListGistGetObjectListGistAsCsv200Response {
	return IndicatorGetObjectListGistGetObjectListGistAsCsv200Response{
		IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf: v,
	}
}

// []IndicatorAsIndicatorGetObjectListGistGetObjectListGistAsCsv200Response is a convenience function that returns []Indicator wrapped in IndicatorGetObjectListGistGetObjectListGistAsCsv200Response
func ArrayOfIndicatorAsIndicatorGetObjectListGistGetObjectListGistAsCsv200Response(v *[]Indicator) IndicatorGetObjectListGistGetObjectListGistAsCsv200Response {
	return IndicatorGetObjectListGistGetObjectListGistAsCsv200Response{
		ArrayOfIndicator: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *IndicatorGetObjectListGistGetObjectListGistAsCsv200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf)
	if err == nil {
		jsonIndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf, _ := json.Marshal(dst.IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf)
		if string(jsonIndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf) == "{}" { // empty struct
			dst.IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf = nil
		} else {
			match++
		}
	} else {
		dst.IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfIndicator
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIndicator)
	if err == nil {
		jsonArrayOfIndicator, _ := json.Marshal(dst.ArrayOfIndicator)
		if string(jsonArrayOfIndicator) == "{}" { // empty struct
			dst.ArrayOfIndicator = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIndicator = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf = nil
		dst.ArrayOfIndicator = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IndicatorGetObjectListGistGetObjectListGistAsCsv200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IndicatorGetObjectListGistGetObjectListGistAsCsv200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IndicatorGetObjectListGistGetObjectListGistAsCsv200Response) MarshalJSON() ([]byte, error) {
	if src.IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf != nil {
		return json.Marshal(&src.IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf)
	}

	if src.ArrayOfIndicator != nil {
		return json.Marshal(&src.ArrayOfIndicator)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IndicatorGetObjectListGistGetObjectListGistAsCsv200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf != nil {
		return obj.IndicatorGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf
	}

	if obj.ArrayOfIndicator != nil {
		return obj.ArrayOfIndicator
	}

	// all schemas are nil
	return nil
}

type NullableIndicatorGetObjectListGistGetObjectListGistAsCsv200Response struct {
	value *IndicatorGetObjectListGistGetObjectListGistAsCsv200Response
	isSet bool
}

func (v NullableIndicatorGetObjectListGistGetObjectListGistAsCsv200Response) Get() *IndicatorGetObjectListGistGetObjectListGistAsCsv200Response {
	return v.value
}

func (v *NullableIndicatorGetObjectListGistGetObjectListGistAsCsv200Response) Set(val *IndicatorGetObjectListGistGetObjectListGistAsCsv200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorGetObjectListGistGetObjectListGistAsCsv200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorGetObjectListGistGetObjectListGistAsCsv200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorGetObjectListGistGetObjectListGistAsCsv200Response(val *IndicatorGetObjectListGistGetObjectListGistAsCsv200Response) *NullableIndicatorGetObjectListGistGetObjectListGistAsCsv200Response {
	return &NullableIndicatorGetObjectListGistGetObjectListGistAsCsv200Response{value: val, isSet: true}
}

func (v NullableIndicatorGetObjectListGistGetObjectListGistAsCsv200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorGetObjectListGistGetObjectListGistAsCsv200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
