/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the TrackerRelationship type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackerRelationship{}

// TrackerRelationship struct for TrackerRelationship
type TrackerRelationship struct {
	Bidirectional   *bool                    `json:"bidirectional,omitempty"`
	CreatedAt       *Instant                 `json:"createdAt,omitempty"`
	CreatedAtClient *Instant                 `json:"createdAtClient,omitempty"`
	From            *TrackerRelationshipItem `json:"from,omitempty"`
	// A UID for an Relationship object   (Java name `org.hisp.dhis.relationship.Relationship`)
	Relationship     *string `json:"relationship,omitempty"`
	RelationshipName *string `json:"relationshipName,omitempty"`
	// A UID for an RelationshipType object   (Java name `org.hisp.dhis.relationship.RelationshipType`)
	RelationshipType *string                  `json:"relationshipType,omitempty"`
	To               *TrackerRelationshipItem `json:"to,omitempty"`
	UpdatedAt        *Instant                 `json:"updatedAt,omitempty"`
}

// NewTrackerRelationship instantiates a new TrackerRelationship object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackerRelationship() *TrackerRelationship {
	this := TrackerRelationship{}
	return &this
}

// NewTrackerRelationshipWithDefaults instantiates a new TrackerRelationship object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackerRelationshipWithDefaults() *TrackerRelationship {
	this := TrackerRelationship{}
	return &this
}

// GetBidirectional returns the Bidirectional field value if set, zero value otherwise.
func (o *TrackerRelationship) GetBidirectional() bool {
	if o == nil || IsNil(o.Bidirectional) {
		var ret bool
		return ret
	}
	return *o.Bidirectional
}

// GetBidirectionalOk returns a tuple with the Bidirectional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationship) GetBidirectionalOk() (*bool, bool) {
	if o == nil || IsNil(o.Bidirectional) {
		return nil, false
	}
	return o.Bidirectional, true
}

// HasBidirectional returns a boolean if a field has been set.
func (o *TrackerRelationship) HasBidirectional() bool {
	if o != nil && !IsNil(o.Bidirectional) {
		return true
	}

	return false
}

// SetBidirectional gets a reference to the given bool and assigns it to the Bidirectional field.
func (o *TrackerRelationship) SetBidirectional(v bool) {
	o.Bidirectional = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TrackerRelationship) GetCreatedAt() Instant {
	if o == nil || IsNil(o.CreatedAt) {
		var ret Instant
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationship) GetCreatedAtOk() (*Instant, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TrackerRelationship) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given Instant and assigns it to the CreatedAt field.
func (o *TrackerRelationship) SetCreatedAt(v Instant) {
	o.CreatedAt = &v
}

// GetCreatedAtClient returns the CreatedAtClient field value if set, zero value otherwise.
func (o *TrackerRelationship) GetCreatedAtClient() Instant {
	if o == nil || IsNil(o.CreatedAtClient) {
		var ret Instant
		return ret
	}
	return *o.CreatedAtClient
}

// GetCreatedAtClientOk returns a tuple with the CreatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationship) GetCreatedAtClientOk() (*Instant, bool) {
	if o == nil || IsNil(o.CreatedAtClient) {
		return nil, false
	}
	return o.CreatedAtClient, true
}

// HasCreatedAtClient returns a boolean if a field has been set.
func (o *TrackerRelationship) HasCreatedAtClient() bool {
	if o != nil && !IsNil(o.CreatedAtClient) {
		return true
	}

	return false
}

// SetCreatedAtClient gets a reference to the given Instant and assigns it to the CreatedAtClient field.
func (o *TrackerRelationship) SetCreatedAtClient(v Instant) {
	o.CreatedAtClient = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *TrackerRelationship) GetFrom() TrackerRelationshipItem {
	if o == nil || IsNil(o.From) {
		var ret TrackerRelationshipItem
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationship) GetFromOk() (*TrackerRelationshipItem, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *TrackerRelationship) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given TrackerRelationshipItem and assigns it to the From field.
func (o *TrackerRelationship) SetFrom(v TrackerRelationshipItem) {
	o.From = &v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *TrackerRelationship) GetRelationship() string {
	if o == nil || IsNil(o.Relationship) {
		var ret string
		return ret
	}
	return *o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationship) GetRelationshipOk() (*string, bool) {
	if o == nil || IsNil(o.Relationship) {
		return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *TrackerRelationship) HasRelationship() bool {
	if o != nil && !IsNil(o.Relationship) {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given string and assigns it to the Relationship field.
func (o *TrackerRelationship) SetRelationship(v string) {
	o.Relationship = &v
}

// GetRelationshipName returns the RelationshipName field value if set, zero value otherwise.
func (o *TrackerRelationship) GetRelationshipName() string {
	if o == nil || IsNil(o.RelationshipName) {
		var ret string
		return ret
	}
	return *o.RelationshipName
}

// GetRelationshipNameOk returns a tuple with the RelationshipName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationship) GetRelationshipNameOk() (*string, bool) {
	if o == nil || IsNil(o.RelationshipName) {
		return nil, false
	}
	return o.RelationshipName, true
}

// HasRelationshipName returns a boolean if a field has been set.
func (o *TrackerRelationship) HasRelationshipName() bool {
	if o != nil && !IsNil(o.RelationshipName) {
		return true
	}

	return false
}

// SetRelationshipName gets a reference to the given string and assigns it to the RelationshipName field.
func (o *TrackerRelationship) SetRelationshipName(v string) {
	o.RelationshipName = &v
}

// GetRelationshipType returns the RelationshipType field value if set, zero value otherwise.
func (o *TrackerRelationship) GetRelationshipType() string {
	if o == nil || IsNil(o.RelationshipType) {
		var ret string
		return ret
	}
	return *o.RelationshipType
}

// GetRelationshipTypeOk returns a tuple with the RelationshipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationship) GetRelationshipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RelationshipType) {
		return nil, false
	}
	return o.RelationshipType, true
}

// HasRelationshipType returns a boolean if a field has been set.
func (o *TrackerRelationship) HasRelationshipType() bool {
	if o != nil && !IsNil(o.RelationshipType) {
		return true
	}

	return false
}

// SetRelationshipType gets a reference to the given string and assigns it to the RelationshipType field.
func (o *TrackerRelationship) SetRelationshipType(v string) {
	o.RelationshipType = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *TrackerRelationship) GetTo() TrackerRelationshipItem {
	if o == nil || IsNil(o.To) {
		var ret TrackerRelationshipItem
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationship) GetToOk() (*TrackerRelationshipItem, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *TrackerRelationship) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given TrackerRelationshipItem and assigns it to the To field.
func (o *TrackerRelationship) SetTo(v TrackerRelationshipItem) {
	o.To = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TrackerRelationship) GetUpdatedAt() Instant {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret Instant
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerRelationship) GetUpdatedAtOk() (*Instant, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TrackerRelationship) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given Instant and assigns it to the UpdatedAt field.
func (o *TrackerRelationship) SetUpdatedAt(v Instant) {
	o.UpdatedAt = &v
}

func (o TrackerRelationship) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackerRelationship) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bidirectional) {
		toSerialize["bidirectional"] = o.Bidirectional
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.CreatedAtClient) {
		toSerialize["createdAtClient"] = o.CreatedAtClient
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Relationship) {
		toSerialize["relationship"] = o.Relationship
	}
	if !IsNil(o.RelationshipName) {
		toSerialize["relationshipName"] = o.RelationshipName
	}
	if !IsNil(o.RelationshipType) {
		toSerialize["relationshipType"] = o.RelationshipType
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableTrackerRelationship struct {
	value *TrackerRelationship
	isSet bool
}

func (v NullableTrackerRelationship) Get() *TrackerRelationship {
	return v.value
}

func (v *NullableTrackerRelationship) Set(val *TrackerRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerRelationship(val *TrackerRelationship) *NullableTrackerRelationship {
	return &NullableTrackerRelationship{value: val, isSet: true}
}

func (v NullableTrackerRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
