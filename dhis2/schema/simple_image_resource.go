/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the SimpleImageResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimpleImageResource{}

// SimpleImageResource struct for SimpleImageResource
type SimpleImageResource struct {
	Images *map[string]string `json:"images,omitempty"`
}

// NewSimpleImageResource instantiates a new SimpleImageResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleImageResource() *SimpleImageResource {
	this := SimpleImageResource{}
	return &this
}

// NewSimpleImageResourceWithDefaults instantiates a new SimpleImageResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleImageResourceWithDefaults() *SimpleImageResource {
	this := SimpleImageResource{}
	return &this
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *SimpleImageResource) GetImages() map[string]string {
	if o == nil || IsNil(o.Images) {
		var ret map[string]string
		return ret
	}
	return *o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleImageResource) GetImagesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *SimpleImageResource) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given map[string]string and assigns it to the Images field.
func (o *SimpleImageResource) SetImages(v map[string]string) {
	o.Images = &v
}

func (o SimpleImageResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimpleImageResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	return toSerialize, nil
}

type NullableSimpleImageResource struct {
	value *SimpleImageResource
	isSet bool
}

func (v NullableSimpleImageResource) Get() *SimpleImageResource {
	return v.value
}

func (v *NullableSimpleImageResource) Set(val *SimpleImageResource) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleImageResource) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleImageResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleImageResource(val *SimpleImageResource) *NullableSimpleImageResource {
	return &NullableSimpleImageResource{value: val, isSet: true}
}

func (v NullableSimpleImageResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleImageResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
