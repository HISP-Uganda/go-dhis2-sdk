/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// Font the model 'Font'
type Font string

// List of Font
const (
	FONT_ARIAL      Font = "ARIAL"
	FONT_SANS_SERIF Font = "SANS_SERIF"
	FONT_VERDANA    Font = "VERDANA"
	FONT_ROBOTO     Font = "ROBOTO"
)

// All allowed values of Font enum
var AllowedFontEnumValues = []Font{
	"ARIAL",
	"SANS_SERIF",
	"VERDANA",
	"ROBOTO",
}

func (v *Font) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Font(value)
	for _, existing := range AllowedFontEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Font", value)
}

// NewFontFromValue returns a pointer to a valid Font
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFontFromValue(v string) (*Font, error) {
	ev := Font(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Font: valid values are %v", v, AllowedFontEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Font) IsValid() bool {
	for _, existing := range AllowedFontEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Font value
func (v Font) Ptr() *Font {
	return &v
}

type NullableFont struct {
	value *Font
	isSet bool
}

func (v NullableFont) Get() *Font {
	return v.value
}

func (v *NullableFont) Set(val *Font) {
	v.value = val
	v.isSet = true
}

func (v NullableFont) IsSet() bool {
	return v.isSet
}

func (v *NullableFont) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFont(val *Font) *NullableFont {
	return &NullableFont{value: val, isSet: true}
}

func (v NullableFont) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFont) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
