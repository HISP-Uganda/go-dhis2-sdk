/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"time"
)

// checks if the TrackedEntityParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackedEntityParams{}

// TrackedEntityParams struct for TrackedEntityParams
type TrackedEntityParams struct {
	AttributeValues              []AttributeValueParams                `json:"attributeValues,omitempty"`
	Code                         *string                               `json:"code,omitempty"`
	Created                      *time.Time                            `json:"created,omitempty"`
	CreatedAtClient              *time.Time                            `json:"createdAtClient,omitempty"`
	CreatedBy                    *AggregateDataExchangeParamsCreatedBy `json:"createdBy,omitempty"`
	CreatedByUserInfo            *UserInfoSnapshot                     `json:"createdByUserInfo,omitempty"`
	Deleted                      *bool                                 `json:"deleted,omitempty"`
	DisplayName                  *string                               `json:"displayName,omitempty"`
	Enrollments                  []BodyParamsEnrollmentsInner          `json:"enrollments,omitempty"`
	Favorite                     *bool                                 `json:"favorite,omitempty"`
	Favorites                    []string                              `json:"favorites,omitempty"`
	Geometry                     map[string]interface{}                `json:"geometry,omitempty"`
	Id                           *string                               `json:"id,omitempty"`
	Inactive                     *bool                                 `json:"inactive,omitempty"`
	LastUpdated                  *time.Time                            `json:"lastUpdated,omitempty"`
	LastUpdatedAtClient          *time.Time                            `json:"lastUpdatedAtClient,omitempty"`
	LastUpdatedBy                *AggregateDataExchangeParamsCreatedBy `json:"lastUpdatedBy,omitempty"`
	LastUpdatedByUserInfo        *UserInfoSnapshot                     `json:"lastUpdatedByUserInfo,omitempty"`
	Name                         *string                               `json:"name,omitempty"`
	OrganisationUnit             *OrganisationUnitParams               `json:"organisationUnit,omitempty"`
	PotentialDuplicate           *bool                                 `json:"potentialDuplicate,omitempty"`
	ProgramOwners                []TrackedEntityProgramOwnerParams     `json:"programOwners,omitempty"`
	RelationshipItems            []RelationshipItemParams              `json:"relationshipItems,omitempty"`
	Sharing                      *Sharing                              `json:"sharing,omitempty"`
	StoredBy                     *string                               `json:"storedBy,omitempty"`
	TrackedEntityAttributeValues []TrackedEntityAttributeValueParams   `json:"trackedEntityAttributeValues,omitempty"`
	TrackedEntityType            *MapViewParamsTrackedEntityType       `json:"trackedEntityType,omitempty"`
	Translations                 []Translation                         `json:"translations,omitempty"`
}

// NewTrackedEntityParams instantiates a new TrackedEntityParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackedEntityParams() *TrackedEntityParams {
	this := TrackedEntityParams{}
	return &this
}

// NewTrackedEntityParamsWithDefaults instantiates a new TrackedEntityParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackedEntityParamsWithDefaults() *TrackedEntityParams {
	this := TrackedEntityParams{}
	return &this
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *TrackedEntityParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TrackedEntityParams) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *TrackedEntityParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedAtClient returns the CreatedAtClient field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetCreatedAtClient() time.Time {
	if o == nil || IsNil(o.CreatedAtClient) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAtClient
}

// GetCreatedAtClientOk returns a tuple with the CreatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetCreatedAtClientOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAtClient) {
		return nil, false
	}
	return o.CreatedAtClient, true
}

// HasCreatedAtClient returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasCreatedAtClient() bool {
	if o != nil && !IsNil(o.CreatedAtClient) {
		return true
	}

	return false
}

// SetCreatedAtClient gets a reference to the given time.Time and assigns it to the CreatedAtClient field.
func (o *TrackedEntityParams) SetCreatedAtClient(v time.Time) {
	o.CreatedAtClient = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *TrackedEntityParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetCreatedByUserInfo returns the CreatedByUserInfo field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetCreatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.CreatedByUserInfo
}

// GetCreatedByUserInfoOk returns a tuple with the CreatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetCreatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		return nil, false
	}
	return o.CreatedByUserInfo, true
}

// HasCreatedByUserInfo returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasCreatedByUserInfo() bool {
	if o != nil && !IsNil(o.CreatedByUserInfo) {
		return true
	}

	return false
}

// SetCreatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the CreatedByUserInfo field.
func (o *TrackedEntityParams) SetCreatedByUserInfo(v UserInfoSnapshot) {
	o.CreatedByUserInfo = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *TrackedEntityParams) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *TrackedEntityParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnrollments returns the Enrollments field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetEnrollments() []BodyParamsEnrollmentsInner {
	if o == nil || IsNil(o.Enrollments) {
		var ret []BodyParamsEnrollmentsInner
		return ret
	}
	return o.Enrollments
}

// GetEnrollmentsOk returns a tuple with the Enrollments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetEnrollmentsOk() ([]BodyParamsEnrollmentsInner, bool) {
	if o == nil || IsNil(o.Enrollments) {
		return nil, false
	}
	return o.Enrollments, true
}

// HasEnrollments returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasEnrollments() bool {
	if o != nil && !IsNil(o.Enrollments) {
		return true
	}

	return false
}

// SetEnrollments gets a reference to the given []BodyParamsEnrollmentsInner and assigns it to the Enrollments field.
func (o *TrackedEntityParams) SetEnrollments(v []BodyParamsEnrollmentsInner) {
	o.Enrollments = v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *TrackedEntityParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *TrackedEntityParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetGeometry() map[string]interface{} {
	if o == nil || IsNil(o.Geometry) {
		var ret map[string]interface{}
		return ret
	}
	return o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetGeometryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Geometry) {
		return map[string]interface{}{}, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given map[string]interface{} and assigns it to the Geometry field.
func (o *TrackedEntityParams) SetGeometry(v map[string]interface{}) {
	o.Geometry = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TrackedEntityParams) SetId(v string) {
	o.Id = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *TrackedEntityParams) SetInactive(v bool) {
	o.Inactive = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *TrackedEntityParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedAtClient returns the LastUpdatedAtClient field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetLastUpdatedAtClient() time.Time {
	if o == nil || IsNil(o.LastUpdatedAtClient) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedAtClient
}

// GetLastUpdatedAtClientOk returns a tuple with the LastUpdatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetLastUpdatedAtClientOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdatedAtClient) {
		return nil, false
	}
	return o.LastUpdatedAtClient, true
}

// HasLastUpdatedAtClient returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasLastUpdatedAtClient() bool {
	if o != nil && !IsNil(o.LastUpdatedAtClient) {
		return true
	}

	return false
}

// SetLastUpdatedAtClient gets a reference to the given time.Time and assigns it to the LastUpdatedAtClient field.
func (o *TrackedEntityParams) SetLastUpdatedAtClient(v time.Time) {
	o.LastUpdatedAtClient = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *TrackedEntityParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLastUpdatedByUserInfo returns the LastUpdatedByUserInfo field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetLastUpdatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.LastUpdatedByUserInfo
}

// GetLastUpdatedByUserInfoOk returns a tuple with the LastUpdatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetLastUpdatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		return nil, false
	}
	return o.LastUpdatedByUserInfo, true
}

// HasLastUpdatedByUserInfo returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasLastUpdatedByUserInfo() bool {
	if o != nil && !IsNil(o.LastUpdatedByUserInfo) {
		return true
	}

	return false
}

// SetLastUpdatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the LastUpdatedByUserInfo field.
func (o *TrackedEntityParams) SetLastUpdatedByUserInfo(v UserInfoSnapshot) {
	o.LastUpdatedByUserInfo = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TrackedEntityParams) SetName(v string) {
	o.Name = &v
}

// GetOrganisationUnit returns the OrganisationUnit field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetOrganisationUnit() OrganisationUnitParams {
	if o == nil || IsNil(o.OrganisationUnit) {
		var ret OrganisationUnitParams
		return ret
	}
	return *o.OrganisationUnit
}

// GetOrganisationUnitOk returns a tuple with the OrganisationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetOrganisationUnitOk() (*OrganisationUnitParams, bool) {
	if o == nil || IsNil(o.OrganisationUnit) {
		return nil, false
	}
	return o.OrganisationUnit, true
}

// HasOrganisationUnit returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasOrganisationUnit() bool {
	if o != nil && !IsNil(o.OrganisationUnit) {
		return true
	}

	return false
}

// SetOrganisationUnit gets a reference to the given OrganisationUnitParams and assigns it to the OrganisationUnit field.
func (o *TrackedEntityParams) SetOrganisationUnit(v OrganisationUnitParams) {
	o.OrganisationUnit = &v
}

// GetPotentialDuplicate returns the PotentialDuplicate field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetPotentialDuplicate() bool {
	if o == nil || IsNil(o.PotentialDuplicate) {
		var ret bool
		return ret
	}
	return *o.PotentialDuplicate
}

// GetPotentialDuplicateOk returns a tuple with the PotentialDuplicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetPotentialDuplicateOk() (*bool, bool) {
	if o == nil || IsNil(o.PotentialDuplicate) {
		return nil, false
	}
	return o.PotentialDuplicate, true
}

// HasPotentialDuplicate returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasPotentialDuplicate() bool {
	if o != nil && !IsNil(o.PotentialDuplicate) {
		return true
	}

	return false
}

// SetPotentialDuplicate gets a reference to the given bool and assigns it to the PotentialDuplicate field.
func (o *TrackedEntityParams) SetPotentialDuplicate(v bool) {
	o.PotentialDuplicate = &v
}

// GetProgramOwners returns the ProgramOwners field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetProgramOwners() []TrackedEntityProgramOwnerParams {
	if o == nil || IsNil(o.ProgramOwners) {
		var ret []TrackedEntityProgramOwnerParams
		return ret
	}
	return o.ProgramOwners
}

// GetProgramOwnersOk returns a tuple with the ProgramOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetProgramOwnersOk() ([]TrackedEntityProgramOwnerParams, bool) {
	if o == nil || IsNil(o.ProgramOwners) {
		return nil, false
	}
	return o.ProgramOwners, true
}

// HasProgramOwners returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasProgramOwners() bool {
	if o != nil && !IsNil(o.ProgramOwners) {
		return true
	}

	return false
}

// SetProgramOwners gets a reference to the given []TrackedEntityProgramOwnerParams and assigns it to the ProgramOwners field.
func (o *TrackedEntityParams) SetProgramOwners(v []TrackedEntityProgramOwnerParams) {
	o.ProgramOwners = v
}

// GetRelationshipItems returns the RelationshipItems field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetRelationshipItems() []RelationshipItemParams {
	if o == nil || IsNil(o.RelationshipItems) {
		var ret []RelationshipItemParams
		return ret
	}
	return o.RelationshipItems
}

// GetRelationshipItemsOk returns a tuple with the RelationshipItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetRelationshipItemsOk() ([]RelationshipItemParams, bool) {
	if o == nil || IsNil(o.RelationshipItems) {
		return nil, false
	}
	return o.RelationshipItems, true
}

// HasRelationshipItems returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasRelationshipItems() bool {
	if o != nil && !IsNil(o.RelationshipItems) {
		return true
	}

	return false
}

// SetRelationshipItems gets a reference to the given []RelationshipItemParams and assigns it to the RelationshipItems field.
func (o *TrackedEntityParams) SetRelationshipItems(v []RelationshipItemParams) {
	o.RelationshipItems = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *TrackedEntityParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *TrackedEntityParams) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetTrackedEntityAttributeValues returns the TrackedEntityAttributeValues field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetTrackedEntityAttributeValues() []TrackedEntityAttributeValueParams {
	if o == nil || IsNil(o.TrackedEntityAttributeValues) {
		var ret []TrackedEntityAttributeValueParams
		return ret
	}
	return o.TrackedEntityAttributeValues
}

// GetTrackedEntityAttributeValuesOk returns a tuple with the TrackedEntityAttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetTrackedEntityAttributeValuesOk() ([]TrackedEntityAttributeValueParams, bool) {
	if o == nil || IsNil(o.TrackedEntityAttributeValues) {
		return nil, false
	}
	return o.TrackedEntityAttributeValues, true
}

// HasTrackedEntityAttributeValues returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasTrackedEntityAttributeValues() bool {
	if o != nil && !IsNil(o.TrackedEntityAttributeValues) {
		return true
	}

	return false
}

// SetTrackedEntityAttributeValues gets a reference to the given []TrackedEntityAttributeValueParams and assigns it to the TrackedEntityAttributeValues field.
func (o *TrackedEntityParams) SetTrackedEntityAttributeValues(v []TrackedEntityAttributeValueParams) {
	o.TrackedEntityAttributeValues = v
}

// GetTrackedEntityType returns the TrackedEntityType field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetTrackedEntityType() MapViewParamsTrackedEntityType {
	if o == nil || IsNil(o.TrackedEntityType) {
		var ret MapViewParamsTrackedEntityType
		return ret
	}
	return *o.TrackedEntityType
}

// GetTrackedEntityTypeOk returns a tuple with the TrackedEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetTrackedEntityTypeOk() (*MapViewParamsTrackedEntityType, bool) {
	if o == nil || IsNil(o.TrackedEntityType) {
		return nil, false
	}
	return o.TrackedEntityType, true
}

// HasTrackedEntityType returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasTrackedEntityType() bool {
	if o != nil && !IsNil(o.TrackedEntityType) {
		return true
	}

	return false
}

// SetTrackedEntityType gets a reference to the given MapViewParamsTrackedEntityType and assigns it to the TrackedEntityType field.
func (o *TrackedEntityParams) SetTrackedEntityType(v MapViewParamsTrackedEntityType) {
	o.TrackedEntityType = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *TrackedEntityParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedEntityParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *TrackedEntityParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *TrackedEntityParams) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o TrackedEntityParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackedEntityParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedAtClient) {
		toSerialize["createdAtClient"] = o.CreatedAtClient
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CreatedByUserInfo) {
		toSerialize["createdByUserInfo"] = o.CreatedByUserInfo
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Enrollments) {
		toSerialize["enrollments"] = o.Enrollments
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedAtClient) {
		toSerialize["lastUpdatedAtClient"] = o.LastUpdatedAtClient
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LastUpdatedByUserInfo) {
		toSerialize["lastUpdatedByUserInfo"] = o.LastUpdatedByUserInfo
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrganisationUnit) {
		toSerialize["organisationUnit"] = o.OrganisationUnit
	}
	if !IsNil(o.PotentialDuplicate) {
		toSerialize["potentialDuplicate"] = o.PotentialDuplicate
	}
	if !IsNil(o.ProgramOwners) {
		toSerialize["programOwners"] = o.ProgramOwners
	}
	if !IsNil(o.RelationshipItems) {
		toSerialize["relationshipItems"] = o.RelationshipItems
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.TrackedEntityAttributeValues) {
		toSerialize["trackedEntityAttributeValues"] = o.TrackedEntityAttributeValues
	}
	if !IsNil(o.TrackedEntityType) {
		toSerialize["trackedEntityType"] = o.TrackedEntityType
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

type NullableTrackedEntityParams struct {
	value *TrackedEntityParams
	isSet bool
}

func (v NullableTrackedEntityParams) Get() *TrackedEntityParams {
	return v.value
}

func (v *NullableTrackedEntityParams) Set(val *TrackedEntityParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackedEntityParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackedEntityParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackedEntityParams(val *TrackedEntityParams) *NullableTrackedEntityParams {
	return &NullableTrackedEntityParams{value: val, isSet: true}
}

func (v NullableTrackedEntityParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackedEntityParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
