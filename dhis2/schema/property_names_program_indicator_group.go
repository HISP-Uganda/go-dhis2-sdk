/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesProgramIndicatorGroup the model 'PropertyNamesProgramIndicatorGroup'
type PropertyNamesProgramIndicatorGroup string

// List of PropertyNames_ProgramIndicatorGroup
const (
	PROPERTYNAMESPROGRAMINDICATORGROUP_ACCESS              PropertyNamesProgramIndicatorGroup = "access"
	PROPERTYNAMESPROGRAMINDICATORGROUP_ATTRIBUTE_VALUES    PropertyNamesProgramIndicatorGroup = "attributeValues"
	PROPERTYNAMESPROGRAMINDICATORGROUP_CODE                PropertyNamesProgramIndicatorGroup = "code"
	PROPERTYNAMESPROGRAMINDICATORGROUP_CREATED             PropertyNamesProgramIndicatorGroup = "created"
	PROPERTYNAMESPROGRAMINDICATORGROUP_CREATED_BY          PropertyNamesProgramIndicatorGroup = "createdBy"
	PROPERTYNAMESPROGRAMINDICATORGROUP_DESCRIPTION         PropertyNamesProgramIndicatorGroup = "description"
	PROPERTYNAMESPROGRAMINDICATORGROUP_DISPLAY_NAME        PropertyNamesProgramIndicatorGroup = "displayName"
	PROPERTYNAMESPROGRAMINDICATORGROUP_EXTERNAL_ACCESS     PropertyNamesProgramIndicatorGroup = "externalAccess"
	PROPERTYNAMESPROGRAMINDICATORGROUP_FAVORITE            PropertyNamesProgramIndicatorGroup = "favorite"
	PROPERTYNAMESPROGRAMINDICATORGROUP_FAVORITES           PropertyNamesProgramIndicatorGroup = "favorites"
	PROPERTYNAMESPROGRAMINDICATORGROUP_HREF                PropertyNamesProgramIndicatorGroup = "href"
	PROPERTYNAMESPROGRAMINDICATORGROUP_ID                  PropertyNamesProgramIndicatorGroup = "id"
	PROPERTYNAMESPROGRAMINDICATORGROUP_LAST_UPDATED        PropertyNamesProgramIndicatorGroup = "lastUpdated"
	PROPERTYNAMESPROGRAMINDICATORGROUP_LAST_UPDATED_BY     PropertyNamesProgramIndicatorGroup = "lastUpdatedBy"
	PROPERTYNAMESPROGRAMINDICATORGROUP_NAME                PropertyNamesProgramIndicatorGroup = "name"
	PROPERTYNAMESPROGRAMINDICATORGROUP_PROGRAM_INDICATORS  PropertyNamesProgramIndicatorGroup = "programIndicators"
	PROPERTYNAMESPROGRAMINDICATORGROUP_PUBLIC_ACCESS       PropertyNamesProgramIndicatorGroup = "publicAccess"
	PROPERTYNAMESPROGRAMINDICATORGROUP_SHARING             PropertyNamesProgramIndicatorGroup = "sharing"
	PROPERTYNAMESPROGRAMINDICATORGROUP_TRANSLATIONS        PropertyNamesProgramIndicatorGroup = "translations"
	PROPERTYNAMESPROGRAMINDICATORGROUP_USER                PropertyNamesProgramIndicatorGroup = "user"
	PROPERTYNAMESPROGRAMINDICATORGROUP_USER_ACCESSES       PropertyNamesProgramIndicatorGroup = "userAccesses"
	PROPERTYNAMESPROGRAMINDICATORGROUP_USER_GROUP_ACCESSES PropertyNamesProgramIndicatorGroup = "userGroupAccesses"
)

// All allowed values of PropertyNamesProgramIndicatorGroup enum
var AllowedPropertyNamesProgramIndicatorGroupEnumValues = []PropertyNamesProgramIndicatorGroup{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"programIndicators",
	"publicAccess",
	"sharing",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesProgramIndicatorGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesProgramIndicatorGroup(value)
	for _, existing := range AllowedPropertyNamesProgramIndicatorGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesProgramIndicatorGroup", value)
}

// NewPropertyNamesProgramIndicatorGroupFromValue returns a pointer to a valid PropertyNamesProgramIndicatorGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesProgramIndicatorGroupFromValue(v string) (*PropertyNamesProgramIndicatorGroup, error) {
	ev := PropertyNamesProgramIndicatorGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesProgramIndicatorGroup: valid values are %v", v, AllowedPropertyNamesProgramIndicatorGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesProgramIndicatorGroup) IsValid() bool {
	for _, existing := range AllowedPropertyNamesProgramIndicatorGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_ProgramIndicatorGroup value
func (v PropertyNamesProgramIndicatorGroup) Ptr() *PropertyNamesProgramIndicatorGroup {
	return &v
}

type NullablePropertyNamesProgramIndicatorGroup struct {
	value *PropertyNamesProgramIndicatorGroup
	isSet bool
}

func (v NullablePropertyNamesProgramIndicatorGroup) Get() *PropertyNamesProgramIndicatorGroup {
	return v.value
}

func (v *NullablePropertyNamesProgramIndicatorGroup) Set(val *PropertyNamesProgramIndicatorGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesProgramIndicatorGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesProgramIndicatorGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesProgramIndicatorGroup(val *PropertyNamesProgramIndicatorGroup) *NullablePropertyNamesProgramIndicatorGroup {
	return &NullablePropertyNamesProgramIndicatorGroup{value: val, isSet: true}
}

func (v NullablePropertyNamesProgramIndicatorGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesProgramIndicatorGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
