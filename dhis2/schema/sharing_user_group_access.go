/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the SharingUserGroupAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharingUserGroupAccess{}

// SharingUserGroupAccess struct for SharingUserGroupAccess
type SharingUserGroupAccess struct {
	Access      *string `json:"access,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// NewSharingUserGroupAccess instantiates a new SharingUserGroupAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharingUserGroupAccess() *SharingUserGroupAccess {
	this := SharingUserGroupAccess{}
	return &this
}

// NewSharingUserGroupAccessWithDefaults instantiates a new SharingUserGroupAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharingUserGroupAccessWithDefaults() *SharingUserGroupAccess {
	this := SharingUserGroupAccess{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *SharingUserGroupAccess) GetAccess() string {
	if o == nil || IsNil(o.Access) {
		var ret string
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingUserGroupAccess) GetAccessOk() (*string, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *SharingUserGroupAccess) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given string and assigns it to the Access field.
func (o *SharingUserGroupAccess) SetAccess(v string) {
	o.Access = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SharingUserGroupAccess) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingUserGroupAccess) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SharingUserGroupAccess) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SharingUserGroupAccess) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SharingUserGroupAccess) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingUserGroupAccess) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SharingUserGroupAccess) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SharingUserGroupAccess) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SharingUserGroupAccess) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingUserGroupAccess) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SharingUserGroupAccess) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SharingUserGroupAccess) SetName(v string) {
	o.Name = &v
}

func (o SharingUserGroupAccess) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharingUserGroupAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableSharingUserGroupAccess struct {
	value *SharingUserGroupAccess
	isSet bool
}

func (v NullableSharingUserGroupAccess) Get() *SharingUserGroupAccess {
	return v.value
}

func (v *NullableSharingUserGroupAccess) Set(val *SharingUserGroupAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableSharingUserGroupAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableSharingUserGroupAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharingUserGroupAccess(val *SharingUserGroupAccess) *NullableSharingUserGroupAccess {
	return &NullableSharingUserGroupAccess{value: val, isSet: true}
}

func (v NullableSharingUserGroupAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharingUserGroupAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
