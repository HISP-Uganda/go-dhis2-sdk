/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// MissingValueStrategy the model 'MissingValueStrategy'
type MissingValueStrategy string

// List of MissingValueStrategy
const (
	MISSINGVALUESTRATEGY_SKIP_IF_ANY_VALUE_MISSING  MissingValueStrategy = "SKIP_IF_ANY_VALUE_MISSING"
	MISSINGVALUESTRATEGY_SKIP_IF_ALL_VALUES_MISSING MissingValueStrategy = "SKIP_IF_ALL_VALUES_MISSING"
	MISSINGVALUESTRATEGY_NEVER_SKIP                 MissingValueStrategy = "NEVER_SKIP"
)

// All allowed values of MissingValueStrategy enum
var AllowedMissingValueStrategyEnumValues = []MissingValueStrategy{
	"SKIP_IF_ANY_VALUE_MISSING",
	"SKIP_IF_ALL_VALUES_MISSING",
	"NEVER_SKIP",
}

func (v *MissingValueStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MissingValueStrategy(value)
	for _, existing := range AllowedMissingValueStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MissingValueStrategy", value)
}

// NewMissingValueStrategyFromValue returns a pointer to a valid MissingValueStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMissingValueStrategyFromValue(v string) (*MissingValueStrategy, error) {
	ev := MissingValueStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MissingValueStrategy: valid values are %v", v, AllowedMissingValueStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MissingValueStrategy) IsValid() bool {
	for _, existing := range AllowedMissingValueStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MissingValueStrategy value
func (v MissingValueStrategy) Ptr() *MissingValueStrategy {
	return &v
}

type NullableMissingValueStrategy struct {
	value *MissingValueStrategy
	isSet bool
}

func (v NullableMissingValueStrategy) Get() *MissingValueStrategy {
	return v.value
}

func (v *NullableMissingValueStrategy) Set(val *MissingValueStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableMissingValueStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableMissingValueStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMissingValueStrategy(val *MissingValueStrategy) *NullableMissingValueStrategy {
	return &NullableMissingValueStrategy{value: val, isSet: true}
}

func (v NullableMissingValueStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMissingValueStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
