/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesIndicatorGroup the model 'PropertyNamesIndicatorGroup'
type PropertyNamesIndicatorGroup string

// List of PropertyNames_IndicatorGroup
const (
	PROPERTYNAMESINDICATORGROUP_ACCESS              PropertyNamesIndicatorGroup = "access"
	PROPERTYNAMESINDICATORGROUP_ATTRIBUTE_VALUES    PropertyNamesIndicatorGroup = "attributeValues"
	PROPERTYNAMESINDICATORGROUP_CODE                PropertyNamesIndicatorGroup = "code"
	PROPERTYNAMESINDICATORGROUP_CREATED             PropertyNamesIndicatorGroup = "created"
	PROPERTYNAMESINDICATORGROUP_CREATED_BY          PropertyNamesIndicatorGroup = "createdBy"
	PROPERTYNAMESINDICATORGROUP_DESCRIPTION         PropertyNamesIndicatorGroup = "description"
	PROPERTYNAMESINDICATORGROUP_DISPLAY_NAME        PropertyNamesIndicatorGroup = "displayName"
	PROPERTYNAMESINDICATORGROUP_EXTERNAL_ACCESS     PropertyNamesIndicatorGroup = "externalAccess"
	PROPERTYNAMESINDICATORGROUP_FAVORITE            PropertyNamesIndicatorGroup = "favorite"
	PROPERTYNAMESINDICATORGROUP_FAVORITES           PropertyNamesIndicatorGroup = "favorites"
	PROPERTYNAMESINDICATORGROUP_GROUP_SETS          PropertyNamesIndicatorGroup = "groupSets"
	PROPERTYNAMESINDICATORGROUP_HREF                PropertyNamesIndicatorGroup = "href"
	PROPERTYNAMESINDICATORGROUP_ID                  PropertyNamesIndicatorGroup = "id"
	PROPERTYNAMESINDICATORGROUP_INDICATOR_GROUP_SET PropertyNamesIndicatorGroup = "indicatorGroupSet"
	PROPERTYNAMESINDICATORGROUP_INDICATORS          PropertyNamesIndicatorGroup = "indicators"
	PROPERTYNAMESINDICATORGROUP_LAST_UPDATED        PropertyNamesIndicatorGroup = "lastUpdated"
	PROPERTYNAMESINDICATORGROUP_LAST_UPDATED_BY     PropertyNamesIndicatorGroup = "lastUpdatedBy"
	PROPERTYNAMESINDICATORGROUP_NAME                PropertyNamesIndicatorGroup = "name"
	PROPERTYNAMESINDICATORGROUP_PUBLIC_ACCESS       PropertyNamesIndicatorGroup = "publicAccess"
	PROPERTYNAMESINDICATORGROUP_SHARING             PropertyNamesIndicatorGroup = "sharing"
	PROPERTYNAMESINDICATORGROUP_TRANSLATIONS        PropertyNamesIndicatorGroup = "translations"
	PROPERTYNAMESINDICATORGROUP_USER                PropertyNamesIndicatorGroup = "user"
	PROPERTYNAMESINDICATORGROUP_USER_ACCESSES       PropertyNamesIndicatorGroup = "userAccesses"
	PROPERTYNAMESINDICATORGROUP_USER_GROUP_ACCESSES PropertyNamesIndicatorGroup = "userGroupAccesses"
)

// All allowed values of PropertyNamesIndicatorGroup enum
var AllowedPropertyNamesIndicatorGroupEnumValues = []PropertyNamesIndicatorGroup{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"groupSets",
	"href",
	"id",
	"indicatorGroupSet",
	"indicators",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesIndicatorGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesIndicatorGroup(value)
	for _, existing := range AllowedPropertyNamesIndicatorGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesIndicatorGroup", value)
}

// NewPropertyNamesIndicatorGroupFromValue returns a pointer to a valid PropertyNamesIndicatorGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesIndicatorGroupFromValue(v string) (*PropertyNamesIndicatorGroup, error) {
	ev := PropertyNamesIndicatorGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesIndicatorGroup: valid values are %v", v, AllowedPropertyNamesIndicatorGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesIndicatorGroup) IsValid() bool {
	for _, existing := range AllowedPropertyNamesIndicatorGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_IndicatorGroup value
func (v PropertyNamesIndicatorGroup) Ptr() *PropertyNamesIndicatorGroup {
	return &v
}

type NullablePropertyNamesIndicatorGroup struct {
	value *PropertyNamesIndicatorGroup
	isSet bool
}

func (v NullablePropertyNamesIndicatorGroup) Get() *PropertyNamesIndicatorGroup {
	return v.value
}

func (v *NullablePropertyNamesIndicatorGroup) Set(val *PropertyNamesIndicatorGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesIndicatorGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesIndicatorGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesIndicatorGroup(val *PropertyNamesIndicatorGroup) *NullablePropertyNamesIndicatorGroup {
	return &NullablePropertyNamesIndicatorGroup{value: val, isSet: true}
}

func (v NullablePropertyNamesIndicatorGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesIndicatorGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
