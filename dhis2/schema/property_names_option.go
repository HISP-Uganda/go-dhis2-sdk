/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesOption the model 'PropertyNamesOption'
type PropertyNamesOption string

// List of PropertyNames_Option
const (
	PROPERTYNAMESOPTION_ACCESS              PropertyNamesOption = "access"
	PROPERTYNAMESOPTION_ATTRIBUTE_VALUES    PropertyNamesOption = "attributeValues"
	PROPERTYNAMESOPTION_CODE                PropertyNamesOption = "code"
	PROPERTYNAMESOPTION_CREATED             PropertyNamesOption = "created"
	PROPERTYNAMESOPTION_CREATED_BY          PropertyNamesOption = "createdBy"
	PROPERTYNAMESOPTION_DESCRIPTION         PropertyNamesOption = "description"
	PROPERTYNAMESOPTION_DISPLAY_DESCRIPTION PropertyNamesOption = "displayDescription"
	PROPERTYNAMESOPTION_DISPLAY_FORM_NAME   PropertyNamesOption = "displayFormName"
	PROPERTYNAMESOPTION_DISPLAY_NAME        PropertyNamesOption = "displayName"
	PROPERTYNAMESOPTION_DISPLAY_SHORT_NAME  PropertyNamesOption = "displayShortName"
	PROPERTYNAMESOPTION_EXTERNAL_ACCESS     PropertyNamesOption = "externalAccess"
	PROPERTYNAMESOPTION_FAVORITE            PropertyNamesOption = "favorite"
	PROPERTYNAMESOPTION_FAVORITES           PropertyNamesOption = "favorites"
	PROPERTYNAMESOPTION_FORM_NAME           PropertyNamesOption = "formName"
	PROPERTYNAMESOPTION_HREF                PropertyNamesOption = "href"
	PROPERTYNAMESOPTION_ID                  PropertyNamesOption = "id"
	PROPERTYNAMESOPTION_LAST_UPDATED        PropertyNamesOption = "lastUpdated"
	PROPERTYNAMESOPTION_LAST_UPDATED_BY     PropertyNamesOption = "lastUpdatedBy"
	PROPERTYNAMESOPTION_NAME                PropertyNamesOption = "name"
	PROPERTYNAMESOPTION_OPTION_SET          PropertyNamesOption = "optionSet"
	PROPERTYNAMESOPTION_PUBLIC_ACCESS       PropertyNamesOption = "publicAccess"
	PROPERTYNAMESOPTION_SHARING             PropertyNamesOption = "sharing"
	PROPERTYNAMESOPTION_SHORT_NAME          PropertyNamesOption = "shortName"
	PROPERTYNAMESOPTION_SORT_ORDER          PropertyNamesOption = "sortOrder"
	PROPERTYNAMESOPTION_STYLE               PropertyNamesOption = "style"
	PROPERTYNAMESOPTION_TRANSLATIONS        PropertyNamesOption = "translations"
	PROPERTYNAMESOPTION_USER                PropertyNamesOption = "user"
	PROPERTYNAMESOPTION_USER_ACCESSES       PropertyNamesOption = "userAccesses"
	PROPERTYNAMESOPTION_USER_GROUP_ACCESSES PropertyNamesOption = "userGroupAccesses"
)

// All allowed values of PropertyNamesOption enum
var AllowedPropertyNamesOptionEnumValues = []PropertyNamesOption{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"externalAccess",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"optionSet",
	"publicAccess",
	"sharing",
	"shortName",
	"sortOrder",
	"style",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesOption(value)
	for _, existing := range AllowedPropertyNamesOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesOption", value)
}

// NewPropertyNamesOptionFromValue returns a pointer to a valid PropertyNamesOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesOptionFromValue(v string) (*PropertyNamesOption, error) {
	ev := PropertyNamesOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesOption: valid values are %v", v, AllowedPropertyNamesOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesOption) IsValid() bool {
	for _, existing := range AllowedPropertyNamesOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Option value
func (v PropertyNamesOption) Ptr() *PropertyNamesOption {
	return &v
}

type NullablePropertyNamesOption struct {
	value *PropertyNamesOption
	isSet bool
}

func (v NullablePropertyNamesOption) Get() *PropertyNamesOption {
	return v.value
}

func (v *NullablePropertyNamesOption) Set(val *PropertyNamesOption) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesOption) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesOption(val *PropertyNamesOption) *NullablePropertyNamesOption {
	return &NullablePropertyNamesOption{value: val, isSet: true}
}

func (v NullablePropertyNamesOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
