/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AnalyticsFavoriteType the model 'AnalyticsFavoriteType'
type AnalyticsFavoriteType string

// List of AnalyticsFavoriteType
const (
	ANALYTICSFAVORITETYPE_VISUALIZATION       AnalyticsFavoriteType = "VISUALIZATION"
	ANALYTICSFAVORITETYPE_EVENT_VISUALIZATION AnalyticsFavoriteType = "EVENT_VISUALIZATION"
	ANALYTICSFAVORITETYPE_MAP                 AnalyticsFavoriteType = "MAP"
	ANALYTICSFAVORITETYPE_EVENT_REPORT        AnalyticsFavoriteType = "EVENT_REPORT"
	ANALYTICSFAVORITETYPE_EVENT_CHART         AnalyticsFavoriteType = "EVENT_CHART"
	ANALYTICSFAVORITETYPE_DATASET_REPORT      AnalyticsFavoriteType = "DATASET_REPORT"
)

// All allowed values of AnalyticsFavoriteType enum
var AllowedAnalyticsFavoriteTypeEnumValues = []AnalyticsFavoriteType{
	"VISUALIZATION",
	"EVENT_VISUALIZATION",
	"MAP",
	"EVENT_REPORT",
	"EVENT_CHART",
	"DATASET_REPORT",
}

func (v *AnalyticsFavoriteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsFavoriteType(value)
	for _, existing := range AllowedAnalyticsFavoriteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsFavoriteType", value)
}

// NewAnalyticsFavoriteTypeFromValue returns a pointer to a valid AnalyticsFavoriteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsFavoriteTypeFromValue(v string) (*AnalyticsFavoriteType, error) {
	ev := AnalyticsFavoriteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsFavoriteType: valid values are %v", v, AllowedAnalyticsFavoriteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsFavoriteType) IsValid() bool {
	for _, existing := range AllowedAnalyticsFavoriteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsFavoriteType value
func (v AnalyticsFavoriteType) Ptr() *AnalyticsFavoriteType {
	return &v
}

type NullableAnalyticsFavoriteType struct {
	value *AnalyticsFavoriteType
	isSet bool
}

func (v NullableAnalyticsFavoriteType) Get() *AnalyticsFavoriteType {
	return v.value
}

func (v *NullableAnalyticsFavoriteType) Set(val *AnalyticsFavoriteType) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsFavoriteType) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsFavoriteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsFavoriteType(val *AnalyticsFavoriteType) *NullableAnalyticsFavoriteType {
	return &NullableAnalyticsFavoriteType{value: val, isSet: true}
}

func (v NullableAnalyticsFavoriteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsFavoriteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
