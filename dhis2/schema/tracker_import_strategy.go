/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TrackerImportStrategy the model 'TrackerImportStrategy'
type TrackerImportStrategy string

// List of TrackerImportStrategy
const (
	TRACKERIMPORTSTRATEGY_CREATE            TrackerImportStrategy = "CREATE"
	TRACKERIMPORTSTRATEGY_UPDATE            TrackerImportStrategy = "UPDATE"
	TRACKERIMPORTSTRATEGY_CREATE_AND_UPDATE TrackerImportStrategy = "CREATE_AND_UPDATE"
	TRACKERIMPORTSTRATEGY_DELETE            TrackerImportStrategy = "DELETE"
)

// All allowed values of TrackerImportStrategy enum
var AllowedTrackerImportStrategyEnumValues = []TrackerImportStrategy{
	"CREATE",
	"UPDATE",
	"CREATE_AND_UPDATE",
	"DELETE",
}

func (v *TrackerImportStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackerImportStrategy(value)
	for _, existing := range AllowedTrackerImportStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackerImportStrategy", value)
}

// NewTrackerImportStrategyFromValue returns a pointer to a valid TrackerImportStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackerImportStrategyFromValue(v string) (*TrackerImportStrategy, error) {
	ev := TrackerImportStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackerImportStrategy: valid values are %v", v, AllowedTrackerImportStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackerImportStrategy) IsValid() bool {
	for _, existing := range AllowedTrackerImportStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackerImportStrategy value
func (v TrackerImportStrategy) Ptr() *TrackerImportStrategy {
	return &v
}

type NullableTrackerImportStrategy struct {
	value *TrackerImportStrategy
	isSet bool
}

func (v NullableTrackerImportStrategy) Get() *TrackerImportStrategy {
	return v.value
}

func (v *NullableTrackerImportStrategy) Set(val *TrackerImportStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerImportStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerImportStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerImportStrategy(val *TrackerImportStrategy) *NullableTrackerImportStrategy {
	return &NullableTrackerImportStrategy{value: val, isSet: true}
}

func (v NullableTrackerImportStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerImportStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
