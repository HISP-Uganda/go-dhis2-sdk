/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// MergeType the model 'MergeType'
type MergeType string

// List of MergeType
const (
	MERGETYPE_INDICATOR_TYPE        MergeType = "INDICATOR_TYPE"
	MERGETYPE_INDICATOR             MergeType = "INDICATOR"
	MERGETYPE_DATA_ELEMENT          MergeType = "DATA_ELEMENT"
	MERGETYPE_CATEGORY_OPTION       MergeType = "CATEGORY_OPTION"
	MERGETYPE_CATEGORY_OPTION_COMBO MergeType = "CATEGORY_OPTION_COMBO"
)

// All allowed values of MergeType enum
var AllowedMergeTypeEnumValues = []MergeType{
	"INDICATOR_TYPE",
	"INDICATOR",
	"DATA_ELEMENT",
	"CATEGORY_OPTION",
	"CATEGORY_OPTION_COMBO",
}

func (v *MergeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MergeType(value)
	for _, existing := range AllowedMergeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MergeType", value)
}

// NewMergeTypeFromValue returns a pointer to a valid MergeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMergeTypeFromValue(v string) (*MergeType, error) {
	ev := MergeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MergeType: valid values are %v", v, AllowedMergeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MergeType) IsValid() bool {
	for _, existing := range AllowedMergeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MergeType value
func (v MergeType) Ptr() *MergeType {
	return &v
}

type NullableMergeType struct {
	value *MergeType
	isSet bool
}

func (v NullableMergeType) Get() *MergeType {
	return v.value
}

func (v *NullableMergeType) Set(val *MergeType) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeType) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeType(val *MergeType) *NullableMergeType {
	return &NullableMergeType{value: val, isSet: true}
}

func (v NullableMergeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
