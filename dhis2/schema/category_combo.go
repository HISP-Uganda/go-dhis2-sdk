/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CategoryCombo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategoryCombo{}

// CategoryCombo struct for CategoryCombo
type CategoryCombo struct {
	Access               *Access                  `json:"access,omitempty"`
	AttributeValues      []AttributeValue         `json:"attributeValues,omitempty"`
	Categories           []BaseIdentifiableObject `json:"categories,omitempty"`
	CategoryOptionCombos []BaseIdentifiableObject `json:"categoryOptionCombos,omitempty"`
	Code                 *string                  `json:"code,omitempty"`
	Created              *time.Time               `json:"created,omitempty"`
	CreatedBy            *UserDto                 `json:"createdBy,omitempty"`
	DataDimensionType    DataDimensionType        `json:"dataDimensionType"`
	DisplayName          *string                  `json:"displayName,omitempty"`
	Favorite             *bool                    `json:"favorite,omitempty"`
	Favorites            []string                 `json:"favorites,omitempty"`
	Href                 *string                  `json:"href,omitempty"`
	Id                   *string                  `json:"id,omitempty"`
	IsDefault            *bool                    `json:"isDefault,omitempty"`
	LastUpdated          *time.Time               `json:"lastUpdated,omitempty"`
	LastUpdatedBy        *UserDto                 `json:"lastUpdatedBy,omitempty"`
	Name                 *string                  `json:"name,omitempty"`
	Sharing              *Sharing                 `json:"sharing,omitempty"`
	SkipTotal            *bool                    `json:"skipTotal,omitempty"`
	Translations         []Translation            `json:"translations,omitempty"`
}

type _CategoryCombo CategoryCombo

// NewCategoryCombo instantiates a new CategoryCombo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryCombo(dataDimensionType DataDimensionType) *CategoryCombo {
	this := CategoryCombo{}
	this.DataDimensionType = dataDimensionType
	return &this
}

// NewCategoryComboWithDefaults instantiates a new CategoryCombo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryComboWithDefaults() *CategoryCombo {
	this := CategoryCombo{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *CategoryCombo) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *CategoryCombo) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *CategoryCombo) SetAccess(v Access) {
	o.Access = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *CategoryCombo) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *CategoryCombo) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *CategoryCombo) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *CategoryCombo) GetCategories() []BaseIdentifiableObject {
	if o == nil || IsNil(o.Categories) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetCategoriesOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *CategoryCombo) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []BaseIdentifiableObject and assigns it to the Categories field.
func (o *CategoryCombo) SetCategories(v []BaseIdentifiableObject) {
	o.Categories = v
}

// GetCategoryOptionCombos returns the CategoryOptionCombos field value if set, zero value otherwise.
func (o *CategoryCombo) GetCategoryOptionCombos() []BaseIdentifiableObject {
	if o == nil || IsNil(o.CategoryOptionCombos) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.CategoryOptionCombos
}

// GetCategoryOptionCombosOk returns a tuple with the CategoryOptionCombos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetCategoryOptionCombosOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.CategoryOptionCombos) {
		return nil, false
	}
	return o.CategoryOptionCombos, true
}

// HasCategoryOptionCombos returns a boolean if a field has been set.
func (o *CategoryCombo) HasCategoryOptionCombos() bool {
	if o != nil && !IsNil(o.CategoryOptionCombos) {
		return true
	}

	return false
}

// SetCategoryOptionCombos gets a reference to the given []BaseIdentifiableObject and assigns it to the CategoryOptionCombos field.
func (o *CategoryCombo) SetCategoryOptionCombos(v []BaseIdentifiableObject) {
	o.CategoryOptionCombos = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CategoryCombo) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CategoryCombo) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CategoryCombo) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CategoryCombo) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CategoryCombo) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *CategoryCombo) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *CategoryCombo) GetCreatedBy() UserDto {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserDto
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetCreatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *CategoryCombo) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserDto and assigns it to the CreatedBy field.
func (o *CategoryCombo) SetCreatedBy(v UserDto) {
	o.CreatedBy = &v
}

// GetDataDimensionType returns the DataDimensionType field value
func (o *CategoryCombo) GetDataDimensionType() DataDimensionType {
	if o == nil {
		var ret DataDimensionType
		return ret
	}

	return o.DataDimensionType
}

// GetDataDimensionTypeOk returns a tuple with the DataDimensionType field value
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetDataDimensionTypeOk() (*DataDimensionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataDimensionType, true
}

// SetDataDimensionType sets field value
func (o *CategoryCombo) SetDataDimensionType(v DataDimensionType) {
	o.DataDimensionType = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CategoryCombo) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CategoryCombo) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CategoryCombo) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *CategoryCombo) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *CategoryCombo) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *CategoryCombo) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *CategoryCombo) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *CategoryCombo) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *CategoryCombo) SetFavorites(v []string) {
	o.Favorites = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *CategoryCombo) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *CategoryCombo) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *CategoryCombo) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CategoryCombo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CategoryCombo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CategoryCombo) SetId(v string) {
	o.Id = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *CategoryCombo) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *CategoryCombo) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *CategoryCombo) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *CategoryCombo) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *CategoryCombo) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *CategoryCombo) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *CategoryCombo) GetLastUpdatedBy() UserDto {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret UserDto
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetLastUpdatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *CategoryCombo) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given UserDto and assigns it to the LastUpdatedBy field.
func (o *CategoryCombo) SetLastUpdatedBy(v UserDto) {
	o.LastUpdatedBy = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CategoryCombo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CategoryCombo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CategoryCombo) SetName(v string) {
	o.Name = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *CategoryCombo) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *CategoryCombo) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *CategoryCombo) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetSkipTotal returns the SkipTotal field value if set, zero value otherwise.
func (o *CategoryCombo) GetSkipTotal() bool {
	if o == nil || IsNil(o.SkipTotal) {
		var ret bool
		return ret
	}
	return *o.SkipTotal
}

// GetSkipTotalOk returns a tuple with the SkipTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetSkipTotalOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipTotal) {
		return nil, false
	}
	return o.SkipTotal, true
}

// HasSkipTotal returns a boolean if a field has been set.
func (o *CategoryCombo) HasSkipTotal() bool {
	if o != nil && !IsNil(o.SkipTotal) {
		return true
	}

	return false
}

// SetSkipTotal gets a reference to the given bool and assigns it to the SkipTotal field.
func (o *CategoryCombo) SetSkipTotal(v bool) {
	o.SkipTotal = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *CategoryCombo) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCombo) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *CategoryCombo) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *CategoryCombo) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o CategoryCombo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategoryCombo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.CategoryOptionCombos) {
		toSerialize["categoryOptionCombos"] = o.CategoryOptionCombos
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	toSerialize["dataDimensionType"] = o.DataDimensionType
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.SkipTotal) {
		toSerialize["skipTotal"] = o.SkipTotal
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

func (o *CategoryCombo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataDimensionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCategoryCombo := _CategoryCombo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCategoryCombo)

	if err != nil {
		return err
	}

	*o = CategoryCombo(varCategoryCombo)

	return err
}

type NullableCategoryCombo struct {
	value *CategoryCombo
	isSet bool
}

func (v NullableCategoryCombo) Get() *CategoryCombo {
	return v.value
}

func (v *NullableCategoryCombo) Set(val *CategoryCombo) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryCombo) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryCombo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryCombo(val *CategoryCombo) *NullableCategoryCombo {
	return &NullableCategoryCombo{value: val, isSet: true}
}

func (v NullableCategoryCombo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryCombo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
