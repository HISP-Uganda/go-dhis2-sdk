/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesUserGroup the model 'PropertyNamesUserGroup'
type PropertyNamesUserGroup string

// List of PropertyNames_UserGroup
const (
	PROPERTYNAMESUSERGROUP_ACCESS              PropertyNamesUserGroup = "access"
	PROPERTYNAMESUSERGROUP_ATTRIBUTE_VALUES    PropertyNamesUserGroup = "attributeValues"
	PROPERTYNAMESUSERGROUP_CODE                PropertyNamesUserGroup = "code"
	PROPERTYNAMESUSERGROUP_CREATED             PropertyNamesUserGroup = "created"
	PROPERTYNAMESUSERGROUP_CREATED_BY          PropertyNamesUserGroup = "createdBy"
	PROPERTYNAMESUSERGROUP_DISPLAY_NAME        PropertyNamesUserGroup = "displayName"
	PROPERTYNAMESUSERGROUP_EXTERNAL_ACCESS     PropertyNamesUserGroup = "externalAccess"
	PROPERTYNAMESUSERGROUP_FAVORITE            PropertyNamesUserGroup = "favorite"
	PROPERTYNAMESUSERGROUP_FAVORITES           PropertyNamesUserGroup = "favorites"
	PROPERTYNAMESUSERGROUP_HREF                PropertyNamesUserGroup = "href"
	PROPERTYNAMESUSERGROUP_ID                  PropertyNamesUserGroup = "id"
	PROPERTYNAMESUSERGROUP_LAST_UPDATED        PropertyNamesUserGroup = "lastUpdated"
	PROPERTYNAMESUSERGROUP_LAST_UPDATED_BY     PropertyNamesUserGroup = "lastUpdatedBy"
	PROPERTYNAMESUSERGROUP_MANAGED_BY_GROUPS   PropertyNamesUserGroup = "managedByGroups"
	PROPERTYNAMESUSERGROUP_MANAGED_GROUPS      PropertyNamesUserGroup = "managedGroups"
	PROPERTYNAMESUSERGROUP_NAME                PropertyNamesUserGroup = "name"
	PROPERTYNAMESUSERGROUP_PUBLIC_ACCESS       PropertyNamesUserGroup = "publicAccess"
	PROPERTYNAMESUSERGROUP_SHARING             PropertyNamesUserGroup = "sharing"
	PROPERTYNAMESUSERGROUP_TRANSLATIONS        PropertyNamesUserGroup = "translations"
	PROPERTYNAMESUSERGROUP_USER                PropertyNamesUserGroup = "user"
	PROPERTYNAMESUSERGROUP_USER_ACCESSES       PropertyNamesUserGroup = "userAccesses"
	PROPERTYNAMESUSERGROUP_USER_GROUP_ACCESSES PropertyNamesUserGroup = "userGroupAccesses"
	PROPERTYNAMESUSERGROUP_USERS               PropertyNamesUserGroup = "users"
)

// All allowed values of PropertyNamesUserGroup enum
var AllowedPropertyNamesUserGroupEnumValues = []PropertyNamesUserGroup{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"managedByGroups",
	"managedGroups",
	"name",
	"publicAccess",
	"sharing",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"users",
}

func (v *PropertyNamesUserGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesUserGroup(value)
	for _, existing := range AllowedPropertyNamesUserGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesUserGroup", value)
}

// NewPropertyNamesUserGroupFromValue returns a pointer to a valid PropertyNamesUserGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesUserGroupFromValue(v string) (*PropertyNamesUserGroup, error) {
	ev := PropertyNamesUserGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesUserGroup: valid values are %v", v, AllowedPropertyNamesUserGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesUserGroup) IsValid() bool {
	for _, existing := range AllowedPropertyNamesUserGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_UserGroup value
func (v PropertyNamesUserGroup) Ptr() *PropertyNamesUserGroup {
	return &v
}

type NullablePropertyNamesUserGroup struct {
	value *PropertyNamesUserGroup
	isSet bool
}

func (v NullablePropertyNamesUserGroup) Get() *PropertyNamesUserGroup {
	return v.value
}

func (v *NullablePropertyNamesUserGroup) Set(val *PropertyNamesUserGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesUserGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesUserGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesUserGroup(val *PropertyNamesUserGroup) *NullablePropertyNamesUserGroup {
	return &NullablePropertyNamesUserGroup{value: val, isSet: true}
}

func (v NullablePropertyNamesUserGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesUserGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
