/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// JobType the model 'JobType'
type JobType string

// List of JobType
const (
	JOBTYPE_DATA_INTEGRITY                         JobType = "DATA_INTEGRITY"
	JOBTYPE_DATA_INTEGRITY_DETAILS                 JobType = "DATA_INTEGRITY_DETAILS"
	JOBTYPE_RESOURCE_TABLE                         JobType = "RESOURCE_TABLE"
	JOBTYPE_ANALYTICS_TABLE                        JobType = "ANALYTICS_TABLE"
	JOBTYPE_CONTINUOUS_ANALYTICS_TABLE             JobType = "CONTINUOUS_ANALYTICS_TABLE"
	JOBTYPE_DATA_SYNC                              JobType = "DATA_SYNC"
	JOBTYPE_META_DATA_SYNC                         JobType = "META_DATA_SYNC"
	JOBTYPE_AGGREGATE_DATA_EXCHANGE                JobType = "AGGREGATE_DATA_EXCHANGE"
	JOBTYPE_SEND_SCHEDULED_MESSAGE                 JobType = "SEND_SCHEDULED_MESSAGE"
	JOBTYPE_PROGRAM_NOTIFICATIONS                  JobType = "PROGRAM_NOTIFICATIONS"
	JOBTYPE_MONITORING                             JobType = "MONITORING"
	JOBTYPE_PUSH_ANALYSIS                          JobType = "PUSH_ANALYSIS"
	JOBTYPE_HTML_PUSH_ANALYTICS                    JobType = "HTML_PUSH_ANALYTICS"
	JOBTYPE_TRACKER_SEARCH_OPTIMIZATION            JobType = "TRACKER_SEARCH_OPTIMIZATION"
	JOBTYPE_PREDICTOR                              JobType = "PREDICTOR"
	JOBTYPE_MATERIALIZED_SQL_VIEW_UPDATE           JobType = "MATERIALIZED_SQL_VIEW_UPDATE"
	JOBTYPE_DISABLE_INACTIVE_USERS                 JobType = "DISABLE_INACTIVE_USERS"
	JOBTYPE_TEST                                   JobType = "TEST"
	JOBTYPE_LOCK_EXCEPTION_CLEANUP                 JobType = "LOCK_EXCEPTION_CLEANUP"
	JOBTYPE_MOCK                                   JobType = "MOCK"
	JOBTYPE_SMS_SEND                               JobType = "SMS_SEND"
	JOBTYPE_SMS_INBOUND_PROCESSING                 JobType = "SMS_INBOUND_PROCESSING"
	JOBTYPE_TRACKER_IMPORT_JOB                     JobType = "TRACKER_IMPORT_JOB"
	JOBTYPE_TRACKER_IMPORT_NOTIFICATION_JOB        JobType = "TRACKER_IMPORT_NOTIFICATION_JOB"
	JOBTYPE_TRACKER_IMPORT_RULE_ENGINE_JOB         JobType = "TRACKER_IMPORT_RULE_ENGINE_JOB"
	JOBTYPE_IMAGE_PROCESSING                       JobType = "IMAGE_PROCESSING"
	JOBTYPE_COMPLETE_DATA_SET_REGISTRATION_IMPORT  JobType = "COMPLETE_DATA_SET_REGISTRATION_IMPORT"
	JOBTYPE_DATAVALUE_IMPORT_INTERNAL              JobType = "DATAVALUE_IMPORT_INTERNAL"
	JOBTYPE_METADATA_IMPORT                        JobType = "METADATA_IMPORT"
	JOBTYPE_DATAVALUE_IMPORT                       JobType = "DATAVALUE_IMPORT"
	JOBTYPE_GEOJSON_IMPORT                         JobType = "GEOJSON_IMPORT"
	JOBTYPE_GML_IMPORT                             JobType = "GML_IMPORT"
	JOBTYPE_HOUSEKEEPING                           JobType = "HOUSEKEEPING"
	JOBTYPE_DATA_SET_NOTIFICATION                  JobType = "DATA_SET_NOTIFICATION"
	JOBTYPE_CREDENTIALS_EXPIRY_ALERT               JobType = "CREDENTIALS_EXPIRY_ALERT"
	JOBTYPE_DATA_STATISTICS                        JobType = "DATA_STATISTICS"
	JOBTYPE_FILE_RESOURCE_CLEANUP                  JobType = "FILE_RESOURCE_CLEANUP"
	JOBTYPE_ACCOUNT_EXPIRY_ALERT                   JobType = "ACCOUNT_EXPIRY_ALERT"
	JOBTYPE_VALIDATION_RESULTS_NOTIFICATION        JobType = "VALIDATION_RESULTS_NOTIFICATION"
	JOBTYPE_REMOVE_USED_OR_EXPIRED_RESERVED_VALUES JobType = "REMOVE_USED_OR_EXPIRED_RESERVED_VALUES"
	JOBTYPE_SYSTEM_VERSION_UPDATE_CHECK            JobType = "SYSTEM_VERSION_UPDATE_CHECK"
)

// All allowed values of JobType enum
var AllowedJobTypeEnumValues = []JobType{
	"DATA_INTEGRITY",
	"DATA_INTEGRITY_DETAILS",
	"RESOURCE_TABLE",
	"ANALYTICS_TABLE",
	"CONTINUOUS_ANALYTICS_TABLE",
	"DATA_SYNC",
	"META_DATA_SYNC",
	"AGGREGATE_DATA_EXCHANGE",
	"SEND_SCHEDULED_MESSAGE",
	"PROGRAM_NOTIFICATIONS",
	"MONITORING",
	"PUSH_ANALYSIS",
	"HTML_PUSH_ANALYTICS",
	"TRACKER_SEARCH_OPTIMIZATION",
	"PREDICTOR",
	"MATERIALIZED_SQL_VIEW_UPDATE",
	"DISABLE_INACTIVE_USERS",
	"TEST",
	"LOCK_EXCEPTION_CLEANUP",
	"MOCK",
	"SMS_SEND",
	"SMS_INBOUND_PROCESSING",
	"TRACKER_IMPORT_JOB",
	"TRACKER_IMPORT_NOTIFICATION_JOB",
	"TRACKER_IMPORT_RULE_ENGINE_JOB",
	"IMAGE_PROCESSING",
	"COMPLETE_DATA_SET_REGISTRATION_IMPORT",
	"DATAVALUE_IMPORT_INTERNAL",
	"METADATA_IMPORT",
	"DATAVALUE_IMPORT",
	"GEOJSON_IMPORT",
	"GML_IMPORT",
	"HOUSEKEEPING",
	"DATA_SET_NOTIFICATION",
	"CREDENTIALS_EXPIRY_ALERT",
	"DATA_STATISTICS",
	"FILE_RESOURCE_CLEANUP",
	"ACCOUNT_EXPIRY_ALERT",
	"VALIDATION_RESULTS_NOTIFICATION",
	"REMOVE_USED_OR_EXPIRED_RESERVED_VALUES",
	"SYSTEM_VERSION_UPDATE_CHECK",
}

func (v *JobType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobType(value)
	for _, existing := range AllowedJobTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobType", value)
}

// NewJobTypeFromValue returns a pointer to a valid JobType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobTypeFromValue(v string) (*JobType, error) {
	ev := JobType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobType: valid values are %v", v, AllowedJobTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobType) IsValid() bool {
	for _, existing := range AllowedJobTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobType value
func (v JobType) Ptr() *JobType {
	return &v
}

type NullableJobType struct {
	value *JobType
	isSet bool
}

func (v NullableJobType) Get() *JobType {
	return v.value
}

func (v *NullableJobType) Set(val *JobType) {
	v.value = val
	v.isSet = true
}

func (v NullableJobType) IsSet() bool {
	return v.isSet
}

func (v *NullableJobType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobType(val *JobType) *NullableJobType {
	return &NullableJobType{value: val, isSet: true}
}

func (v NullableJobType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
