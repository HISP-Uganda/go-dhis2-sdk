/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response - struct for LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response
type LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response struct {
	LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf *LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf
	ArrayOfLockException                                                 *[]LockException
}

// LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOfAsLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response is a convenience function that returns LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf wrapped in LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response
func LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOfAsLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response(v *LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf) LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response {
	return LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response{
		LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf: v,
	}
}

// []LockExceptionAsLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response is a convenience function that returns []LockException wrapped in LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response
func ArrayOfLockExceptionAsLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response(v *[]LockException) LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response {
	return LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response{
		ArrayOfLockException: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf)
	if err == nil {
		jsonLockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf, _ := json.Marshal(dst.LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf)
		if string(jsonLockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf) == "{}" { // empty struct
			dst.LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf = nil
		} else {
			match++
		}
	} else {
		dst.LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf = nil
	}

	// try to unmarshal data into ArrayOfLockException
	err = newStrictDecoder(data).Decode(&dst.ArrayOfLockException)
	if err == nil {
		jsonArrayOfLockException, _ := json.Marshal(dst.ArrayOfLockException)
		if string(jsonArrayOfLockException) == "{}" { // empty struct
			dst.ArrayOfLockException = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfLockException = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf = nil
		dst.ArrayOfLockException = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response) MarshalJSON() ([]byte, error) {
	if src.LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf != nil {
		return json.Marshal(&src.LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf)
	}

	if src.ArrayOfLockException != nil {
		return json.Marshal(&src.ArrayOfLockException)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf != nil {
		return obj.LockExceptionGetObjectListGistGetObjectListGistAsCsv200ResponseOneOf
	}

	if obj.ArrayOfLockException != nil {
		return obj.ArrayOfLockException
	}

	// all schemas are nil
	return nil
}

type NullableLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response struct {
	value *LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response
	isSet bool
}

func (v NullableLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response) Get() *LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response {
	return v.value
}

func (v *NullableLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response) Set(val *LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response(val *LockExceptionGetObjectListGistGetObjectListGistAsCsv200Response) *NullableLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response {
	return &NullableLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response{value: val, isSet: true}
}

func (v NullableLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockExceptionGetObjectListGistGetObjectListGistAsCsv200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
