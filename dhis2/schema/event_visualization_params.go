/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the EventVisualizationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventVisualizationParams{}

// EventVisualizationParams struct for EventVisualizationParams
type EventVisualizationParams struct {
	AggregationType                    AggregationType                                   `json:"aggregationType"`
	AttributeDimensions                []TrackedEntityAttributeDimensionParams           `json:"attributeDimensions,omitempty"`
	AttributeValueDimension            *TrackedEntityAttributeParams                     `json:"attributeValueDimension,omitempty"`
	AttributeValues                    []AttributeValueParams                            `json:"attributeValues,omitempty"`
	BaseLineLabel                      *string                                           `json:"baseLineLabel,omitempty"`
	BaseLineValue                      *float64                                          `json:"baseLineValue,omitempty"`
	CategoryDimensions                 []CategoryDimensionParams                         `json:"categoryDimensions,omitempty"`
	CategoryOptionGroupSetDimensions   []CategoryOptionGroupSetDimensionParams           `json:"categoryOptionGroupSetDimensions,omitempty"`
	Code                               *string                                           `json:"code,omitempty"`
	ColSubTotals                       *bool                                             `json:"colSubTotals,omitempty"`
	ColTotals                          *bool                                             `json:"colTotals,omitempty"`
	CollapseDataDimensions             *bool                                             `json:"collapseDataDimensions,omitempty"`
	ColumnDimensions                   []string                                          `json:"columnDimensions,omitempty"`
	Columns                            []EventChartParamsColumnsInner                    `json:"columns,omitempty"`
	CompletedOnly                      *bool                                             `json:"completedOnly,omitempty"`
	Created                            *time.Time                                        `json:"created,omitempty"`
	CreatedBy                          *AggregateDataExchangeParamsCreatedBy             `json:"createdBy,omitempty"`
	CumulativeValues                   *bool                                             `json:"cumulativeValues,omitempty"`
	DataDimensionItems                 []DataDimensionItemParams                         `json:"dataDimensionItems,omitempty"`
	DataElementDimensions              []TrackedEntityDataElementDimensionParams         `json:"dataElementDimensions,omitempty"`
	DataElementGroupSetDimensions      []DataElementGroupSetDimensionParams              `json:"dataElementGroupSetDimensions,omitempty"`
	DataElementValueDimension          *DataElementParams                                `json:"dataElementValueDimension,omitempty"`
	DataType                           EventDataType                                     `json:"dataType"`
	Description                        *string                                           `json:"description,omitempty"`
	DigitGroupSeparator                DigitGroupSeparator                               `json:"digitGroupSeparator"`
	DisplayBaseLineLabel               *string                                           `json:"displayBaseLineLabel,omitempty"`
	DisplayDensity                     DisplayDensity                                    `json:"displayDensity"`
	DisplayDescription                 *string                                           `json:"displayDescription,omitempty"`
	DisplayDomainAxisLabel             *string                                           `json:"displayDomainAxisLabel,omitempty"`
	DisplayFormName                    *string                                           `json:"displayFormName,omitempty"`
	DisplayName                        *string                                           `json:"displayName,omitempty"`
	DisplayRangeAxisLabel              *string                                           `json:"displayRangeAxisLabel,omitempty"`
	DisplayShortName                   *string                                           `json:"displayShortName,omitempty"`
	DisplaySubtitle                    *string                                           `json:"displaySubtitle,omitempty"`
	DisplayTargetLineLabel             *string                                           `json:"displayTargetLineLabel,omitempty"`
	DisplayTitle                       *string                                           `json:"displayTitle,omitempty"`
	DomainAxisLabel                    *string                                           `json:"domainAxisLabel,omitempty"`
	EndDate                            *time.Time                                        `json:"endDate,omitempty"`
	EventStatus                        EventStatus                                       `json:"eventStatus"`
	Favorite                           *bool                                             `json:"favorite,omitempty"`
	Favorites                          []string                                          `json:"favorites,omitempty"`
	FilterDimensions                   []string                                          `json:"filterDimensions,omitempty"`
	Filters                            []EventChartParamsColumnsInner                    `json:"filters,omitempty"`
	FontSize                           FontSize                                          `json:"fontSize"`
	FormName                           *string                                           `json:"formName,omitempty"`
	HideEmptyRowItems                  HideEmptyItemStrategy                             `json:"hideEmptyRowItems"`
	HideEmptyRows                      *bool                                             `json:"hideEmptyRows,omitempty"`
	HideLegend                         *bool                                             `json:"hideLegend,omitempty"`
	HideNaData                         *bool                                             `json:"hideNaData,omitempty"`
	HideSubtitle                       *bool                                             `json:"hideSubtitle,omitempty"`
	HideTitle                          *bool                                             `json:"hideTitle,omitempty"`
	Id                                 *string                                           `json:"id,omitempty"`
	Interpretations                    []DataSetParamsInterpretationsInner               `json:"interpretations,omitempty"`
	ItemOrganisationUnitGroups         []EventChartParamsItemOrganisationUnitGroupsInner `json:"itemOrganisationUnitGroups,omitempty"`
	LastUpdated                        *time.Time                                        `json:"lastUpdated,omitempty"`
	LastUpdatedBy                      *AggregateDataExchangeParamsCreatedBy             `json:"lastUpdatedBy,omitempty"`
	Legacy                             *bool                                             `json:"legacy,omitempty"`
	Legend                             *LegendDefinitionsParams                          `json:"legend,omitempty"`
	MetaData                           *map[string]MetadataItemParams                    `json:"metaData,omitempty"`
	Name                               *string                                           `json:"name,omitempty"`
	NoSpaceBetweenColumns              *bool                                             `json:"noSpaceBetweenColumns,omitempty"`
	OrgUnitField                       *string                                           `json:"orgUnitField,omitempty"`
	OrganisationUnitGroupSetDimensions []OrganisationUnitGroupSetDimensionParams         `json:"organisationUnitGroupSetDimensions,omitempty"`
	OrganisationUnitLevels             []int32                                           `json:"organisationUnitLevels,omitempty"`
	OrganisationUnits                  []CategoryOptionParamsOrganisationUnitsInner      `json:"organisationUnits,omitempty"`
	OutputType                         EventOutputType                                   `json:"outputType"`
	PercentStackedValues               *bool                                             `json:"percentStackedValues,omitempty"`
	Periods                            []string                                          `json:"periods,omitempty"`
	Program                            *ProgramParams                                    `json:"program,omitempty"`
	ProgramDimensions                  []EventVisualizationParamsProgramDimensionsInner  `json:"programDimensions,omitempty"`
	ProgramIndicatorDimensions         []TrackedEntityProgramIndicatorDimensionParams    `json:"programIndicatorDimensions,omitempty"`
	ProgramStage                       *ProgramStageParams                               `json:"programStage,omitempty"`
	ProgramStatus                      EnrollmentStatus                                  `json:"programStatus"`
	RangeAxisDecimals                  *int32                                            `json:"rangeAxisDecimals,omitempty"`
	RangeAxisLabel                     *string                                           `json:"rangeAxisLabel,omitempty"`
	RangeAxisMaxValue                  *float64                                          `json:"rangeAxisMaxValue,omitempty"`
	RangeAxisMinValue                  *float64                                          `json:"rangeAxisMinValue,omitempty"`
	RangeAxisSteps                     *int32                                            `json:"rangeAxisSteps,omitempty"`
	RegressionType                     RegressionType                                    `json:"regressionType"`
	RelativePeriods                    *RelativePeriods                                  `json:"relativePeriods,omitempty"`
	Repetitions                        []EventRepetition                                 `json:"repetitions,omitempty"`
	RowDimensions                      []string                                          `json:"rowDimensions,omitempty"`
	RowSubTotals                       *bool                                             `json:"rowSubTotals,omitempty"`
	RowTotals                          *bool                                             `json:"rowTotals,omitempty"`
	Rows                               []EventChartParamsColumnsInner                    `json:"rows,omitempty"`
	Sharing                            *Sharing                                          `json:"sharing,omitempty"`
	ShortName                          *string                                           `json:"shortName,omitempty"`
	ShowData                           *bool                                             `json:"showData,omitempty"`
	ShowDimensionLabels                *bool                                             `json:"showDimensionLabels,omitempty"`
	ShowHierarchy                      *bool                                             `json:"showHierarchy,omitempty"`
	SimpleDimensions                   []SimpleDimension                                 `json:"simpleDimensions,omitempty"`
	SkipRounding                       *bool                                             `json:"skipRounding,omitempty"`
	SortOrder                          int32                                             `json:"sortOrder"`
	Sorting                            []Sorting                                         `json:"sorting,omitempty"`
	StartDate                          *time.Time                                        `json:"startDate,omitempty"`
	Subscribed                         *bool                                             `json:"subscribed,omitempty"`
	Subscribers                        []string                                          `json:"subscribers,omitempty"`
	Subtitle                           *string                                           `json:"subtitle,omitempty"`
	TargetLineLabel                    *string                                           `json:"targetLineLabel,omitempty"`
	TargetLineValue                    *float64                                          `json:"targetLineValue,omitempty"`
	TimeField                          *string                                           `json:"timeField,omitempty"`
	Title                              *string                                           `json:"title,omitempty"`
	TopLimit                           int32                                             `json:"topLimit"`
	TrackedEntityType                  *TrackedEntityTypeParams                          `json:"trackedEntityType,omitempty"`
	Translations                       []Translation                                     `json:"translations,omitempty"`
	Type                               EventVisualizationType                            `json:"type"`
	UserOrgUnitType                    UserOrgUnitType                                   `json:"userOrgUnitType"`
	UserOrganisationUnit               *bool                                             `json:"userOrganisationUnit,omitempty"`
	UserOrganisationUnitChildren       *bool                                             `json:"userOrganisationUnitChildren,omitempty"`
	UserOrganisationUnitGrandChildren  *bool                                             `json:"userOrganisationUnitGrandChildren,omitempty"`
	Value                              *BaseDimensionalObjectParamsItemsInner            `json:"value,omitempty"`
}

type _EventVisualizationParams EventVisualizationParams

// NewEventVisualizationParams instantiates a new EventVisualizationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventVisualizationParams(aggregationType AggregationType, dataType EventDataType, digitGroupSeparator DigitGroupSeparator, displayDensity DisplayDensity, eventStatus EventStatus, fontSize FontSize, hideEmptyRowItems HideEmptyItemStrategy, outputType EventOutputType, programStatus EnrollmentStatus, regressionType RegressionType, sortOrder int32, topLimit int32, type_ EventVisualizationType, userOrgUnitType UserOrgUnitType) *EventVisualizationParams {
	this := EventVisualizationParams{}
	this.AggregationType = aggregationType
	this.DataType = dataType
	this.DigitGroupSeparator = digitGroupSeparator
	this.DisplayDensity = displayDensity
	this.EventStatus = eventStatus
	this.FontSize = fontSize
	this.HideEmptyRowItems = hideEmptyRowItems
	this.OutputType = outputType
	this.ProgramStatus = programStatus
	this.RegressionType = regressionType
	this.SortOrder = sortOrder
	this.TopLimit = topLimit
	this.Type = type_
	this.UserOrgUnitType = userOrgUnitType
	return &this
}

// NewEventVisualizationParamsWithDefaults instantiates a new EventVisualizationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventVisualizationParamsWithDefaults() *EventVisualizationParams {
	this := EventVisualizationParams{}
	return &this
}

// GetAggregationType returns the AggregationType field value
func (o *EventVisualizationParams) GetAggregationType() AggregationType {
	if o == nil {
		var ret AggregationType
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetAggregationTypeOk() (*AggregationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *EventVisualizationParams) SetAggregationType(v AggregationType) {
	o.AggregationType = v
}

// GetAttributeDimensions returns the AttributeDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetAttributeDimensions() []TrackedEntityAttributeDimensionParams {
	if o == nil || IsNil(o.AttributeDimensions) {
		var ret []TrackedEntityAttributeDimensionParams
		return ret
	}
	return o.AttributeDimensions
}

// GetAttributeDimensionsOk returns a tuple with the AttributeDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetAttributeDimensionsOk() ([]TrackedEntityAttributeDimensionParams, bool) {
	if o == nil || IsNil(o.AttributeDimensions) {
		return nil, false
	}
	return o.AttributeDimensions, true
}

// HasAttributeDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasAttributeDimensions() bool {
	if o != nil && !IsNil(o.AttributeDimensions) {
		return true
	}

	return false
}

// SetAttributeDimensions gets a reference to the given []TrackedEntityAttributeDimensionParams and assigns it to the AttributeDimensions field.
func (o *EventVisualizationParams) SetAttributeDimensions(v []TrackedEntityAttributeDimensionParams) {
	o.AttributeDimensions = v
}

// GetAttributeValueDimension returns the AttributeValueDimension field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetAttributeValueDimension() TrackedEntityAttributeParams {
	if o == nil || IsNil(o.AttributeValueDimension) {
		var ret TrackedEntityAttributeParams
		return ret
	}
	return *o.AttributeValueDimension
}

// GetAttributeValueDimensionOk returns a tuple with the AttributeValueDimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetAttributeValueDimensionOk() (*TrackedEntityAttributeParams, bool) {
	if o == nil || IsNil(o.AttributeValueDimension) {
		return nil, false
	}
	return o.AttributeValueDimension, true
}

// HasAttributeValueDimension returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasAttributeValueDimension() bool {
	if o != nil && !IsNil(o.AttributeValueDimension) {
		return true
	}

	return false
}

// SetAttributeValueDimension gets a reference to the given TrackedEntityAttributeParams and assigns it to the AttributeValueDimension field.
func (o *EventVisualizationParams) SetAttributeValueDimension(v TrackedEntityAttributeParams) {
	o.AttributeValueDimension = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *EventVisualizationParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetBaseLineLabel returns the BaseLineLabel field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetBaseLineLabel() string {
	if o == nil || IsNil(o.BaseLineLabel) {
		var ret string
		return ret
	}
	return *o.BaseLineLabel
}

// GetBaseLineLabelOk returns a tuple with the BaseLineLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetBaseLineLabelOk() (*string, bool) {
	if o == nil || IsNil(o.BaseLineLabel) {
		return nil, false
	}
	return o.BaseLineLabel, true
}

// HasBaseLineLabel returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasBaseLineLabel() bool {
	if o != nil && !IsNil(o.BaseLineLabel) {
		return true
	}

	return false
}

// SetBaseLineLabel gets a reference to the given string and assigns it to the BaseLineLabel field.
func (o *EventVisualizationParams) SetBaseLineLabel(v string) {
	o.BaseLineLabel = &v
}

// GetBaseLineValue returns the BaseLineValue field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetBaseLineValue() float64 {
	if o == nil || IsNil(o.BaseLineValue) {
		var ret float64
		return ret
	}
	return *o.BaseLineValue
}

// GetBaseLineValueOk returns a tuple with the BaseLineValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetBaseLineValueOk() (*float64, bool) {
	if o == nil || IsNil(o.BaseLineValue) {
		return nil, false
	}
	return o.BaseLineValue, true
}

// HasBaseLineValue returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasBaseLineValue() bool {
	if o != nil && !IsNil(o.BaseLineValue) {
		return true
	}

	return false
}

// SetBaseLineValue gets a reference to the given float64 and assigns it to the BaseLineValue field.
func (o *EventVisualizationParams) SetBaseLineValue(v float64) {
	o.BaseLineValue = &v
}

// GetCategoryDimensions returns the CategoryDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetCategoryDimensions() []CategoryDimensionParams {
	if o == nil || IsNil(o.CategoryDimensions) {
		var ret []CategoryDimensionParams
		return ret
	}
	return o.CategoryDimensions
}

// GetCategoryDimensionsOk returns a tuple with the CategoryDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetCategoryDimensionsOk() ([]CategoryDimensionParams, bool) {
	if o == nil || IsNil(o.CategoryDimensions) {
		return nil, false
	}
	return o.CategoryDimensions, true
}

// HasCategoryDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasCategoryDimensions() bool {
	if o != nil && !IsNil(o.CategoryDimensions) {
		return true
	}

	return false
}

// SetCategoryDimensions gets a reference to the given []CategoryDimensionParams and assigns it to the CategoryDimensions field.
func (o *EventVisualizationParams) SetCategoryDimensions(v []CategoryDimensionParams) {
	o.CategoryDimensions = v
}

// GetCategoryOptionGroupSetDimensions returns the CategoryOptionGroupSetDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetCategoryOptionGroupSetDimensions() []CategoryOptionGroupSetDimensionParams {
	if o == nil || IsNil(o.CategoryOptionGroupSetDimensions) {
		var ret []CategoryOptionGroupSetDimensionParams
		return ret
	}
	return o.CategoryOptionGroupSetDimensions
}

// GetCategoryOptionGroupSetDimensionsOk returns a tuple with the CategoryOptionGroupSetDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetCategoryOptionGroupSetDimensionsOk() ([]CategoryOptionGroupSetDimensionParams, bool) {
	if o == nil || IsNil(o.CategoryOptionGroupSetDimensions) {
		return nil, false
	}
	return o.CategoryOptionGroupSetDimensions, true
}

// HasCategoryOptionGroupSetDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasCategoryOptionGroupSetDimensions() bool {
	if o != nil && !IsNil(o.CategoryOptionGroupSetDimensions) {
		return true
	}

	return false
}

// SetCategoryOptionGroupSetDimensions gets a reference to the given []CategoryOptionGroupSetDimensionParams and assigns it to the CategoryOptionGroupSetDimensions field.
func (o *EventVisualizationParams) SetCategoryOptionGroupSetDimensions(v []CategoryOptionGroupSetDimensionParams) {
	o.CategoryOptionGroupSetDimensions = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *EventVisualizationParams) SetCode(v string) {
	o.Code = &v
}

// GetColSubTotals returns the ColSubTotals field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetColSubTotals() bool {
	if o == nil || IsNil(o.ColSubTotals) {
		var ret bool
		return ret
	}
	return *o.ColSubTotals
}

// GetColSubTotalsOk returns a tuple with the ColSubTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetColSubTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.ColSubTotals) {
		return nil, false
	}
	return o.ColSubTotals, true
}

// HasColSubTotals returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasColSubTotals() bool {
	if o != nil && !IsNil(o.ColSubTotals) {
		return true
	}

	return false
}

// SetColSubTotals gets a reference to the given bool and assigns it to the ColSubTotals field.
func (o *EventVisualizationParams) SetColSubTotals(v bool) {
	o.ColSubTotals = &v
}

// GetColTotals returns the ColTotals field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetColTotals() bool {
	if o == nil || IsNil(o.ColTotals) {
		var ret bool
		return ret
	}
	return *o.ColTotals
}

// GetColTotalsOk returns a tuple with the ColTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetColTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.ColTotals) {
		return nil, false
	}
	return o.ColTotals, true
}

// HasColTotals returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasColTotals() bool {
	if o != nil && !IsNil(o.ColTotals) {
		return true
	}

	return false
}

// SetColTotals gets a reference to the given bool and assigns it to the ColTotals field.
func (o *EventVisualizationParams) SetColTotals(v bool) {
	o.ColTotals = &v
}

// GetCollapseDataDimensions returns the CollapseDataDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetCollapseDataDimensions() bool {
	if o == nil || IsNil(o.CollapseDataDimensions) {
		var ret bool
		return ret
	}
	return *o.CollapseDataDimensions
}

// GetCollapseDataDimensionsOk returns a tuple with the CollapseDataDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetCollapseDataDimensionsOk() (*bool, bool) {
	if o == nil || IsNil(o.CollapseDataDimensions) {
		return nil, false
	}
	return o.CollapseDataDimensions, true
}

// HasCollapseDataDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasCollapseDataDimensions() bool {
	if o != nil && !IsNil(o.CollapseDataDimensions) {
		return true
	}

	return false
}

// SetCollapseDataDimensions gets a reference to the given bool and assigns it to the CollapseDataDimensions field.
func (o *EventVisualizationParams) SetCollapseDataDimensions(v bool) {
	o.CollapseDataDimensions = &v
}

// GetColumnDimensions returns the ColumnDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetColumnDimensions() []string {
	if o == nil || IsNil(o.ColumnDimensions) {
		var ret []string
		return ret
	}
	return o.ColumnDimensions
}

// GetColumnDimensionsOk returns a tuple with the ColumnDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetColumnDimensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ColumnDimensions) {
		return nil, false
	}
	return o.ColumnDimensions, true
}

// HasColumnDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasColumnDimensions() bool {
	if o != nil && !IsNil(o.ColumnDimensions) {
		return true
	}

	return false
}

// SetColumnDimensions gets a reference to the given []string and assigns it to the ColumnDimensions field.
func (o *EventVisualizationParams) SetColumnDimensions(v []string) {
	o.ColumnDimensions = v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetColumns() []EventChartParamsColumnsInner {
	if o == nil || IsNil(o.Columns) {
		var ret []EventChartParamsColumnsInner
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetColumnsOk() ([]EventChartParamsColumnsInner, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []EventChartParamsColumnsInner and assigns it to the Columns field.
func (o *EventVisualizationParams) SetColumns(v []EventChartParamsColumnsInner) {
	o.Columns = v
}

// GetCompletedOnly returns the CompletedOnly field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetCompletedOnly() bool {
	if o == nil || IsNil(o.CompletedOnly) {
		var ret bool
		return ret
	}
	return *o.CompletedOnly
}

// GetCompletedOnlyOk returns a tuple with the CompletedOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetCompletedOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.CompletedOnly) {
		return nil, false
	}
	return o.CompletedOnly, true
}

// HasCompletedOnly returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasCompletedOnly() bool {
	if o != nil && !IsNil(o.CompletedOnly) {
		return true
	}

	return false
}

// SetCompletedOnly gets a reference to the given bool and assigns it to the CompletedOnly field.
func (o *EventVisualizationParams) SetCompletedOnly(v bool) {
	o.CompletedOnly = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *EventVisualizationParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *EventVisualizationParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetCumulativeValues returns the CumulativeValues field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetCumulativeValues() bool {
	if o == nil || IsNil(o.CumulativeValues) {
		var ret bool
		return ret
	}
	return *o.CumulativeValues
}

// GetCumulativeValuesOk returns a tuple with the CumulativeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetCumulativeValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.CumulativeValues) {
		return nil, false
	}
	return o.CumulativeValues, true
}

// HasCumulativeValues returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasCumulativeValues() bool {
	if o != nil && !IsNil(o.CumulativeValues) {
		return true
	}

	return false
}

// SetCumulativeValues gets a reference to the given bool and assigns it to the CumulativeValues field.
func (o *EventVisualizationParams) SetCumulativeValues(v bool) {
	o.CumulativeValues = &v
}

// GetDataDimensionItems returns the DataDimensionItems field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDataDimensionItems() []DataDimensionItemParams {
	if o == nil || IsNil(o.DataDimensionItems) {
		var ret []DataDimensionItemParams
		return ret
	}
	return o.DataDimensionItems
}

// GetDataDimensionItemsOk returns a tuple with the DataDimensionItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDataDimensionItemsOk() ([]DataDimensionItemParams, bool) {
	if o == nil || IsNil(o.DataDimensionItems) {
		return nil, false
	}
	return o.DataDimensionItems, true
}

// HasDataDimensionItems returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDataDimensionItems() bool {
	if o != nil && !IsNil(o.DataDimensionItems) {
		return true
	}

	return false
}

// SetDataDimensionItems gets a reference to the given []DataDimensionItemParams and assigns it to the DataDimensionItems field.
func (o *EventVisualizationParams) SetDataDimensionItems(v []DataDimensionItemParams) {
	o.DataDimensionItems = v
}

// GetDataElementDimensions returns the DataElementDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDataElementDimensions() []TrackedEntityDataElementDimensionParams {
	if o == nil || IsNil(o.DataElementDimensions) {
		var ret []TrackedEntityDataElementDimensionParams
		return ret
	}
	return o.DataElementDimensions
}

// GetDataElementDimensionsOk returns a tuple with the DataElementDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDataElementDimensionsOk() ([]TrackedEntityDataElementDimensionParams, bool) {
	if o == nil || IsNil(o.DataElementDimensions) {
		return nil, false
	}
	return o.DataElementDimensions, true
}

// HasDataElementDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDataElementDimensions() bool {
	if o != nil && !IsNil(o.DataElementDimensions) {
		return true
	}

	return false
}

// SetDataElementDimensions gets a reference to the given []TrackedEntityDataElementDimensionParams and assigns it to the DataElementDimensions field.
func (o *EventVisualizationParams) SetDataElementDimensions(v []TrackedEntityDataElementDimensionParams) {
	o.DataElementDimensions = v
}

// GetDataElementGroupSetDimensions returns the DataElementGroupSetDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDataElementGroupSetDimensions() []DataElementGroupSetDimensionParams {
	if o == nil || IsNil(o.DataElementGroupSetDimensions) {
		var ret []DataElementGroupSetDimensionParams
		return ret
	}
	return o.DataElementGroupSetDimensions
}

// GetDataElementGroupSetDimensionsOk returns a tuple with the DataElementGroupSetDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDataElementGroupSetDimensionsOk() ([]DataElementGroupSetDimensionParams, bool) {
	if o == nil || IsNil(o.DataElementGroupSetDimensions) {
		return nil, false
	}
	return o.DataElementGroupSetDimensions, true
}

// HasDataElementGroupSetDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDataElementGroupSetDimensions() bool {
	if o != nil && !IsNil(o.DataElementGroupSetDimensions) {
		return true
	}

	return false
}

// SetDataElementGroupSetDimensions gets a reference to the given []DataElementGroupSetDimensionParams and assigns it to the DataElementGroupSetDimensions field.
func (o *EventVisualizationParams) SetDataElementGroupSetDimensions(v []DataElementGroupSetDimensionParams) {
	o.DataElementGroupSetDimensions = v
}

// GetDataElementValueDimension returns the DataElementValueDimension field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDataElementValueDimension() DataElementParams {
	if o == nil || IsNil(o.DataElementValueDimension) {
		var ret DataElementParams
		return ret
	}
	return *o.DataElementValueDimension
}

// GetDataElementValueDimensionOk returns a tuple with the DataElementValueDimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDataElementValueDimensionOk() (*DataElementParams, bool) {
	if o == nil || IsNil(o.DataElementValueDimension) {
		return nil, false
	}
	return o.DataElementValueDimension, true
}

// HasDataElementValueDimension returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDataElementValueDimension() bool {
	if o != nil && !IsNil(o.DataElementValueDimension) {
		return true
	}

	return false
}

// SetDataElementValueDimension gets a reference to the given DataElementParams and assigns it to the DataElementValueDimension field.
func (o *EventVisualizationParams) SetDataElementValueDimension(v DataElementParams) {
	o.DataElementValueDimension = &v
}

// GetDataType returns the DataType field value
func (o *EventVisualizationParams) GetDataType() EventDataType {
	if o == nil {
		var ret EventDataType
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDataTypeOk() (*EventDataType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *EventVisualizationParams) SetDataType(v EventDataType) {
	o.DataType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventVisualizationParams) SetDescription(v string) {
	o.Description = &v
}

// GetDigitGroupSeparator returns the DigitGroupSeparator field value
func (o *EventVisualizationParams) GetDigitGroupSeparator() DigitGroupSeparator {
	if o == nil {
		var ret DigitGroupSeparator
		return ret
	}

	return o.DigitGroupSeparator
}

// GetDigitGroupSeparatorOk returns a tuple with the DigitGroupSeparator field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDigitGroupSeparatorOk() (*DigitGroupSeparator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DigitGroupSeparator, true
}

// SetDigitGroupSeparator sets field value
func (o *EventVisualizationParams) SetDigitGroupSeparator(v DigitGroupSeparator) {
	o.DigitGroupSeparator = v
}

// GetDisplayBaseLineLabel returns the DisplayBaseLineLabel field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDisplayBaseLineLabel() string {
	if o == nil || IsNil(o.DisplayBaseLineLabel) {
		var ret string
		return ret
	}
	return *o.DisplayBaseLineLabel
}

// GetDisplayBaseLineLabelOk returns a tuple with the DisplayBaseLineLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDisplayBaseLineLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayBaseLineLabel) {
		return nil, false
	}
	return o.DisplayBaseLineLabel, true
}

// HasDisplayBaseLineLabel returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDisplayBaseLineLabel() bool {
	if o != nil && !IsNil(o.DisplayBaseLineLabel) {
		return true
	}

	return false
}

// SetDisplayBaseLineLabel gets a reference to the given string and assigns it to the DisplayBaseLineLabel field.
func (o *EventVisualizationParams) SetDisplayBaseLineLabel(v string) {
	o.DisplayBaseLineLabel = &v
}

// GetDisplayDensity returns the DisplayDensity field value
func (o *EventVisualizationParams) GetDisplayDensity() DisplayDensity {
	if o == nil {
		var ret DisplayDensity
		return ret
	}

	return o.DisplayDensity
}

// GetDisplayDensityOk returns a tuple with the DisplayDensity field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDisplayDensityOk() (*DisplayDensity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayDensity, true
}

// SetDisplayDensity sets field value
func (o *EventVisualizationParams) SetDisplayDensity(v DisplayDensity) {
	o.DisplayDensity = v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *EventVisualizationParams) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayDomainAxisLabel returns the DisplayDomainAxisLabel field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDisplayDomainAxisLabel() string {
	if o == nil || IsNil(o.DisplayDomainAxisLabel) {
		var ret string
		return ret
	}
	return *o.DisplayDomainAxisLabel
}

// GetDisplayDomainAxisLabelOk returns a tuple with the DisplayDomainAxisLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDisplayDomainAxisLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDomainAxisLabel) {
		return nil, false
	}
	return o.DisplayDomainAxisLabel, true
}

// HasDisplayDomainAxisLabel returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDisplayDomainAxisLabel() bool {
	if o != nil && !IsNil(o.DisplayDomainAxisLabel) {
		return true
	}

	return false
}

// SetDisplayDomainAxisLabel gets a reference to the given string and assigns it to the DisplayDomainAxisLabel field.
func (o *EventVisualizationParams) SetDisplayDomainAxisLabel(v string) {
	o.DisplayDomainAxisLabel = &v
}

// GetDisplayFormName returns the DisplayFormName field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDisplayFormName() string {
	if o == nil || IsNil(o.DisplayFormName) {
		var ret string
		return ret
	}
	return *o.DisplayFormName
}

// GetDisplayFormNameOk returns a tuple with the DisplayFormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDisplayFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayFormName) {
		return nil, false
	}
	return o.DisplayFormName, true
}

// HasDisplayFormName returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDisplayFormName() bool {
	if o != nil && !IsNil(o.DisplayFormName) {
		return true
	}

	return false
}

// SetDisplayFormName gets a reference to the given string and assigns it to the DisplayFormName field.
func (o *EventVisualizationParams) SetDisplayFormName(v string) {
	o.DisplayFormName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EventVisualizationParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayRangeAxisLabel returns the DisplayRangeAxisLabel field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDisplayRangeAxisLabel() string {
	if o == nil || IsNil(o.DisplayRangeAxisLabel) {
		var ret string
		return ret
	}
	return *o.DisplayRangeAxisLabel
}

// GetDisplayRangeAxisLabelOk returns a tuple with the DisplayRangeAxisLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDisplayRangeAxisLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayRangeAxisLabel) {
		return nil, false
	}
	return o.DisplayRangeAxisLabel, true
}

// HasDisplayRangeAxisLabel returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDisplayRangeAxisLabel() bool {
	if o != nil && !IsNil(o.DisplayRangeAxisLabel) {
		return true
	}

	return false
}

// SetDisplayRangeAxisLabel gets a reference to the given string and assigns it to the DisplayRangeAxisLabel field.
func (o *EventVisualizationParams) SetDisplayRangeAxisLabel(v string) {
	o.DisplayRangeAxisLabel = &v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *EventVisualizationParams) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetDisplaySubtitle returns the DisplaySubtitle field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDisplaySubtitle() string {
	if o == nil || IsNil(o.DisplaySubtitle) {
		var ret string
		return ret
	}
	return *o.DisplaySubtitle
}

// GetDisplaySubtitleOk returns a tuple with the DisplaySubtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDisplaySubtitleOk() (*string, bool) {
	if o == nil || IsNil(o.DisplaySubtitle) {
		return nil, false
	}
	return o.DisplaySubtitle, true
}

// HasDisplaySubtitle returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDisplaySubtitle() bool {
	if o != nil && !IsNil(o.DisplaySubtitle) {
		return true
	}

	return false
}

// SetDisplaySubtitle gets a reference to the given string and assigns it to the DisplaySubtitle field.
func (o *EventVisualizationParams) SetDisplaySubtitle(v string) {
	o.DisplaySubtitle = &v
}

// GetDisplayTargetLineLabel returns the DisplayTargetLineLabel field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDisplayTargetLineLabel() string {
	if o == nil || IsNil(o.DisplayTargetLineLabel) {
		var ret string
		return ret
	}
	return *o.DisplayTargetLineLabel
}

// GetDisplayTargetLineLabelOk returns a tuple with the DisplayTargetLineLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDisplayTargetLineLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayTargetLineLabel) {
		return nil, false
	}
	return o.DisplayTargetLineLabel, true
}

// HasDisplayTargetLineLabel returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDisplayTargetLineLabel() bool {
	if o != nil && !IsNil(o.DisplayTargetLineLabel) {
		return true
	}

	return false
}

// SetDisplayTargetLineLabel gets a reference to the given string and assigns it to the DisplayTargetLineLabel field.
func (o *EventVisualizationParams) SetDisplayTargetLineLabel(v string) {
	o.DisplayTargetLineLabel = &v
}

// GetDisplayTitle returns the DisplayTitle field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDisplayTitle() string {
	if o == nil || IsNil(o.DisplayTitle) {
		var ret string
		return ret
	}
	return *o.DisplayTitle
}

// GetDisplayTitleOk returns a tuple with the DisplayTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDisplayTitleOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayTitle) {
		return nil, false
	}
	return o.DisplayTitle, true
}

// HasDisplayTitle returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDisplayTitle() bool {
	if o != nil && !IsNil(o.DisplayTitle) {
		return true
	}

	return false
}

// SetDisplayTitle gets a reference to the given string and assigns it to the DisplayTitle field.
func (o *EventVisualizationParams) SetDisplayTitle(v string) {
	o.DisplayTitle = &v
}

// GetDomainAxisLabel returns the DomainAxisLabel field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetDomainAxisLabel() string {
	if o == nil || IsNil(o.DomainAxisLabel) {
		var ret string
		return ret
	}
	return *o.DomainAxisLabel
}

// GetDomainAxisLabelOk returns a tuple with the DomainAxisLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetDomainAxisLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DomainAxisLabel) {
		return nil, false
	}
	return o.DomainAxisLabel, true
}

// HasDomainAxisLabel returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasDomainAxisLabel() bool {
	if o != nil && !IsNil(o.DomainAxisLabel) {
		return true
	}

	return false
}

// SetDomainAxisLabel gets a reference to the given string and assigns it to the DomainAxisLabel field.
func (o *EventVisualizationParams) SetDomainAxisLabel(v string) {
	o.DomainAxisLabel = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *EventVisualizationParams) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetEventStatus returns the EventStatus field value
func (o *EventVisualizationParams) GetEventStatus() EventStatus {
	if o == nil {
		var ret EventStatus
		return ret
	}

	return o.EventStatus
}

// GetEventStatusOk returns a tuple with the EventStatus field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetEventStatusOk() (*EventStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventStatus, true
}

// SetEventStatus sets field value
func (o *EventVisualizationParams) SetEventStatus(v EventStatus) {
	o.EventStatus = v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *EventVisualizationParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *EventVisualizationParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFilterDimensions returns the FilterDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetFilterDimensions() []string {
	if o == nil || IsNil(o.FilterDimensions) {
		var ret []string
		return ret
	}
	return o.FilterDimensions
}

// GetFilterDimensionsOk returns a tuple with the FilterDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetFilterDimensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterDimensions) {
		return nil, false
	}
	return o.FilterDimensions, true
}

// HasFilterDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasFilterDimensions() bool {
	if o != nil && !IsNil(o.FilterDimensions) {
		return true
	}

	return false
}

// SetFilterDimensions gets a reference to the given []string and assigns it to the FilterDimensions field.
func (o *EventVisualizationParams) SetFilterDimensions(v []string) {
	o.FilterDimensions = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetFilters() []EventChartParamsColumnsInner {
	if o == nil || IsNil(o.Filters) {
		var ret []EventChartParamsColumnsInner
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetFiltersOk() ([]EventChartParamsColumnsInner, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []EventChartParamsColumnsInner and assigns it to the Filters field.
func (o *EventVisualizationParams) SetFilters(v []EventChartParamsColumnsInner) {
	o.Filters = v
}

// GetFontSize returns the FontSize field value
func (o *EventVisualizationParams) GetFontSize() FontSize {
	if o == nil {
		var ret FontSize
		return ret
	}

	return o.FontSize
}

// GetFontSizeOk returns a tuple with the FontSize field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetFontSizeOk() (*FontSize, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FontSize, true
}

// SetFontSize sets field value
func (o *EventVisualizationParams) SetFontSize(v FontSize) {
	o.FontSize = v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *EventVisualizationParams) SetFormName(v string) {
	o.FormName = &v
}

// GetHideEmptyRowItems returns the HideEmptyRowItems field value
func (o *EventVisualizationParams) GetHideEmptyRowItems() HideEmptyItemStrategy {
	if o == nil {
		var ret HideEmptyItemStrategy
		return ret
	}

	return o.HideEmptyRowItems
}

// GetHideEmptyRowItemsOk returns a tuple with the HideEmptyRowItems field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetHideEmptyRowItemsOk() (*HideEmptyItemStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HideEmptyRowItems, true
}

// SetHideEmptyRowItems sets field value
func (o *EventVisualizationParams) SetHideEmptyRowItems(v HideEmptyItemStrategy) {
	o.HideEmptyRowItems = v
}

// GetHideEmptyRows returns the HideEmptyRows field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetHideEmptyRows() bool {
	if o == nil || IsNil(o.HideEmptyRows) {
		var ret bool
		return ret
	}
	return *o.HideEmptyRows
}

// GetHideEmptyRowsOk returns a tuple with the HideEmptyRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetHideEmptyRowsOk() (*bool, bool) {
	if o == nil || IsNil(o.HideEmptyRows) {
		return nil, false
	}
	return o.HideEmptyRows, true
}

// HasHideEmptyRows returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasHideEmptyRows() bool {
	if o != nil && !IsNil(o.HideEmptyRows) {
		return true
	}

	return false
}

// SetHideEmptyRows gets a reference to the given bool and assigns it to the HideEmptyRows field.
func (o *EventVisualizationParams) SetHideEmptyRows(v bool) {
	o.HideEmptyRows = &v
}

// GetHideLegend returns the HideLegend field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetHideLegend() bool {
	if o == nil || IsNil(o.HideLegend) {
		var ret bool
		return ret
	}
	return *o.HideLegend
}

// GetHideLegendOk returns a tuple with the HideLegend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetHideLegendOk() (*bool, bool) {
	if o == nil || IsNil(o.HideLegend) {
		return nil, false
	}
	return o.HideLegend, true
}

// HasHideLegend returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasHideLegend() bool {
	if o != nil && !IsNil(o.HideLegend) {
		return true
	}

	return false
}

// SetHideLegend gets a reference to the given bool and assigns it to the HideLegend field.
func (o *EventVisualizationParams) SetHideLegend(v bool) {
	o.HideLegend = &v
}

// GetHideNaData returns the HideNaData field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetHideNaData() bool {
	if o == nil || IsNil(o.HideNaData) {
		var ret bool
		return ret
	}
	return *o.HideNaData
}

// GetHideNaDataOk returns a tuple with the HideNaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetHideNaDataOk() (*bool, bool) {
	if o == nil || IsNil(o.HideNaData) {
		return nil, false
	}
	return o.HideNaData, true
}

// HasHideNaData returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasHideNaData() bool {
	if o != nil && !IsNil(o.HideNaData) {
		return true
	}

	return false
}

// SetHideNaData gets a reference to the given bool and assigns it to the HideNaData field.
func (o *EventVisualizationParams) SetHideNaData(v bool) {
	o.HideNaData = &v
}

// GetHideSubtitle returns the HideSubtitle field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetHideSubtitle() bool {
	if o == nil || IsNil(o.HideSubtitle) {
		var ret bool
		return ret
	}
	return *o.HideSubtitle
}

// GetHideSubtitleOk returns a tuple with the HideSubtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetHideSubtitleOk() (*bool, bool) {
	if o == nil || IsNil(o.HideSubtitle) {
		return nil, false
	}
	return o.HideSubtitle, true
}

// HasHideSubtitle returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasHideSubtitle() bool {
	if o != nil && !IsNil(o.HideSubtitle) {
		return true
	}

	return false
}

// SetHideSubtitle gets a reference to the given bool and assigns it to the HideSubtitle field.
func (o *EventVisualizationParams) SetHideSubtitle(v bool) {
	o.HideSubtitle = &v
}

// GetHideTitle returns the HideTitle field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetHideTitle() bool {
	if o == nil || IsNil(o.HideTitle) {
		var ret bool
		return ret
	}
	return *o.HideTitle
}

// GetHideTitleOk returns a tuple with the HideTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetHideTitleOk() (*bool, bool) {
	if o == nil || IsNil(o.HideTitle) {
		return nil, false
	}
	return o.HideTitle, true
}

// HasHideTitle returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasHideTitle() bool {
	if o != nil && !IsNil(o.HideTitle) {
		return true
	}

	return false
}

// SetHideTitle gets a reference to the given bool and assigns it to the HideTitle field.
func (o *EventVisualizationParams) SetHideTitle(v bool) {
	o.HideTitle = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EventVisualizationParams) SetId(v string) {
	o.Id = &v
}

// GetInterpretations returns the Interpretations field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetInterpretations() []DataSetParamsInterpretationsInner {
	if o == nil || IsNil(o.Interpretations) {
		var ret []DataSetParamsInterpretationsInner
		return ret
	}
	return o.Interpretations
}

// GetInterpretationsOk returns a tuple with the Interpretations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetInterpretationsOk() ([]DataSetParamsInterpretationsInner, bool) {
	if o == nil || IsNil(o.Interpretations) {
		return nil, false
	}
	return o.Interpretations, true
}

// HasInterpretations returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasInterpretations() bool {
	if o != nil && !IsNil(o.Interpretations) {
		return true
	}

	return false
}

// SetInterpretations gets a reference to the given []DataSetParamsInterpretationsInner and assigns it to the Interpretations field.
func (o *EventVisualizationParams) SetInterpretations(v []DataSetParamsInterpretationsInner) {
	o.Interpretations = v
}

// GetItemOrganisationUnitGroups returns the ItemOrganisationUnitGroups field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetItemOrganisationUnitGroups() []EventChartParamsItemOrganisationUnitGroupsInner {
	if o == nil || IsNil(o.ItemOrganisationUnitGroups) {
		var ret []EventChartParamsItemOrganisationUnitGroupsInner
		return ret
	}
	return o.ItemOrganisationUnitGroups
}

// GetItemOrganisationUnitGroupsOk returns a tuple with the ItemOrganisationUnitGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetItemOrganisationUnitGroupsOk() ([]EventChartParamsItemOrganisationUnitGroupsInner, bool) {
	if o == nil || IsNil(o.ItemOrganisationUnitGroups) {
		return nil, false
	}
	return o.ItemOrganisationUnitGroups, true
}

// HasItemOrganisationUnitGroups returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasItemOrganisationUnitGroups() bool {
	if o != nil && !IsNil(o.ItemOrganisationUnitGroups) {
		return true
	}

	return false
}

// SetItemOrganisationUnitGroups gets a reference to the given []EventChartParamsItemOrganisationUnitGroupsInner and assigns it to the ItemOrganisationUnitGroups field.
func (o *EventVisualizationParams) SetItemOrganisationUnitGroups(v []EventChartParamsItemOrganisationUnitGroupsInner) {
	o.ItemOrganisationUnitGroups = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *EventVisualizationParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *EventVisualizationParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLegacy returns the Legacy field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetLegacy() bool {
	if o == nil || IsNil(o.Legacy) {
		var ret bool
		return ret
	}
	return *o.Legacy
}

// GetLegacyOk returns a tuple with the Legacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetLegacyOk() (*bool, bool) {
	if o == nil || IsNil(o.Legacy) {
		return nil, false
	}
	return o.Legacy, true
}

// HasLegacy returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasLegacy() bool {
	if o != nil && !IsNil(o.Legacy) {
		return true
	}

	return false
}

// SetLegacy gets a reference to the given bool and assigns it to the Legacy field.
func (o *EventVisualizationParams) SetLegacy(v bool) {
	o.Legacy = &v
}

// GetLegend returns the Legend field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetLegend() LegendDefinitionsParams {
	if o == nil || IsNil(o.Legend) {
		var ret LegendDefinitionsParams
		return ret
	}
	return *o.Legend
}

// GetLegendOk returns a tuple with the Legend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetLegendOk() (*LegendDefinitionsParams, bool) {
	if o == nil || IsNil(o.Legend) {
		return nil, false
	}
	return o.Legend, true
}

// HasLegend returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasLegend() bool {
	if o != nil && !IsNil(o.Legend) {
		return true
	}

	return false
}

// SetLegend gets a reference to the given LegendDefinitionsParams and assigns it to the Legend field.
func (o *EventVisualizationParams) SetLegend(v LegendDefinitionsParams) {
	o.Legend = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetMetaData() map[string]MetadataItemParams {
	if o == nil || IsNil(o.MetaData) {
		var ret map[string]MetadataItemParams
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetMetaDataOk() (*map[string]MetadataItemParams, bool) {
	if o == nil || IsNil(o.MetaData) {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given map[string]MetadataItemParams and assigns it to the MetaData field.
func (o *EventVisualizationParams) SetMetaData(v map[string]MetadataItemParams) {
	o.MetaData = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EventVisualizationParams) SetName(v string) {
	o.Name = &v
}

// GetNoSpaceBetweenColumns returns the NoSpaceBetweenColumns field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetNoSpaceBetweenColumns() bool {
	if o == nil || IsNil(o.NoSpaceBetweenColumns) {
		var ret bool
		return ret
	}
	return *o.NoSpaceBetweenColumns
}

// GetNoSpaceBetweenColumnsOk returns a tuple with the NoSpaceBetweenColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetNoSpaceBetweenColumnsOk() (*bool, bool) {
	if o == nil || IsNil(o.NoSpaceBetweenColumns) {
		return nil, false
	}
	return o.NoSpaceBetweenColumns, true
}

// HasNoSpaceBetweenColumns returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasNoSpaceBetweenColumns() bool {
	if o != nil && !IsNil(o.NoSpaceBetweenColumns) {
		return true
	}

	return false
}

// SetNoSpaceBetweenColumns gets a reference to the given bool and assigns it to the NoSpaceBetweenColumns field.
func (o *EventVisualizationParams) SetNoSpaceBetweenColumns(v bool) {
	o.NoSpaceBetweenColumns = &v
}

// GetOrgUnitField returns the OrgUnitField field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetOrgUnitField() string {
	if o == nil || IsNil(o.OrgUnitField) {
		var ret string
		return ret
	}
	return *o.OrgUnitField
}

// GetOrgUnitFieldOk returns a tuple with the OrgUnitField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetOrgUnitFieldOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnitField) {
		return nil, false
	}
	return o.OrgUnitField, true
}

// HasOrgUnitField returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasOrgUnitField() bool {
	if o != nil && !IsNil(o.OrgUnitField) {
		return true
	}

	return false
}

// SetOrgUnitField gets a reference to the given string and assigns it to the OrgUnitField field.
func (o *EventVisualizationParams) SetOrgUnitField(v string) {
	o.OrgUnitField = &v
}

// GetOrganisationUnitGroupSetDimensions returns the OrganisationUnitGroupSetDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetOrganisationUnitGroupSetDimensions() []OrganisationUnitGroupSetDimensionParams {
	if o == nil || IsNil(o.OrganisationUnitGroupSetDimensions) {
		var ret []OrganisationUnitGroupSetDimensionParams
		return ret
	}
	return o.OrganisationUnitGroupSetDimensions
}

// GetOrganisationUnitGroupSetDimensionsOk returns a tuple with the OrganisationUnitGroupSetDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetOrganisationUnitGroupSetDimensionsOk() ([]OrganisationUnitGroupSetDimensionParams, bool) {
	if o == nil || IsNil(o.OrganisationUnitGroupSetDimensions) {
		return nil, false
	}
	return o.OrganisationUnitGroupSetDimensions, true
}

// HasOrganisationUnitGroupSetDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasOrganisationUnitGroupSetDimensions() bool {
	if o != nil && !IsNil(o.OrganisationUnitGroupSetDimensions) {
		return true
	}

	return false
}

// SetOrganisationUnitGroupSetDimensions gets a reference to the given []OrganisationUnitGroupSetDimensionParams and assigns it to the OrganisationUnitGroupSetDimensions field.
func (o *EventVisualizationParams) SetOrganisationUnitGroupSetDimensions(v []OrganisationUnitGroupSetDimensionParams) {
	o.OrganisationUnitGroupSetDimensions = v
}

// GetOrganisationUnitLevels returns the OrganisationUnitLevels field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetOrganisationUnitLevels() []int32 {
	if o == nil || IsNil(o.OrganisationUnitLevels) {
		var ret []int32
		return ret
	}
	return o.OrganisationUnitLevels
}

// GetOrganisationUnitLevelsOk returns a tuple with the OrganisationUnitLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetOrganisationUnitLevelsOk() ([]int32, bool) {
	if o == nil || IsNil(o.OrganisationUnitLevels) {
		return nil, false
	}
	return o.OrganisationUnitLevels, true
}

// HasOrganisationUnitLevels returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasOrganisationUnitLevels() bool {
	if o != nil && !IsNil(o.OrganisationUnitLevels) {
		return true
	}

	return false
}

// SetOrganisationUnitLevels gets a reference to the given []int32 and assigns it to the OrganisationUnitLevels field.
func (o *EventVisualizationParams) SetOrganisationUnitLevels(v []int32) {
	o.OrganisationUnitLevels = v
}

// GetOrganisationUnits returns the OrganisationUnits field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetOrganisationUnits() []CategoryOptionParamsOrganisationUnitsInner {
	if o == nil || IsNil(o.OrganisationUnits) {
		var ret []CategoryOptionParamsOrganisationUnitsInner
		return ret
	}
	return o.OrganisationUnits
}

// GetOrganisationUnitsOk returns a tuple with the OrganisationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetOrganisationUnitsOk() ([]CategoryOptionParamsOrganisationUnitsInner, bool) {
	if o == nil || IsNil(o.OrganisationUnits) {
		return nil, false
	}
	return o.OrganisationUnits, true
}

// HasOrganisationUnits returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasOrganisationUnits() bool {
	if o != nil && !IsNil(o.OrganisationUnits) {
		return true
	}

	return false
}

// SetOrganisationUnits gets a reference to the given []CategoryOptionParamsOrganisationUnitsInner and assigns it to the OrganisationUnits field.
func (o *EventVisualizationParams) SetOrganisationUnits(v []CategoryOptionParamsOrganisationUnitsInner) {
	o.OrganisationUnits = v
}

// GetOutputType returns the OutputType field value
func (o *EventVisualizationParams) GetOutputType() EventOutputType {
	if o == nil {
		var ret EventOutputType
		return ret
	}

	return o.OutputType
}

// GetOutputTypeOk returns a tuple with the OutputType field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetOutputTypeOk() (*EventOutputType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutputType, true
}

// SetOutputType sets field value
func (o *EventVisualizationParams) SetOutputType(v EventOutputType) {
	o.OutputType = v
}

// GetPercentStackedValues returns the PercentStackedValues field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetPercentStackedValues() bool {
	if o == nil || IsNil(o.PercentStackedValues) {
		var ret bool
		return ret
	}
	return *o.PercentStackedValues
}

// GetPercentStackedValuesOk returns a tuple with the PercentStackedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetPercentStackedValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.PercentStackedValues) {
		return nil, false
	}
	return o.PercentStackedValues, true
}

// HasPercentStackedValues returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasPercentStackedValues() bool {
	if o != nil && !IsNil(o.PercentStackedValues) {
		return true
	}

	return false
}

// SetPercentStackedValues gets a reference to the given bool and assigns it to the PercentStackedValues field.
func (o *EventVisualizationParams) SetPercentStackedValues(v bool) {
	o.PercentStackedValues = &v
}

// GetPeriods returns the Periods field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetPeriods() []string {
	if o == nil || IsNil(o.Periods) {
		var ret []string
		return ret
	}
	return o.Periods
}

// GetPeriodsOk returns a tuple with the Periods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetPeriodsOk() ([]string, bool) {
	if o == nil || IsNil(o.Periods) {
		return nil, false
	}
	return o.Periods, true
}

// HasPeriods returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasPeriods() bool {
	if o != nil && !IsNil(o.Periods) {
		return true
	}

	return false
}

// SetPeriods gets a reference to the given []string and assigns it to the Periods field.
func (o *EventVisualizationParams) SetPeriods(v []string) {
	o.Periods = v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetProgram() ProgramParams {
	if o == nil || IsNil(o.Program) {
		var ret ProgramParams
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetProgramOk() (*ProgramParams, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given ProgramParams and assigns it to the Program field.
func (o *EventVisualizationParams) SetProgram(v ProgramParams) {
	o.Program = &v
}

// GetProgramDimensions returns the ProgramDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetProgramDimensions() []EventVisualizationParamsProgramDimensionsInner {
	if o == nil || IsNil(o.ProgramDimensions) {
		var ret []EventVisualizationParamsProgramDimensionsInner
		return ret
	}
	return o.ProgramDimensions
}

// GetProgramDimensionsOk returns a tuple with the ProgramDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetProgramDimensionsOk() ([]EventVisualizationParamsProgramDimensionsInner, bool) {
	if o == nil || IsNil(o.ProgramDimensions) {
		return nil, false
	}
	return o.ProgramDimensions, true
}

// HasProgramDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasProgramDimensions() bool {
	if o != nil && !IsNil(o.ProgramDimensions) {
		return true
	}

	return false
}

// SetProgramDimensions gets a reference to the given []EventVisualizationParamsProgramDimensionsInner and assigns it to the ProgramDimensions field.
func (o *EventVisualizationParams) SetProgramDimensions(v []EventVisualizationParamsProgramDimensionsInner) {
	o.ProgramDimensions = v
}

// GetProgramIndicatorDimensions returns the ProgramIndicatorDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetProgramIndicatorDimensions() []TrackedEntityProgramIndicatorDimensionParams {
	if o == nil || IsNil(o.ProgramIndicatorDimensions) {
		var ret []TrackedEntityProgramIndicatorDimensionParams
		return ret
	}
	return o.ProgramIndicatorDimensions
}

// GetProgramIndicatorDimensionsOk returns a tuple with the ProgramIndicatorDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetProgramIndicatorDimensionsOk() ([]TrackedEntityProgramIndicatorDimensionParams, bool) {
	if o == nil || IsNil(o.ProgramIndicatorDimensions) {
		return nil, false
	}
	return o.ProgramIndicatorDimensions, true
}

// HasProgramIndicatorDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasProgramIndicatorDimensions() bool {
	if o != nil && !IsNil(o.ProgramIndicatorDimensions) {
		return true
	}

	return false
}

// SetProgramIndicatorDimensions gets a reference to the given []TrackedEntityProgramIndicatorDimensionParams and assigns it to the ProgramIndicatorDimensions field.
func (o *EventVisualizationParams) SetProgramIndicatorDimensions(v []TrackedEntityProgramIndicatorDimensionParams) {
	o.ProgramIndicatorDimensions = v
}

// GetProgramStage returns the ProgramStage field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetProgramStage() ProgramStageParams {
	if o == nil || IsNil(o.ProgramStage) {
		var ret ProgramStageParams
		return ret
	}
	return *o.ProgramStage
}

// GetProgramStageOk returns a tuple with the ProgramStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetProgramStageOk() (*ProgramStageParams, bool) {
	if o == nil || IsNil(o.ProgramStage) {
		return nil, false
	}
	return o.ProgramStage, true
}

// HasProgramStage returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasProgramStage() bool {
	if o != nil && !IsNil(o.ProgramStage) {
		return true
	}

	return false
}

// SetProgramStage gets a reference to the given ProgramStageParams and assigns it to the ProgramStage field.
func (o *EventVisualizationParams) SetProgramStage(v ProgramStageParams) {
	o.ProgramStage = &v
}

// GetProgramStatus returns the ProgramStatus field value
func (o *EventVisualizationParams) GetProgramStatus() EnrollmentStatus {
	if o == nil {
		var ret EnrollmentStatus
		return ret
	}

	return o.ProgramStatus
}

// GetProgramStatusOk returns a tuple with the ProgramStatus field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetProgramStatusOk() (*EnrollmentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgramStatus, true
}

// SetProgramStatus sets field value
func (o *EventVisualizationParams) SetProgramStatus(v EnrollmentStatus) {
	o.ProgramStatus = v
}

// GetRangeAxisDecimals returns the RangeAxisDecimals field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetRangeAxisDecimals() int32 {
	if o == nil || IsNil(o.RangeAxisDecimals) {
		var ret int32
		return ret
	}
	return *o.RangeAxisDecimals
}

// GetRangeAxisDecimalsOk returns a tuple with the RangeAxisDecimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRangeAxisDecimalsOk() (*int32, bool) {
	if o == nil || IsNil(o.RangeAxisDecimals) {
		return nil, false
	}
	return o.RangeAxisDecimals, true
}

// HasRangeAxisDecimals returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasRangeAxisDecimals() bool {
	if o != nil && !IsNil(o.RangeAxisDecimals) {
		return true
	}

	return false
}

// SetRangeAxisDecimals gets a reference to the given int32 and assigns it to the RangeAxisDecimals field.
func (o *EventVisualizationParams) SetRangeAxisDecimals(v int32) {
	o.RangeAxisDecimals = &v
}

// GetRangeAxisLabel returns the RangeAxisLabel field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetRangeAxisLabel() string {
	if o == nil || IsNil(o.RangeAxisLabel) {
		var ret string
		return ret
	}
	return *o.RangeAxisLabel
}

// GetRangeAxisLabelOk returns a tuple with the RangeAxisLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRangeAxisLabelOk() (*string, bool) {
	if o == nil || IsNil(o.RangeAxisLabel) {
		return nil, false
	}
	return o.RangeAxisLabel, true
}

// HasRangeAxisLabel returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasRangeAxisLabel() bool {
	if o != nil && !IsNil(o.RangeAxisLabel) {
		return true
	}

	return false
}

// SetRangeAxisLabel gets a reference to the given string and assigns it to the RangeAxisLabel field.
func (o *EventVisualizationParams) SetRangeAxisLabel(v string) {
	o.RangeAxisLabel = &v
}

// GetRangeAxisMaxValue returns the RangeAxisMaxValue field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetRangeAxisMaxValue() float64 {
	if o == nil || IsNil(o.RangeAxisMaxValue) {
		var ret float64
		return ret
	}
	return *o.RangeAxisMaxValue
}

// GetRangeAxisMaxValueOk returns a tuple with the RangeAxisMaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRangeAxisMaxValueOk() (*float64, bool) {
	if o == nil || IsNil(o.RangeAxisMaxValue) {
		return nil, false
	}
	return o.RangeAxisMaxValue, true
}

// HasRangeAxisMaxValue returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasRangeAxisMaxValue() bool {
	if o != nil && !IsNil(o.RangeAxisMaxValue) {
		return true
	}

	return false
}

// SetRangeAxisMaxValue gets a reference to the given float64 and assigns it to the RangeAxisMaxValue field.
func (o *EventVisualizationParams) SetRangeAxisMaxValue(v float64) {
	o.RangeAxisMaxValue = &v
}

// GetRangeAxisMinValue returns the RangeAxisMinValue field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetRangeAxisMinValue() float64 {
	if o == nil || IsNil(o.RangeAxisMinValue) {
		var ret float64
		return ret
	}
	return *o.RangeAxisMinValue
}

// GetRangeAxisMinValueOk returns a tuple with the RangeAxisMinValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRangeAxisMinValueOk() (*float64, bool) {
	if o == nil || IsNil(o.RangeAxisMinValue) {
		return nil, false
	}
	return o.RangeAxisMinValue, true
}

// HasRangeAxisMinValue returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasRangeAxisMinValue() bool {
	if o != nil && !IsNil(o.RangeAxisMinValue) {
		return true
	}

	return false
}

// SetRangeAxisMinValue gets a reference to the given float64 and assigns it to the RangeAxisMinValue field.
func (o *EventVisualizationParams) SetRangeAxisMinValue(v float64) {
	o.RangeAxisMinValue = &v
}

// GetRangeAxisSteps returns the RangeAxisSteps field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetRangeAxisSteps() int32 {
	if o == nil || IsNil(o.RangeAxisSteps) {
		var ret int32
		return ret
	}
	return *o.RangeAxisSteps
}

// GetRangeAxisStepsOk returns a tuple with the RangeAxisSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRangeAxisStepsOk() (*int32, bool) {
	if o == nil || IsNil(o.RangeAxisSteps) {
		return nil, false
	}
	return o.RangeAxisSteps, true
}

// HasRangeAxisSteps returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasRangeAxisSteps() bool {
	if o != nil && !IsNil(o.RangeAxisSteps) {
		return true
	}

	return false
}

// SetRangeAxisSteps gets a reference to the given int32 and assigns it to the RangeAxisSteps field.
func (o *EventVisualizationParams) SetRangeAxisSteps(v int32) {
	o.RangeAxisSteps = &v
}

// GetRegressionType returns the RegressionType field value
func (o *EventVisualizationParams) GetRegressionType() RegressionType {
	if o == nil {
		var ret RegressionType
		return ret
	}

	return o.RegressionType
}

// GetRegressionTypeOk returns a tuple with the RegressionType field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRegressionTypeOk() (*RegressionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegressionType, true
}

// SetRegressionType sets field value
func (o *EventVisualizationParams) SetRegressionType(v RegressionType) {
	o.RegressionType = v
}

// GetRelativePeriods returns the RelativePeriods field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetRelativePeriods() RelativePeriods {
	if o == nil || IsNil(o.RelativePeriods) {
		var ret RelativePeriods
		return ret
	}
	return *o.RelativePeriods
}

// GetRelativePeriodsOk returns a tuple with the RelativePeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRelativePeriodsOk() (*RelativePeriods, bool) {
	if o == nil || IsNil(o.RelativePeriods) {
		return nil, false
	}
	return o.RelativePeriods, true
}

// HasRelativePeriods returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasRelativePeriods() bool {
	if o != nil && !IsNil(o.RelativePeriods) {
		return true
	}

	return false
}

// SetRelativePeriods gets a reference to the given RelativePeriods and assigns it to the RelativePeriods field.
func (o *EventVisualizationParams) SetRelativePeriods(v RelativePeriods) {
	o.RelativePeriods = &v
}

// GetRepetitions returns the Repetitions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetRepetitions() []EventRepetition {
	if o == nil || IsNil(o.Repetitions) {
		var ret []EventRepetition
		return ret
	}
	return o.Repetitions
}

// GetRepetitionsOk returns a tuple with the Repetitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRepetitionsOk() ([]EventRepetition, bool) {
	if o == nil || IsNil(o.Repetitions) {
		return nil, false
	}
	return o.Repetitions, true
}

// HasRepetitions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasRepetitions() bool {
	if o != nil && !IsNil(o.Repetitions) {
		return true
	}

	return false
}

// SetRepetitions gets a reference to the given []EventRepetition and assigns it to the Repetitions field.
func (o *EventVisualizationParams) SetRepetitions(v []EventRepetition) {
	o.Repetitions = v
}

// GetRowDimensions returns the RowDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetRowDimensions() []string {
	if o == nil || IsNil(o.RowDimensions) {
		var ret []string
		return ret
	}
	return o.RowDimensions
}

// GetRowDimensionsOk returns a tuple with the RowDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRowDimensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.RowDimensions) {
		return nil, false
	}
	return o.RowDimensions, true
}

// HasRowDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasRowDimensions() bool {
	if o != nil && !IsNil(o.RowDimensions) {
		return true
	}

	return false
}

// SetRowDimensions gets a reference to the given []string and assigns it to the RowDimensions field.
func (o *EventVisualizationParams) SetRowDimensions(v []string) {
	o.RowDimensions = v
}

// GetRowSubTotals returns the RowSubTotals field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetRowSubTotals() bool {
	if o == nil || IsNil(o.RowSubTotals) {
		var ret bool
		return ret
	}
	return *o.RowSubTotals
}

// GetRowSubTotalsOk returns a tuple with the RowSubTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRowSubTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.RowSubTotals) {
		return nil, false
	}
	return o.RowSubTotals, true
}

// HasRowSubTotals returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasRowSubTotals() bool {
	if o != nil && !IsNil(o.RowSubTotals) {
		return true
	}

	return false
}

// SetRowSubTotals gets a reference to the given bool and assigns it to the RowSubTotals field.
func (o *EventVisualizationParams) SetRowSubTotals(v bool) {
	o.RowSubTotals = &v
}

// GetRowTotals returns the RowTotals field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetRowTotals() bool {
	if o == nil || IsNil(o.RowTotals) {
		var ret bool
		return ret
	}
	return *o.RowTotals
}

// GetRowTotalsOk returns a tuple with the RowTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRowTotalsOk() (*bool, bool) {
	if o == nil || IsNil(o.RowTotals) {
		return nil, false
	}
	return o.RowTotals, true
}

// HasRowTotals returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasRowTotals() bool {
	if o != nil && !IsNil(o.RowTotals) {
		return true
	}

	return false
}

// SetRowTotals gets a reference to the given bool and assigns it to the RowTotals field.
func (o *EventVisualizationParams) SetRowTotals(v bool) {
	o.RowTotals = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetRows() []EventChartParamsColumnsInner {
	if o == nil || IsNil(o.Rows) {
		var ret []EventChartParamsColumnsInner
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetRowsOk() ([]EventChartParamsColumnsInner, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []EventChartParamsColumnsInner and assigns it to the Rows field.
func (o *EventVisualizationParams) SetRows(v []EventChartParamsColumnsInner) {
	o.Rows = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *EventVisualizationParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *EventVisualizationParams) SetShortName(v string) {
	o.ShortName = &v
}

// GetShowData returns the ShowData field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetShowData() bool {
	if o == nil || IsNil(o.ShowData) {
		var ret bool
		return ret
	}
	return *o.ShowData
}

// GetShowDataOk returns a tuple with the ShowData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetShowDataOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowData) {
		return nil, false
	}
	return o.ShowData, true
}

// HasShowData returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasShowData() bool {
	if o != nil && !IsNil(o.ShowData) {
		return true
	}

	return false
}

// SetShowData gets a reference to the given bool and assigns it to the ShowData field.
func (o *EventVisualizationParams) SetShowData(v bool) {
	o.ShowData = &v
}

// GetShowDimensionLabels returns the ShowDimensionLabels field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetShowDimensionLabels() bool {
	if o == nil || IsNil(o.ShowDimensionLabels) {
		var ret bool
		return ret
	}
	return *o.ShowDimensionLabels
}

// GetShowDimensionLabelsOk returns a tuple with the ShowDimensionLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetShowDimensionLabelsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDimensionLabels) {
		return nil, false
	}
	return o.ShowDimensionLabels, true
}

// HasShowDimensionLabels returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasShowDimensionLabels() bool {
	if o != nil && !IsNil(o.ShowDimensionLabels) {
		return true
	}

	return false
}

// SetShowDimensionLabels gets a reference to the given bool and assigns it to the ShowDimensionLabels field.
func (o *EventVisualizationParams) SetShowDimensionLabels(v bool) {
	o.ShowDimensionLabels = &v
}

// GetShowHierarchy returns the ShowHierarchy field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetShowHierarchy() bool {
	if o == nil || IsNil(o.ShowHierarchy) {
		var ret bool
		return ret
	}
	return *o.ShowHierarchy
}

// GetShowHierarchyOk returns a tuple with the ShowHierarchy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetShowHierarchyOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowHierarchy) {
		return nil, false
	}
	return o.ShowHierarchy, true
}

// HasShowHierarchy returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasShowHierarchy() bool {
	if o != nil && !IsNil(o.ShowHierarchy) {
		return true
	}

	return false
}

// SetShowHierarchy gets a reference to the given bool and assigns it to the ShowHierarchy field.
func (o *EventVisualizationParams) SetShowHierarchy(v bool) {
	o.ShowHierarchy = &v
}

// GetSimpleDimensions returns the SimpleDimensions field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetSimpleDimensions() []SimpleDimension {
	if o == nil || IsNil(o.SimpleDimensions) {
		var ret []SimpleDimension
		return ret
	}
	return o.SimpleDimensions
}

// GetSimpleDimensionsOk returns a tuple with the SimpleDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetSimpleDimensionsOk() ([]SimpleDimension, bool) {
	if o == nil || IsNil(o.SimpleDimensions) {
		return nil, false
	}
	return o.SimpleDimensions, true
}

// HasSimpleDimensions returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasSimpleDimensions() bool {
	if o != nil && !IsNil(o.SimpleDimensions) {
		return true
	}

	return false
}

// SetSimpleDimensions gets a reference to the given []SimpleDimension and assigns it to the SimpleDimensions field.
func (o *EventVisualizationParams) SetSimpleDimensions(v []SimpleDimension) {
	o.SimpleDimensions = v
}

// GetSkipRounding returns the SkipRounding field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetSkipRounding() bool {
	if o == nil || IsNil(o.SkipRounding) {
		var ret bool
		return ret
	}
	return *o.SkipRounding
}

// GetSkipRoundingOk returns a tuple with the SkipRounding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetSkipRoundingOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipRounding) {
		return nil, false
	}
	return o.SkipRounding, true
}

// HasSkipRounding returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasSkipRounding() bool {
	if o != nil && !IsNil(o.SkipRounding) {
		return true
	}

	return false
}

// SetSkipRounding gets a reference to the given bool and assigns it to the SkipRounding field.
func (o *EventVisualizationParams) SetSkipRounding(v bool) {
	o.SkipRounding = &v
}

// GetSortOrder returns the SortOrder field value
func (o *EventVisualizationParams) GetSortOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortOrder, true
}

// SetSortOrder sets field value
func (o *EventVisualizationParams) SetSortOrder(v int32) {
	o.SortOrder = v
}

// GetSorting returns the Sorting field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetSorting() []Sorting {
	if o == nil || IsNil(o.Sorting) {
		var ret []Sorting
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetSortingOk() ([]Sorting, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []Sorting and assigns it to the Sorting field.
func (o *EventVisualizationParams) SetSorting(v []Sorting) {
	o.Sorting = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *EventVisualizationParams) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetSubscribed returns the Subscribed field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetSubscribed() bool {
	if o == nil || IsNil(o.Subscribed) {
		var ret bool
		return ret
	}
	return *o.Subscribed
}

// GetSubscribedOk returns a tuple with the Subscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetSubscribedOk() (*bool, bool) {
	if o == nil || IsNil(o.Subscribed) {
		return nil, false
	}
	return o.Subscribed, true
}

// HasSubscribed returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasSubscribed() bool {
	if o != nil && !IsNil(o.Subscribed) {
		return true
	}

	return false
}

// SetSubscribed gets a reference to the given bool and assigns it to the Subscribed field.
func (o *EventVisualizationParams) SetSubscribed(v bool) {
	o.Subscribed = &v
}

// GetSubscribers returns the Subscribers field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetSubscribers() []string {
	if o == nil || IsNil(o.Subscribers) {
		var ret []string
		return ret
	}
	return o.Subscribers
}

// GetSubscribersOk returns a tuple with the Subscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetSubscribersOk() ([]string, bool) {
	if o == nil || IsNil(o.Subscribers) {
		return nil, false
	}
	return o.Subscribers, true
}

// HasSubscribers returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasSubscribers() bool {
	if o != nil && !IsNil(o.Subscribers) {
		return true
	}

	return false
}

// SetSubscribers gets a reference to the given []string and assigns it to the Subscribers field.
func (o *EventVisualizationParams) SetSubscribers(v []string) {
	o.Subscribers = v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetSubtitle() string {
	if o == nil || IsNil(o.Subtitle) {
		var ret string
		return ret
	}
	return *o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetSubtitleOk() (*string, bool) {
	if o == nil || IsNil(o.Subtitle) {
		return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasSubtitle() bool {
	if o != nil && !IsNil(o.Subtitle) {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given string and assigns it to the Subtitle field.
func (o *EventVisualizationParams) SetSubtitle(v string) {
	o.Subtitle = &v
}

// GetTargetLineLabel returns the TargetLineLabel field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetTargetLineLabel() string {
	if o == nil || IsNil(o.TargetLineLabel) {
		var ret string
		return ret
	}
	return *o.TargetLineLabel
}

// GetTargetLineLabelOk returns a tuple with the TargetLineLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetTargetLineLabelOk() (*string, bool) {
	if o == nil || IsNil(o.TargetLineLabel) {
		return nil, false
	}
	return o.TargetLineLabel, true
}

// HasTargetLineLabel returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasTargetLineLabel() bool {
	if o != nil && !IsNil(o.TargetLineLabel) {
		return true
	}

	return false
}

// SetTargetLineLabel gets a reference to the given string and assigns it to the TargetLineLabel field.
func (o *EventVisualizationParams) SetTargetLineLabel(v string) {
	o.TargetLineLabel = &v
}

// GetTargetLineValue returns the TargetLineValue field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetTargetLineValue() float64 {
	if o == nil || IsNil(o.TargetLineValue) {
		var ret float64
		return ret
	}
	return *o.TargetLineValue
}

// GetTargetLineValueOk returns a tuple with the TargetLineValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetTargetLineValueOk() (*float64, bool) {
	if o == nil || IsNil(o.TargetLineValue) {
		return nil, false
	}
	return o.TargetLineValue, true
}

// HasTargetLineValue returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasTargetLineValue() bool {
	if o != nil && !IsNil(o.TargetLineValue) {
		return true
	}

	return false
}

// SetTargetLineValue gets a reference to the given float64 and assigns it to the TargetLineValue field.
func (o *EventVisualizationParams) SetTargetLineValue(v float64) {
	o.TargetLineValue = &v
}

// GetTimeField returns the TimeField field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetTimeField() string {
	if o == nil || IsNil(o.TimeField) {
		var ret string
		return ret
	}
	return *o.TimeField
}

// GetTimeFieldOk returns a tuple with the TimeField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetTimeFieldOk() (*string, bool) {
	if o == nil || IsNil(o.TimeField) {
		return nil, false
	}
	return o.TimeField, true
}

// HasTimeField returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasTimeField() bool {
	if o != nil && !IsNil(o.TimeField) {
		return true
	}

	return false
}

// SetTimeField gets a reference to the given string and assigns it to the TimeField field.
func (o *EventVisualizationParams) SetTimeField(v string) {
	o.TimeField = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *EventVisualizationParams) SetTitle(v string) {
	o.Title = &v
}

// GetTopLimit returns the TopLimit field value
func (o *EventVisualizationParams) GetTopLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TopLimit
}

// GetTopLimitOk returns a tuple with the TopLimit field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetTopLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopLimit, true
}

// SetTopLimit sets field value
func (o *EventVisualizationParams) SetTopLimit(v int32) {
	o.TopLimit = v
}

// GetTrackedEntityType returns the TrackedEntityType field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetTrackedEntityType() TrackedEntityTypeParams {
	if o == nil || IsNil(o.TrackedEntityType) {
		var ret TrackedEntityTypeParams
		return ret
	}
	return *o.TrackedEntityType
}

// GetTrackedEntityTypeOk returns a tuple with the TrackedEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetTrackedEntityTypeOk() (*TrackedEntityTypeParams, bool) {
	if o == nil || IsNil(o.TrackedEntityType) {
		return nil, false
	}
	return o.TrackedEntityType, true
}

// HasTrackedEntityType returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasTrackedEntityType() bool {
	if o != nil && !IsNil(o.TrackedEntityType) {
		return true
	}

	return false
}

// SetTrackedEntityType gets a reference to the given TrackedEntityTypeParams and assigns it to the TrackedEntityType field.
func (o *EventVisualizationParams) SetTrackedEntityType(v TrackedEntityTypeParams) {
	o.TrackedEntityType = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *EventVisualizationParams) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetType returns the Type field value
func (o *EventVisualizationParams) GetType() EventVisualizationType {
	if o == nil {
		var ret EventVisualizationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetTypeOk() (*EventVisualizationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventVisualizationParams) SetType(v EventVisualizationType) {
	o.Type = v
}

// GetUserOrgUnitType returns the UserOrgUnitType field value
func (o *EventVisualizationParams) GetUserOrgUnitType() UserOrgUnitType {
	if o == nil {
		var ret UserOrgUnitType
		return ret
	}

	return o.UserOrgUnitType
}

// GetUserOrgUnitTypeOk returns a tuple with the UserOrgUnitType field value
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetUserOrgUnitTypeOk() (*UserOrgUnitType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserOrgUnitType, true
}

// SetUserOrgUnitType sets field value
func (o *EventVisualizationParams) SetUserOrgUnitType(v UserOrgUnitType) {
	o.UserOrgUnitType = v
}

// GetUserOrganisationUnit returns the UserOrganisationUnit field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetUserOrganisationUnit() bool {
	if o == nil || IsNil(o.UserOrganisationUnit) {
		var ret bool
		return ret
	}
	return *o.UserOrganisationUnit
}

// GetUserOrganisationUnitOk returns a tuple with the UserOrganisationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetUserOrganisationUnitOk() (*bool, bool) {
	if o == nil || IsNil(o.UserOrganisationUnit) {
		return nil, false
	}
	return o.UserOrganisationUnit, true
}

// HasUserOrganisationUnit returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasUserOrganisationUnit() bool {
	if o != nil && !IsNil(o.UserOrganisationUnit) {
		return true
	}

	return false
}

// SetUserOrganisationUnit gets a reference to the given bool and assigns it to the UserOrganisationUnit field.
func (o *EventVisualizationParams) SetUserOrganisationUnit(v bool) {
	o.UserOrganisationUnit = &v
}

// GetUserOrganisationUnitChildren returns the UserOrganisationUnitChildren field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetUserOrganisationUnitChildren() bool {
	if o == nil || IsNil(o.UserOrganisationUnitChildren) {
		var ret bool
		return ret
	}
	return *o.UserOrganisationUnitChildren
}

// GetUserOrganisationUnitChildrenOk returns a tuple with the UserOrganisationUnitChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetUserOrganisationUnitChildrenOk() (*bool, bool) {
	if o == nil || IsNil(o.UserOrganisationUnitChildren) {
		return nil, false
	}
	return o.UserOrganisationUnitChildren, true
}

// HasUserOrganisationUnitChildren returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasUserOrganisationUnitChildren() bool {
	if o != nil && !IsNil(o.UserOrganisationUnitChildren) {
		return true
	}

	return false
}

// SetUserOrganisationUnitChildren gets a reference to the given bool and assigns it to the UserOrganisationUnitChildren field.
func (o *EventVisualizationParams) SetUserOrganisationUnitChildren(v bool) {
	o.UserOrganisationUnitChildren = &v
}

// GetUserOrganisationUnitGrandChildren returns the UserOrganisationUnitGrandChildren field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetUserOrganisationUnitGrandChildren() bool {
	if o == nil || IsNil(o.UserOrganisationUnitGrandChildren) {
		var ret bool
		return ret
	}
	return *o.UserOrganisationUnitGrandChildren
}

// GetUserOrganisationUnitGrandChildrenOk returns a tuple with the UserOrganisationUnitGrandChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetUserOrganisationUnitGrandChildrenOk() (*bool, bool) {
	if o == nil || IsNil(o.UserOrganisationUnitGrandChildren) {
		return nil, false
	}
	return o.UserOrganisationUnitGrandChildren, true
}

// HasUserOrganisationUnitGrandChildren returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasUserOrganisationUnitGrandChildren() bool {
	if o != nil && !IsNil(o.UserOrganisationUnitGrandChildren) {
		return true
	}

	return false
}

// SetUserOrganisationUnitGrandChildren gets a reference to the given bool and assigns it to the UserOrganisationUnitGrandChildren field.
func (o *EventVisualizationParams) SetUserOrganisationUnitGrandChildren(v bool) {
	o.UserOrganisationUnitGrandChildren = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EventVisualizationParams) GetValue() BaseDimensionalObjectParamsItemsInner {
	if o == nil || IsNil(o.Value) {
		var ret BaseDimensionalObjectParamsItemsInner
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventVisualizationParams) GetValueOk() (*BaseDimensionalObjectParamsItemsInner, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EventVisualizationParams) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given BaseDimensionalObjectParamsItemsInner and assigns it to the Value field.
func (o *EventVisualizationParams) SetValue(v BaseDimensionalObjectParamsItemsInner) {
	o.Value = &v
}

func (o EventVisualizationParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventVisualizationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregationType"] = o.AggregationType
	if !IsNil(o.AttributeDimensions) {
		toSerialize["attributeDimensions"] = o.AttributeDimensions
	}
	if !IsNil(o.AttributeValueDimension) {
		toSerialize["attributeValueDimension"] = o.AttributeValueDimension
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.BaseLineLabel) {
		toSerialize["baseLineLabel"] = o.BaseLineLabel
	}
	if !IsNil(o.BaseLineValue) {
		toSerialize["baseLineValue"] = o.BaseLineValue
	}
	if !IsNil(o.CategoryDimensions) {
		toSerialize["categoryDimensions"] = o.CategoryDimensions
	}
	if !IsNil(o.CategoryOptionGroupSetDimensions) {
		toSerialize["categoryOptionGroupSetDimensions"] = o.CategoryOptionGroupSetDimensions
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.ColSubTotals) {
		toSerialize["colSubTotals"] = o.ColSubTotals
	}
	if !IsNil(o.ColTotals) {
		toSerialize["colTotals"] = o.ColTotals
	}
	if !IsNil(o.CollapseDataDimensions) {
		toSerialize["collapseDataDimensions"] = o.CollapseDataDimensions
	}
	if !IsNil(o.ColumnDimensions) {
		toSerialize["columnDimensions"] = o.ColumnDimensions
	}
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	if !IsNil(o.CompletedOnly) {
		toSerialize["completedOnly"] = o.CompletedOnly
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CumulativeValues) {
		toSerialize["cumulativeValues"] = o.CumulativeValues
	}
	if !IsNil(o.DataDimensionItems) {
		toSerialize["dataDimensionItems"] = o.DataDimensionItems
	}
	if !IsNil(o.DataElementDimensions) {
		toSerialize["dataElementDimensions"] = o.DataElementDimensions
	}
	if !IsNil(o.DataElementGroupSetDimensions) {
		toSerialize["dataElementGroupSetDimensions"] = o.DataElementGroupSetDimensions
	}
	if !IsNil(o.DataElementValueDimension) {
		toSerialize["dataElementValueDimension"] = o.DataElementValueDimension
	}
	toSerialize["dataType"] = o.DataType
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["digitGroupSeparator"] = o.DigitGroupSeparator
	if !IsNil(o.DisplayBaseLineLabel) {
		toSerialize["displayBaseLineLabel"] = o.DisplayBaseLineLabel
	}
	toSerialize["displayDensity"] = o.DisplayDensity
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayDomainAxisLabel) {
		toSerialize["displayDomainAxisLabel"] = o.DisplayDomainAxisLabel
	}
	if !IsNil(o.DisplayFormName) {
		toSerialize["displayFormName"] = o.DisplayFormName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayRangeAxisLabel) {
		toSerialize["displayRangeAxisLabel"] = o.DisplayRangeAxisLabel
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	if !IsNil(o.DisplaySubtitle) {
		toSerialize["displaySubtitle"] = o.DisplaySubtitle
	}
	if !IsNil(o.DisplayTargetLineLabel) {
		toSerialize["displayTargetLineLabel"] = o.DisplayTargetLineLabel
	}
	if !IsNil(o.DisplayTitle) {
		toSerialize["displayTitle"] = o.DisplayTitle
	}
	if !IsNil(o.DomainAxisLabel) {
		toSerialize["domainAxisLabel"] = o.DomainAxisLabel
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	toSerialize["eventStatus"] = o.EventStatus
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FilterDimensions) {
		toSerialize["filterDimensions"] = o.FilterDimensions
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	toSerialize["fontSize"] = o.FontSize
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	toSerialize["hideEmptyRowItems"] = o.HideEmptyRowItems
	if !IsNil(o.HideEmptyRows) {
		toSerialize["hideEmptyRows"] = o.HideEmptyRows
	}
	if !IsNil(o.HideLegend) {
		toSerialize["hideLegend"] = o.HideLegend
	}
	if !IsNil(o.HideNaData) {
		toSerialize["hideNaData"] = o.HideNaData
	}
	if !IsNil(o.HideSubtitle) {
		toSerialize["hideSubtitle"] = o.HideSubtitle
	}
	if !IsNil(o.HideTitle) {
		toSerialize["hideTitle"] = o.HideTitle
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Interpretations) {
		toSerialize["interpretations"] = o.Interpretations
	}
	if !IsNil(o.ItemOrganisationUnitGroups) {
		toSerialize["itemOrganisationUnitGroups"] = o.ItemOrganisationUnitGroups
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Legacy) {
		toSerialize["legacy"] = o.Legacy
	}
	if !IsNil(o.Legend) {
		toSerialize["legend"] = o.Legend
	}
	if !IsNil(o.MetaData) {
		toSerialize["metaData"] = o.MetaData
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NoSpaceBetweenColumns) {
		toSerialize["noSpaceBetweenColumns"] = o.NoSpaceBetweenColumns
	}
	if !IsNil(o.OrgUnitField) {
		toSerialize["orgUnitField"] = o.OrgUnitField
	}
	if !IsNil(o.OrganisationUnitGroupSetDimensions) {
		toSerialize["organisationUnitGroupSetDimensions"] = o.OrganisationUnitGroupSetDimensions
	}
	if !IsNil(o.OrganisationUnitLevels) {
		toSerialize["organisationUnitLevels"] = o.OrganisationUnitLevels
	}
	if !IsNil(o.OrganisationUnits) {
		toSerialize["organisationUnits"] = o.OrganisationUnits
	}
	toSerialize["outputType"] = o.OutputType
	if !IsNil(o.PercentStackedValues) {
		toSerialize["percentStackedValues"] = o.PercentStackedValues
	}
	if !IsNil(o.Periods) {
		toSerialize["periods"] = o.Periods
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.ProgramDimensions) {
		toSerialize["programDimensions"] = o.ProgramDimensions
	}
	if !IsNil(o.ProgramIndicatorDimensions) {
		toSerialize["programIndicatorDimensions"] = o.ProgramIndicatorDimensions
	}
	if !IsNil(o.ProgramStage) {
		toSerialize["programStage"] = o.ProgramStage
	}
	toSerialize["programStatus"] = o.ProgramStatus
	if !IsNil(o.RangeAxisDecimals) {
		toSerialize["rangeAxisDecimals"] = o.RangeAxisDecimals
	}
	if !IsNil(o.RangeAxisLabel) {
		toSerialize["rangeAxisLabel"] = o.RangeAxisLabel
	}
	if !IsNil(o.RangeAxisMaxValue) {
		toSerialize["rangeAxisMaxValue"] = o.RangeAxisMaxValue
	}
	if !IsNil(o.RangeAxisMinValue) {
		toSerialize["rangeAxisMinValue"] = o.RangeAxisMinValue
	}
	if !IsNil(o.RangeAxisSteps) {
		toSerialize["rangeAxisSteps"] = o.RangeAxisSteps
	}
	toSerialize["regressionType"] = o.RegressionType
	if !IsNil(o.RelativePeriods) {
		toSerialize["relativePeriods"] = o.RelativePeriods
	}
	if !IsNil(o.Repetitions) {
		toSerialize["repetitions"] = o.Repetitions
	}
	if !IsNil(o.RowDimensions) {
		toSerialize["rowDimensions"] = o.RowDimensions
	}
	if !IsNil(o.RowSubTotals) {
		toSerialize["rowSubTotals"] = o.RowSubTotals
	}
	if !IsNil(o.RowTotals) {
		toSerialize["rowTotals"] = o.RowTotals
	}
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.ShowData) {
		toSerialize["showData"] = o.ShowData
	}
	if !IsNil(o.ShowDimensionLabels) {
		toSerialize["showDimensionLabels"] = o.ShowDimensionLabels
	}
	if !IsNil(o.ShowHierarchy) {
		toSerialize["showHierarchy"] = o.ShowHierarchy
	}
	if !IsNil(o.SimpleDimensions) {
		toSerialize["simpleDimensions"] = o.SimpleDimensions
	}
	if !IsNil(o.SkipRounding) {
		toSerialize["skipRounding"] = o.SkipRounding
	}
	toSerialize["sortOrder"] = o.SortOrder
	if !IsNil(o.Sorting) {
		toSerialize["sorting"] = o.Sorting
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.Subscribed) {
		toSerialize["subscribed"] = o.Subscribed
	}
	if !IsNil(o.Subscribers) {
		toSerialize["subscribers"] = o.Subscribers
	}
	if !IsNil(o.Subtitle) {
		toSerialize["subtitle"] = o.Subtitle
	}
	if !IsNil(o.TargetLineLabel) {
		toSerialize["targetLineLabel"] = o.TargetLineLabel
	}
	if !IsNil(o.TargetLineValue) {
		toSerialize["targetLineValue"] = o.TargetLineValue
	}
	if !IsNil(o.TimeField) {
		toSerialize["timeField"] = o.TimeField
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["topLimit"] = o.TopLimit
	if !IsNil(o.TrackedEntityType) {
		toSerialize["trackedEntityType"] = o.TrackedEntityType
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	toSerialize["type"] = o.Type
	toSerialize["userOrgUnitType"] = o.UserOrgUnitType
	if !IsNil(o.UserOrganisationUnit) {
		toSerialize["userOrganisationUnit"] = o.UserOrganisationUnit
	}
	if !IsNil(o.UserOrganisationUnitChildren) {
		toSerialize["userOrganisationUnitChildren"] = o.UserOrganisationUnitChildren
	}
	if !IsNil(o.UserOrganisationUnitGrandChildren) {
		toSerialize["userOrganisationUnitGrandChildren"] = o.UserOrganisationUnitGrandChildren
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *EventVisualizationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregationType",
		"dataType",
		"digitGroupSeparator",
		"displayDensity",
		"eventStatus",
		"fontSize",
		"hideEmptyRowItems",
		"outputType",
		"programStatus",
		"regressionType",
		"sortOrder",
		"topLimit",
		"type",
		"userOrgUnitType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventVisualizationParams := _EventVisualizationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventVisualizationParams)

	if err != nil {
		return err
	}

	*o = EventVisualizationParams(varEventVisualizationParams)

	return err
}

type NullableEventVisualizationParams struct {
	value *EventVisualizationParams
	isSet bool
}

func (v NullableEventVisualizationParams) Get() *EventVisualizationParams {
	return v.value
}

func (v *NullableEventVisualizationParams) Set(val *EventVisualizationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableEventVisualizationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableEventVisualizationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventVisualizationParams(val *EventVisualizationParams) *NullableEventVisualizationParams {
	return &NullableEventVisualizationParams{value: val, isSet: true}
}

func (v NullableEventVisualizationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventVisualizationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
