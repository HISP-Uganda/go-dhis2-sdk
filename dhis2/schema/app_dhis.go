/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the AppDhis type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDhis{}

// AppDhis struct for AppDhis
type AppDhis struct {
	AdditionalNamespaces []DatastoreNamespace `json:"additionalNamespaces,omitempty"`
	Href                 *string              `json:"href,omitempty"`
	Namespace            *string              `json:"namespace,omitempty"`
}

// NewAppDhis instantiates a new AppDhis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDhis() *AppDhis {
	this := AppDhis{}
	return &this
}

// NewAppDhisWithDefaults instantiates a new AppDhis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDhisWithDefaults() *AppDhis {
	this := AppDhis{}
	return &this
}

// GetAdditionalNamespaces returns the AdditionalNamespaces field value if set, zero value otherwise.
func (o *AppDhis) GetAdditionalNamespaces() []DatastoreNamespace {
	if o == nil || IsNil(o.AdditionalNamespaces) {
		var ret []DatastoreNamespace
		return ret
	}
	return o.AdditionalNamespaces
}

// GetAdditionalNamespacesOk returns a tuple with the AdditionalNamespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDhis) GetAdditionalNamespacesOk() ([]DatastoreNamespace, bool) {
	if o == nil || IsNil(o.AdditionalNamespaces) {
		return nil, false
	}
	return o.AdditionalNamespaces, true
}

// HasAdditionalNamespaces returns a boolean if a field has been set.
func (o *AppDhis) HasAdditionalNamespaces() bool {
	if o != nil && !IsNil(o.AdditionalNamespaces) {
		return true
	}

	return false
}

// SetAdditionalNamespaces gets a reference to the given []DatastoreNamespace and assigns it to the AdditionalNamespaces field.
func (o *AppDhis) SetAdditionalNamespaces(v []DatastoreNamespace) {
	o.AdditionalNamespaces = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *AppDhis) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDhis) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *AppDhis) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *AppDhis) SetHref(v string) {
	o.Href = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *AppDhis) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDhis) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *AppDhis) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *AppDhis) SetNamespace(v string) {
	o.Namespace = &v
}

func (o AppDhis) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDhis) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalNamespaces) {
		toSerialize["additionalNamespaces"] = o.AdditionalNamespaces
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	return toSerialize, nil
}

type NullableAppDhis struct {
	value *AppDhis
	isSet bool
}

func (v NullableAppDhis) Get() *AppDhis {
	return v.value
}

func (v *NullableAppDhis) Set(val *AppDhis) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDhis) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDhis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDhis(val *AppDhis) *NullableAppDhis {
	return &NullableAppDhis{value: val, isSet: true}
}

func (v NullableAppDhis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDhis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
