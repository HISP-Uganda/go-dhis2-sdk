/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// EventHookPropertyNames the model 'EventHookPropertyNames'
type EventHookPropertyNames string

// List of EventHookPropertyNames
const (
	EVENTHOOKPROPERTYNAMES_ACCESS           EventHookPropertyNames = "access"
	EVENTHOOKPROPERTYNAMES_ATTRIBUTE_VALUES EventHookPropertyNames = "attributeValues"
	EVENTHOOKPROPERTYNAMES_CODE             EventHookPropertyNames = "code"
	EVENTHOOKPROPERTYNAMES_CREATED          EventHookPropertyNames = "created"
	EVENTHOOKPROPERTYNAMES_CREATED_BY       EventHookPropertyNames = "createdBy"
	EVENTHOOKPROPERTYNAMES_DESCRIPTION      EventHookPropertyNames = "description"
	EVENTHOOKPROPERTYNAMES_DISABLED         EventHookPropertyNames = "disabled"
	EVENTHOOKPROPERTYNAMES_DISPLAY_NAME     EventHookPropertyNames = "displayName"
	EVENTHOOKPROPERTYNAMES_FAVORITE         EventHookPropertyNames = "favorite"
	EVENTHOOKPROPERTYNAMES_FAVORITES        EventHookPropertyNames = "favorites"
	EVENTHOOKPROPERTYNAMES_HREF             EventHookPropertyNames = "href"
	EVENTHOOKPROPERTYNAMES_ID               EventHookPropertyNames = "id"
	EVENTHOOKPROPERTYNAMES_LAST_UPDATED     EventHookPropertyNames = "lastUpdated"
	EVENTHOOKPROPERTYNAMES_LAST_UPDATED_BY  EventHookPropertyNames = "lastUpdatedBy"
	EVENTHOOKPROPERTYNAMES_NAME             EventHookPropertyNames = "name"
	EVENTHOOKPROPERTYNAMES_SHARING          EventHookPropertyNames = "sharing"
	EVENTHOOKPROPERTYNAMES_SOURCE           EventHookPropertyNames = "source"
	EVENTHOOKPROPERTYNAMES_TARGETS          EventHookPropertyNames = "targets"
	EVENTHOOKPROPERTYNAMES_TRANSLATIONS     EventHookPropertyNames = "translations"
)

// All allowed values of EventHookPropertyNames enum
var AllowedEventHookPropertyNamesEnumValues = []EventHookPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"disabled",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"sharing",
	"source",
	"targets",
	"translations",
}

func (v *EventHookPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventHookPropertyNames(value)
	for _, existing := range AllowedEventHookPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventHookPropertyNames", value)
}

// NewEventHookPropertyNamesFromValue returns a pointer to a valid EventHookPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventHookPropertyNamesFromValue(v string) (*EventHookPropertyNames, error) {
	ev := EventHookPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventHookPropertyNames: valid values are %v", v, AllowedEventHookPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventHookPropertyNames) IsValid() bool {
	for _, existing := range AllowedEventHookPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventHookPropertyNames value
func (v EventHookPropertyNames) Ptr() *EventHookPropertyNames {
	return &v
}

type NullableEventHookPropertyNames struct {
	value *EventHookPropertyNames
	isSet bool
}

func (v NullableEventHookPropertyNames) Get() *EventHookPropertyNames {
	return v.value
}

func (v *NullableEventHookPropertyNames) Set(val *EventHookPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableEventHookPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableEventHookPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventHookPropertyNames(val *EventHookPropertyNames) *NullableEventHookPropertyNames {
	return &NullableEventHookPropertyNames{value: val, isSet: true}
}

func (v NullableEventHookPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventHookPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
