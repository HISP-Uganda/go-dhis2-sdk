/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TrackerImportReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackerImportReport{}

// TrackerImportReport struct for TrackerImportReport
type TrackerImportReport struct {
	BundleReport     *PersistenceReport `json:"bundleReport,omitempty"`
	Message          *string            `json:"message,omitempty"`
	Stats            *TrackerStats      `json:"stats,omitempty"`
	Status           TrackerStatus      `json:"status"`
	ValidationReport *ValidationReport  `json:"validationReport,omitempty"`
}

type _TrackerImportReport TrackerImportReport

// NewTrackerImportReport instantiates a new TrackerImportReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackerImportReport(status TrackerStatus) *TrackerImportReport {
	this := TrackerImportReport{}
	this.Status = status
	return &this
}

// NewTrackerImportReportWithDefaults instantiates a new TrackerImportReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackerImportReportWithDefaults() *TrackerImportReport {
	this := TrackerImportReport{}
	return &this
}

// GetBundleReport returns the BundleReport field value if set, zero value otherwise.
func (o *TrackerImportReport) GetBundleReport() PersistenceReport {
	if o == nil || IsNil(o.BundleReport) {
		var ret PersistenceReport
		return ret
	}
	return *o.BundleReport
}

// GetBundleReportOk returns a tuple with the BundleReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerImportReport) GetBundleReportOk() (*PersistenceReport, bool) {
	if o == nil || IsNil(o.BundleReport) {
		return nil, false
	}
	return o.BundleReport, true
}

// HasBundleReport returns a boolean if a field has been set.
func (o *TrackerImportReport) HasBundleReport() bool {
	if o != nil && !IsNil(o.BundleReport) {
		return true
	}

	return false
}

// SetBundleReport gets a reference to the given PersistenceReport and assigns it to the BundleReport field.
func (o *TrackerImportReport) SetBundleReport(v PersistenceReport) {
	o.BundleReport = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *TrackerImportReport) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerImportReport) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *TrackerImportReport) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *TrackerImportReport) SetMessage(v string) {
	o.Message = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *TrackerImportReport) GetStats() TrackerStats {
	if o == nil || IsNil(o.Stats) {
		var ret TrackerStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerImportReport) GetStatsOk() (*TrackerStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *TrackerImportReport) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given TrackerStats and assigns it to the Stats field.
func (o *TrackerImportReport) SetStats(v TrackerStats) {
	o.Stats = &v
}

// GetStatus returns the Status field value
func (o *TrackerImportReport) GetStatus() TrackerStatus {
	if o == nil {
		var ret TrackerStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TrackerImportReport) GetStatusOk() (*TrackerStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TrackerImportReport) SetStatus(v TrackerStatus) {
	o.Status = v
}

// GetValidationReport returns the ValidationReport field value if set, zero value otherwise.
func (o *TrackerImportReport) GetValidationReport() ValidationReport {
	if o == nil || IsNil(o.ValidationReport) {
		var ret ValidationReport
		return ret
	}
	return *o.ValidationReport
}

// GetValidationReportOk returns a tuple with the ValidationReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerImportReport) GetValidationReportOk() (*ValidationReport, bool) {
	if o == nil || IsNil(o.ValidationReport) {
		return nil, false
	}
	return o.ValidationReport, true
}

// HasValidationReport returns a boolean if a field has been set.
func (o *TrackerImportReport) HasValidationReport() bool {
	if o != nil && !IsNil(o.ValidationReport) {
		return true
	}

	return false
}

// SetValidationReport gets a reference to the given ValidationReport and assigns it to the ValidationReport field.
func (o *TrackerImportReport) SetValidationReport(v ValidationReport) {
	o.ValidationReport = &v
}

func (o TrackerImportReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackerImportReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BundleReport) {
		toSerialize["bundleReport"] = o.BundleReport
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.ValidationReport) {
		toSerialize["validationReport"] = o.ValidationReport
	}
	return toSerialize, nil
}

func (o *TrackerImportReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackerImportReport := _TrackerImportReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackerImportReport)

	if err != nil {
		return err
	}

	*o = TrackerImportReport(varTrackerImportReport)

	return err
}

type NullableTrackerImportReport struct {
	value *TrackerImportReport
	isSet bool
}

func (v NullableTrackerImportReport) Get() *TrackerImportReport {
	return v.value
}

func (v *NullableTrackerImportReport) Set(val *TrackerImportReport) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerImportReport) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerImportReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerImportReport(val *TrackerImportReport) *NullableTrackerImportReport {
	return &NullableTrackerImportReport{value: val, isSet: true}
}

func (v NullableTrackerImportReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerImportReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
