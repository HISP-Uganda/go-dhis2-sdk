/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AppStatus the model 'AppStatus'
type AppStatus string

// List of AppStatus
const (
	APPSTATUS_OK                           AppStatus = "OK"
	APPSTATUS_INVALID_BUNDLED_APP_OVERRIDE AppStatus = "INVALID_BUNDLED_APP_OVERRIDE"
	APPSTATUS_INVALID_CORE_APP             AppStatus = "INVALID_CORE_APP"
	APPSTATUS_NAMESPACE_TAKEN              AppStatus = "NAMESPACE_TAKEN"
	APPSTATUS_NAMESPACE_INVALID            AppStatus = "NAMESPACE_INVALID"
	APPSTATUS_INVALID_ZIP_FORMAT           AppStatus = "INVALID_ZIP_FORMAT"
	APPSTATUS_MISSING_MANIFEST             AppStatus = "MISSING_MANIFEST"
	APPSTATUS_INVALID_MANIFEST_JSON        AppStatus = "INVALID_MANIFEST_JSON"
	APPSTATUS_INSTALLATION_FAILED          AppStatus = "INSTALLATION_FAILED"
	APPSTATUS_NOT_FOUND                    AppStatus = "NOT_FOUND"
	APPSTATUS_MISSING_SYSTEM_BASE_URL      AppStatus = "MISSING_SYSTEM_BASE_URL"
	APPSTATUS_APPROVED                     AppStatus = "APPROVED"
	APPSTATUS_PENDING                      AppStatus = "PENDING"
	APPSTATUS_NOT_APPROVED                 AppStatus = "NOT_APPROVED"
	APPSTATUS_DELETION_IN_PROGRESS         AppStatus = "DELETION_IN_PROGRESS"
)

// All allowed values of AppStatus enum
var AllowedAppStatusEnumValues = []AppStatus{
	"OK",
	"INVALID_BUNDLED_APP_OVERRIDE",
	"INVALID_CORE_APP",
	"NAMESPACE_TAKEN",
	"NAMESPACE_INVALID",
	"INVALID_ZIP_FORMAT",
	"MISSING_MANIFEST",
	"INVALID_MANIFEST_JSON",
	"INSTALLATION_FAILED",
	"NOT_FOUND",
	"MISSING_SYSTEM_BASE_URL",
	"APPROVED",
	"PENDING",
	"NOT_APPROVED",
	"DELETION_IN_PROGRESS",
}

func (v *AppStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppStatus(value)
	for _, existing := range AllowedAppStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppStatus", value)
}

// NewAppStatusFromValue returns a pointer to a valid AppStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppStatusFromValue(v string) (*AppStatus, error) {
	ev := AppStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppStatus: valid values are %v", v, AllowedAppStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppStatus) IsValid() bool {
	for _, existing := range AllowedAppStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppStatus value
func (v AppStatus) Ptr() *AppStatus {
	return &v
}

type NullableAppStatus struct {
	value *AppStatus
	isSet bool
}

func (v NullableAppStatus) Get() *AppStatus {
	return v.value
}

func (v *NullableAppStatus) Set(val *AppStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAppStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAppStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppStatus(val *AppStatus) *NullableAppStatus {
	return &NullableAppStatus{value: val, isSet: true}
}

func (v NullableAppStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
