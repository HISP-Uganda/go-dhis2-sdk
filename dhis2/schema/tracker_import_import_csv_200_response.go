/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TrackerImportImportCsv200Response - struct for TrackerImportImportCsv200Response
type TrackerImportImportCsv200Response struct {
	TrackerImportReport *TrackerImportReport
	WebMessage          *WebMessage
}

// TrackerImportReportAsTrackerImportImportCsv200Response is a convenience function that returns TrackerImportReport wrapped in TrackerImportImportCsv200Response
func TrackerImportReportAsTrackerImportImportCsv200Response(v *TrackerImportReport) TrackerImportImportCsv200Response {
	return TrackerImportImportCsv200Response{
		TrackerImportReport: v,
	}
}

// WebMessageAsTrackerImportImportCsv200Response is a convenience function that returns WebMessage wrapped in TrackerImportImportCsv200Response
func WebMessageAsTrackerImportImportCsv200Response(v *WebMessage) TrackerImportImportCsv200Response {
	return TrackerImportImportCsv200Response{
		WebMessage: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TrackerImportImportCsv200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TrackerImportReport
	err = newStrictDecoder(data).Decode(&dst.TrackerImportReport)
	if err == nil {
		jsonTrackerImportReport, _ := json.Marshal(dst.TrackerImportReport)
		if string(jsonTrackerImportReport) == "{}" { // empty struct
			dst.TrackerImportReport = nil
		} else {
			match++
		}
	} else {
		dst.TrackerImportReport = nil
	}

	// try to unmarshal data into WebMessage
	err = newStrictDecoder(data).Decode(&dst.WebMessage)
	if err == nil {
		jsonWebMessage, _ := json.Marshal(dst.WebMessage)
		if string(jsonWebMessage) == "{}" { // empty struct
			dst.WebMessage = nil
		} else {
			match++
		}
	} else {
		dst.WebMessage = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TrackerImportReport = nil
		dst.WebMessage = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TrackerImportImportCsv200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TrackerImportImportCsv200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TrackerImportImportCsv200Response) MarshalJSON() ([]byte, error) {
	if src.TrackerImportReport != nil {
		return json.Marshal(&src.TrackerImportReport)
	}

	if src.WebMessage != nil {
		return json.Marshal(&src.WebMessage)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TrackerImportImportCsv200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TrackerImportReport != nil {
		return obj.TrackerImportReport
	}

	if obj.WebMessage != nil {
		return obj.WebMessage
	}

	// all schemas are nil
	return nil
}

type NullableTrackerImportImportCsv200Response struct {
	value *TrackerImportImportCsv200Response
	isSet bool
}

func (v NullableTrackerImportImportCsv200Response) Get() *TrackerImportImportCsv200Response {
	return v.value
}

func (v *NullableTrackerImportImportCsv200Response) Set(val *TrackerImportImportCsv200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerImportImportCsv200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerImportImportCsv200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerImportImportCsv200Response(val *TrackerImportImportCsv200Response) *NullableTrackerImportImportCsv200Response {
	return &NullableTrackerImportImportCsv200Response{value: val, isSet: true}
}

func (v NullableTrackerImportImportCsv200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerImportImportCsv200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
