/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PeriodTypeEnum the model 'PeriodTypeEnum'
type PeriodTypeEnum string

// List of PeriodTypeEnum
const (
	PERIODTYPEENUM_BI_MONTHLY        PeriodTypeEnum = "BI_MONTHLY"
	PERIODTYPEENUM_BI_WEEKLY         PeriodTypeEnum = "BI_WEEKLY"
	PERIODTYPEENUM_DAILY             PeriodTypeEnum = "DAILY"
	PERIODTYPEENUM_FINANCIAL_APRIL   PeriodTypeEnum = "FINANCIAL_APRIL"
	PERIODTYPEENUM_FINANCIAL_JULY    PeriodTypeEnum = "FINANCIAL_JULY"
	PERIODTYPEENUM_FINANCIAL_NOV     PeriodTypeEnum = "FINANCIAL_NOV"
	PERIODTYPEENUM_FINANCIAL_SEP     PeriodTypeEnum = "FINANCIAL_SEP"
	PERIODTYPEENUM_FINANCIAL_OCT     PeriodTypeEnum = "FINANCIAL_OCT"
	PERIODTYPEENUM_MONTHLY           PeriodTypeEnum = "MONTHLY"
	PERIODTYPEENUM_QUARTERLY         PeriodTypeEnum = "QUARTERLY"
	PERIODTYPEENUM_QUARTERLY_NOV     PeriodTypeEnum = "QUARTERLY_NOV"
	PERIODTYPEENUM_SIX_MONTHLY_APRIL PeriodTypeEnum = "SIX_MONTHLY_APRIL"
	PERIODTYPEENUM_SIX_MONTHLY_NOV   PeriodTypeEnum = "SIX_MONTHLY_NOV"
	PERIODTYPEENUM_SIX_MONTHLY       PeriodTypeEnum = "SIX_MONTHLY"
	PERIODTYPEENUM_TWO_YEARLY        PeriodTypeEnum = "TWO_YEARLY"
	PERIODTYPEENUM_WEEKLY            PeriodTypeEnum = "WEEKLY"
	PERIODTYPEENUM_WEEKLY_SATURDAY   PeriodTypeEnum = "WEEKLY_SATURDAY"
	PERIODTYPEENUM_WEEKLY_SUNDAY     PeriodTypeEnum = "WEEKLY_SUNDAY"
	PERIODTYPEENUM_WEEKLY_THURSDAY   PeriodTypeEnum = "WEEKLY_THURSDAY"
	PERIODTYPEENUM_WEEKLY_WEDNESDAY  PeriodTypeEnum = "WEEKLY_WEDNESDAY"
	PERIODTYPEENUM_YEARLY            PeriodTypeEnum = "YEARLY"
)

// All allowed values of PeriodTypeEnum enum
var AllowedPeriodTypeEnumEnumValues = []PeriodTypeEnum{
	"BI_MONTHLY",
	"BI_WEEKLY",
	"DAILY",
	"FINANCIAL_APRIL",
	"FINANCIAL_JULY",
	"FINANCIAL_NOV",
	"FINANCIAL_SEP",
	"FINANCIAL_OCT",
	"MONTHLY",
	"QUARTERLY",
	"QUARTERLY_NOV",
	"SIX_MONTHLY_APRIL",
	"SIX_MONTHLY_NOV",
	"SIX_MONTHLY",
	"TWO_YEARLY",
	"WEEKLY",
	"WEEKLY_SATURDAY",
	"WEEKLY_SUNDAY",
	"WEEKLY_THURSDAY",
	"WEEKLY_WEDNESDAY",
	"YEARLY",
}

func (v *PeriodTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PeriodTypeEnum(value)
	for _, existing := range AllowedPeriodTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PeriodTypeEnum", value)
}

// NewPeriodTypeEnumFromValue returns a pointer to a valid PeriodTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPeriodTypeEnumFromValue(v string) (*PeriodTypeEnum, error) {
	ev := PeriodTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PeriodTypeEnum: valid values are %v", v, AllowedPeriodTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PeriodTypeEnum) IsValid() bool {
	for _, existing := range AllowedPeriodTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PeriodTypeEnum value
func (v PeriodTypeEnum) Ptr() *PeriodTypeEnum {
	return &v
}

type NullablePeriodTypeEnum struct {
	value *PeriodTypeEnum
	isSet bool
}

func (v NullablePeriodTypeEnum) Get() *PeriodTypeEnum {
	return v.value
}

func (v *NullablePeriodTypeEnum) Set(val *PeriodTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriodTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriodTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriodTypeEnum(val *PeriodTypeEnum) *NullablePeriodTypeEnum {
	return &NullablePeriodTypeEnum{value: val, isSet: true}
}

func (v NullablePeriodTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriodTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
