/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// checks if the EventDataValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventDataValue{}

// EventDataValue struct for EventDataValue
type EventDataValue struct {
	Created               *time.Time        `json:"created,omitempty"`
	CreatedByUserInfo     *UserInfoSnapshot `json:"createdByUserInfo,omitempty"`
	LastUpdated           *time.Time        `json:"lastUpdated,omitempty"`
	LastUpdatedByUserInfo *UserInfoSnapshot `json:"lastUpdatedByUserInfo,omitempty"`
	ProvidedElsewhere     *bool             `json:"providedElsewhere,omitempty"`
	StoredBy              *string           `json:"storedBy,omitempty"`
	Value                 *string           `json:"value,omitempty"`
}

// NewEventDataValue instantiates a new EventDataValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventDataValue() *EventDataValue {
	this := EventDataValue{}
	return &this
}

// NewEventDataValueWithDefaults instantiates a new EventDataValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDataValueWithDefaults() *EventDataValue {
	this := EventDataValue{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *EventDataValue) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataValue) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *EventDataValue) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *EventDataValue) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedByUserInfo returns the CreatedByUserInfo field value if set, zero value otherwise.
func (o *EventDataValue) GetCreatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.CreatedByUserInfo
}

// GetCreatedByUserInfoOk returns a tuple with the CreatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataValue) GetCreatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		return nil, false
	}
	return o.CreatedByUserInfo, true
}

// HasCreatedByUserInfo returns a boolean if a field has been set.
func (o *EventDataValue) HasCreatedByUserInfo() bool {
	if o != nil && !IsNil(o.CreatedByUserInfo) {
		return true
	}

	return false
}

// SetCreatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the CreatedByUserInfo field.
func (o *EventDataValue) SetCreatedByUserInfo(v UserInfoSnapshot) {
	o.CreatedByUserInfo = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *EventDataValue) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataValue) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *EventDataValue) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *EventDataValue) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedByUserInfo returns the LastUpdatedByUserInfo field value if set, zero value otherwise.
func (o *EventDataValue) GetLastUpdatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.LastUpdatedByUserInfo
}

// GetLastUpdatedByUserInfoOk returns a tuple with the LastUpdatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataValue) GetLastUpdatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		return nil, false
	}
	return o.LastUpdatedByUserInfo, true
}

// HasLastUpdatedByUserInfo returns a boolean if a field has been set.
func (o *EventDataValue) HasLastUpdatedByUserInfo() bool {
	if o != nil && !IsNil(o.LastUpdatedByUserInfo) {
		return true
	}

	return false
}

// SetLastUpdatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the LastUpdatedByUserInfo field.
func (o *EventDataValue) SetLastUpdatedByUserInfo(v UserInfoSnapshot) {
	o.LastUpdatedByUserInfo = &v
}

// GetProvidedElsewhere returns the ProvidedElsewhere field value if set, zero value otherwise.
func (o *EventDataValue) GetProvidedElsewhere() bool {
	if o == nil || IsNil(o.ProvidedElsewhere) {
		var ret bool
		return ret
	}
	return *o.ProvidedElsewhere
}

// GetProvidedElsewhereOk returns a tuple with the ProvidedElsewhere field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataValue) GetProvidedElsewhereOk() (*bool, bool) {
	if o == nil || IsNil(o.ProvidedElsewhere) {
		return nil, false
	}
	return o.ProvidedElsewhere, true
}

// HasProvidedElsewhere returns a boolean if a field has been set.
func (o *EventDataValue) HasProvidedElsewhere() bool {
	if o != nil && !IsNil(o.ProvidedElsewhere) {
		return true
	}

	return false
}

// SetProvidedElsewhere gets a reference to the given bool and assigns it to the ProvidedElsewhere field.
func (o *EventDataValue) SetProvidedElsewhere(v bool) {
	o.ProvidedElsewhere = &v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *EventDataValue) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataValue) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *EventDataValue) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *EventDataValue) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EventDataValue) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataValue) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EventDataValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *EventDataValue) SetValue(v string) {
	o.Value = &v
}

func (o EventDataValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventDataValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedByUserInfo) {
		toSerialize["createdByUserInfo"] = o.CreatedByUserInfo
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedByUserInfo) {
		toSerialize["lastUpdatedByUserInfo"] = o.LastUpdatedByUserInfo
	}
	if !IsNil(o.ProvidedElsewhere) {
		toSerialize["providedElsewhere"] = o.ProvidedElsewhere
	}
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableEventDataValue struct {
	value *EventDataValue
	isSet bool
}

func (v NullableEventDataValue) Get() *EventDataValue {
	return v.value
}

func (v *NullableEventDataValue) Set(val *EventDataValue) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDataValue) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDataValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDataValue(val *EventDataValue) *NullableEventDataValue {
	return &NullableEventDataValue{value: val, isSet: true}
}

func (v NullableEventDataValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDataValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
