/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// EventOutputType the model 'EventOutputType'
type EventOutputType string

// List of EventOutputType
const (
	EVENTOUTPUTTYPE_EVENT                   EventOutputType = "EVENT"
	EVENTOUTPUTTYPE_ENROLLMENT              EventOutputType = "ENROLLMENT"
	EVENTOUTPUTTYPE_TRACKED_ENTITY_INSTANCE EventOutputType = "TRACKED_ENTITY_INSTANCE"
)

// All allowed values of EventOutputType enum
var AllowedEventOutputTypeEnumValues = []EventOutputType{
	"EVENT",
	"ENROLLMENT",
	"TRACKED_ENTITY_INSTANCE",
}

func (v *EventOutputType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventOutputType(value)
	for _, existing := range AllowedEventOutputTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventOutputType", value)
}

// NewEventOutputTypeFromValue returns a pointer to a valid EventOutputType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventOutputTypeFromValue(v string) (*EventOutputType, error) {
	ev := EventOutputType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventOutputType: valid values are %v", v, AllowedEventOutputTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventOutputType) IsValid() bool {
	for _, existing := range AllowedEventOutputTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventOutputType value
func (v EventOutputType) Ptr() *EventOutputType {
	return &v
}

type NullableEventOutputType struct {
	value *EventOutputType
	isSet bool
}

func (v NullableEventOutputType) Get() *EventOutputType {
	return v.value
}

func (v *NullableEventOutputType) Set(val *EventOutputType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventOutputType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventOutputType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventOutputType(val *EventOutputType) *NullableEventOutputType {
	return &NullableEventOutputType{value: val, isSet: true}
}

func (v NullableEventOutputType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventOutputType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
