/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DashboardSearchResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardSearchResult{}

// DashboardSearchResult struct for DashboardSearchResult
type DashboardSearchResult struct {
	AppCount                int32                          `json:"appCount"`
	Apps                    []App                          `json:"apps,omitempty"`
	EventChartCount         int32                          `json:"eventChartCount"`
	EventCharts             []BaseIdentifiableObject       `json:"eventCharts,omitempty"`
	EventReportCount        int32                          `json:"eventReportCount"`
	EventReports            []BaseIdentifiableObject       `json:"eventReports,omitempty"`
	EventVisualizationCount int32                          `json:"eventVisualizationCount"`
	EventVisualizations     []SimpleEventVisualizationView `json:"eventVisualizations,omitempty"`
	MapCount                int32                          `json:"mapCount"`
	Maps                    []BaseIdentifiableObject       `json:"maps,omitempty"`
	ReportCount             int32                          `json:"reportCount"`
	Reports                 []BaseIdentifiableObject       `json:"reports,omitempty"`
	ResourceCount           int32                          `json:"resourceCount"`
	Resources               []BaseIdentifiableObject       `json:"resources,omitempty"`
	SearchCount             int32                          `json:"searchCount"`
	UserCount               int32                          `json:"userCount"`
	Users                   []BaseIdentifiableObject       `json:"users,omitempty"`
	VisualizationCount      int32                          `json:"visualizationCount"`
	Visualizations          []SimpleVisualizationView      `json:"visualizations,omitempty"`
}

type _DashboardSearchResult DashboardSearchResult

// NewDashboardSearchResult instantiates a new DashboardSearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardSearchResult(appCount int32, eventChartCount int32, eventReportCount int32, eventVisualizationCount int32, mapCount int32, reportCount int32, resourceCount int32, searchCount int32, userCount int32, visualizationCount int32) *DashboardSearchResult {
	this := DashboardSearchResult{}
	this.AppCount = appCount
	this.EventChartCount = eventChartCount
	this.EventReportCount = eventReportCount
	this.EventVisualizationCount = eventVisualizationCount
	this.MapCount = mapCount
	this.ReportCount = reportCount
	this.ResourceCount = resourceCount
	this.SearchCount = searchCount
	this.UserCount = userCount
	this.VisualizationCount = visualizationCount
	return &this
}

// NewDashboardSearchResultWithDefaults instantiates a new DashboardSearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardSearchResultWithDefaults() *DashboardSearchResult {
	this := DashboardSearchResult{}
	return &this
}

// GetAppCount returns the AppCount field value
func (o *DashboardSearchResult) GetAppCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AppCount
}

// GetAppCountOk returns a tuple with the AppCount field value
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetAppCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppCount, true
}

// SetAppCount sets field value
func (o *DashboardSearchResult) SetAppCount(v int32) {
	o.AppCount = v
}

// GetApps returns the Apps field value if set, zero value otherwise.
func (o *DashboardSearchResult) GetApps() []App {
	if o == nil || IsNil(o.Apps) {
		var ret []App
		return ret
	}
	return o.Apps
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetAppsOk() ([]App, bool) {
	if o == nil || IsNil(o.Apps) {
		return nil, false
	}
	return o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *DashboardSearchResult) HasApps() bool {
	if o != nil && !IsNil(o.Apps) {
		return true
	}

	return false
}

// SetApps gets a reference to the given []App and assigns it to the Apps field.
func (o *DashboardSearchResult) SetApps(v []App) {
	o.Apps = v
}

// GetEventChartCount returns the EventChartCount field value
func (o *DashboardSearchResult) GetEventChartCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventChartCount
}

// GetEventChartCountOk returns a tuple with the EventChartCount field value
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetEventChartCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventChartCount, true
}

// SetEventChartCount sets field value
func (o *DashboardSearchResult) SetEventChartCount(v int32) {
	o.EventChartCount = v
}

// GetEventCharts returns the EventCharts field value if set, zero value otherwise.
func (o *DashboardSearchResult) GetEventCharts() []BaseIdentifiableObject {
	if o == nil || IsNil(o.EventCharts) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.EventCharts
}

// GetEventChartsOk returns a tuple with the EventCharts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetEventChartsOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.EventCharts) {
		return nil, false
	}
	return o.EventCharts, true
}

// HasEventCharts returns a boolean if a field has been set.
func (o *DashboardSearchResult) HasEventCharts() bool {
	if o != nil && !IsNil(o.EventCharts) {
		return true
	}

	return false
}

// SetEventCharts gets a reference to the given []BaseIdentifiableObject and assigns it to the EventCharts field.
func (o *DashboardSearchResult) SetEventCharts(v []BaseIdentifiableObject) {
	o.EventCharts = v
}

// GetEventReportCount returns the EventReportCount field value
func (o *DashboardSearchResult) GetEventReportCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventReportCount
}

// GetEventReportCountOk returns a tuple with the EventReportCount field value
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetEventReportCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventReportCount, true
}

// SetEventReportCount sets field value
func (o *DashboardSearchResult) SetEventReportCount(v int32) {
	o.EventReportCount = v
}

// GetEventReports returns the EventReports field value if set, zero value otherwise.
func (o *DashboardSearchResult) GetEventReports() []BaseIdentifiableObject {
	if o == nil || IsNil(o.EventReports) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.EventReports
}

// GetEventReportsOk returns a tuple with the EventReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetEventReportsOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.EventReports) {
		return nil, false
	}
	return o.EventReports, true
}

// HasEventReports returns a boolean if a field has been set.
func (o *DashboardSearchResult) HasEventReports() bool {
	if o != nil && !IsNil(o.EventReports) {
		return true
	}

	return false
}

// SetEventReports gets a reference to the given []BaseIdentifiableObject and assigns it to the EventReports field.
func (o *DashboardSearchResult) SetEventReports(v []BaseIdentifiableObject) {
	o.EventReports = v
}

// GetEventVisualizationCount returns the EventVisualizationCount field value
func (o *DashboardSearchResult) GetEventVisualizationCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventVisualizationCount
}

// GetEventVisualizationCountOk returns a tuple with the EventVisualizationCount field value
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetEventVisualizationCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventVisualizationCount, true
}

// SetEventVisualizationCount sets field value
func (o *DashboardSearchResult) SetEventVisualizationCount(v int32) {
	o.EventVisualizationCount = v
}

// GetEventVisualizations returns the EventVisualizations field value if set, zero value otherwise.
func (o *DashboardSearchResult) GetEventVisualizations() []SimpleEventVisualizationView {
	if o == nil || IsNil(o.EventVisualizations) {
		var ret []SimpleEventVisualizationView
		return ret
	}
	return o.EventVisualizations
}

// GetEventVisualizationsOk returns a tuple with the EventVisualizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetEventVisualizationsOk() ([]SimpleEventVisualizationView, bool) {
	if o == nil || IsNil(o.EventVisualizations) {
		return nil, false
	}
	return o.EventVisualizations, true
}

// HasEventVisualizations returns a boolean if a field has been set.
func (o *DashboardSearchResult) HasEventVisualizations() bool {
	if o != nil && !IsNil(o.EventVisualizations) {
		return true
	}

	return false
}

// SetEventVisualizations gets a reference to the given []SimpleEventVisualizationView and assigns it to the EventVisualizations field.
func (o *DashboardSearchResult) SetEventVisualizations(v []SimpleEventVisualizationView) {
	o.EventVisualizations = v
}

// GetMapCount returns the MapCount field value
func (o *DashboardSearchResult) GetMapCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MapCount
}

// GetMapCountOk returns a tuple with the MapCount field value
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetMapCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MapCount, true
}

// SetMapCount sets field value
func (o *DashboardSearchResult) SetMapCount(v int32) {
	o.MapCount = v
}

// GetMaps returns the Maps field value if set, zero value otherwise.
func (o *DashboardSearchResult) GetMaps() []BaseIdentifiableObject {
	if o == nil || IsNil(o.Maps) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.Maps
}

// GetMapsOk returns a tuple with the Maps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetMapsOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.Maps) {
		return nil, false
	}
	return o.Maps, true
}

// HasMaps returns a boolean if a field has been set.
func (o *DashboardSearchResult) HasMaps() bool {
	if o != nil && !IsNil(o.Maps) {
		return true
	}

	return false
}

// SetMaps gets a reference to the given []BaseIdentifiableObject and assigns it to the Maps field.
func (o *DashboardSearchResult) SetMaps(v []BaseIdentifiableObject) {
	o.Maps = v
}

// GetReportCount returns the ReportCount field value
func (o *DashboardSearchResult) GetReportCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReportCount
}

// GetReportCountOk returns a tuple with the ReportCount field value
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetReportCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportCount, true
}

// SetReportCount sets field value
func (o *DashboardSearchResult) SetReportCount(v int32) {
	o.ReportCount = v
}

// GetReports returns the Reports field value if set, zero value otherwise.
func (o *DashboardSearchResult) GetReports() []BaseIdentifiableObject {
	if o == nil || IsNil(o.Reports) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.Reports
}

// GetReportsOk returns a tuple with the Reports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetReportsOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.Reports) {
		return nil, false
	}
	return o.Reports, true
}

// HasReports returns a boolean if a field has been set.
func (o *DashboardSearchResult) HasReports() bool {
	if o != nil && !IsNil(o.Reports) {
		return true
	}

	return false
}

// SetReports gets a reference to the given []BaseIdentifiableObject and assigns it to the Reports field.
func (o *DashboardSearchResult) SetReports(v []BaseIdentifiableObject) {
	o.Reports = v
}

// GetResourceCount returns the ResourceCount field value
func (o *DashboardSearchResult) GetResourceCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResourceCount
}

// GetResourceCountOk returns a tuple with the ResourceCount field value
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetResourceCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceCount, true
}

// SetResourceCount sets field value
func (o *DashboardSearchResult) SetResourceCount(v int32) {
	o.ResourceCount = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *DashboardSearchResult) GetResources() []BaseIdentifiableObject {
	if o == nil || IsNil(o.Resources) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetResourcesOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *DashboardSearchResult) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []BaseIdentifiableObject and assigns it to the Resources field.
func (o *DashboardSearchResult) SetResources(v []BaseIdentifiableObject) {
	o.Resources = v
}

// GetSearchCount returns the SearchCount field value
func (o *DashboardSearchResult) GetSearchCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SearchCount
}

// GetSearchCountOk returns a tuple with the SearchCount field value
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetSearchCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchCount, true
}

// SetSearchCount sets field value
func (o *DashboardSearchResult) SetSearchCount(v int32) {
	o.SearchCount = v
}

// GetUserCount returns the UserCount field value
func (o *DashboardSearchResult) GetUserCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserCount
}

// GetUserCountOk returns a tuple with the UserCount field value
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetUserCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserCount, true
}

// SetUserCount sets field value
func (o *DashboardSearchResult) SetUserCount(v int32) {
	o.UserCount = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *DashboardSearchResult) GetUsers() []BaseIdentifiableObject {
	if o == nil || IsNil(o.Users) {
		var ret []BaseIdentifiableObject
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetUsersOk() ([]BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *DashboardSearchResult) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []BaseIdentifiableObject and assigns it to the Users field.
func (o *DashboardSearchResult) SetUsers(v []BaseIdentifiableObject) {
	o.Users = v
}

// GetVisualizationCount returns the VisualizationCount field value
func (o *DashboardSearchResult) GetVisualizationCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VisualizationCount
}

// GetVisualizationCountOk returns a tuple with the VisualizationCount field value
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetVisualizationCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VisualizationCount, true
}

// SetVisualizationCount sets field value
func (o *DashboardSearchResult) SetVisualizationCount(v int32) {
	o.VisualizationCount = v
}

// GetVisualizations returns the Visualizations field value if set, zero value otherwise.
func (o *DashboardSearchResult) GetVisualizations() []SimpleVisualizationView {
	if o == nil || IsNil(o.Visualizations) {
		var ret []SimpleVisualizationView
		return ret
	}
	return o.Visualizations
}

// GetVisualizationsOk returns a tuple with the Visualizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearchResult) GetVisualizationsOk() ([]SimpleVisualizationView, bool) {
	if o == nil || IsNil(o.Visualizations) {
		return nil, false
	}
	return o.Visualizations, true
}

// HasVisualizations returns a boolean if a field has been set.
func (o *DashboardSearchResult) HasVisualizations() bool {
	if o != nil && !IsNil(o.Visualizations) {
		return true
	}

	return false
}

// SetVisualizations gets a reference to the given []SimpleVisualizationView and assigns it to the Visualizations field.
func (o *DashboardSearchResult) SetVisualizations(v []SimpleVisualizationView) {
	o.Visualizations = v
}

func (o DashboardSearchResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardSearchResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appCount"] = o.AppCount
	if !IsNil(o.Apps) {
		toSerialize["apps"] = o.Apps
	}
	toSerialize["eventChartCount"] = o.EventChartCount
	if !IsNil(o.EventCharts) {
		toSerialize["eventCharts"] = o.EventCharts
	}
	toSerialize["eventReportCount"] = o.EventReportCount
	if !IsNil(o.EventReports) {
		toSerialize["eventReports"] = o.EventReports
	}
	toSerialize["eventVisualizationCount"] = o.EventVisualizationCount
	if !IsNil(o.EventVisualizations) {
		toSerialize["eventVisualizations"] = o.EventVisualizations
	}
	toSerialize["mapCount"] = o.MapCount
	if !IsNil(o.Maps) {
		toSerialize["maps"] = o.Maps
	}
	toSerialize["reportCount"] = o.ReportCount
	if !IsNil(o.Reports) {
		toSerialize["reports"] = o.Reports
	}
	toSerialize["resourceCount"] = o.ResourceCount
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	toSerialize["searchCount"] = o.SearchCount
	toSerialize["userCount"] = o.UserCount
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	toSerialize["visualizationCount"] = o.VisualizationCount
	if !IsNil(o.Visualizations) {
		toSerialize["visualizations"] = o.Visualizations
	}
	return toSerialize, nil
}

func (o *DashboardSearchResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appCount",
		"eventChartCount",
		"eventReportCount",
		"eventVisualizationCount",
		"mapCount",
		"reportCount",
		"resourceCount",
		"searchCount",
		"userCount",
		"visualizationCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDashboardSearchResult := _DashboardSearchResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDashboardSearchResult)

	if err != nil {
		return err
	}

	*o = DashboardSearchResult(varDashboardSearchResult)

	return err
}

type NullableDashboardSearchResult struct {
	value *DashboardSearchResult
	isSet bool
}

func (v NullableDashboardSearchResult) Get() *DashboardSearchResult {
	return v.value
}

func (v *NullableDashboardSearchResult) Set(val *DashboardSearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardSearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardSearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardSearchResult(val *DashboardSearchResult) *NullableDashboardSearchResult {
	return &NullableDashboardSearchResult{value: val, isSet: true}
}

func (v NullableDashboardSearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardSearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
