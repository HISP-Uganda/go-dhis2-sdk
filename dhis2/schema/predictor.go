/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Predictor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Predictor{}

// Predictor struct for Predictor
type Predictor struct {
	Access                      *Access                                 `json:"access,omitempty"`
	AnnualSampleCount           *int32                                  `json:"annualSampleCount,omitempty"`
	AttributeValues             []AttributeValue                        `json:"attributeValues,omitempty"`
	Code                        *string                                 `json:"code,omitempty"`
	Created                     *time.Time                              `json:"created,omitempty"`
	CreatedBy                   *AggregateDataExchangeCreatedBy         `json:"createdBy,omitempty"`
	Description                 *string                                 `json:"description,omitempty"`
	DisplayDescription          *string                                 `json:"displayDescription,omitempty"`
	DisplayFormName             *string                                 `json:"displayFormName,omitempty"`
	DisplayName                 *string                                 `json:"displayName,omitempty"`
	DisplayShortName            *string                                 `json:"displayShortName,omitempty"`
	ExternalAccess              *bool                                   `json:"externalAccess,omitempty"`
	Favorite                    *bool                                   `json:"favorite,omitempty"`
	Favorites                   []string                                `json:"favorites,omitempty"`
	FormName                    *string                                 `json:"formName,omitempty"`
	Generator                   *Expression                             `json:"generator,omitempty"`
	Href                        *string                                 `json:"href,omitempty"`
	Id                          *string                                 `json:"id,omitempty"`
	LastUpdated                 *time.Time                              `json:"lastUpdated,omitempty"`
	LastUpdatedBy               *AggregateDataExchangeCreatedBy         `json:"lastUpdatedBy,omitempty"`
	Name                        *string                                 `json:"name,omitempty"`
	OrganisationUnitDescendants string                                  `json:"organisationUnitDescendants"`
	OrganisationUnitLevels      []ConfigurationFacilityOrgUnitLevel     `json:"organisationUnitLevels,omitempty"`
	Output                      *DataDimensionItemDataElement           `json:"output,omitempty"`
	OutputCombo                 *CategoryComboCategoryOptionCombosInner `json:"outputCombo,omitempty"`
	PeriodType                  *string                                 `json:"periodType,omitempty"`
	PredictorGroups             []PredictorPredictorGroupsInner         `json:"predictorGroups,omitempty"`
	PublicAccess                *string                                 `json:"publicAccess,omitempty"`
	SampleSkipTest              *Expression                             `json:"sampleSkipTest,omitempty"`
	SequentialSampleCount       *int32                                  `json:"sequentialSampleCount,omitempty"`
	SequentialSkipCount         *int32                                  `json:"sequentialSkipCount,omitempty"`
	Sharing                     *Sharing                                `json:"sharing,omitempty"`
	ShortName                   *string                                 `json:"shortName,omitempty"`
	Translations                []Translation                           `json:"translations,omitempty"`
	User                        *AggregateDataExchangeCreatedBy         `json:"user,omitempty"`
	UserAccesses                []LegacyUserAccess                      `json:"userAccesses,omitempty"`
	UserGroupAccesses           []LegacyUserGroupAccess                 `json:"userGroupAccesses,omitempty"`
}

type _Predictor Predictor

// NewPredictor instantiates a new Predictor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPredictor(organisationUnitDescendants string) *Predictor {
	this := Predictor{}
	this.OrganisationUnitDescendants = organisationUnitDescendants
	return &this
}

// NewPredictorWithDefaults instantiates a new Predictor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPredictorWithDefaults() *Predictor {
	this := Predictor{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *Predictor) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *Predictor) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *Predictor) SetAccess(v Access) {
	o.Access = &v
}

// GetAnnualSampleCount returns the AnnualSampleCount field value if set, zero value otherwise.
func (o *Predictor) GetAnnualSampleCount() int32 {
	if o == nil || IsNil(o.AnnualSampleCount) {
		var ret int32
		return ret
	}
	return *o.AnnualSampleCount
}

// GetAnnualSampleCountOk returns a tuple with the AnnualSampleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetAnnualSampleCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AnnualSampleCount) {
		return nil, false
	}
	return o.AnnualSampleCount, true
}

// HasAnnualSampleCount returns a boolean if a field has been set.
func (o *Predictor) HasAnnualSampleCount() bool {
	if o != nil && !IsNil(o.AnnualSampleCount) {
		return true
	}

	return false
}

// SetAnnualSampleCount gets a reference to the given int32 and assigns it to the AnnualSampleCount field.
func (o *Predictor) SetAnnualSampleCount(v int32) {
	o.AnnualSampleCount = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *Predictor) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *Predictor) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *Predictor) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Predictor) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Predictor) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Predictor) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Predictor) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Predictor) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Predictor) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Predictor) GetCreatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetCreatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Predictor) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the CreatedBy field.
func (o *Predictor) SetCreatedBy(v AggregateDataExchangeCreatedBy) {
	o.CreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Predictor) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Predictor) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Predictor) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *Predictor) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *Predictor) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *Predictor) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayFormName returns the DisplayFormName field value if set, zero value otherwise.
func (o *Predictor) GetDisplayFormName() string {
	if o == nil || IsNil(o.DisplayFormName) {
		var ret string
		return ret
	}
	return *o.DisplayFormName
}

// GetDisplayFormNameOk returns a tuple with the DisplayFormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetDisplayFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayFormName) {
		return nil, false
	}
	return o.DisplayFormName, true
}

// HasDisplayFormName returns a boolean if a field has been set.
func (o *Predictor) HasDisplayFormName() bool {
	if o != nil && !IsNil(o.DisplayFormName) {
		return true
	}

	return false
}

// SetDisplayFormName gets a reference to the given string and assigns it to the DisplayFormName field.
func (o *Predictor) SetDisplayFormName(v string) {
	o.DisplayFormName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Predictor) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Predictor) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Predictor) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *Predictor) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *Predictor) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *Predictor) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetExternalAccess returns the ExternalAccess field value if set, zero value otherwise.
func (o *Predictor) GetExternalAccess() bool {
	if o == nil || IsNil(o.ExternalAccess) {
		var ret bool
		return ret
	}
	return *o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetExternalAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAccess) {
		return nil, false
	}
	return o.ExternalAccess, true
}

// HasExternalAccess returns a boolean if a field has been set.
func (o *Predictor) HasExternalAccess() bool {
	if o != nil && !IsNil(o.ExternalAccess) {
		return true
	}

	return false
}

// SetExternalAccess gets a reference to the given bool and assigns it to the ExternalAccess field.
func (o *Predictor) SetExternalAccess(v bool) {
	o.ExternalAccess = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *Predictor) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *Predictor) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *Predictor) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *Predictor) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *Predictor) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *Predictor) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *Predictor) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *Predictor) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *Predictor) SetFormName(v string) {
	o.FormName = &v
}

// GetGenerator returns the Generator field value if set, zero value otherwise.
func (o *Predictor) GetGenerator() Expression {
	if o == nil || IsNil(o.Generator) {
		var ret Expression
		return ret
	}
	return *o.Generator
}

// GetGeneratorOk returns a tuple with the Generator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetGeneratorOk() (*Expression, bool) {
	if o == nil || IsNil(o.Generator) {
		return nil, false
	}
	return o.Generator, true
}

// HasGenerator returns a boolean if a field has been set.
func (o *Predictor) HasGenerator() bool {
	if o != nil && !IsNil(o.Generator) {
		return true
	}

	return false
}

// SetGenerator gets a reference to the given Expression and assigns it to the Generator field.
func (o *Predictor) SetGenerator(v Expression) {
	o.Generator = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Predictor) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Predictor) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Predictor) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Predictor) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Predictor) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Predictor) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Predictor) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Predictor) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Predictor) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *Predictor) GetLastUpdatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetLastUpdatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *Predictor) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the LastUpdatedBy field.
func (o *Predictor) SetLastUpdatedBy(v AggregateDataExchangeCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Predictor) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Predictor) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Predictor) SetName(v string) {
	o.Name = &v
}

// GetOrganisationUnitDescendants returns the OrganisationUnitDescendants field value
func (o *Predictor) GetOrganisationUnitDescendants() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganisationUnitDescendants
}

// GetOrganisationUnitDescendantsOk returns a tuple with the OrganisationUnitDescendants field value
// and a boolean to check if the value has been set.
func (o *Predictor) GetOrganisationUnitDescendantsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganisationUnitDescendants, true
}

// SetOrganisationUnitDescendants sets field value
func (o *Predictor) SetOrganisationUnitDescendants(v string) {
	o.OrganisationUnitDescendants = v
}

// GetOrganisationUnitLevels returns the OrganisationUnitLevels field value if set, zero value otherwise.
func (o *Predictor) GetOrganisationUnitLevels() []ConfigurationFacilityOrgUnitLevel {
	if o == nil || IsNil(o.OrganisationUnitLevels) {
		var ret []ConfigurationFacilityOrgUnitLevel
		return ret
	}
	return o.OrganisationUnitLevels
}

// GetOrganisationUnitLevelsOk returns a tuple with the OrganisationUnitLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetOrganisationUnitLevelsOk() ([]ConfigurationFacilityOrgUnitLevel, bool) {
	if o == nil || IsNil(o.OrganisationUnitLevels) {
		return nil, false
	}
	return o.OrganisationUnitLevels, true
}

// HasOrganisationUnitLevels returns a boolean if a field has been set.
func (o *Predictor) HasOrganisationUnitLevels() bool {
	if o != nil && !IsNil(o.OrganisationUnitLevels) {
		return true
	}

	return false
}

// SetOrganisationUnitLevels gets a reference to the given []ConfigurationFacilityOrgUnitLevel and assigns it to the OrganisationUnitLevels field.
func (o *Predictor) SetOrganisationUnitLevels(v []ConfigurationFacilityOrgUnitLevel) {
	o.OrganisationUnitLevels = v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *Predictor) GetOutput() DataDimensionItemDataElement {
	if o == nil || IsNil(o.Output) {
		var ret DataDimensionItemDataElement
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetOutputOk() (*DataDimensionItemDataElement, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *Predictor) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given DataDimensionItemDataElement and assigns it to the Output field.
func (o *Predictor) SetOutput(v DataDimensionItemDataElement) {
	o.Output = &v
}

// GetOutputCombo returns the OutputCombo field value if set, zero value otherwise.
func (o *Predictor) GetOutputCombo() CategoryComboCategoryOptionCombosInner {
	if o == nil || IsNil(o.OutputCombo) {
		var ret CategoryComboCategoryOptionCombosInner
		return ret
	}
	return *o.OutputCombo
}

// GetOutputComboOk returns a tuple with the OutputCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetOutputComboOk() (*CategoryComboCategoryOptionCombosInner, bool) {
	if o == nil || IsNil(o.OutputCombo) {
		return nil, false
	}
	return o.OutputCombo, true
}

// HasOutputCombo returns a boolean if a field has been set.
func (o *Predictor) HasOutputCombo() bool {
	if o != nil && !IsNil(o.OutputCombo) {
		return true
	}

	return false
}

// SetOutputCombo gets a reference to the given CategoryComboCategoryOptionCombosInner and assigns it to the OutputCombo field.
func (o *Predictor) SetOutputCombo(v CategoryComboCategoryOptionCombosInner) {
	o.OutputCombo = &v
}

// GetPeriodType returns the PeriodType field value if set, zero value otherwise.
func (o *Predictor) GetPeriodType() string {
	if o == nil || IsNil(o.PeriodType) {
		var ret string
		return ret
	}
	return *o.PeriodType
}

// GetPeriodTypeOk returns a tuple with the PeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetPeriodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodType) {
		return nil, false
	}
	return o.PeriodType, true
}

// HasPeriodType returns a boolean if a field has been set.
func (o *Predictor) HasPeriodType() bool {
	if o != nil && !IsNil(o.PeriodType) {
		return true
	}

	return false
}

// SetPeriodType gets a reference to the given string and assigns it to the PeriodType field.
func (o *Predictor) SetPeriodType(v string) {
	o.PeriodType = &v
}

// GetPredictorGroups returns the PredictorGroups field value if set, zero value otherwise.
func (o *Predictor) GetPredictorGroups() []PredictorPredictorGroupsInner {
	if o == nil || IsNil(o.PredictorGroups) {
		var ret []PredictorPredictorGroupsInner
		return ret
	}
	return o.PredictorGroups
}

// GetPredictorGroupsOk returns a tuple with the PredictorGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetPredictorGroupsOk() ([]PredictorPredictorGroupsInner, bool) {
	if o == nil || IsNil(o.PredictorGroups) {
		return nil, false
	}
	return o.PredictorGroups, true
}

// HasPredictorGroups returns a boolean if a field has been set.
func (o *Predictor) HasPredictorGroups() bool {
	if o != nil && !IsNil(o.PredictorGroups) {
		return true
	}

	return false
}

// SetPredictorGroups gets a reference to the given []PredictorPredictorGroupsInner and assigns it to the PredictorGroups field.
func (o *Predictor) SetPredictorGroups(v []PredictorPredictorGroupsInner) {
	o.PredictorGroups = v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *Predictor) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *Predictor) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *Predictor) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetSampleSkipTest returns the SampleSkipTest field value if set, zero value otherwise.
func (o *Predictor) GetSampleSkipTest() Expression {
	if o == nil || IsNil(o.SampleSkipTest) {
		var ret Expression
		return ret
	}
	return *o.SampleSkipTest
}

// GetSampleSkipTestOk returns a tuple with the SampleSkipTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetSampleSkipTestOk() (*Expression, bool) {
	if o == nil || IsNil(o.SampleSkipTest) {
		return nil, false
	}
	return o.SampleSkipTest, true
}

// HasSampleSkipTest returns a boolean if a field has been set.
func (o *Predictor) HasSampleSkipTest() bool {
	if o != nil && !IsNil(o.SampleSkipTest) {
		return true
	}

	return false
}

// SetSampleSkipTest gets a reference to the given Expression and assigns it to the SampleSkipTest field.
func (o *Predictor) SetSampleSkipTest(v Expression) {
	o.SampleSkipTest = &v
}

// GetSequentialSampleCount returns the SequentialSampleCount field value if set, zero value otherwise.
func (o *Predictor) GetSequentialSampleCount() int32 {
	if o == nil || IsNil(o.SequentialSampleCount) {
		var ret int32
		return ret
	}
	return *o.SequentialSampleCount
}

// GetSequentialSampleCountOk returns a tuple with the SequentialSampleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetSequentialSampleCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SequentialSampleCount) {
		return nil, false
	}
	return o.SequentialSampleCount, true
}

// HasSequentialSampleCount returns a boolean if a field has been set.
func (o *Predictor) HasSequentialSampleCount() bool {
	if o != nil && !IsNil(o.SequentialSampleCount) {
		return true
	}

	return false
}

// SetSequentialSampleCount gets a reference to the given int32 and assigns it to the SequentialSampleCount field.
func (o *Predictor) SetSequentialSampleCount(v int32) {
	o.SequentialSampleCount = &v
}

// GetSequentialSkipCount returns the SequentialSkipCount field value if set, zero value otherwise.
func (o *Predictor) GetSequentialSkipCount() int32 {
	if o == nil || IsNil(o.SequentialSkipCount) {
		var ret int32
		return ret
	}
	return *o.SequentialSkipCount
}

// GetSequentialSkipCountOk returns a tuple with the SequentialSkipCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetSequentialSkipCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SequentialSkipCount) {
		return nil, false
	}
	return o.SequentialSkipCount, true
}

// HasSequentialSkipCount returns a boolean if a field has been set.
func (o *Predictor) HasSequentialSkipCount() bool {
	if o != nil && !IsNil(o.SequentialSkipCount) {
		return true
	}

	return false
}

// SetSequentialSkipCount gets a reference to the given int32 and assigns it to the SequentialSkipCount field.
func (o *Predictor) SetSequentialSkipCount(v int32) {
	o.SequentialSkipCount = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *Predictor) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *Predictor) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *Predictor) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *Predictor) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *Predictor) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *Predictor) SetShortName(v string) {
	o.ShortName = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *Predictor) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *Predictor) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *Predictor) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Predictor) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Predictor) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *Predictor) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *Predictor) GetUserAccesses() []LegacyUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []LegacyUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetUserAccessesOk() ([]LegacyUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *Predictor) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []LegacyUserAccess and assigns it to the UserAccesses field.
func (o *Predictor) SetUserAccesses(v []LegacyUserAccess) {
	o.UserAccesses = v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *Predictor) GetUserGroupAccesses() []LegacyUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []LegacyUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Predictor) GetUserGroupAccessesOk() ([]LegacyUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *Predictor) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []LegacyUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *Predictor) SetUserGroupAccesses(v []LegacyUserGroupAccess) {
	o.UserGroupAccesses = v
}

func (o Predictor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Predictor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AnnualSampleCount) {
		toSerialize["annualSampleCount"] = o.AnnualSampleCount
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayFormName) {
		toSerialize["displayFormName"] = o.DisplayFormName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	if !IsNil(o.ExternalAccess) {
		toSerialize["externalAccess"] = o.ExternalAccess
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.Generator) {
		toSerialize["generator"] = o.Generator
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["organisationUnitDescendants"] = o.OrganisationUnitDescendants
	if !IsNil(o.OrganisationUnitLevels) {
		toSerialize["organisationUnitLevels"] = o.OrganisationUnitLevels
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !IsNil(o.OutputCombo) {
		toSerialize["outputCombo"] = o.OutputCombo
	}
	if !IsNil(o.PeriodType) {
		toSerialize["periodType"] = o.PeriodType
	}
	if !IsNil(o.PredictorGroups) {
		toSerialize["predictorGroups"] = o.PredictorGroups
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	if !IsNil(o.SampleSkipTest) {
		toSerialize["sampleSkipTest"] = o.SampleSkipTest
	}
	if !IsNil(o.SequentialSampleCount) {
		toSerialize["sequentialSampleCount"] = o.SequentialSampleCount
	}
	if !IsNil(o.SequentialSkipCount) {
		toSerialize["sequentialSkipCount"] = o.SequentialSkipCount
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	return toSerialize, nil
}

func (o *Predictor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organisationUnitDescendants",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPredictor := _Predictor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPredictor)

	if err != nil {
		return err
	}

	*o = Predictor(varPredictor)

	return err
}

type NullablePredictor struct {
	value *Predictor
	isSet bool
}

func (v NullablePredictor) Get() *Predictor {
	return v.value
}

func (v *NullablePredictor) Set(val *Predictor) {
	v.value = val
	v.isSet = true
}

func (v NullablePredictor) IsSet() bool {
	return v.isSet
}

func (v *NullablePredictor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePredictor(val *Predictor) *NullablePredictor {
	return &NullablePredictor{value: val, isSet: true}
}

func (v NullablePredictor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePredictor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
