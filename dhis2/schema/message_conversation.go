/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the MessageConversation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageConversation{}

// MessageConversation struct for MessageConversation
type MessageConversation struct {
	Access              *Access                     `json:"access,omitempty"`
	Assignee            *User                       `json:"assignee,omitempty"`
	AttributeValues     []AttributeValue            `json:"attributeValues,omitempty"`
	Code                *string                     `json:"code,omitempty"`
	Created             *time.Time                  `json:"created,omitempty"`
	CreatedBy           *UserDto                    `json:"createdBy,omitempty"`
	DisplayName         *string                     `json:"displayName,omitempty"`
	ExtMessageId        *string                     `json:"extMessageId,omitempty"`
	Favorite            *bool                       `json:"favorite,omitempty"`
	Favorites           []string                    `json:"favorites,omitempty"`
	FollowUp            *bool                       `json:"followUp,omitempty"`
	Href                *string                     `json:"href,omitempty"`
	Id                  *string                     `json:"id,omitempty"`
	LastMessage         *time.Time                  `json:"lastMessage,omitempty"`
	LastSender          *BaseIdentifiableObject     `json:"lastSender,omitempty"`
	LastSenderFirstname *string                     `json:"lastSenderFirstname,omitempty"`
	LastSenderSurname   *string                     `json:"lastSenderSurname,omitempty"`
	LastUpdated         *time.Time                  `json:"lastUpdated,omitempty"`
	LastUpdatedBy       *UserDto                    `json:"lastUpdatedBy,omitempty"`
	MessageCount        int32                       `json:"messageCount"`
	MessageType         MessageType                 `json:"messageType"`
	Messages            []Message                   `json:"messages,omitempty"`
	Priority            MessageConversationPriority `json:"priority"`
	Read                *bool                       `json:"read,omitempty"`
	Sharing             *Sharing                    `json:"sharing,omitempty"`
	Status              MessageConversationStatus   `json:"status"`
	Subject             *string                     `json:"subject,omitempty"`
	Translations        []Translation               `json:"translations,omitempty"`
	UserFirstname       *string                     `json:"userFirstname,omitempty"`
	UserMessages        []UserMessage               `json:"userMessages,omitempty"`
	UserSurname         *string                     `json:"userSurname,omitempty"`
}

type _MessageConversation MessageConversation

// NewMessageConversation instantiates a new MessageConversation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageConversation(messageCount int32, messageType MessageType, priority MessageConversationPriority, status MessageConversationStatus) *MessageConversation {
	this := MessageConversation{}
	this.MessageCount = messageCount
	this.MessageType = messageType
	this.Priority = priority
	this.Status = status
	return &this
}

// NewMessageConversationWithDefaults instantiates a new MessageConversation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageConversationWithDefaults() *MessageConversation {
	this := MessageConversation{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *MessageConversation) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *MessageConversation) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *MessageConversation) SetAccess(v Access) {
	o.Access = &v
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *MessageConversation) GetAssignee() User {
	if o == nil || IsNil(o.Assignee) {
		var ret User
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetAssigneeOk() (*User, bool) {
	if o == nil || IsNil(o.Assignee) {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *MessageConversation) HasAssignee() bool {
	if o != nil && !IsNil(o.Assignee) {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given User and assigns it to the Assignee field.
func (o *MessageConversation) SetAssignee(v User) {
	o.Assignee = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *MessageConversation) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *MessageConversation) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *MessageConversation) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MessageConversation) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MessageConversation) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *MessageConversation) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *MessageConversation) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *MessageConversation) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *MessageConversation) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *MessageConversation) GetCreatedBy() UserDto {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserDto
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetCreatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *MessageConversation) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserDto and assigns it to the CreatedBy field.
func (o *MessageConversation) SetCreatedBy(v UserDto) {
	o.CreatedBy = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *MessageConversation) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MessageConversation) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MessageConversation) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetExtMessageId returns the ExtMessageId field value if set, zero value otherwise.
func (o *MessageConversation) GetExtMessageId() string {
	if o == nil || IsNil(o.ExtMessageId) {
		var ret string
		return ret
	}
	return *o.ExtMessageId
}

// GetExtMessageIdOk returns a tuple with the ExtMessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetExtMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExtMessageId) {
		return nil, false
	}
	return o.ExtMessageId, true
}

// HasExtMessageId returns a boolean if a field has been set.
func (o *MessageConversation) HasExtMessageId() bool {
	if o != nil && !IsNil(o.ExtMessageId) {
		return true
	}

	return false
}

// SetExtMessageId gets a reference to the given string and assigns it to the ExtMessageId field.
func (o *MessageConversation) SetExtMessageId(v string) {
	o.ExtMessageId = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *MessageConversation) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *MessageConversation) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *MessageConversation) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *MessageConversation) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *MessageConversation) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *MessageConversation) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFollowUp returns the FollowUp field value if set, zero value otherwise.
func (o *MessageConversation) GetFollowUp() bool {
	if o == nil || IsNil(o.FollowUp) {
		var ret bool
		return ret
	}
	return *o.FollowUp
}

// GetFollowUpOk returns a tuple with the FollowUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetFollowUpOk() (*bool, bool) {
	if o == nil || IsNil(o.FollowUp) {
		return nil, false
	}
	return o.FollowUp, true
}

// HasFollowUp returns a boolean if a field has been set.
func (o *MessageConversation) HasFollowUp() bool {
	if o != nil && !IsNil(o.FollowUp) {
		return true
	}

	return false
}

// SetFollowUp gets a reference to the given bool and assigns it to the FollowUp field.
func (o *MessageConversation) SetFollowUp(v bool) {
	o.FollowUp = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *MessageConversation) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *MessageConversation) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *MessageConversation) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MessageConversation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MessageConversation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MessageConversation) SetId(v string) {
	o.Id = &v
}

// GetLastMessage returns the LastMessage field value if set, zero value otherwise.
func (o *MessageConversation) GetLastMessage() time.Time {
	if o == nil || IsNil(o.LastMessage) {
		var ret time.Time
		return ret
	}
	return *o.LastMessage
}

// GetLastMessageOk returns a tuple with the LastMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetLastMessageOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastMessage) {
		return nil, false
	}
	return o.LastMessage, true
}

// HasLastMessage returns a boolean if a field has been set.
func (o *MessageConversation) HasLastMessage() bool {
	if o != nil && !IsNil(o.LastMessage) {
		return true
	}

	return false
}

// SetLastMessage gets a reference to the given time.Time and assigns it to the LastMessage field.
func (o *MessageConversation) SetLastMessage(v time.Time) {
	o.LastMessage = &v
}

// GetLastSender returns the LastSender field value if set, zero value otherwise.
func (o *MessageConversation) GetLastSender() BaseIdentifiableObject {
	if o == nil || IsNil(o.LastSender) {
		var ret BaseIdentifiableObject
		return ret
	}
	return *o.LastSender
}

// GetLastSenderOk returns a tuple with the LastSender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetLastSenderOk() (*BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.LastSender) {
		return nil, false
	}
	return o.LastSender, true
}

// HasLastSender returns a boolean if a field has been set.
func (o *MessageConversation) HasLastSender() bool {
	if o != nil && !IsNil(o.LastSender) {
		return true
	}

	return false
}

// SetLastSender gets a reference to the given BaseIdentifiableObject and assigns it to the LastSender field.
func (o *MessageConversation) SetLastSender(v BaseIdentifiableObject) {
	o.LastSender = &v
}

// GetLastSenderFirstname returns the LastSenderFirstname field value if set, zero value otherwise.
func (o *MessageConversation) GetLastSenderFirstname() string {
	if o == nil || IsNil(o.LastSenderFirstname) {
		var ret string
		return ret
	}
	return *o.LastSenderFirstname
}

// GetLastSenderFirstnameOk returns a tuple with the LastSenderFirstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetLastSenderFirstnameOk() (*string, bool) {
	if o == nil || IsNil(o.LastSenderFirstname) {
		return nil, false
	}
	return o.LastSenderFirstname, true
}

// HasLastSenderFirstname returns a boolean if a field has been set.
func (o *MessageConversation) HasLastSenderFirstname() bool {
	if o != nil && !IsNil(o.LastSenderFirstname) {
		return true
	}

	return false
}

// SetLastSenderFirstname gets a reference to the given string and assigns it to the LastSenderFirstname field.
func (o *MessageConversation) SetLastSenderFirstname(v string) {
	o.LastSenderFirstname = &v
}

// GetLastSenderSurname returns the LastSenderSurname field value if set, zero value otherwise.
func (o *MessageConversation) GetLastSenderSurname() string {
	if o == nil || IsNil(o.LastSenderSurname) {
		var ret string
		return ret
	}
	return *o.LastSenderSurname
}

// GetLastSenderSurnameOk returns a tuple with the LastSenderSurname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetLastSenderSurnameOk() (*string, bool) {
	if o == nil || IsNil(o.LastSenderSurname) {
		return nil, false
	}
	return o.LastSenderSurname, true
}

// HasLastSenderSurname returns a boolean if a field has been set.
func (o *MessageConversation) HasLastSenderSurname() bool {
	if o != nil && !IsNil(o.LastSenderSurname) {
		return true
	}

	return false
}

// SetLastSenderSurname gets a reference to the given string and assigns it to the LastSenderSurname field.
func (o *MessageConversation) SetLastSenderSurname(v string) {
	o.LastSenderSurname = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *MessageConversation) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *MessageConversation) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *MessageConversation) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *MessageConversation) GetLastUpdatedBy() UserDto {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret UserDto
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetLastUpdatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *MessageConversation) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given UserDto and assigns it to the LastUpdatedBy field.
func (o *MessageConversation) SetLastUpdatedBy(v UserDto) {
	o.LastUpdatedBy = &v
}

// GetMessageCount returns the MessageCount field value
func (o *MessageConversation) GetMessageCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MessageCount
}

// GetMessageCountOk returns a tuple with the MessageCount field value
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetMessageCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageCount, true
}

// SetMessageCount sets field value
func (o *MessageConversation) SetMessageCount(v int32) {
	o.MessageCount = v
}

// GetMessageType returns the MessageType field value
func (o *MessageConversation) GetMessageType() MessageType {
	if o == nil {
		var ret MessageType
		return ret
	}

	return o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetMessageTypeOk() (*MessageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageType, true
}

// SetMessageType sets field value
func (o *MessageConversation) SetMessageType(v MessageType) {
	o.MessageType = v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *MessageConversation) GetMessages() []Message {
	if o == nil || IsNil(o.Messages) {
		var ret []Message
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetMessagesOk() ([]Message, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *MessageConversation) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []Message and assigns it to the Messages field.
func (o *MessageConversation) SetMessages(v []Message) {
	o.Messages = v
}

// GetPriority returns the Priority field value
func (o *MessageConversation) GetPriority() MessageConversationPriority {
	if o == nil {
		var ret MessageConversationPriority
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetPriorityOk() (*MessageConversationPriority, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *MessageConversation) SetPriority(v MessageConversationPriority) {
	o.Priority = v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *MessageConversation) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *MessageConversation) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *MessageConversation) SetRead(v bool) {
	o.Read = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *MessageConversation) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *MessageConversation) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *MessageConversation) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetStatus returns the Status field value
func (o *MessageConversation) GetStatus() MessageConversationStatus {
	if o == nil {
		var ret MessageConversationStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetStatusOk() (*MessageConversationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *MessageConversation) SetStatus(v MessageConversationStatus) {
	o.Status = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *MessageConversation) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *MessageConversation) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *MessageConversation) SetSubject(v string) {
	o.Subject = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *MessageConversation) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *MessageConversation) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *MessageConversation) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUserFirstname returns the UserFirstname field value if set, zero value otherwise.
func (o *MessageConversation) GetUserFirstname() string {
	if o == nil || IsNil(o.UserFirstname) {
		var ret string
		return ret
	}
	return *o.UserFirstname
}

// GetUserFirstnameOk returns a tuple with the UserFirstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetUserFirstnameOk() (*string, bool) {
	if o == nil || IsNil(o.UserFirstname) {
		return nil, false
	}
	return o.UserFirstname, true
}

// HasUserFirstname returns a boolean if a field has been set.
func (o *MessageConversation) HasUserFirstname() bool {
	if o != nil && !IsNil(o.UserFirstname) {
		return true
	}

	return false
}

// SetUserFirstname gets a reference to the given string and assigns it to the UserFirstname field.
func (o *MessageConversation) SetUserFirstname(v string) {
	o.UserFirstname = &v
}

// GetUserMessages returns the UserMessages field value if set, zero value otherwise.
func (o *MessageConversation) GetUserMessages() []UserMessage {
	if o == nil || IsNil(o.UserMessages) {
		var ret []UserMessage
		return ret
	}
	return o.UserMessages
}

// GetUserMessagesOk returns a tuple with the UserMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetUserMessagesOk() ([]UserMessage, bool) {
	if o == nil || IsNil(o.UserMessages) {
		return nil, false
	}
	return o.UserMessages, true
}

// HasUserMessages returns a boolean if a field has been set.
func (o *MessageConversation) HasUserMessages() bool {
	if o != nil && !IsNil(o.UserMessages) {
		return true
	}

	return false
}

// SetUserMessages gets a reference to the given []UserMessage and assigns it to the UserMessages field.
func (o *MessageConversation) SetUserMessages(v []UserMessage) {
	o.UserMessages = v
}

// GetUserSurname returns the UserSurname field value if set, zero value otherwise.
func (o *MessageConversation) GetUserSurname() string {
	if o == nil || IsNil(o.UserSurname) {
		var ret string
		return ret
	}
	return *o.UserSurname
}

// GetUserSurnameOk returns a tuple with the UserSurname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageConversation) GetUserSurnameOk() (*string, bool) {
	if o == nil || IsNil(o.UserSurname) {
		return nil, false
	}
	return o.UserSurname, true
}

// HasUserSurname returns a boolean if a field has been set.
func (o *MessageConversation) HasUserSurname() bool {
	if o != nil && !IsNil(o.UserSurname) {
		return true
	}

	return false
}

// SetUserSurname gets a reference to the given string and assigns it to the UserSurname field.
func (o *MessageConversation) SetUserSurname(v string) {
	o.UserSurname = &v
}

func (o MessageConversation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageConversation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.Assignee) {
		toSerialize["assignee"] = o.Assignee
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.ExtMessageId) {
		toSerialize["extMessageId"] = o.ExtMessageId
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FollowUp) {
		toSerialize["followUp"] = o.FollowUp
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastMessage) {
		toSerialize["lastMessage"] = o.LastMessage
	}
	if !IsNil(o.LastSender) {
		toSerialize["lastSender"] = o.LastSender
	}
	if !IsNil(o.LastSenderFirstname) {
		toSerialize["lastSenderFirstname"] = o.LastSenderFirstname
	}
	if !IsNil(o.LastSenderSurname) {
		toSerialize["lastSenderSurname"] = o.LastSenderSurname
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	toSerialize["messageCount"] = o.MessageCount
	toSerialize["messageType"] = o.MessageType
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	toSerialize["priority"] = o.Priority
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.UserFirstname) {
		toSerialize["userFirstname"] = o.UserFirstname
	}
	if !IsNil(o.UserMessages) {
		toSerialize["userMessages"] = o.UserMessages
	}
	if !IsNil(o.UserSurname) {
		toSerialize["userSurname"] = o.UserSurname
	}
	return toSerialize, nil
}

func (o *MessageConversation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"messageCount",
		"messageType",
		"priority",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageConversation := _MessageConversation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageConversation)

	if err != nil {
		return err
	}

	*o = MessageConversation(varMessageConversation)

	return err
}

type NullableMessageConversation struct {
	value *MessageConversation
	isSet bool
}

func (v NullableMessageConversation) Get() *MessageConversation {
	return v.value
}

func (v *NullableMessageConversation) Set(val *MessageConversation) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageConversation) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageConversation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageConversation(val *MessageConversation) *NullableMessageConversation {
	return &NullableMessageConversation{value: val, isSet: true}
}

func (v NullableMessageConversation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageConversation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
