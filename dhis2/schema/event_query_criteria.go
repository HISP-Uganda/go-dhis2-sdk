/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventQueryCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventQueryCriteria{}

// EventQueryCriteria struct for EventQueryCriteria
type EventQueryCriteria struct {
	AssignedUserMode   string            `json:"assignedUserMode"`
	AssignedUsers      []string          `json:"assignedUsers,omitempty"`
	CompletedDate      *DateFilterPeriod `json:"completedDate,omitempty"`
	DataFilters        []EventDataFilter `json:"dataFilters,omitempty"`
	DisplayColumnOrder []string          `json:"displayColumnOrder,omitempty"`
	DueDate            *DateFilterPeriod `json:"dueDate,omitempty"`
	EventDate          *DateFilterPeriod `json:"eventDate,omitempty"`
	Events             []string          `json:"events,omitempty"`
	FollowUp           *bool             `json:"followUp,omitempty"`
	LastUpdatedDate    *DateFilterPeriod `json:"lastUpdatedDate,omitempty"`
	Order              *string           `json:"order,omitempty"`
	OrganisationUnit   *string           `json:"organisationUnit,omitempty"`
	OuMode             string            `json:"ouMode"`
	Status             string            `json:"status"`
}

type _EventQueryCriteria EventQueryCriteria

// NewEventQueryCriteria instantiates a new EventQueryCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventQueryCriteria(assignedUserMode string, ouMode string, status string) *EventQueryCriteria {
	this := EventQueryCriteria{}
	this.AssignedUserMode = assignedUserMode
	this.OuMode = ouMode
	this.Status = status
	return &this
}

// NewEventQueryCriteriaWithDefaults instantiates a new EventQueryCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventQueryCriteriaWithDefaults() *EventQueryCriteria {
	this := EventQueryCriteria{}
	return &this
}

// GetAssignedUserMode returns the AssignedUserMode field value
func (o *EventQueryCriteria) GetAssignedUserMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssignedUserMode
}

// GetAssignedUserModeOk returns a tuple with the AssignedUserMode field value
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetAssignedUserModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignedUserMode, true
}

// SetAssignedUserMode sets field value
func (o *EventQueryCriteria) SetAssignedUserMode(v string) {
	o.AssignedUserMode = v
}

// GetAssignedUsers returns the AssignedUsers field value if set, zero value otherwise.
func (o *EventQueryCriteria) GetAssignedUsers() []string {
	if o == nil || IsNil(o.AssignedUsers) {
		var ret []string
		return ret
	}
	return o.AssignedUsers
}

// GetAssignedUsersOk returns a tuple with the AssignedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetAssignedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.AssignedUsers) {
		return nil, false
	}
	return o.AssignedUsers, true
}

// HasAssignedUsers returns a boolean if a field has been set.
func (o *EventQueryCriteria) HasAssignedUsers() bool {
	if o != nil && !IsNil(o.AssignedUsers) {
		return true
	}

	return false
}

// SetAssignedUsers gets a reference to the given []string and assigns it to the AssignedUsers field.
func (o *EventQueryCriteria) SetAssignedUsers(v []string) {
	o.AssignedUsers = v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *EventQueryCriteria) GetCompletedDate() DateFilterPeriod {
	if o == nil || IsNil(o.CompletedDate) {
		var ret DateFilterPeriod
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetCompletedDateOk() (*DateFilterPeriod, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *EventQueryCriteria) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given DateFilterPeriod and assigns it to the CompletedDate field.
func (o *EventQueryCriteria) SetCompletedDate(v DateFilterPeriod) {
	o.CompletedDate = &v
}

// GetDataFilters returns the DataFilters field value if set, zero value otherwise.
func (o *EventQueryCriteria) GetDataFilters() []EventDataFilter {
	if o == nil || IsNil(o.DataFilters) {
		var ret []EventDataFilter
		return ret
	}
	return o.DataFilters
}

// GetDataFiltersOk returns a tuple with the DataFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetDataFiltersOk() ([]EventDataFilter, bool) {
	if o == nil || IsNil(o.DataFilters) {
		return nil, false
	}
	return o.DataFilters, true
}

// HasDataFilters returns a boolean if a field has been set.
func (o *EventQueryCriteria) HasDataFilters() bool {
	if o != nil && !IsNil(o.DataFilters) {
		return true
	}

	return false
}

// SetDataFilters gets a reference to the given []EventDataFilter and assigns it to the DataFilters field.
func (o *EventQueryCriteria) SetDataFilters(v []EventDataFilter) {
	o.DataFilters = v
}

// GetDisplayColumnOrder returns the DisplayColumnOrder field value if set, zero value otherwise.
func (o *EventQueryCriteria) GetDisplayColumnOrder() []string {
	if o == nil || IsNil(o.DisplayColumnOrder) {
		var ret []string
		return ret
	}
	return o.DisplayColumnOrder
}

// GetDisplayColumnOrderOk returns a tuple with the DisplayColumnOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetDisplayColumnOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.DisplayColumnOrder) {
		return nil, false
	}
	return o.DisplayColumnOrder, true
}

// HasDisplayColumnOrder returns a boolean if a field has been set.
func (o *EventQueryCriteria) HasDisplayColumnOrder() bool {
	if o != nil && !IsNil(o.DisplayColumnOrder) {
		return true
	}

	return false
}

// SetDisplayColumnOrder gets a reference to the given []string and assigns it to the DisplayColumnOrder field.
func (o *EventQueryCriteria) SetDisplayColumnOrder(v []string) {
	o.DisplayColumnOrder = v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *EventQueryCriteria) GetDueDate() DateFilterPeriod {
	if o == nil || IsNil(o.DueDate) {
		var ret DateFilterPeriod
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetDueDateOk() (*DateFilterPeriod, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *EventQueryCriteria) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given DateFilterPeriod and assigns it to the DueDate field.
func (o *EventQueryCriteria) SetDueDate(v DateFilterPeriod) {
	o.DueDate = &v
}

// GetEventDate returns the EventDate field value if set, zero value otherwise.
func (o *EventQueryCriteria) GetEventDate() DateFilterPeriod {
	if o == nil || IsNil(o.EventDate) {
		var ret DateFilterPeriod
		return ret
	}
	return *o.EventDate
}

// GetEventDateOk returns a tuple with the EventDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetEventDateOk() (*DateFilterPeriod, bool) {
	if o == nil || IsNil(o.EventDate) {
		return nil, false
	}
	return o.EventDate, true
}

// HasEventDate returns a boolean if a field has been set.
func (o *EventQueryCriteria) HasEventDate() bool {
	if o != nil && !IsNil(o.EventDate) {
		return true
	}

	return false
}

// SetEventDate gets a reference to the given DateFilterPeriod and assigns it to the EventDate field.
func (o *EventQueryCriteria) SetEventDate(v DateFilterPeriod) {
	o.EventDate = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *EventQueryCriteria) GetEvents() []string {
	if o == nil || IsNil(o.Events) {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *EventQueryCriteria) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *EventQueryCriteria) SetEvents(v []string) {
	o.Events = v
}

// GetFollowUp returns the FollowUp field value if set, zero value otherwise.
func (o *EventQueryCriteria) GetFollowUp() bool {
	if o == nil || IsNil(o.FollowUp) {
		var ret bool
		return ret
	}
	return *o.FollowUp
}

// GetFollowUpOk returns a tuple with the FollowUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetFollowUpOk() (*bool, bool) {
	if o == nil || IsNil(o.FollowUp) {
		return nil, false
	}
	return o.FollowUp, true
}

// HasFollowUp returns a boolean if a field has been set.
func (o *EventQueryCriteria) HasFollowUp() bool {
	if o != nil && !IsNil(o.FollowUp) {
		return true
	}

	return false
}

// SetFollowUp gets a reference to the given bool and assigns it to the FollowUp field.
func (o *EventQueryCriteria) SetFollowUp(v bool) {
	o.FollowUp = &v
}

// GetLastUpdatedDate returns the LastUpdatedDate field value if set, zero value otherwise.
func (o *EventQueryCriteria) GetLastUpdatedDate() DateFilterPeriod {
	if o == nil || IsNil(o.LastUpdatedDate) {
		var ret DateFilterPeriod
		return ret
	}
	return *o.LastUpdatedDate
}

// GetLastUpdatedDateOk returns a tuple with the LastUpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetLastUpdatedDateOk() (*DateFilterPeriod, bool) {
	if o == nil || IsNil(o.LastUpdatedDate) {
		return nil, false
	}
	return o.LastUpdatedDate, true
}

// HasLastUpdatedDate returns a boolean if a field has been set.
func (o *EventQueryCriteria) HasLastUpdatedDate() bool {
	if o != nil && !IsNil(o.LastUpdatedDate) {
		return true
	}

	return false
}

// SetLastUpdatedDate gets a reference to the given DateFilterPeriod and assigns it to the LastUpdatedDate field.
func (o *EventQueryCriteria) SetLastUpdatedDate(v DateFilterPeriod) {
	o.LastUpdatedDate = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *EventQueryCriteria) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *EventQueryCriteria) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *EventQueryCriteria) SetOrder(v string) {
	o.Order = &v
}

// GetOrganisationUnit returns the OrganisationUnit field value if set, zero value otherwise.
func (o *EventQueryCriteria) GetOrganisationUnit() string {
	if o == nil || IsNil(o.OrganisationUnit) {
		var ret string
		return ret
	}
	return *o.OrganisationUnit
}

// GetOrganisationUnitOk returns a tuple with the OrganisationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetOrganisationUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrganisationUnit) {
		return nil, false
	}
	return o.OrganisationUnit, true
}

// HasOrganisationUnit returns a boolean if a field has been set.
func (o *EventQueryCriteria) HasOrganisationUnit() bool {
	if o != nil && !IsNil(o.OrganisationUnit) {
		return true
	}

	return false
}

// SetOrganisationUnit gets a reference to the given string and assigns it to the OrganisationUnit field.
func (o *EventQueryCriteria) SetOrganisationUnit(v string) {
	o.OrganisationUnit = &v
}

// GetOuMode returns the OuMode field value
func (o *EventQueryCriteria) GetOuMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OuMode
}

// GetOuModeOk returns a tuple with the OuMode field value
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetOuModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OuMode, true
}

// SetOuMode sets field value
func (o *EventQueryCriteria) SetOuMode(v string) {
	o.OuMode = v
}

// GetStatus returns the Status field value
func (o *EventQueryCriteria) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *EventQueryCriteria) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *EventQueryCriteria) SetStatus(v string) {
	o.Status = v
}

func (o EventQueryCriteria) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventQueryCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assignedUserMode"] = o.AssignedUserMode
	if !IsNil(o.AssignedUsers) {
		toSerialize["assignedUsers"] = o.AssignedUsers
	}
	if !IsNil(o.CompletedDate) {
		toSerialize["completedDate"] = o.CompletedDate
	}
	if !IsNil(o.DataFilters) {
		toSerialize["dataFilters"] = o.DataFilters
	}
	if !IsNil(o.DisplayColumnOrder) {
		toSerialize["displayColumnOrder"] = o.DisplayColumnOrder
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.EventDate) {
		toSerialize["eventDate"] = o.EventDate
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.FollowUp) {
		toSerialize["followUp"] = o.FollowUp
	}
	if !IsNil(o.LastUpdatedDate) {
		toSerialize["lastUpdatedDate"] = o.LastUpdatedDate
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.OrganisationUnit) {
		toSerialize["organisationUnit"] = o.OrganisationUnit
	}
	toSerialize["ouMode"] = o.OuMode
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *EventQueryCriteria) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assignedUserMode",
		"ouMode",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventQueryCriteria := _EventQueryCriteria{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventQueryCriteria)

	if err != nil {
		return err
	}

	*o = EventQueryCriteria(varEventQueryCriteria)

	return err
}

type NullableEventQueryCriteria struct {
	value *EventQueryCriteria
	isSet bool
}

func (v NullableEventQueryCriteria) Get() *EventQueryCriteria {
	return v.value
}

func (v *NullableEventQueryCriteria) Set(val *EventQueryCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableEventQueryCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableEventQueryCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventQueryCriteria(val *EventQueryCriteria) *NullableEventQueryCriteria {
	return &NullableEventQueryCriteria{value: val, isSet: true}
}

func (v NullableEventQueryCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventQueryCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
