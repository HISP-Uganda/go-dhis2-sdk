/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TrackerStatus the model 'TrackerStatus'
type TrackerStatus string

// List of TrackerStatus
const (
	TRACKERSTATUS_OK      TrackerStatus = "OK"
	TRACKERSTATUS_WARNING TrackerStatus = "WARNING"
	TRACKERSTATUS_ERROR   TrackerStatus = "ERROR"
)

// All allowed values of TrackerStatus enum
var AllowedTrackerStatusEnumValues = []TrackerStatus{
	"OK",
	"WARNING",
	"ERROR",
}

func (v *TrackerStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackerStatus(value)
	for _, existing := range AllowedTrackerStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackerStatus", value)
}

// NewTrackerStatusFromValue returns a pointer to a valid TrackerStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackerStatusFromValue(v string) (*TrackerStatus, error) {
	ev := TrackerStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackerStatus: valid values are %v", v, AllowedTrackerStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackerStatus) IsValid() bool {
	for _, existing := range AllowedTrackerStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackerStatus value
func (v TrackerStatus) Ptr() *TrackerStatus {
	return &v
}

type NullableTrackerStatus struct {
	value *TrackerStatus
	isSet bool
}

func (v NullableTrackerStatus) Get() *TrackerStatus {
	return v.value
}

func (v *NullableTrackerStatus) Set(val *TrackerStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerStatus(val *TrackerStatus) *NullableTrackerStatus {
	return &NullableTrackerStatus{value: val, isSet: true}
}

func (v NullableTrackerStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
