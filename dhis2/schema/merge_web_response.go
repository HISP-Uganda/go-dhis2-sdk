/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the MergeWebResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeWebResponse{}

// MergeWebResponse struct for MergeWebResponse
type MergeWebResponse struct {
	MergeReport  *MergeReport `json:"mergeReport,omitempty"`
	ResponseType *string      `json:"responseType,omitempty"`
}

// NewMergeWebResponse instantiates a new MergeWebResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeWebResponse() *MergeWebResponse {
	this := MergeWebResponse{}
	return &this
}

// NewMergeWebResponseWithDefaults instantiates a new MergeWebResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeWebResponseWithDefaults() *MergeWebResponse {
	this := MergeWebResponse{}
	return &this
}

// GetMergeReport returns the MergeReport field value if set, zero value otherwise.
func (o *MergeWebResponse) GetMergeReport() MergeReport {
	if o == nil || IsNil(o.MergeReport) {
		var ret MergeReport
		return ret
	}
	return *o.MergeReport
}

// GetMergeReportOk returns a tuple with the MergeReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeWebResponse) GetMergeReportOk() (*MergeReport, bool) {
	if o == nil || IsNil(o.MergeReport) {
		return nil, false
	}
	return o.MergeReport, true
}

// HasMergeReport returns a boolean if a field has been set.
func (o *MergeWebResponse) HasMergeReport() bool {
	if o != nil && !IsNil(o.MergeReport) {
		return true
	}

	return false
}

// SetMergeReport gets a reference to the given MergeReport and assigns it to the MergeReport field.
func (o *MergeWebResponse) SetMergeReport(v MergeReport) {
	o.MergeReport = &v
}

// GetResponseType returns the ResponseType field value if set, zero value otherwise.
func (o *MergeWebResponse) GetResponseType() string {
	if o == nil || IsNil(o.ResponseType) {
		var ret string
		return ret
	}
	return *o.ResponseType
}

// GetResponseTypeOk returns a tuple with the ResponseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeWebResponse) GetResponseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseType) {
		return nil, false
	}
	return o.ResponseType, true
}

// HasResponseType returns a boolean if a field has been set.
func (o *MergeWebResponse) HasResponseType() bool {
	if o != nil && !IsNil(o.ResponseType) {
		return true
	}

	return false
}

// SetResponseType gets a reference to the given string and assigns it to the ResponseType field.
func (o *MergeWebResponse) SetResponseType(v string) {
	o.ResponseType = &v
}

func (o MergeWebResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeWebResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MergeReport) {
		toSerialize["mergeReport"] = o.MergeReport
	}
	if !IsNil(o.ResponseType) {
		toSerialize["responseType"] = o.ResponseType
	}
	return toSerialize, nil
}

type NullableMergeWebResponse struct {
	value *MergeWebResponse
	isSet bool
}

func (v NullableMergeWebResponse) Get() *MergeWebResponse {
	return v.value
}

func (v *NullableMergeWebResponse) Set(val *MergeWebResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeWebResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeWebResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeWebResponse(val *MergeWebResponse) *NullableMergeWebResponse {
	return &NullableMergeWebResponse{value: val, isSet: true}
}

func (v NullableMergeWebResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeWebResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
