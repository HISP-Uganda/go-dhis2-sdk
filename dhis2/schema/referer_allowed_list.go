/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the RefererAllowedList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefererAllowedList{}

// RefererAllowedList struct for RefererAllowedList
type RefererAllowedList struct {
	AllowedReferrers []string `json:"allowedReferrers,omitempty"`
	Type             *string  `json:"type,omitempty"`
}

// NewRefererAllowedList instantiates a new RefererAllowedList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefererAllowedList() *RefererAllowedList {
	this := RefererAllowedList{}
	return &this
}

// NewRefererAllowedListWithDefaults instantiates a new RefererAllowedList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefererAllowedListWithDefaults() *RefererAllowedList {
	this := RefererAllowedList{}
	return &this
}

// GetAllowedReferrers returns the AllowedReferrers field value if set, zero value otherwise.
func (o *RefererAllowedList) GetAllowedReferrers() []string {
	if o == nil || IsNil(o.AllowedReferrers) {
		var ret []string
		return ret
	}
	return o.AllowedReferrers
}

// GetAllowedReferrersOk returns a tuple with the AllowedReferrers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefererAllowedList) GetAllowedReferrersOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedReferrers) {
		return nil, false
	}
	return o.AllowedReferrers, true
}

// HasAllowedReferrers returns a boolean if a field has been set.
func (o *RefererAllowedList) HasAllowedReferrers() bool {
	if o != nil && !IsNil(o.AllowedReferrers) {
		return true
	}

	return false
}

// SetAllowedReferrers gets a reference to the given []string and assigns it to the AllowedReferrers field.
func (o *RefererAllowedList) SetAllowedReferrers(v []string) {
	o.AllowedReferrers = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RefererAllowedList) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefererAllowedList) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RefererAllowedList) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RefererAllowedList) SetType(v string) {
	o.Type = &v
}

func (o RefererAllowedList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefererAllowedList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedReferrers) {
		toSerialize["allowedReferrers"] = o.AllowedReferrers
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRefererAllowedList struct {
	value *RefererAllowedList
	isSet bool
}

func (v NullableRefererAllowedList) Get() *RefererAllowedList {
	return v.value
}

func (v *NullableRefererAllowedList) Set(val *RefererAllowedList) {
	v.value = val
	v.isSet = true
}

func (v NullableRefererAllowedList) IsSet() bool {
	return v.isSet
}

func (v *NullableRefererAllowedList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefererAllowedList(val *RefererAllowedList) *NullableRefererAllowedList {
	return &NullableRefererAllowedList{value: val, isSet: true}
}

func (v NullableRefererAllowedList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefererAllowedList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
