/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"time"
)

// checks if the Icon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Icon{}

// Icon struct for Icon
type Icon struct {
	Created      *time.Time              `json:"created,omitempty"`
	CreatedBy    *User                   `json:"createdBy,omitempty"`
	Custom       *bool                   `json:"custom,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	FileResource *BaseIdentifiableObject `json:"fileResource,omitempty"`
	Href         *string                 `json:"href,omitempty"`
	Key          *string                 `json:"key,omitempty"`
	Keywords     []string                `json:"keywords,omitempty"`
	LastUpdated  *time.Time              `json:"lastUpdated,omitempty"`
}

// NewIcon instantiates a new Icon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIcon() *Icon {
	this := Icon{}
	return &this
}

// NewIconWithDefaults instantiates a new Icon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIconWithDefaults() *Icon {
	this := Icon{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Icon) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Icon) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Icon) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Icon) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Icon) GetCreatedBy() User {
	if o == nil || IsNil(o.CreatedBy) {
		var ret User
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Icon) GetCreatedByOk() (*User, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Icon) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given User and assigns it to the CreatedBy field.
func (o *Icon) SetCreatedBy(v User) {
	o.CreatedBy = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *Icon) GetCustom() bool {
	if o == nil || IsNil(o.Custom) {
		var ret bool
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Icon) GetCustomOk() (*bool, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *Icon) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given bool and assigns it to the Custom field.
func (o *Icon) SetCustom(v bool) {
	o.Custom = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Icon) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Icon) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Icon) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Icon) SetDescription(v string) {
	o.Description = &v
}

// GetFileResource returns the FileResource field value if set, zero value otherwise.
func (o *Icon) GetFileResource() BaseIdentifiableObject {
	if o == nil || IsNil(o.FileResource) {
		var ret BaseIdentifiableObject
		return ret
	}
	return *o.FileResource
}

// GetFileResourceOk returns a tuple with the FileResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Icon) GetFileResourceOk() (*BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.FileResource) {
		return nil, false
	}
	return o.FileResource, true
}

// HasFileResource returns a boolean if a field has been set.
func (o *Icon) HasFileResource() bool {
	if o != nil && !IsNil(o.FileResource) {
		return true
	}

	return false
}

// SetFileResource gets a reference to the given BaseIdentifiableObject and assigns it to the FileResource field.
func (o *Icon) SetFileResource(v BaseIdentifiableObject) {
	o.FileResource = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Icon) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Icon) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Icon) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Icon) SetHref(v string) {
	o.Href = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Icon) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Icon) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Icon) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Icon) SetKey(v string) {
	o.Key = &v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *Icon) GetKeywords() []string {
	if o == nil || IsNil(o.Keywords) {
		var ret []string
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Icon) GetKeywordsOk() ([]string, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *Icon) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []string and assigns it to the Keywords field.
func (o *Icon) SetKeywords(v []string) {
	o.Keywords = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Icon) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Icon) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Icon) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Icon) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o Icon) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Icon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FileResource) {
		toSerialize["fileResource"] = o.FileResource
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return toSerialize, nil
}

type NullableIcon struct {
	value *Icon
	isSet bool
}

func (v NullableIcon) Get() *Icon {
	return v.value
}

func (v *NullableIcon) Set(val *Icon) {
	v.value = val
	v.isSet = true
}

func (v NullableIcon) IsSet() bool {
	return v.isSet
}

func (v *NullableIcon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIcon(val *Icon) *NullableIcon {
	return &NullableIcon{value: val, isSet: true}
}

func (v NullableIcon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIcon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
