/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DataApprovalState the model 'DataApprovalState'
type DataApprovalState string

// List of DataApprovalState
const (
	DATAAPPROVALSTATE_UNAPPROVABLE       DataApprovalState = "UNAPPROVABLE"
	DATAAPPROVALSTATE_UNAPPROVED_ABOVE   DataApprovalState = "UNAPPROVED_ABOVE"
	DATAAPPROVALSTATE_UNAPPROVED_WAITING DataApprovalState = "UNAPPROVED_WAITING"
	DATAAPPROVALSTATE_UNAPPROVED_READY   DataApprovalState = "UNAPPROVED_READY"
	DATAAPPROVALSTATE_APPROVED_ABOVE     DataApprovalState = "APPROVED_ABOVE"
	DATAAPPROVALSTATE_APPROVED_HERE      DataApprovalState = "APPROVED_HERE"
	DATAAPPROVALSTATE_ACCEPTED_HERE      DataApprovalState = "ACCEPTED_HERE"
)

// All allowed values of DataApprovalState enum
var AllowedDataApprovalStateEnumValues = []DataApprovalState{
	"UNAPPROVABLE",
	"UNAPPROVED_ABOVE",
	"UNAPPROVED_WAITING",
	"UNAPPROVED_READY",
	"APPROVED_ABOVE",
	"APPROVED_HERE",
	"ACCEPTED_HERE",
}

func (v *DataApprovalState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataApprovalState(value)
	for _, existing := range AllowedDataApprovalStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataApprovalState", value)
}

// NewDataApprovalStateFromValue returns a pointer to a valid DataApprovalState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataApprovalStateFromValue(v string) (*DataApprovalState, error) {
	ev := DataApprovalState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataApprovalState: valid values are %v", v, AllowedDataApprovalStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataApprovalState) IsValid() bool {
	for _, existing := range AllowedDataApprovalStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataApprovalState value
func (v DataApprovalState) Ptr() *DataApprovalState {
	return &v
}

type NullableDataApprovalState struct {
	value *DataApprovalState
	isSet bool
}

func (v NullableDataApprovalState) Get() *DataApprovalState {
	return v.value
}

func (v *NullableDataApprovalState) Set(val *DataApprovalState) {
	v.value = val
	v.isSet = true
}

func (v NullableDataApprovalState) IsSet() bool {
	return v.isSet
}

func (v *NullableDataApprovalState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataApprovalState(val *DataApprovalState) *NullableDataApprovalState {
	return &NullableDataApprovalState{value: val, isSet: true}
}

func (v NullableDataApprovalState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataApprovalState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
