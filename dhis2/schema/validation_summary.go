/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the ValidationSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationSummary{}

// ValidationSummary struct for ValidationSummary
type ValidationSummary struct {
	CommentRequiredViolations []DataElementOperand `json:"commentRequiredViolations,omitempty"`
	ValidationRuleViolations  []ValidationResult   `json:"validationRuleViolations,omitempty"`
}

// NewValidationSummary instantiates a new ValidationSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationSummary() *ValidationSummary {
	this := ValidationSummary{}
	return &this
}

// NewValidationSummaryWithDefaults instantiates a new ValidationSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationSummaryWithDefaults() *ValidationSummary {
	this := ValidationSummary{}
	return &this
}

// GetCommentRequiredViolations returns the CommentRequiredViolations field value if set, zero value otherwise.
func (o *ValidationSummary) GetCommentRequiredViolations() []DataElementOperand {
	if o == nil || IsNil(o.CommentRequiredViolations) {
		var ret []DataElementOperand
		return ret
	}
	return o.CommentRequiredViolations
}

// GetCommentRequiredViolationsOk returns a tuple with the CommentRequiredViolations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationSummary) GetCommentRequiredViolationsOk() ([]DataElementOperand, bool) {
	if o == nil || IsNil(o.CommentRequiredViolations) {
		return nil, false
	}
	return o.CommentRequiredViolations, true
}

// HasCommentRequiredViolations returns a boolean if a field has been set.
func (o *ValidationSummary) HasCommentRequiredViolations() bool {
	if o != nil && !IsNil(o.CommentRequiredViolations) {
		return true
	}

	return false
}

// SetCommentRequiredViolations gets a reference to the given []DataElementOperand and assigns it to the CommentRequiredViolations field.
func (o *ValidationSummary) SetCommentRequiredViolations(v []DataElementOperand) {
	o.CommentRequiredViolations = v
}

// GetValidationRuleViolations returns the ValidationRuleViolations field value if set, zero value otherwise.
func (o *ValidationSummary) GetValidationRuleViolations() []ValidationResult {
	if o == nil || IsNil(o.ValidationRuleViolations) {
		var ret []ValidationResult
		return ret
	}
	return o.ValidationRuleViolations
}

// GetValidationRuleViolationsOk returns a tuple with the ValidationRuleViolations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationSummary) GetValidationRuleViolationsOk() ([]ValidationResult, bool) {
	if o == nil || IsNil(o.ValidationRuleViolations) {
		return nil, false
	}
	return o.ValidationRuleViolations, true
}

// HasValidationRuleViolations returns a boolean if a field has been set.
func (o *ValidationSummary) HasValidationRuleViolations() bool {
	if o != nil && !IsNil(o.ValidationRuleViolations) {
		return true
	}

	return false
}

// SetValidationRuleViolations gets a reference to the given []ValidationResult and assigns it to the ValidationRuleViolations field.
func (o *ValidationSummary) SetValidationRuleViolations(v []ValidationResult) {
	o.ValidationRuleViolations = v
}

func (o ValidationSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommentRequiredViolations) {
		toSerialize["commentRequiredViolations"] = o.CommentRequiredViolations
	}
	if !IsNil(o.ValidationRuleViolations) {
		toSerialize["validationRuleViolations"] = o.ValidationRuleViolations
	}
	return toSerialize, nil
}

type NullableValidationSummary struct {
	value *ValidationSummary
	isSet bool
}

func (v NullableValidationSummary) Get() *ValidationSummary {
	return v.value
}

func (v *NullableValidationSummary) Set(val *ValidationSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationSummary(val *ValidationSummary) *NullableValidationSummary {
	return &NullableValidationSummary{value: val, isSet: true}
}

func (v NullableValidationSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
