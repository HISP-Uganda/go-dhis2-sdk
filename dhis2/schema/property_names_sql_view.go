/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesSqlView the model 'PropertyNamesSqlView'
type PropertyNamesSqlView string

// List of PropertyNames_SqlView
const (
	PROPERTYNAMESSQLVIEW_ACCESS              PropertyNamesSqlView = "access"
	PROPERTYNAMESSQLVIEW_ATTRIBUTE_VALUES    PropertyNamesSqlView = "attributeValues"
	PROPERTYNAMESSQLVIEW_CACHE_STRATEGY      PropertyNamesSqlView = "cacheStrategy"
	PROPERTYNAMESSQLVIEW_CODE                PropertyNamesSqlView = "code"
	PROPERTYNAMESSQLVIEW_CREATED             PropertyNamesSqlView = "created"
	PROPERTYNAMESSQLVIEW_CREATED_BY          PropertyNamesSqlView = "createdBy"
	PROPERTYNAMESSQLVIEW_DESCRIPTION         PropertyNamesSqlView = "description"
	PROPERTYNAMESSQLVIEW_DISPLAY_NAME        PropertyNamesSqlView = "displayName"
	PROPERTYNAMESSQLVIEW_EXTERNAL_ACCESS     PropertyNamesSqlView = "externalAccess"
	PROPERTYNAMESSQLVIEW_FAVORITE            PropertyNamesSqlView = "favorite"
	PROPERTYNAMESSQLVIEW_FAVORITES           PropertyNamesSqlView = "favorites"
	PROPERTYNAMESSQLVIEW_HREF                PropertyNamesSqlView = "href"
	PROPERTYNAMESSQLVIEW_ID                  PropertyNamesSqlView = "id"
	PROPERTYNAMESSQLVIEW_LAST_UPDATED        PropertyNamesSqlView = "lastUpdated"
	PROPERTYNAMESSQLVIEW_LAST_UPDATED_BY     PropertyNamesSqlView = "lastUpdatedBy"
	PROPERTYNAMESSQLVIEW_NAME                PropertyNamesSqlView = "name"
	PROPERTYNAMESSQLVIEW_PUBLIC_ACCESS       PropertyNamesSqlView = "publicAccess"
	PROPERTYNAMESSQLVIEW_SHARING             PropertyNamesSqlView = "sharing"
	PROPERTYNAMESSQLVIEW_SQL_QUERY           PropertyNamesSqlView = "sqlQuery"
	PROPERTYNAMESSQLVIEW_TRANSLATIONS        PropertyNamesSqlView = "translations"
	PROPERTYNAMESSQLVIEW_TYPE                PropertyNamesSqlView = "type"
	PROPERTYNAMESSQLVIEW_UPDATE_JOB_ID       PropertyNamesSqlView = "updateJobId"
	PROPERTYNAMESSQLVIEW_USER                PropertyNamesSqlView = "user"
	PROPERTYNAMESSQLVIEW_USER_ACCESSES       PropertyNamesSqlView = "userAccesses"
	PROPERTYNAMESSQLVIEW_USER_GROUP_ACCESSES PropertyNamesSqlView = "userGroupAccesses"
)

// All allowed values of PropertyNamesSqlView enum
var AllowedPropertyNamesSqlViewEnumValues = []PropertyNamesSqlView{
	"access",
	"attributeValues",
	"cacheStrategy",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"sqlQuery",
	"translations",
	"type",
	"updateJobId",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesSqlView) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesSqlView(value)
	for _, existing := range AllowedPropertyNamesSqlViewEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesSqlView", value)
}

// NewPropertyNamesSqlViewFromValue returns a pointer to a valid PropertyNamesSqlView
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesSqlViewFromValue(v string) (*PropertyNamesSqlView, error) {
	ev := PropertyNamesSqlView(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesSqlView: valid values are %v", v, AllowedPropertyNamesSqlViewEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesSqlView) IsValid() bool {
	for _, existing := range AllowedPropertyNamesSqlViewEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_SqlView value
func (v PropertyNamesSqlView) Ptr() *PropertyNamesSqlView {
	return &v
}

type NullablePropertyNamesSqlView struct {
	value *PropertyNamesSqlView
	isSet bool
}

func (v NullablePropertyNamesSqlView) Get() *PropertyNamesSqlView {
	return v.value
}

func (v *NullablePropertyNamesSqlView) Set(val *PropertyNamesSqlView) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesSqlView) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesSqlView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesSqlView(val *PropertyNamesSqlView) *NullablePropertyNamesSqlView {
	return &NullablePropertyNamesSqlView{value: val, isSet: true}
}

func (v NullablePropertyNamesSqlView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesSqlView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
