/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Config{}

// Config struct for Config
type Config struct {
	InclusionStrategy *string                           `json:"inclusionStrategy,omitempty"`
	Properties        map[string]map[string]interface{} `json:"properties,omitempty"`
}

// NewConfig instantiates a new Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfig() *Config {
	this := Config{}
	return &this
}

// NewConfigWithDefaults instantiates a new Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigWithDefaults() *Config {
	this := Config{}
	return &this
}

// GetInclusionStrategy returns the InclusionStrategy field value if set, zero value otherwise.
func (o *Config) GetInclusionStrategy() string {
	if o == nil || IsNil(o.InclusionStrategy) {
		var ret string
		return ret
	}
	return *o.InclusionStrategy
}

// GetInclusionStrategyOk returns a tuple with the InclusionStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetInclusionStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.InclusionStrategy) {
		return nil, false
	}
	return o.InclusionStrategy, true
}

// HasInclusionStrategy returns a boolean if a field has been set.
func (o *Config) HasInclusionStrategy() bool {
	if o != nil && !IsNil(o.InclusionStrategy) {
		return true
	}

	return false
}

// SetInclusionStrategy gets a reference to the given string and assigns it to the InclusionStrategy field.
func (o *Config) SetInclusionStrategy(v string) {
	o.InclusionStrategy = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Config) GetProperties() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetPropertiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Config) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]map[string]interface{} and assigns it to the Properties field.
func (o *Config) SetProperties(v map[string]map[string]interface{}) {
	o.Properties = v
}

func (o Config) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InclusionStrategy) {
		toSerialize["inclusionStrategy"] = o.InclusionStrategy
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableConfig struct {
	value *Config
	isSet bool
}

func (v NullableConfig) Get() *Config {
	return v.value
}

func (v *NullableConfig) Set(val *Config) {
	v.value = val
	v.isSet = true
}

func (v NullableConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfig(val *Config) *NullableConfig {
	return &NullableConfig{value: val, isSet: true}
}

func (v NullableConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
