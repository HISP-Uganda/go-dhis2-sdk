/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// PredictionStatus the model 'PredictionStatus'
type PredictionStatus string

// List of PredictionStatus
const (
	PREDICTIONSTATUS_SUCCESS PredictionStatus = "SUCCESS"
	PREDICTIONSTATUS_ERROR   PredictionStatus = "ERROR"
)

// All allowed values of PredictionStatus enum
var AllowedPredictionStatusEnumValues = []PredictionStatus{
	"SUCCESS",
	"ERROR",
}

func (v *PredictionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PredictionStatus(value)
	for _, existing := range AllowedPredictionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PredictionStatus", value)
}

// NewPredictionStatusFromValue returns a pointer to a valid PredictionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPredictionStatusFromValue(v string) (*PredictionStatus, error) {
	ev := PredictionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PredictionStatus: valid values are %v", v, AllowedPredictionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PredictionStatus) IsValid() bool {
	for _, existing := range AllowedPredictionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PredictionStatus value
func (v PredictionStatus) Ptr() *PredictionStatus {
	return &v
}

type NullablePredictionStatus struct {
	value *PredictionStatus
	isSet bool
}

func (v NullablePredictionStatus) Get() *PredictionStatus {
	return v.value
}

func (v *NullablePredictionStatus) Set(val *PredictionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePredictionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePredictionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePredictionStatus(val *PredictionStatus) *NullablePredictionStatus {
	return &NullablePredictionStatus{value: val, isSet: true}
}

func (v NullablePredictionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePredictionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
