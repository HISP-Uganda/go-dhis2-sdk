/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImportConflict type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportConflict{}

// ImportConflict struct for ImportConflict
type ImportConflict struct {
	ErrorCode ErrorCode          `json:"errorCode"`
	Indexes   []int32            `json:"indexes,omitempty"`
	Object    *string            `json:"object,omitempty"`
	Objects   *map[string]string `json:"objects,omitempty"`
	Property  *string            `json:"property,omitempty"`
	Value     *string            `json:"value,omitempty"`
}

type _ImportConflict ImportConflict

// NewImportConflict instantiates a new ImportConflict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportConflict(errorCode ErrorCode) *ImportConflict {
	this := ImportConflict{}
	this.ErrorCode = errorCode
	return &this
}

// NewImportConflictWithDefaults instantiates a new ImportConflict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportConflictWithDefaults() *ImportConflict {
	this := ImportConflict{}
	return &this
}

// GetErrorCode returns the ErrorCode field value
func (o *ImportConflict) GetErrorCode() ErrorCode {
	if o == nil {
		var ret ErrorCode
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *ImportConflict) GetErrorCodeOk() (*ErrorCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *ImportConflict) SetErrorCode(v ErrorCode) {
	o.ErrorCode = v
}

// GetIndexes returns the Indexes field value if set, zero value otherwise.
func (o *ImportConflict) GetIndexes() []int32 {
	if o == nil || IsNil(o.Indexes) {
		var ret []int32
		return ret
	}
	return o.Indexes
}

// GetIndexesOk returns a tuple with the Indexes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportConflict) GetIndexesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Indexes) {
		return nil, false
	}
	return o.Indexes, true
}

// HasIndexes returns a boolean if a field has been set.
func (o *ImportConflict) HasIndexes() bool {
	if o != nil && !IsNil(o.Indexes) {
		return true
	}

	return false
}

// SetIndexes gets a reference to the given []int32 and assigns it to the Indexes field.
func (o *ImportConflict) SetIndexes(v []int32) {
	o.Indexes = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ImportConflict) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportConflict) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ImportConflict) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *ImportConflict) SetObject(v string) {
	o.Object = &v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *ImportConflict) GetObjects() map[string]string {
	if o == nil || IsNil(o.Objects) {
		var ret map[string]string
		return ret
	}
	return *o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportConflict) GetObjectsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *ImportConflict) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given map[string]string and assigns it to the Objects field.
func (o *ImportConflict) SetObjects(v map[string]string) {
	o.Objects = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *ImportConflict) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportConflict) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *ImportConflict) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *ImportConflict) SetProperty(v string) {
	o.Property = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ImportConflict) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportConflict) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ImportConflict) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ImportConflict) SetValue(v string) {
	o.Value = &v
}

func (o ImportConflict) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportConflict) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errorCode"] = o.ErrorCode
	if !IsNil(o.Indexes) {
		toSerialize["indexes"] = o.Indexes
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *ImportConflict) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errorCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportConflict := _ImportConflict{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportConflict)

	if err != nil {
		return err
	}

	*o = ImportConflict(varImportConflict)

	return err
}

type NullableImportConflict struct {
	value *ImportConflict
	isSet bool
}

func (v NullableImportConflict) Get() *ImportConflict {
	return v.value
}

func (v *NullableImportConflict) Set(val *ImportConflict) {
	v.value = val
	v.isSet = true
}

func (v NullableImportConflict) IsSet() bool {
	return v.isSet
}

func (v *NullableImportConflict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportConflict(val *ImportConflict) *NullableImportConflict {
	return &NullableImportConflict{value: val, isSet: true}
}

func (v NullableImportConflict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportConflict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
