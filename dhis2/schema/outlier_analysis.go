/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OutlierAnalysis type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutlierAnalysis{}

// OutlierAnalysis struct for OutlierAnalysis
type OutlierAnalysis struct {
	Enabled             *bool                   `json:"enabled,omitempty"`
	ExtremeLines        *OutlierLine            `json:"extremeLines,omitempty"`
	MaxResults          *int32                  `json:"maxResults,omitempty"`
	NormalizationMethod NormalizedOutlierMethod `json:"normalizationMethod"`
	OutlierMethod       OutlierMethod           `json:"outlierMethod"`
	ThresholdFactor     *float64                `json:"thresholdFactor,omitempty"`
}

type _OutlierAnalysis OutlierAnalysis

// NewOutlierAnalysis instantiates a new OutlierAnalysis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutlierAnalysis(normalizationMethod NormalizedOutlierMethod, outlierMethod OutlierMethod) *OutlierAnalysis {
	this := OutlierAnalysis{}
	this.NormalizationMethod = normalizationMethod
	this.OutlierMethod = outlierMethod
	return &this
}

// NewOutlierAnalysisWithDefaults instantiates a new OutlierAnalysis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutlierAnalysisWithDefaults() *OutlierAnalysis {
	this := OutlierAnalysis{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *OutlierAnalysis) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierAnalysis) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *OutlierAnalysis) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *OutlierAnalysis) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExtremeLines returns the ExtremeLines field value if set, zero value otherwise.
func (o *OutlierAnalysis) GetExtremeLines() OutlierLine {
	if o == nil || IsNil(o.ExtremeLines) {
		var ret OutlierLine
		return ret
	}
	return *o.ExtremeLines
}

// GetExtremeLinesOk returns a tuple with the ExtremeLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierAnalysis) GetExtremeLinesOk() (*OutlierLine, bool) {
	if o == nil || IsNil(o.ExtremeLines) {
		return nil, false
	}
	return o.ExtremeLines, true
}

// HasExtremeLines returns a boolean if a field has been set.
func (o *OutlierAnalysis) HasExtremeLines() bool {
	if o != nil && !IsNil(o.ExtremeLines) {
		return true
	}

	return false
}

// SetExtremeLines gets a reference to the given OutlierLine and assigns it to the ExtremeLines field.
func (o *OutlierAnalysis) SetExtremeLines(v OutlierLine) {
	o.ExtremeLines = &v
}

// GetMaxResults returns the MaxResults field value if set, zero value otherwise.
func (o *OutlierAnalysis) GetMaxResults() int32 {
	if o == nil || IsNil(o.MaxResults) {
		var ret int32
		return ret
	}
	return *o.MaxResults
}

// GetMaxResultsOk returns a tuple with the MaxResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierAnalysis) GetMaxResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxResults) {
		return nil, false
	}
	return o.MaxResults, true
}

// HasMaxResults returns a boolean if a field has been set.
func (o *OutlierAnalysis) HasMaxResults() bool {
	if o != nil && !IsNil(o.MaxResults) {
		return true
	}

	return false
}

// SetMaxResults gets a reference to the given int32 and assigns it to the MaxResults field.
func (o *OutlierAnalysis) SetMaxResults(v int32) {
	o.MaxResults = &v
}

// GetNormalizationMethod returns the NormalizationMethod field value
func (o *OutlierAnalysis) GetNormalizationMethod() NormalizedOutlierMethod {
	if o == nil {
		var ret NormalizedOutlierMethod
		return ret
	}

	return o.NormalizationMethod
}

// GetNormalizationMethodOk returns a tuple with the NormalizationMethod field value
// and a boolean to check if the value has been set.
func (o *OutlierAnalysis) GetNormalizationMethodOk() (*NormalizedOutlierMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NormalizationMethod, true
}

// SetNormalizationMethod sets field value
func (o *OutlierAnalysis) SetNormalizationMethod(v NormalizedOutlierMethod) {
	o.NormalizationMethod = v
}

// GetOutlierMethod returns the OutlierMethod field value
func (o *OutlierAnalysis) GetOutlierMethod() OutlierMethod {
	if o == nil {
		var ret OutlierMethod
		return ret
	}

	return o.OutlierMethod
}

// GetOutlierMethodOk returns a tuple with the OutlierMethod field value
// and a boolean to check if the value has been set.
func (o *OutlierAnalysis) GetOutlierMethodOk() (*OutlierMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutlierMethod, true
}

// SetOutlierMethod sets field value
func (o *OutlierAnalysis) SetOutlierMethod(v OutlierMethod) {
	o.OutlierMethod = v
}

// GetThresholdFactor returns the ThresholdFactor field value if set, zero value otherwise.
func (o *OutlierAnalysis) GetThresholdFactor() float64 {
	if o == nil || IsNil(o.ThresholdFactor) {
		var ret float64
		return ret
	}
	return *o.ThresholdFactor
}

// GetThresholdFactorOk returns a tuple with the ThresholdFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierAnalysis) GetThresholdFactorOk() (*float64, bool) {
	if o == nil || IsNil(o.ThresholdFactor) {
		return nil, false
	}
	return o.ThresholdFactor, true
}

// HasThresholdFactor returns a boolean if a field has been set.
func (o *OutlierAnalysis) HasThresholdFactor() bool {
	if o != nil && !IsNil(o.ThresholdFactor) {
		return true
	}

	return false
}

// SetThresholdFactor gets a reference to the given float64 and assigns it to the ThresholdFactor field.
func (o *OutlierAnalysis) SetThresholdFactor(v float64) {
	o.ThresholdFactor = &v
}

func (o OutlierAnalysis) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutlierAnalysis) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExtremeLines) {
		toSerialize["extremeLines"] = o.ExtremeLines
	}
	if !IsNil(o.MaxResults) {
		toSerialize["maxResults"] = o.MaxResults
	}
	toSerialize["normalizationMethod"] = o.NormalizationMethod
	toSerialize["outlierMethod"] = o.OutlierMethod
	if !IsNil(o.ThresholdFactor) {
		toSerialize["thresholdFactor"] = o.ThresholdFactor
	}
	return toSerialize, nil
}

func (o *OutlierAnalysis) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"normalizationMethod",
		"outlierMethod",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutlierAnalysis := _OutlierAnalysis{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutlierAnalysis)

	if err != nil {
		return err
	}

	*o = OutlierAnalysis(varOutlierAnalysis)

	return err
}

type NullableOutlierAnalysis struct {
	value *OutlierAnalysis
	isSet bool
}

func (v NullableOutlierAnalysis) Get() *OutlierAnalysis {
	return v.value
}

func (v *NullableOutlierAnalysis) Set(val *OutlierAnalysis) {
	v.value = val
	v.isSet = true
}

func (v NullableOutlierAnalysis) IsSet() bool {
	return v.isSet
}

func (v *NullableOutlierAnalysis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutlierAnalysis(val *OutlierAnalysis) *NullableOutlierAnalysis {
	return &NullableOutlierAnalysis{value: val, isSet: true}
}

func (v NullableOutlierAnalysis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutlierAnalysis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
