/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ProgramRuleVariable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProgramRuleVariable{}

// ProgramRuleVariable struct for ProgramRuleVariable
type ProgramRuleVariable struct {
	Access                        *Access                       `json:"access,omitempty"`
	AttributeValues               []AttributeValue              `json:"attributeValues,omitempty"`
	Code                          *string                       `json:"code,omitempty"`
	Created                       *time.Time                    `json:"created,omitempty"`
	CreatedBy                     *UserDto                      `json:"createdBy,omitempty"`
	DataElement                   *BaseIdentifiableObject       `json:"dataElement,omitempty"`
	DisplayName                   *string                       `json:"displayName,omitempty"`
	Favorite                      *bool                         `json:"favorite,omitempty"`
	Favorites                     []string                      `json:"favorites,omitempty"`
	Href                          *string                       `json:"href,omitempty"`
	Id                            *string                       `json:"id,omitempty"`
	LastUpdated                   *time.Time                    `json:"lastUpdated,omitempty"`
	LastUpdatedBy                 *UserDto                      `json:"lastUpdatedBy,omitempty"`
	Name                          *string                       `json:"name,omitempty"`
	Program                       *BaseIdentifiableObject       `json:"program,omitempty"`
	ProgramRuleVariableSourceType ProgramRuleVariableSourceType `json:"programRuleVariableSourceType"`
	ProgramStage                  *BaseIdentifiableObject       `json:"programStage,omitempty"`
	Sharing                       *Sharing                      `json:"sharing,omitempty"`
	TrackedEntityAttribute        *BaseIdentifiableObject       `json:"trackedEntityAttribute,omitempty"`
	Translations                  []Translation                 `json:"translations,omitempty"`
	UseCodeForOptionSet           *bool                         `json:"useCodeForOptionSet,omitempty"`
	ValueType                     ValueType                     `json:"valueType"`
}

type _ProgramRuleVariable ProgramRuleVariable

// NewProgramRuleVariable instantiates a new ProgramRuleVariable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgramRuleVariable(programRuleVariableSourceType ProgramRuleVariableSourceType, valueType ValueType) *ProgramRuleVariable {
	this := ProgramRuleVariable{}
	this.ProgramRuleVariableSourceType = programRuleVariableSourceType
	this.ValueType = valueType
	return &this
}

// NewProgramRuleVariableWithDefaults instantiates a new ProgramRuleVariable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgramRuleVariableWithDefaults() *ProgramRuleVariable {
	this := ProgramRuleVariable{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *ProgramRuleVariable) SetAccess(v Access) {
	o.Access = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *ProgramRuleVariable) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ProgramRuleVariable) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ProgramRuleVariable) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetCreatedBy() UserDto {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserDto
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetCreatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserDto and assigns it to the CreatedBy field.
func (o *ProgramRuleVariable) SetCreatedBy(v UserDto) {
	o.CreatedBy = &v
}

// GetDataElement returns the DataElement field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetDataElement() BaseIdentifiableObject {
	if o == nil || IsNil(o.DataElement) {
		var ret BaseIdentifiableObject
		return ret
	}
	return *o.DataElement
}

// GetDataElementOk returns a tuple with the DataElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetDataElementOk() (*BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.DataElement) {
		return nil, false
	}
	return o.DataElement, true
}

// HasDataElement returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasDataElement() bool {
	if o != nil && !IsNil(o.DataElement) {
		return true
	}

	return false
}

// SetDataElement gets a reference to the given BaseIdentifiableObject and assigns it to the DataElement field.
func (o *ProgramRuleVariable) SetDataElement(v BaseIdentifiableObject) {
	o.DataElement = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ProgramRuleVariable) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *ProgramRuleVariable) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *ProgramRuleVariable) SetFavorites(v []string) {
	o.Favorites = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ProgramRuleVariable) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProgramRuleVariable) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *ProgramRuleVariable) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetLastUpdatedBy() UserDto {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret UserDto
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetLastUpdatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given UserDto and assigns it to the LastUpdatedBy field.
func (o *ProgramRuleVariable) SetLastUpdatedBy(v UserDto) {
	o.LastUpdatedBy = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProgramRuleVariable) SetName(v string) {
	o.Name = &v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetProgram() BaseIdentifiableObject {
	if o == nil || IsNil(o.Program) {
		var ret BaseIdentifiableObject
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetProgramOk() (*BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given BaseIdentifiableObject and assigns it to the Program field.
func (o *ProgramRuleVariable) SetProgram(v BaseIdentifiableObject) {
	o.Program = &v
}

// GetProgramRuleVariableSourceType returns the ProgramRuleVariableSourceType field value
func (o *ProgramRuleVariable) GetProgramRuleVariableSourceType() ProgramRuleVariableSourceType {
	if o == nil {
		var ret ProgramRuleVariableSourceType
		return ret
	}

	return o.ProgramRuleVariableSourceType
}

// GetProgramRuleVariableSourceTypeOk returns a tuple with the ProgramRuleVariableSourceType field value
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetProgramRuleVariableSourceTypeOk() (*ProgramRuleVariableSourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgramRuleVariableSourceType, true
}

// SetProgramRuleVariableSourceType sets field value
func (o *ProgramRuleVariable) SetProgramRuleVariableSourceType(v ProgramRuleVariableSourceType) {
	o.ProgramRuleVariableSourceType = v
}

// GetProgramStage returns the ProgramStage field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetProgramStage() BaseIdentifiableObject {
	if o == nil || IsNil(o.ProgramStage) {
		var ret BaseIdentifiableObject
		return ret
	}
	return *o.ProgramStage
}

// GetProgramStageOk returns a tuple with the ProgramStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetProgramStageOk() (*BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.ProgramStage) {
		return nil, false
	}
	return o.ProgramStage, true
}

// HasProgramStage returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasProgramStage() bool {
	if o != nil && !IsNil(o.ProgramStage) {
		return true
	}

	return false
}

// SetProgramStage gets a reference to the given BaseIdentifiableObject and assigns it to the ProgramStage field.
func (o *ProgramRuleVariable) SetProgramStage(v BaseIdentifiableObject) {
	o.ProgramStage = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *ProgramRuleVariable) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetTrackedEntityAttribute returns the TrackedEntityAttribute field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetTrackedEntityAttribute() BaseIdentifiableObject {
	if o == nil || IsNil(o.TrackedEntityAttribute) {
		var ret BaseIdentifiableObject
		return ret
	}
	return *o.TrackedEntityAttribute
}

// GetTrackedEntityAttributeOk returns a tuple with the TrackedEntityAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetTrackedEntityAttributeOk() (*BaseIdentifiableObject, bool) {
	if o == nil || IsNil(o.TrackedEntityAttribute) {
		return nil, false
	}
	return o.TrackedEntityAttribute, true
}

// HasTrackedEntityAttribute returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasTrackedEntityAttribute() bool {
	if o != nil && !IsNil(o.TrackedEntityAttribute) {
		return true
	}

	return false
}

// SetTrackedEntityAttribute gets a reference to the given BaseIdentifiableObject and assigns it to the TrackedEntityAttribute field.
func (o *ProgramRuleVariable) SetTrackedEntityAttribute(v BaseIdentifiableObject) {
	o.TrackedEntityAttribute = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *ProgramRuleVariable) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUseCodeForOptionSet returns the UseCodeForOptionSet field value if set, zero value otherwise.
func (o *ProgramRuleVariable) GetUseCodeForOptionSet() bool {
	if o == nil || IsNil(o.UseCodeForOptionSet) {
		var ret bool
		return ret
	}
	return *o.UseCodeForOptionSet
}

// GetUseCodeForOptionSetOk returns a tuple with the UseCodeForOptionSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetUseCodeForOptionSetOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCodeForOptionSet) {
		return nil, false
	}
	return o.UseCodeForOptionSet, true
}

// HasUseCodeForOptionSet returns a boolean if a field has been set.
func (o *ProgramRuleVariable) HasUseCodeForOptionSet() bool {
	if o != nil && !IsNil(o.UseCodeForOptionSet) {
		return true
	}

	return false
}

// SetUseCodeForOptionSet gets a reference to the given bool and assigns it to the UseCodeForOptionSet field.
func (o *ProgramRuleVariable) SetUseCodeForOptionSet(v bool) {
	o.UseCodeForOptionSet = &v
}

// GetValueType returns the ValueType field value
func (o *ProgramRuleVariable) GetValueType() ValueType {
	if o == nil {
		var ret ValueType
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *ProgramRuleVariable) GetValueTypeOk() (*ValueType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *ProgramRuleVariable) SetValueType(v ValueType) {
	o.ValueType = v
}

func (o ProgramRuleVariable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProgramRuleVariable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DataElement) {
		toSerialize["dataElement"] = o.DataElement
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	toSerialize["programRuleVariableSourceType"] = o.ProgramRuleVariableSourceType
	if !IsNil(o.ProgramStage) {
		toSerialize["programStage"] = o.ProgramStage
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.TrackedEntityAttribute) {
		toSerialize["trackedEntityAttribute"] = o.TrackedEntityAttribute
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.UseCodeForOptionSet) {
		toSerialize["useCodeForOptionSet"] = o.UseCodeForOptionSet
	}
	toSerialize["valueType"] = o.ValueType
	return toSerialize, nil
}

func (o *ProgramRuleVariable) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"programRuleVariableSourceType",
		"valueType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProgramRuleVariable := _ProgramRuleVariable{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProgramRuleVariable)

	if err != nil {
		return err
	}

	*o = ProgramRuleVariable(varProgramRuleVariable)

	return err
}

type NullableProgramRuleVariable struct {
	value *ProgramRuleVariable
	isSet bool
}

func (v NullableProgramRuleVariable) Get() *ProgramRuleVariable {
	return v.value
}

func (v *NullableProgramRuleVariable) Set(val *ProgramRuleVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramRuleVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramRuleVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramRuleVariable(val *ProgramRuleVariable) *NullableProgramRuleVariable {
	return &NullableProgramRuleVariable{value: val, isSet: true}
}

func (v NullableProgramRuleVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramRuleVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
