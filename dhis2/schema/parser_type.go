/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ParserType the model 'ParserType'
type ParserType string

// List of ParserType
const (
	PARSERTYPE_KEY_VALUE_PARSER                   ParserType = "KEY_VALUE_PARSER"
	PARSERTYPE_ALERT_PARSER                       ParserType = "ALERT_PARSER"
	PARSERTYPE_UNREGISTERED_PARSER                ParserType = "UNREGISTERED_PARSER"
	PARSERTYPE_TRACKED_ENTITY_REGISTRATION_PARSER ParserType = "TRACKED_ENTITY_REGISTRATION_PARSER"
	PARSERTYPE_PROGRAM_STAGE_DATAENTRY_PARSER     ParserType = "PROGRAM_STAGE_DATAENTRY_PARSER"
	PARSERTYPE_EVENT_REGISTRATION_PARSER          ParserType = "EVENT_REGISTRATION_PARSER"
)

// All allowed values of ParserType enum
var AllowedParserTypeEnumValues = []ParserType{
	"KEY_VALUE_PARSER",
	"ALERT_PARSER",
	"UNREGISTERED_PARSER",
	"TRACKED_ENTITY_REGISTRATION_PARSER",
	"PROGRAM_STAGE_DATAENTRY_PARSER",
	"EVENT_REGISTRATION_PARSER",
}

func (v *ParserType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParserType(value)
	for _, existing := range AllowedParserTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParserType", value)
}

// NewParserTypeFromValue returns a pointer to a valid ParserType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParserTypeFromValue(v string) (*ParserType, error) {
	ev := ParserType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParserType: valid values are %v", v, AllowedParserTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParserType) IsValid() bool {
	for _, existing := range AllowedParserTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ParserType value
func (v ParserType) Ptr() *ParserType {
	return &v
}

type NullableParserType struct {
	value *ParserType
	isSet bool
}

func (v NullableParserType) Get() *ParserType {
	return v.value
}

func (v *NullableParserType) Set(val *ParserType) {
	v.value = val
	v.isSet = true
}

func (v NullableParserType) IsSet() bool {
	return v.isSet
}

func (v *NullableParserType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParserType(val *ParserType) *NullableParserType {
	return &NullableParserType{value: val, isSet: true}
}

func (v NullableParserType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParserType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
