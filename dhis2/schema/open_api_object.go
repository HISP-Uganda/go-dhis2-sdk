/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the OpenApiObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenApiObject{}

// OpenApiObject struct for OpenApiObject
type OpenApiObject struct {
	Components *ComponentsObject      `json:"components,omitempty"`
	Servers    []ServerObject         `json:"servers,omitempty"`
	Openapi    *string                `json:"openapi,omitempty"`
	Paths      map[string]interface{} `json:"paths,omitempty"`
	Tags       []TagObject            `json:"tags,omitempty"`
	Info       *InfoObject            `json:"info,omitempty"`
}

// NewOpenApiObject instantiates a new OpenApiObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenApiObject() *OpenApiObject {
	this := OpenApiObject{}
	return &this
}

// NewOpenApiObjectWithDefaults instantiates a new OpenApiObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenApiObjectWithDefaults() *OpenApiObject {
	this := OpenApiObject{}
	return &this
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *OpenApiObject) GetComponents() ComponentsObject {
	if o == nil || IsNil(o.Components) {
		var ret ComponentsObject
		return ret
	}
	return *o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiObject) GetComponentsOk() (*ComponentsObject, bool) {
	if o == nil || IsNil(o.Components) {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *OpenApiObject) HasComponents() bool {
	if o != nil && !IsNil(o.Components) {
		return true
	}

	return false
}

// SetComponents gets a reference to the given ComponentsObject and assigns it to the Components field.
func (o *OpenApiObject) SetComponents(v ComponentsObject) {
	o.Components = &v
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *OpenApiObject) GetServers() []ServerObject {
	if o == nil || IsNil(o.Servers) {
		var ret []ServerObject
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiObject) GetServersOk() ([]ServerObject, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *OpenApiObject) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []ServerObject and assigns it to the Servers field.
func (o *OpenApiObject) SetServers(v []ServerObject) {
	o.Servers = v
}

// GetOpenapi returns the Openapi field value if set, zero value otherwise.
func (o *OpenApiObject) GetOpenapi() string {
	if o == nil || IsNil(o.Openapi) {
		var ret string
		return ret
	}
	return *o.Openapi
}

// GetOpenapiOk returns a tuple with the Openapi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiObject) GetOpenapiOk() (*string, bool) {
	if o == nil || IsNil(o.Openapi) {
		return nil, false
	}
	return o.Openapi, true
}

// HasOpenapi returns a boolean if a field has been set.
func (o *OpenApiObject) HasOpenapi() bool {
	if o != nil && !IsNil(o.Openapi) {
		return true
	}

	return false
}

// SetOpenapi gets a reference to the given string and assigns it to the Openapi field.
func (o *OpenApiObject) SetOpenapi(v string) {
	o.Openapi = &v
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *OpenApiObject) GetPaths() map[string]interface{} {
	if o == nil || IsNil(o.Paths) {
		var ret map[string]interface{}
		return ret
	}
	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiObject) GetPathsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Paths) {
		return map[string]interface{}{}, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *OpenApiObject) HasPaths() bool {
	if o != nil && !IsNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given map[string]interface{} and assigns it to the Paths field.
func (o *OpenApiObject) SetPaths(v map[string]interface{}) {
	o.Paths = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *OpenApiObject) GetTags() []TagObject {
	if o == nil || IsNil(o.Tags) {
		var ret []TagObject
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiObject) GetTagsOk() ([]TagObject, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *OpenApiObject) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagObject and assigns it to the Tags field.
func (o *OpenApiObject) SetTags(v []TagObject) {
	o.Tags = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *OpenApiObject) GetInfo() InfoObject {
	if o == nil || IsNil(o.Info) {
		var ret InfoObject
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiObject) GetInfoOk() (*InfoObject, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *OpenApiObject) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given InfoObject and assigns it to the Info field.
func (o *OpenApiObject) SetInfo(v InfoObject) {
	o.Info = &v
}

func (o OpenApiObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenApiObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Components) {
		toSerialize["components"] = o.Components
	}
	if !IsNil(o.Servers) {
		toSerialize["servers"] = o.Servers
	}
	if !IsNil(o.Openapi) {
		toSerialize["openapi"] = o.Openapi
	}
	if !IsNil(o.Paths) {
		toSerialize["paths"] = o.Paths
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	return toSerialize, nil
}

type NullableOpenApiObject struct {
	value *OpenApiObject
	isSet bool
}

func (v NullableOpenApiObject) Get() *OpenApiObject {
	return v.value
}

func (v *NullableOpenApiObject) Set(val *OpenApiObject) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenApiObject) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenApiObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenApiObject(val *OpenApiObject) *NullableOpenApiObject {
	return &NullableOpenApiObject{value: val, isSet: true}
}

func (v NullableOpenApiObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenApiObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
