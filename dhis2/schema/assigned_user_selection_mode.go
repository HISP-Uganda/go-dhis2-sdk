/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// AssignedUserSelectionMode the model 'AssignedUserSelectionMode'
type AssignedUserSelectionMode string

// List of AssignedUserSelectionMode
const (
	ASSIGNEDUSERSELECTIONMODE_CURRENT  AssignedUserSelectionMode = "CURRENT"
	ASSIGNEDUSERSELECTIONMODE_PROVIDED AssignedUserSelectionMode = "PROVIDED"
	ASSIGNEDUSERSELECTIONMODE_NONE     AssignedUserSelectionMode = "NONE"
	ASSIGNEDUSERSELECTIONMODE_ANY      AssignedUserSelectionMode = "ANY"
	ASSIGNEDUSERSELECTIONMODE_ALL      AssignedUserSelectionMode = "ALL"
)

// All allowed values of AssignedUserSelectionMode enum
var AllowedAssignedUserSelectionModeEnumValues = []AssignedUserSelectionMode{
	"CURRENT",
	"PROVIDED",
	"NONE",
	"ANY",
	"ALL",
}

func (v *AssignedUserSelectionMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssignedUserSelectionMode(value)
	for _, existing := range AllowedAssignedUserSelectionModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssignedUserSelectionMode", value)
}

// NewAssignedUserSelectionModeFromValue returns a pointer to a valid AssignedUserSelectionMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssignedUserSelectionModeFromValue(v string) (*AssignedUserSelectionMode, error) {
	ev := AssignedUserSelectionMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssignedUserSelectionMode: valid values are %v", v, AllowedAssignedUserSelectionModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssignedUserSelectionMode) IsValid() bool {
	for _, existing := range AllowedAssignedUserSelectionModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssignedUserSelectionMode value
func (v AssignedUserSelectionMode) Ptr() *AssignedUserSelectionMode {
	return &v
}

type NullableAssignedUserSelectionMode struct {
	value *AssignedUserSelectionMode
	isSet bool
}

func (v NullableAssignedUserSelectionMode) Get() *AssignedUserSelectionMode {
	return v.value
}

func (v *NullableAssignedUserSelectionMode) Set(val *AssignedUserSelectionMode) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignedUserSelectionMode) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignedUserSelectionMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignedUserSelectionMode(val *AssignedUserSelectionMode) *NullableAssignedUserSelectionMode {
	return &NullableAssignedUserSelectionMode{value: val, isSet: true}
}

func (v NullableAssignedUserSelectionMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignedUserSelectionMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
