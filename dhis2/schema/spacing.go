/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the Spacing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Spacing{}

// Spacing struct for Spacing
type Spacing struct {
	Column *int32 `json:"column,omitempty"`
	Row    *int32 `json:"row,omitempty"`
}

// NewSpacing instantiates a new Spacing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpacing() *Spacing {
	this := Spacing{}
	return &this
}

// NewSpacingWithDefaults instantiates a new Spacing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpacingWithDefaults() *Spacing {
	this := Spacing{}
	return &this
}

// GetColumn returns the Column field value if set, zero value otherwise.
func (o *Spacing) GetColumn() int32 {
	if o == nil || IsNil(o.Column) {
		var ret int32
		return ret
	}
	return *o.Column
}

// GetColumnOk returns a tuple with the Column field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spacing) GetColumnOk() (*int32, bool) {
	if o == nil || IsNil(o.Column) {
		return nil, false
	}
	return o.Column, true
}

// HasColumn returns a boolean if a field has been set.
func (o *Spacing) HasColumn() bool {
	if o != nil && !IsNil(o.Column) {
		return true
	}

	return false
}

// SetColumn gets a reference to the given int32 and assigns it to the Column field.
func (o *Spacing) SetColumn(v int32) {
	o.Column = &v
}

// GetRow returns the Row field value if set, zero value otherwise.
func (o *Spacing) GetRow() int32 {
	if o == nil || IsNil(o.Row) {
		var ret int32
		return ret
	}
	return *o.Row
}

// GetRowOk returns a tuple with the Row field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spacing) GetRowOk() (*int32, bool) {
	if o == nil || IsNil(o.Row) {
		return nil, false
	}
	return o.Row, true
}

// HasRow returns a boolean if a field has been set.
func (o *Spacing) HasRow() bool {
	if o != nil && !IsNil(o.Row) {
		return true
	}

	return false
}

// SetRow gets a reference to the given int32 and assigns it to the Row field.
func (o *Spacing) SetRow(v int32) {
	o.Row = &v
}

func (o Spacing) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Spacing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Column) {
		toSerialize["column"] = o.Column
	}
	if !IsNil(o.Row) {
		toSerialize["row"] = o.Row
	}
	return toSerialize, nil
}

type NullableSpacing struct {
	value *Spacing
	isSet bool
}

func (v NullableSpacing) Get() *Spacing {
	return v.value
}

func (v *NullableSpacing) Set(val *Spacing) {
	v.value = val
	v.isSet = true
}

func (v NullableSpacing) IsSet() bool {
	return v.isSet
}

func (v *NullableSpacing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpacing(val *Spacing) *NullableSpacing {
	return &NullableSpacing{value: val, isSet: true}
}

func (v NullableSpacing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpacing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
