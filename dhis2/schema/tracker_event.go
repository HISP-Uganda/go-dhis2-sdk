/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TrackerEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackerEvent{}

// TrackerEvent struct for TrackerEvent
type TrackerEvent struct {
	AssignedUser             *TrackerUser       `json:"assignedUser,omitempty"`
	AttributeCategoryOptions *string            `json:"attributeCategoryOptions,omitempty"`
	AttributeOptionCombo     *string            `json:"attributeOptionCombo,omitempty"`
	CompletedAt              *Instant           `json:"completedAt,omitempty"`
	CompletedBy              *string            `json:"completedBy,omitempty"`
	CreatedAt                *Instant           `json:"createdAt,omitempty"`
	CreatedAtClient          *Instant           `json:"createdAtClient,omitempty"`
	CreatedBy                *TrackerUser       `json:"createdBy,omitempty"`
	DataValues               []TrackerDataValue `json:"dataValues,omitempty"`
	Deleted                  *bool              `json:"deleted,omitempty"`
	// A UID for an Enrollment object   (Java name `org.hisp.dhis.program.Enrollment`)
	Enrollment *string `json:"enrollment,omitempty"`
	// A UID for an Event object   (Java name `org.hisp.dhis.program.Event`)
	Event      *string                `json:"event,omitempty"`
	FollowUp   *bool                  `json:"followUp,omitempty"`
	Geometry   map[string]interface{} `json:"geometry,omitempty"`
	Notes      []TrackerNote          `json:"notes,omitempty"`
	OccurredAt *Instant               `json:"occurredAt,omitempty"`
	OrgUnit    *string                `json:"orgUnit,omitempty"`
	// A UID for an Program object   (Java name `org.hisp.dhis.program.Program`)
	Program *string `json:"program,omitempty"`
	// A UID for an ProgramStage object   (Java name `org.hisp.dhis.program.ProgramStage`)
	ProgramStage  *string               `json:"programStage,omitempty"`
	Relationships []TrackerRelationship `json:"relationships,omitempty"`
	ScheduledAt   *Instant              `json:"scheduledAt,omitempty"`
	Status        EventStatus           `json:"status"`
	// A UID for an User object   (Java name `org.hisp.dhis.user.User`)
	StoredBy *string `json:"storedBy,omitempty"`
	// A UID for an TrackedEntity object   (Java name `org.hisp.dhis.trackedentity.TrackedEntity`)
	TrackedEntity   *string      `json:"trackedEntity,omitempty"`
	UpdatedAt       *Instant     `json:"updatedAt,omitempty"`
	UpdatedAtClient *Instant     `json:"updatedAtClient,omitempty"`
	UpdatedBy       *TrackerUser `json:"updatedBy,omitempty"`
}

type _TrackerEvent TrackerEvent

// NewTrackerEvent instantiates a new TrackerEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackerEvent(status EventStatus) *TrackerEvent {
	this := TrackerEvent{}
	this.Status = status
	return &this
}

// NewTrackerEventWithDefaults instantiates a new TrackerEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackerEventWithDefaults() *TrackerEvent {
	this := TrackerEvent{}
	return &this
}

// GetAssignedUser returns the AssignedUser field value if set, zero value otherwise.
func (o *TrackerEvent) GetAssignedUser() TrackerUser {
	if o == nil || IsNil(o.AssignedUser) {
		var ret TrackerUser
		return ret
	}
	return *o.AssignedUser
}

// GetAssignedUserOk returns a tuple with the AssignedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetAssignedUserOk() (*TrackerUser, bool) {
	if o == nil || IsNil(o.AssignedUser) {
		return nil, false
	}
	return o.AssignedUser, true
}

// HasAssignedUser returns a boolean if a field has been set.
func (o *TrackerEvent) HasAssignedUser() bool {
	if o != nil && !IsNil(o.AssignedUser) {
		return true
	}

	return false
}

// SetAssignedUser gets a reference to the given TrackerUser and assigns it to the AssignedUser field.
func (o *TrackerEvent) SetAssignedUser(v TrackerUser) {
	o.AssignedUser = &v
}

// GetAttributeCategoryOptions returns the AttributeCategoryOptions field value if set, zero value otherwise.
func (o *TrackerEvent) GetAttributeCategoryOptions() string {
	if o == nil || IsNil(o.AttributeCategoryOptions) {
		var ret string
		return ret
	}
	return *o.AttributeCategoryOptions
}

// GetAttributeCategoryOptionsOk returns a tuple with the AttributeCategoryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetAttributeCategoryOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeCategoryOptions) {
		return nil, false
	}
	return o.AttributeCategoryOptions, true
}

// HasAttributeCategoryOptions returns a boolean if a field has been set.
func (o *TrackerEvent) HasAttributeCategoryOptions() bool {
	if o != nil && !IsNil(o.AttributeCategoryOptions) {
		return true
	}

	return false
}

// SetAttributeCategoryOptions gets a reference to the given string and assigns it to the AttributeCategoryOptions field.
func (o *TrackerEvent) SetAttributeCategoryOptions(v string) {
	o.AttributeCategoryOptions = &v
}

// GetAttributeOptionCombo returns the AttributeOptionCombo field value if set, zero value otherwise.
func (o *TrackerEvent) GetAttributeOptionCombo() string {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		var ret string
		return ret
	}
	return *o.AttributeOptionCombo
}

// GetAttributeOptionComboOk returns a tuple with the AttributeOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetAttributeOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		return nil, false
	}
	return o.AttributeOptionCombo, true
}

// HasAttributeOptionCombo returns a boolean if a field has been set.
func (o *TrackerEvent) HasAttributeOptionCombo() bool {
	if o != nil && !IsNil(o.AttributeOptionCombo) {
		return true
	}

	return false
}

// SetAttributeOptionCombo gets a reference to the given string and assigns it to the AttributeOptionCombo field.
func (o *TrackerEvent) SetAttributeOptionCombo(v string) {
	o.AttributeOptionCombo = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *TrackerEvent) GetCompletedAt() Instant {
	if o == nil || IsNil(o.CompletedAt) {
		var ret Instant
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetCompletedAtOk() (*Instant, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *TrackerEvent) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given Instant and assigns it to the CompletedAt field.
func (o *TrackerEvent) SetCompletedAt(v Instant) {
	o.CompletedAt = &v
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *TrackerEvent) GetCompletedBy() string {
	if o == nil || IsNil(o.CompletedBy) {
		var ret string
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetCompletedByOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedBy) {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *TrackerEvent) HasCompletedBy() bool {
	if o != nil && !IsNil(o.CompletedBy) {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given string and assigns it to the CompletedBy field.
func (o *TrackerEvent) SetCompletedBy(v string) {
	o.CompletedBy = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TrackerEvent) GetCreatedAt() Instant {
	if o == nil || IsNil(o.CreatedAt) {
		var ret Instant
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetCreatedAtOk() (*Instant, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TrackerEvent) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given Instant and assigns it to the CreatedAt field.
func (o *TrackerEvent) SetCreatedAt(v Instant) {
	o.CreatedAt = &v
}

// GetCreatedAtClient returns the CreatedAtClient field value if set, zero value otherwise.
func (o *TrackerEvent) GetCreatedAtClient() Instant {
	if o == nil || IsNil(o.CreatedAtClient) {
		var ret Instant
		return ret
	}
	return *o.CreatedAtClient
}

// GetCreatedAtClientOk returns a tuple with the CreatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetCreatedAtClientOk() (*Instant, bool) {
	if o == nil || IsNil(o.CreatedAtClient) {
		return nil, false
	}
	return o.CreatedAtClient, true
}

// HasCreatedAtClient returns a boolean if a field has been set.
func (o *TrackerEvent) HasCreatedAtClient() bool {
	if o != nil && !IsNil(o.CreatedAtClient) {
		return true
	}

	return false
}

// SetCreatedAtClient gets a reference to the given Instant and assigns it to the CreatedAtClient field.
func (o *TrackerEvent) SetCreatedAtClient(v Instant) {
	o.CreatedAtClient = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *TrackerEvent) GetCreatedBy() TrackerUser {
	if o == nil || IsNil(o.CreatedBy) {
		var ret TrackerUser
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetCreatedByOk() (*TrackerUser, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *TrackerEvent) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given TrackerUser and assigns it to the CreatedBy field.
func (o *TrackerEvent) SetCreatedBy(v TrackerUser) {
	o.CreatedBy = &v
}

// GetDataValues returns the DataValues field value if set, zero value otherwise.
func (o *TrackerEvent) GetDataValues() []TrackerDataValue {
	if o == nil || IsNil(o.DataValues) {
		var ret []TrackerDataValue
		return ret
	}
	return o.DataValues
}

// GetDataValuesOk returns a tuple with the DataValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetDataValuesOk() ([]TrackerDataValue, bool) {
	if o == nil || IsNil(o.DataValues) {
		return nil, false
	}
	return o.DataValues, true
}

// HasDataValues returns a boolean if a field has been set.
func (o *TrackerEvent) HasDataValues() bool {
	if o != nil && !IsNil(o.DataValues) {
		return true
	}

	return false
}

// SetDataValues gets a reference to the given []TrackerDataValue and assigns it to the DataValues field.
func (o *TrackerEvent) SetDataValues(v []TrackerDataValue) {
	o.DataValues = v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *TrackerEvent) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *TrackerEvent) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *TrackerEvent) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetEnrollment returns the Enrollment field value if set, zero value otherwise.
func (o *TrackerEvent) GetEnrollment() string {
	if o == nil || IsNil(o.Enrollment) {
		var ret string
		return ret
	}
	return *o.Enrollment
}

// GetEnrollmentOk returns a tuple with the Enrollment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetEnrollmentOk() (*string, bool) {
	if o == nil || IsNil(o.Enrollment) {
		return nil, false
	}
	return o.Enrollment, true
}

// HasEnrollment returns a boolean if a field has been set.
func (o *TrackerEvent) HasEnrollment() bool {
	if o != nil && !IsNil(o.Enrollment) {
		return true
	}

	return false
}

// SetEnrollment gets a reference to the given string and assigns it to the Enrollment field.
func (o *TrackerEvent) SetEnrollment(v string) {
	o.Enrollment = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *TrackerEvent) GetEvent() string {
	if o == nil || IsNil(o.Event) {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetEventOk() (*string, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *TrackerEvent) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *TrackerEvent) SetEvent(v string) {
	o.Event = &v
}

// GetFollowUp returns the FollowUp field value if set, zero value otherwise.
func (o *TrackerEvent) GetFollowUp() bool {
	if o == nil || IsNil(o.FollowUp) {
		var ret bool
		return ret
	}
	return *o.FollowUp
}

// GetFollowUpOk returns a tuple with the FollowUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetFollowUpOk() (*bool, bool) {
	if o == nil || IsNil(o.FollowUp) {
		return nil, false
	}
	return o.FollowUp, true
}

// HasFollowUp returns a boolean if a field has been set.
func (o *TrackerEvent) HasFollowUp() bool {
	if o != nil && !IsNil(o.FollowUp) {
		return true
	}

	return false
}

// SetFollowUp gets a reference to the given bool and assigns it to the FollowUp field.
func (o *TrackerEvent) SetFollowUp(v bool) {
	o.FollowUp = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *TrackerEvent) GetGeometry() map[string]interface{} {
	if o == nil || IsNil(o.Geometry) {
		var ret map[string]interface{}
		return ret
	}
	return o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetGeometryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Geometry) {
		return map[string]interface{}{}, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *TrackerEvent) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given map[string]interface{} and assigns it to the Geometry field.
func (o *TrackerEvent) SetGeometry(v map[string]interface{}) {
	o.Geometry = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TrackerEvent) GetNotes() []TrackerNote {
	if o == nil || IsNil(o.Notes) {
		var ret []TrackerNote
		return ret
	}
	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetNotesOk() ([]TrackerNote, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TrackerEvent) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []TrackerNote and assigns it to the Notes field.
func (o *TrackerEvent) SetNotes(v []TrackerNote) {
	o.Notes = v
}

// GetOccurredAt returns the OccurredAt field value if set, zero value otherwise.
func (o *TrackerEvent) GetOccurredAt() Instant {
	if o == nil || IsNil(o.OccurredAt) {
		var ret Instant
		return ret
	}
	return *o.OccurredAt
}

// GetOccurredAtOk returns a tuple with the OccurredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetOccurredAtOk() (*Instant, bool) {
	if o == nil || IsNil(o.OccurredAt) {
		return nil, false
	}
	return o.OccurredAt, true
}

// HasOccurredAt returns a boolean if a field has been set.
func (o *TrackerEvent) HasOccurredAt() bool {
	if o != nil && !IsNil(o.OccurredAt) {
		return true
	}

	return false
}

// SetOccurredAt gets a reference to the given Instant and assigns it to the OccurredAt field.
func (o *TrackerEvent) SetOccurredAt(v Instant) {
	o.OccurredAt = &v
}

// GetOrgUnit returns the OrgUnit field value if set, zero value otherwise.
func (o *TrackerEvent) GetOrgUnit() string {
	if o == nil || IsNil(o.OrgUnit) {
		var ret string
		return ret
	}
	return *o.OrgUnit
}

// GetOrgUnitOk returns a tuple with the OrgUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetOrgUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnit) {
		return nil, false
	}
	return o.OrgUnit, true
}

// HasOrgUnit returns a boolean if a field has been set.
func (o *TrackerEvent) HasOrgUnit() bool {
	if o != nil && !IsNil(o.OrgUnit) {
		return true
	}

	return false
}

// SetOrgUnit gets a reference to the given string and assigns it to the OrgUnit field.
func (o *TrackerEvent) SetOrgUnit(v string) {
	o.OrgUnit = &v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *TrackerEvent) GetProgram() string {
	if o == nil || IsNil(o.Program) {
		var ret string
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetProgramOk() (*string, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *TrackerEvent) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given string and assigns it to the Program field.
func (o *TrackerEvent) SetProgram(v string) {
	o.Program = &v
}

// GetProgramStage returns the ProgramStage field value if set, zero value otherwise.
func (o *TrackerEvent) GetProgramStage() string {
	if o == nil || IsNil(o.ProgramStage) {
		var ret string
		return ret
	}
	return *o.ProgramStage
}

// GetProgramStageOk returns a tuple with the ProgramStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetProgramStageOk() (*string, bool) {
	if o == nil || IsNil(o.ProgramStage) {
		return nil, false
	}
	return o.ProgramStage, true
}

// HasProgramStage returns a boolean if a field has been set.
func (o *TrackerEvent) HasProgramStage() bool {
	if o != nil && !IsNil(o.ProgramStage) {
		return true
	}

	return false
}

// SetProgramStage gets a reference to the given string and assigns it to the ProgramStage field.
func (o *TrackerEvent) SetProgramStage(v string) {
	o.ProgramStage = &v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *TrackerEvent) GetRelationships() []TrackerRelationship {
	if o == nil || IsNil(o.Relationships) {
		var ret []TrackerRelationship
		return ret
	}
	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetRelationshipsOk() ([]TrackerRelationship, bool) {
	if o == nil || IsNil(o.Relationships) {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *TrackerEvent) HasRelationships() bool {
	if o != nil && !IsNil(o.Relationships) {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given []TrackerRelationship and assigns it to the Relationships field.
func (o *TrackerEvent) SetRelationships(v []TrackerRelationship) {
	o.Relationships = v
}

// GetScheduledAt returns the ScheduledAt field value if set, zero value otherwise.
func (o *TrackerEvent) GetScheduledAt() Instant {
	if o == nil || IsNil(o.ScheduledAt) {
		var ret Instant
		return ret
	}
	return *o.ScheduledAt
}

// GetScheduledAtOk returns a tuple with the ScheduledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetScheduledAtOk() (*Instant, bool) {
	if o == nil || IsNil(o.ScheduledAt) {
		return nil, false
	}
	return o.ScheduledAt, true
}

// HasScheduledAt returns a boolean if a field has been set.
func (o *TrackerEvent) HasScheduledAt() bool {
	if o != nil && !IsNil(o.ScheduledAt) {
		return true
	}

	return false
}

// SetScheduledAt gets a reference to the given Instant and assigns it to the ScheduledAt field.
func (o *TrackerEvent) SetScheduledAt(v Instant) {
	o.ScheduledAt = &v
}

// GetStatus returns the Status field value
func (o *TrackerEvent) GetStatus() EventStatus {
	if o == nil {
		var ret EventStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetStatusOk() (*EventStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TrackerEvent) SetStatus(v EventStatus) {
	o.Status = v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *TrackerEvent) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *TrackerEvent) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *TrackerEvent) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetTrackedEntity returns the TrackedEntity field value if set, zero value otherwise.
func (o *TrackerEvent) GetTrackedEntity() string {
	if o == nil || IsNil(o.TrackedEntity) {
		var ret string
		return ret
	}
	return *o.TrackedEntity
}

// GetTrackedEntityOk returns a tuple with the TrackedEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetTrackedEntityOk() (*string, bool) {
	if o == nil || IsNil(o.TrackedEntity) {
		return nil, false
	}
	return o.TrackedEntity, true
}

// HasTrackedEntity returns a boolean if a field has been set.
func (o *TrackerEvent) HasTrackedEntity() bool {
	if o != nil && !IsNil(o.TrackedEntity) {
		return true
	}

	return false
}

// SetTrackedEntity gets a reference to the given string and assigns it to the TrackedEntity field.
func (o *TrackerEvent) SetTrackedEntity(v string) {
	o.TrackedEntity = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TrackerEvent) GetUpdatedAt() Instant {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret Instant
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetUpdatedAtOk() (*Instant, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TrackerEvent) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given Instant and assigns it to the UpdatedAt field.
func (o *TrackerEvent) SetUpdatedAt(v Instant) {
	o.UpdatedAt = &v
}

// GetUpdatedAtClient returns the UpdatedAtClient field value if set, zero value otherwise.
func (o *TrackerEvent) GetUpdatedAtClient() Instant {
	if o == nil || IsNil(o.UpdatedAtClient) {
		var ret Instant
		return ret
	}
	return *o.UpdatedAtClient
}

// GetUpdatedAtClientOk returns a tuple with the UpdatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetUpdatedAtClientOk() (*Instant, bool) {
	if o == nil || IsNil(o.UpdatedAtClient) {
		return nil, false
	}
	return o.UpdatedAtClient, true
}

// HasUpdatedAtClient returns a boolean if a field has been set.
func (o *TrackerEvent) HasUpdatedAtClient() bool {
	if o != nil && !IsNil(o.UpdatedAtClient) {
		return true
	}

	return false
}

// SetUpdatedAtClient gets a reference to the given Instant and assigns it to the UpdatedAtClient field.
func (o *TrackerEvent) SetUpdatedAtClient(v Instant) {
	o.UpdatedAtClient = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *TrackerEvent) GetUpdatedBy() TrackerUser {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret TrackerUser
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetUpdatedByOk() (*TrackerUser, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *TrackerEvent) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given TrackerUser and assigns it to the UpdatedBy field.
func (o *TrackerEvent) SetUpdatedBy(v TrackerUser) {
	o.UpdatedBy = &v
}

func (o TrackerEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackerEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssignedUser) {
		toSerialize["assignedUser"] = o.AssignedUser
	}
	if !IsNil(o.AttributeCategoryOptions) {
		toSerialize["attributeCategoryOptions"] = o.AttributeCategoryOptions
	}
	if !IsNil(o.AttributeOptionCombo) {
		toSerialize["attributeOptionCombo"] = o.AttributeOptionCombo
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if !IsNil(o.CompletedBy) {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.CreatedAtClient) {
		toSerialize["createdAtClient"] = o.CreatedAtClient
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DataValues) {
		toSerialize["dataValues"] = o.DataValues
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Enrollment) {
		toSerialize["enrollment"] = o.Enrollment
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.FollowUp) {
		toSerialize["followUp"] = o.FollowUp
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.OccurredAt) {
		toSerialize["occurredAt"] = o.OccurredAt
	}
	if !IsNil(o.OrgUnit) {
		toSerialize["orgUnit"] = o.OrgUnit
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.ProgramStage) {
		toSerialize["programStage"] = o.ProgramStage
	}
	if !IsNil(o.Relationships) {
		toSerialize["relationships"] = o.Relationships
	}
	if !IsNil(o.ScheduledAt) {
		toSerialize["scheduledAt"] = o.ScheduledAt
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.TrackedEntity) {
		toSerialize["trackedEntity"] = o.TrackedEntity
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedAtClient) {
		toSerialize["updatedAtClient"] = o.UpdatedAtClient
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	return toSerialize, nil
}

func (o *TrackerEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackerEvent := _TrackerEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackerEvent)

	if err != nil {
		return err
	}

	*o = TrackerEvent(varTrackerEvent)

	return err
}

type NullableTrackerEvent struct {
	value *TrackerEvent
	isSet bool
}

func (v NullableTrackerEvent) Get() *TrackerEvent {
	return v.value
}

func (v *NullableTrackerEvent) Set(val *TrackerEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerEvent(val *TrackerEvent) *NullableTrackerEvent {
	return &NullableTrackerEvent{value: val, isSet: true}
}

func (v NullableTrackerEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
