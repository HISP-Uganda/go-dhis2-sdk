/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TrackerEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackerEvent{}

// TrackerEvent struct for TrackerEvent
type TrackerEvent struct {
	AssignedUser             *string                `json:"assignedUser,omitempty"`
	AssignedUserDisplayName  *string                `json:"assignedUserDisplayName,omitempty"`
	AssignedUserFirstName    *string                `json:"assignedUserFirstName,omitempty"`
	AssignedUserSurname      *string                `json:"assignedUserSurname,omitempty"`
	AssignedUserUsername     *string                `json:"assignedUserUsername,omitempty"`
	AttributeCategoryOptions *string                `json:"attributeCategoryOptions,omitempty"`
	AttributeOptionCombo     *string                `json:"attributeOptionCombo,omitempty"`
	CompletedBy              *string                `json:"completedBy,omitempty"`
	CompletedDate            *string                `json:"completedDate,omitempty"`
	Created                  *string                `json:"created,omitempty"`
	CreatedAtClient          string                 `json:"createdAtClient"`
	CreatedByUserInfo        *UserInfoSnapshot      `json:"createdByUserInfo,omitempty"`
	DataValues               []TrackerDataValue     `json:"dataValues,omitempty"`
	Deleted                  *bool                  `json:"deleted,omitempty"`
	DueDate                  *string                `json:"dueDate,omitempty"`
	Enrollment               string                 `json:"enrollment"`
	EnrollmentStatus         string                 `json:"enrollmentStatus"`
	Event                    string                 `json:"event"`
	EventDate                string                 `json:"eventDate"`
	Followup                 *bool                  `json:"followup,omitempty"`
	Geometry                 map[string]interface{} `json:"geometry,omitempty"`
	Href                     *string                `json:"href,omitempty"`
	LastUpdated              *string                `json:"lastUpdated,omitempty"`
	LastUpdatedAtClient      string                 `json:"lastUpdatedAtClient"`
	LastUpdatedByUserInfo    *UserInfoSnapshot      `json:"lastUpdatedByUserInfo,omitempty"`
	Notes                    []Note                 `json:"notes,omitempty"`
	OrgUnit                  *string                `json:"orgUnit,omitempty"`
	OrgUnitName              *string                `json:"orgUnitName,omitempty"`
	Program                  string                 `json:"program"`
	ProgramStage             string                 `json:"programStage"`
	ProgramType              string                 `json:"programType"`
	Relationships            []Relationship         `json:"relationships,omitempty"`
	Status                   string                 `json:"status"`
	StoredBy                 *string                `json:"storedBy,omitempty"`
	TrackedEntityInstance    *string                `json:"trackedEntityInstance,omitempty"`
}

type _TrackerEvent TrackerEvent

// NewTrackerEvent instantiates a new TrackerEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackerEvent(createdAtClient string, enrollment string, enrollmentStatus string, event string, eventDate string, lastUpdatedAtClient string, program string, programStage string, programType string, status string) *TrackerEvent {
	this := TrackerEvent{}
	this.CreatedAtClient = createdAtClient
	this.Enrollment = enrollment
	this.EnrollmentStatus = enrollmentStatus
	this.Event = event
	this.EventDate = eventDate
	this.LastUpdatedAtClient = lastUpdatedAtClient
	this.Program = program
	this.ProgramStage = programStage
	this.ProgramType = programType
	this.Status = status
	return &this
}

// NewTrackerEventWithDefaults instantiates a new TrackerEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackerEventWithDefaults() *TrackerEvent {
	this := TrackerEvent{}
	return &this
}

// GetAssignedUser returns the AssignedUser field value if set, zero value otherwise.
func (o *TrackerEvent) GetAssignedUser() string {
	if o == nil || IsNil(o.AssignedUser) {
		var ret string
		return ret
	}
	return *o.AssignedUser
}

// GetAssignedUserOk returns a tuple with the AssignedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetAssignedUserOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedUser) {
		return nil, false
	}
	return o.AssignedUser, true
}

// HasAssignedUser returns a boolean if a field has been set.
func (o *TrackerEvent) HasAssignedUser() bool {
	if o != nil && !IsNil(o.AssignedUser) {
		return true
	}

	return false
}

// SetAssignedUser gets a reference to the given string and assigns it to the AssignedUser field.
func (o *TrackerEvent) SetAssignedUser(v string) {
	o.AssignedUser = &v
}

// GetAssignedUserDisplayName returns the AssignedUserDisplayName field value if set, zero value otherwise.
func (o *TrackerEvent) GetAssignedUserDisplayName() string {
	if o == nil || IsNil(o.AssignedUserDisplayName) {
		var ret string
		return ret
	}
	return *o.AssignedUserDisplayName
}

// GetAssignedUserDisplayNameOk returns a tuple with the AssignedUserDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetAssignedUserDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedUserDisplayName) {
		return nil, false
	}
	return o.AssignedUserDisplayName, true
}

// HasAssignedUserDisplayName returns a boolean if a field has been set.
func (o *TrackerEvent) HasAssignedUserDisplayName() bool {
	if o != nil && !IsNil(o.AssignedUserDisplayName) {
		return true
	}

	return false
}

// SetAssignedUserDisplayName gets a reference to the given string and assigns it to the AssignedUserDisplayName field.
func (o *TrackerEvent) SetAssignedUserDisplayName(v string) {
	o.AssignedUserDisplayName = &v
}

// GetAssignedUserFirstName returns the AssignedUserFirstName field value if set, zero value otherwise.
func (o *TrackerEvent) GetAssignedUserFirstName() string {
	if o == nil || IsNil(o.AssignedUserFirstName) {
		var ret string
		return ret
	}
	return *o.AssignedUserFirstName
}

// GetAssignedUserFirstNameOk returns a tuple with the AssignedUserFirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetAssignedUserFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedUserFirstName) {
		return nil, false
	}
	return o.AssignedUserFirstName, true
}

// HasAssignedUserFirstName returns a boolean if a field has been set.
func (o *TrackerEvent) HasAssignedUserFirstName() bool {
	if o != nil && !IsNil(o.AssignedUserFirstName) {
		return true
	}

	return false
}

// SetAssignedUserFirstName gets a reference to the given string and assigns it to the AssignedUserFirstName field.
func (o *TrackerEvent) SetAssignedUserFirstName(v string) {
	o.AssignedUserFirstName = &v
}

// GetAssignedUserSurname returns the AssignedUserSurname field value if set, zero value otherwise.
func (o *TrackerEvent) GetAssignedUserSurname() string {
	if o == nil || IsNil(o.AssignedUserSurname) {
		var ret string
		return ret
	}
	return *o.AssignedUserSurname
}

// GetAssignedUserSurnameOk returns a tuple with the AssignedUserSurname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetAssignedUserSurnameOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedUserSurname) {
		return nil, false
	}
	return o.AssignedUserSurname, true
}

// HasAssignedUserSurname returns a boolean if a field has been set.
func (o *TrackerEvent) HasAssignedUserSurname() bool {
	if o != nil && !IsNil(o.AssignedUserSurname) {
		return true
	}

	return false
}

// SetAssignedUserSurname gets a reference to the given string and assigns it to the AssignedUserSurname field.
func (o *TrackerEvent) SetAssignedUserSurname(v string) {
	o.AssignedUserSurname = &v
}

// GetAssignedUserUsername returns the AssignedUserUsername field value if set, zero value otherwise.
func (o *TrackerEvent) GetAssignedUserUsername() string {
	if o == nil || IsNil(o.AssignedUserUsername) {
		var ret string
		return ret
	}
	return *o.AssignedUserUsername
}

// GetAssignedUserUsernameOk returns a tuple with the AssignedUserUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetAssignedUserUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedUserUsername) {
		return nil, false
	}
	return o.AssignedUserUsername, true
}

// HasAssignedUserUsername returns a boolean if a field has been set.
func (o *TrackerEvent) HasAssignedUserUsername() bool {
	if o != nil && !IsNil(o.AssignedUserUsername) {
		return true
	}

	return false
}

// SetAssignedUserUsername gets a reference to the given string and assigns it to the AssignedUserUsername field.
func (o *TrackerEvent) SetAssignedUserUsername(v string) {
	o.AssignedUserUsername = &v
}

// GetAttributeCategoryOptions returns the AttributeCategoryOptions field value if set, zero value otherwise.
func (o *TrackerEvent) GetAttributeCategoryOptions() string {
	if o == nil || IsNil(o.AttributeCategoryOptions) {
		var ret string
		return ret
	}
	return *o.AttributeCategoryOptions
}

// GetAttributeCategoryOptionsOk returns a tuple with the AttributeCategoryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetAttributeCategoryOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeCategoryOptions) {
		return nil, false
	}
	return o.AttributeCategoryOptions, true
}

// HasAttributeCategoryOptions returns a boolean if a field has been set.
func (o *TrackerEvent) HasAttributeCategoryOptions() bool {
	if o != nil && !IsNil(o.AttributeCategoryOptions) {
		return true
	}

	return false
}

// SetAttributeCategoryOptions gets a reference to the given string and assigns it to the AttributeCategoryOptions field.
func (o *TrackerEvent) SetAttributeCategoryOptions(v string) {
	o.AttributeCategoryOptions = &v
}

// GetAttributeOptionCombo returns the AttributeOptionCombo field value if set, zero value otherwise.
func (o *TrackerEvent) GetAttributeOptionCombo() string {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		var ret string
		return ret
	}
	return *o.AttributeOptionCombo
}

// GetAttributeOptionComboOk returns a tuple with the AttributeOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetAttributeOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		return nil, false
	}
	return o.AttributeOptionCombo, true
}

// HasAttributeOptionCombo returns a boolean if a field has been set.
func (o *TrackerEvent) HasAttributeOptionCombo() bool {
	if o != nil && !IsNil(o.AttributeOptionCombo) {
		return true
	}

	return false
}

// SetAttributeOptionCombo gets a reference to the given string and assigns it to the AttributeOptionCombo field.
func (o *TrackerEvent) SetAttributeOptionCombo(v string) {
	o.AttributeOptionCombo = &v
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *TrackerEvent) GetCompletedBy() string {
	if o == nil || IsNil(o.CompletedBy) {
		var ret string
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetCompletedByOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedBy) {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *TrackerEvent) HasCompletedBy() bool {
	if o != nil && !IsNil(o.CompletedBy) {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given string and assigns it to the CompletedBy field.
func (o *TrackerEvent) SetCompletedBy(v string) {
	o.CompletedBy = &v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *TrackerEvent) GetCompletedDate() string {
	if o == nil || IsNil(o.CompletedDate) {
		var ret string
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetCompletedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *TrackerEvent) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given string and assigns it to the CompletedDate field.
func (o *TrackerEvent) SetCompletedDate(v string) {
	o.CompletedDate = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TrackerEvent) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TrackerEvent) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *TrackerEvent) SetCreated(v string) {
	o.Created = &v
}

// GetCreatedAtClient returns the CreatedAtClient field value
func (o *TrackerEvent) GetCreatedAtClient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAtClient
}

// GetCreatedAtClientOk returns a tuple with the CreatedAtClient field value
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetCreatedAtClientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAtClient, true
}

// SetCreatedAtClient sets field value
func (o *TrackerEvent) SetCreatedAtClient(v string) {
	o.CreatedAtClient = v
}

// GetCreatedByUserInfo returns the CreatedByUserInfo field value if set, zero value otherwise.
func (o *TrackerEvent) GetCreatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.CreatedByUserInfo
}

// GetCreatedByUserInfoOk returns a tuple with the CreatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetCreatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		return nil, false
	}
	return o.CreatedByUserInfo, true
}

// HasCreatedByUserInfo returns a boolean if a field has been set.
func (o *TrackerEvent) HasCreatedByUserInfo() bool {
	if o != nil && !IsNil(o.CreatedByUserInfo) {
		return true
	}

	return false
}

// SetCreatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the CreatedByUserInfo field.
func (o *TrackerEvent) SetCreatedByUserInfo(v UserInfoSnapshot) {
	o.CreatedByUserInfo = &v
}

// GetDataValues returns the DataValues field value if set, zero value otherwise.
func (o *TrackerEvent) GetDataValues() []TrackerDataValue {
	if o == nil || IsNil(o.DataValues) {
		var ret []TrackerDataValue
		return ret
	}
	return o.DataValues
}

// GetDataValuesOk returns a tuple with the DataValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetDataValuesOk() ([]TrackerDataValue, bool) {
	if o == nil || IsNil(o.DataValues) {
		return nil, false
	}
	return o.DataValues, true
}

// HasDataValues returns a boolean if a field has been set.
func (o *TrackerEvent) HasDataValues() bool {
	if o != nil && !IsNil(o.DataValues) {
		return true
	}

	return false
}

// SetDataValues gets a reference to the given []TrackerDataValue and assigns it to the DataValues field.
func (o *TrackerEvent) SetDataValues(v []TrackerDataValue) {
	o.DataValues = v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *TrackerEvent) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *TrackerEvent) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *TrackerEvent) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *TrackerEvent) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *TrackerEvent) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *TrackerEvent) SetDueDate(v string) {
	o.DueDate = &v
}

// GetEnrollment returns the Enrollment field value
func (o *TrackerEvent) GetEnrollment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Enrollment
}

// GetEnrollmentOk returns a tuple with the Enrollment field value
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetEnrollmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enrollment, true
}

// SetEnrollment sets field value
func (o *TrackerEvent) SetEnrollment(v string) {
	o.Enrollment = v
}

// GetEnrollmentStatus returns the EnrollmentStatus field value
func (o *TrackerEvent) GetEnrollmentStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnrollmentStatus
}

// GetEnrollmentStatusOk returns a tuple with the EnrollmentStatus field value
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetEnrollmentStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnrollmentStatus, true
}

// SetEnrollmentStatus sets field value
func (o *TrackerEvent) SetEnrollmentStatus(v string) {
	o.EnrollmentStatus = v
}

// GetEvent returns the Event field value
func (o *TrackerEvent) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *TrackerEvent) SetEvent(v string) {
	o.Event = v
}

// GetEventDate returns the EventDate field value
func (o *TrackerEvent) GetEventDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventDate
}

// GetEventDateOk returns a tuple with the EventDate field value
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetEventDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventDate, true
}

// SetEventDate sets field value
func (o *TrackerEvent) SetEventDate(v string) {
	o.EventDate = v
}

// GetFollowup returns the Followup field value if set, zero value otherwise.
func (o *TrackerEvent) GetFollowup() bool {
	if o == nil || IsNil(o.Followup) {
		var ret bool
		return ret
	}
	return *o.Followup
}

// GetFollowupOk returns a tuple with the Followup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetFollowupOk() (*bool, bool) {
	if o == nil || IsNil(o.Followup) {
		return nil, false
	}
	return o.Followup, true
}

// HasFollowup returns a boolean if a field has been set.
func (o *TrackerEvent) HasFollowup() bool {
	if o != nil && !IsNil(o.Followup) {
		return true
	}

	return false
}

// SetFollowup gets a reference to the given bool and assigns it to the Followup field.
func (o *TrackerEvent) SetFollowup(v bool) {
	o.Followup = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *TrackerEvent) GetGeometry() map[string]interface{} {
	if o == nil || IsNil(o.Geometry) {
		var ret map[string]interface{}
		return ret
	}
	return o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetGeometryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Geometry) {
		return map[string]interface{}{}, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *TrackerEvent) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given map[string]interface{} and assigns it to the Geometry field.
func (o *TrackerEvent) SetGeometry(v map[string]interface{}) {
	o.Geometry = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *TrackerEvent) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *TrackerEvent) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *TrackerEvent) SetHref(v string) {
	o.Href = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *TrackerEvent) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *TrackerEvent) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *TrackerEvent) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetLastUpdatedAtClient returns the LastUpdatedAtClient field value
func (o *TrackerEvent) GetLastUpdatedAtClient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastUpdatedAtClient
}

// GetLastUpdatedAtClientOk returns a tuple with the LastUpdatedAtClient field value
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetLastUpdatedAtClientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedAtClient, true
}

// SetLastUpdatedAtClient sets field value
func (o *TrackerEvent) SetLastUpdatedAtClient(v string) {
	o.LastUpdatedAtClient = v
}

// GetLastUpdatedByUserInfo returns the LastUpdatedByUserInfo field value if set, zero value otherwise.
func (o *TrackerEvent) GetLastUpdatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.LastUpdatedByUserInfo
}

// GetLastUpdatedByUserInfoOk returns a tuple with the LastUpdatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetLastUpdatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		return nil, false
	}
	return o.LastUpdatedByUserInfo, true
}

// HasLastUpdatedByUserInfo returns a boolean if a field has been set.
func (o *TrackerEvent) HasLastUpdatedByUserInfo() bool {
	if o != nil && !IsNil(o.LastUpdatedByUserInfo) {
		return true
	}

	return false
}

// SetLastUpdatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the LastUpdatedByUserInfo field.
func (o *TrackerEvent) SetLastUpdatedByUserInfo(v UserInfoSnapshot) {
	o.LastUpdatedByUserInfo = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TrackerEvent) GetNotes() []Note {
	if o == nil || IsNil(o.Notes) {
		var ret []Note
		return ret
	}
	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetNotesOk() ([]Note, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TrackerEvent) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []Note and assigns it to the Notes field.
func (o *TrackerEvent) SetNotes(v []Note) {
	o.Notes = v
}

// GetOrgUnit returns the OrgUnit field value if set, zero value otherwise.
func (o *TrackerEvent) GetOrgUnit() string {
	if o == nil || IsNil(o.OrgUnit) {
		var ret string
		return ret
	}
	return *o.OrgUnit
}

// GetOrgUnitOk returns a tuple with the OrgUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetOrgUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnit) {
		return nil, false
	}
	return o.OrgUnit, true
}

// HasOrgUnit returns a boolean if a field has been set.
func (o *TrackerEvent) HasOrgUnit() bool {
	if o != nil && !IsNil(o.OrgUnit) {
		return true
	}

	return false
}

// SetOrgUnit gets a reference to the given string and assigns it to the OrgUnit field.
func (o *TrackerEvent) SetOrgUnit(v string) {
	o.OrgUnit = &v
}

// GetOrgUnitName returns the OrgUnitName field value if set, zero value otherwise.
func (o *TrackerEvent) GetOrgUnitName() string {
	if o == nil || IsNil(o.OrgUnitName) {
		var ret string
		return ret
	}
	return *o.OrgUnitName
}

// GetOrgUnitNameOk returns a tuple with the OrgUnitName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetOrgUnitNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnitName) {
		return nil, false
	}
	return o.OrgUnitName, true
}

// HasOrgUnitName returns a boolean if a field has been set.
func (o *TrackerEvent) HasOrgUnitName() bool {
	if o != nil && !IsNil(o.OrgUnitName) {
		return true
	}

	return false
}

// SetOrgUnitName gets a reference to the given string and assigns it to the OrgUnitName field.
func (o *TrackerEvent) SetOrgUnitName(v string) {
	o.OrgUnitName = &v
}

// GetProgram returns the Program field value
func (o *TrackerEvent) GetProgram() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Program
}

// GetProgramOk returns a tuple with the Program field value
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetProgramOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Program, true
}

// SetProgram sets field value
func (o *TrackerEvent) SetProgram(v string) {
	o.Program = v
}

// GetProgramStage returns the ProgramStage field value
func (o *TrackerEvent) GetProgramStage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProgramStage
}

// GetProgramStageOk returns a tuple with the ProgramStage field value
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetProgramStageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgramStage, true
}

// SetProgramStage sets field value
func (o *TrackerEvent) SetProgramStage(v string) {
	o.ProgramStage = v
}

// GetProgramType returns the ProgramType field value
func (o *TrackerEvent) GetProgramType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProgramType
}

// GetProgramTypeOk returns a tuple with the ProgramType field value
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetProgramTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgramType, true
}

// SetProgramType sets field value
func (o *TrackerEvent) SetProgramType(v string) {
	o.ProgramType = v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *TrackerEvent) GetRelationships() []Relationship {
	if o == nil || IsNil(o.Relationships) {
		var ret []Relationship
		return ret
	}
	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetRelationshipsOk() ([]Relationship, bool) {
	if o == nil || IsNil(o.Relationships) {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *TrackerEvent) HasRelationships() bool {
	if o != nil && !IsNil(o.Relationships) {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given []Relationship and assigns it to the Relationships field.
func (o *TrackerEvent) SetRelationships(v []Relationship) {
	o.Relationships = v
}

// GetStatus returns the Status field value
func (o *TrackerEvent) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TrackerEvent) SetStatus(v string) {
	o.Status = v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *TrackerEvent) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *TrackerEvent) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *TrackerEvent) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetTrackedEntityInstance returns the TrackedEntityInstance field value if set, zero value otherwise.
func (o *TrackerEvent) GetTrackedEntityInstance() string {
	if o == nil || IsNil(o.TrackedEntityInstance) {
		var ret string
		return ret
	}
	return *o.TrackedEntityInstance
}

// GetTrackedEntityInstanceOk returns a tuple with the TrackedEntityInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerEvent) GetTrackedEntityInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.TrackedEntityInstance) {
		return nil, false
	}
	return o.TrackedEntityInstance, true
}

// HasTrackedEntityInstance returns a boolean if a field has been set.
func (o *TrackerEvent) HasTrackedEntityInstance() bool {
	if o != nil && !IsNil(o.TrackedEntityInstance) {
		return true
	}

	return false
}

// SetTrackedEntityInstance gets a reference to the given string and assigns it to the TrackedEntityInstance field.
func (o *TrackerEvent) SetTrackedEntityInstance(v string) {
	o.TrackedEntityInstance = &v
}

func (o TrackerEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackerEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssignedUser) {
		toSerialize["assignedUser"] = o.AssignedUser
	}
	if !IsNil(o.AssignedUserDisplayName) {
		toSerialize["assignedUserDisplayName"] = o.AssignedUserDisplayName
	}
	if !IsNil(o.AssignedUserFirstName) {
		toSerialize["assignedUserFirstName"] = o.AssignedUserFirstName
	}
	if !IsNil(o.AssignedUserSurname) {
		toSerialize["assignedUserSurname"] = o.AssignedUserSurname
	}
	if !IsNil(o.AssignedUserUsername) {
		toSerialize["assignedUserUsername"] = o.AssignedUserUsername
	}
	if !IsNil(o.AttributeCategoryOptions) {
		toSerialize["attributeCategoryOptions"] = o.AttributeCategoryOptions
	}
	if !IsNil(o.AttributeOptionCombo) {
		toSerialize["attributeOptionCombo"] = o.AttributeOptionCombo
	}
	if !IsNil(o.CompletedBy) {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if !IsNil(o.CompletedDate) {
		toSerialize["completedDate"] = o.CompletedDate
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	toSerialize["createdAtClient"] = o.CreatedAtClient
	if !IsNil(o.CreatedByUserInfo) {
		toSerialize["createdByUserInfo"] = o.CreatedByUserInfo
	}
	if !IsNil(o.DataValues) {
		toSerialize["dataValues"] = o.DataValues
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	toSerialize["enrollment"] = o.Enrollment
	toSerialize["enrollmentStatus"] = o.EnrollmentStatus
	toSerialize["event"] = o.Event
	toSerialize["eventDate"] = o.EventDate
	if !IsNil(o.Followup) {
		toSerialize["followup"] = o.Followup
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	toSerialize["lastUpdatedAtClient"] = o.LastUpdatedAtClient
	if !IsNil(o.LastUpdatedByUserInfo) {
		toSerialize["lastUpdatedByUserInfo"] = o.LastUpdatedByUserInfo
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.OrgUnit) {
		toSerialize["orgUnit"] = o.OrgUnit
	}
	if !IsNil(o.OrgUnitName) {
		toSerialize["orgUnitName"] = o.OrgUnitName
	}
	toSerialize["program"] = o.Program
	toSerialize["programStage"] = o.ProgramStage
	toSerialize["programType"] = o.ProgramType
	if !IsNil(o.Relationships) {
		toSerialize["relationships"] = o.Relationships
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.TrackedEntityInstance) {
		toSerialize["trackedEntityInstance"] = o.TrackedEntityInstance
	}
	return toSerialize, nil
}

func (o *TrackerEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAtClient",
		"enrollment",
		"enrollmentStatus",
		"event",
		"eventDate",
		"lastUpdatedAtClient",
		"program",
		"programStage",
		"programType",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackerEvent := _TrackerEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackerEvent)

	if err != nil {
		return err
	}

	*o = TrackerEvent(varTrackerEvent)

	return err
}

type NullableTrackerEvent struct {
	value *TrackerEvent
	isSet bool
}

func (v NullableTrackerEvent) Get() *TrackerEvent {
	return v.value
}

func (v *NullableTrackerEvent) Set(val *TrackerEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerEvent(val *TrackerEvent) *NullableTrackerEvent {
	return &NullableTrackerEvent{value: val, isSet: true}
}

func (v NullableTrackerEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
