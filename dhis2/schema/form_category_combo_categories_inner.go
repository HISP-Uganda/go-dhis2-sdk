/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the FormCategoryComboCategoriesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormCategoryComboCategoriesInner{}

// FormCategoryComboCategoriesInner struct for FormCategoryComboCategoriesInner
type FormCategoryComboCategoriesInner struct {
	CategoryOptions []FormCategoryComboCategoriesInnerCategoryOptionsInner `json:"categoryOptions,omitempty"`
	Id              *string                                                `json:"id,omitempty"`
	Label           *string                                                `json:"label,omitempty"`
}

// NewFormCategoryComboCategoriesInner instantiates a new FormCategoryComboCategoriesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormCategoryComboCategoriesInner() *FormCategoryComboCategoriesInner {
	this := FormCategoryComboCategoriesInner{}
	return &this
}

// NewFormCategoryComboCategoriesInnerWithDefaults instantiates a new FormCategoryComboCategoriesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormCategoryComboCategoriesInnerWithDefaults() *FormCategoryComboCategoriesInner {
	this := FormCategoryComboCategoriesInner{}
	return &this
}

// GetCategoryOptions returns the CategoryOptions field value if set, zero value otherwise.
func (o *FormCategoryComboCategoriesInner) GetCategoryOptions() []FormCategoryComboCategoriesInnerCategoryOptionsInner {
	if o == nil || IsNil(o.CategoryOptions) {
		var ret []FormCategoryComboCategoriesInnerCategoryOptionsInner
		return ret
	}
	return o.CategoryOptions
}

// GetCategoryOptionsOk returns a tuple with the CategoryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCategoryComboCategoriesInner) GetCategoryOptionsOk() ([]FormCategoryComboCategoriesInnerCategoryOptionsInner, bool) {
	if o == nil || IsNil(o.CategoryOptions) {
		return nil, false
	}
	return o.CategoryOptions, true
}

// HasCategoryOptions returns a boolean if a field has been set.
func (o *FormCategoryComboCategoriesInner) HasCategoryOptions() bool {
	if o != nil && !IsNil(o.CategoryOptions) {
		return true
	}

	return false
}

// SetCategoryOptions gets a reference to the given []FormCategoryComboCategoriesInnerCategoryOptionsInner and assigns it to the CategoryOptions field.
func (o *FormCategoryComboCategoriesInner) SetCategoryOptions(v []FormCategoryComboCategoriesInnerCategoryOptionsInner) {
	o.CategoryOptions = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FormCategoryComboCategoriesInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCategoryComboCategoriesInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FormCategoryComboCategoriesInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FormCategoryComboCategoriesInner) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *FormCategoryComboCategoriesInner) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCategoryComboCategoriesInner) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *FormCategoryComboCategoriesInner) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *FormCategoryComboCategoriesInner) SetLabel(v string) {
	o.Label = &v
}

func (o FormCategoryComboCategoriesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormCategoryComboCategoriesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryOptions) {
		toSerialize["categoryOptions"] = o.CategoryOptions
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return toSerialize, nil
}

type NullableFormCategoryComboCategoriesInner struct {
	value *FormCategoryComboCategoriesInner
	isSet bool
}

func (v NullableFormCategoryComboCategoriesInner) Get() *FormCategoryComboCategoriesInner {
	return v.value
}

func (v *NullableFormCategoryComboCategoriesInner) Set(val *FormCategoryComboCategoriesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFormCategoryComboCategoriesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFormCategoryComboCategoriesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormCategoryComboCategoriesInner(val *FormCategoryComboCategoriesInner) *NullableFormCategoryComboCategoriesInner {
	return &NullableFormCategoryComboCategoriesInner{value: val, isSet: true}
}

func (v NullableFormCategoryComboCategoriesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormCategoryComboCategoriesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
