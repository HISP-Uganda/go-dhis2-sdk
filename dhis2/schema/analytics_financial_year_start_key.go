/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// AnalyticsFinancialYearStartKey the model 'AnalyticsFinancialYearStartKey'
type AnalyticsFinancialYearStartKey string

// List of AnalyticsFinancialYearStartKey
const (
	ANALYTICSFINANCIALYEARSTARTKEY_APRIL   AnalyticsFinancialYearStartKey = "FINANCIAL_YEAR_APRIL"
	ANALYTICSFINANCIALYEARSTARTKEY_JULY    AnalyticsFinancialYearStartKey = "FINANCIAL_YEAR_JULY"
	ANALYTICSFINANCIALYEARSTARTKEY_OCTOBER AnalyticsFinancialYearStartKey = "FINANCIAL_YEAR_OCTOBER"
)

// All allowed values of AnalyticsFinancialYearStartKey enum
var AllowedAnalyticsFinancialYearStartKeyEnumValues = []AnalyticsFinancialYearStartKey{
	"FINANCIAL_YEAR_APRIL",
	"FINANCIAL_YEAR_JULY",
	"FINANCIAL_YEAR_OCTOBER",
}

func (v *AnalyticsFinancialYearStartKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsFinancialYearStartKey(value)
	for _, existing := range AllowedAnalyticsFinancialYearStartKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsFinancialYearStartKey", value)
}

// NewAnalyticsFinancialYearStartKeyFromValue returns a pointer to a valid AnalyticsFinancialYearStartKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsFinancialYearStartKeyFromValue(v string) (*AnalyticsFinancialYearStartKey, error) {
	ev := AnalyticsFinancialYearStartKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsFinancialYearStartKey: valid values are %v", v, AllowedAnalyticsFinancialYearStartKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsFinancialYearStartKey) IsValid() bool {
	for _, existing := range AllowedAnalyticsFinancialYearStartKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsFinancialYearStartKey value
func (v AnalyticsFinancialYearStartKey) Ptr() *AnalyticsFinancialYearStartKey {
	return &v
}

type NullableAnalyticsFinancialYearStartKey struct {
	value *AnalyticsFinancialYearStartKey
	isSet bool
}

func (v NullableAnalyticsFinancialYearStartKey) Get() *AnalyticsFinancialYearStartKey {
	return v.value
}

func (v *NullableAnalyticsFinancialYearStartKey) Set(val *AnalyticsFinancialYearStartKey) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsFinancialYearStartKey) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsFinancialYearStartKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsFinancialYearStartKey(val *AnalyticsFinancialYearStartKey) *NullableAnalyticsFinancialYearStartKey {
	return &NullableAnalyticsFinancialYearStartKey{value: val, isSet: true}
}

func (v NullableAnalyticsFinancialYearStartKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsFinancialYearStartKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
