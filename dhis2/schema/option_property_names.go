/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// OptionPropertyNames the model 'OptionPropertyNames'
type OptionPropertyNames string

// List of OptionPropertyNames
const (
	OPTIONPROPERTYNAMES_ACCESS              OptionPropertyNames = "access"
	OPTIONPROPERTYNAMES_ATTRIBUTE_VALUES    OptionPropertyNames = "attributeValues"
	OPTIONPROPERTYNAMES_CODE                OptionPropertyNames = "code"
	OPTIONPROPERTYNAMES_CREATED             OptionPropertyNames = "created"
	OPTIONPROPERTYNAMES_CREATED_BY          OptionPropertyNames = "createdBy"
	OPTIONPROPERTYNAMES_DESCRIPTION         OptionPropertyNames = "description"
	OPTIONPROPERTYNAMES_DISPLAY_DESCRIPTION OptionPropertyNames = "displayDescription"
	OPTIONPROPERTYNAMES_DISPLAY_FORM_NAME   OptionPropertyNames = "displayFormName"
	OPTIONPROPERTYNAMES_DISPLAY_NAME        OptionPropertyNames = "displayName"
	OPTIONPROPERTYNAMES_DISPLAY_SHORT_NAME  OptionPropertyNames = "displayShortName"
	OPTIONPROPERTYNAMES_FAVORITE            OptionPropertyNames = "favorite"
	OPTIONPROPERTYNAMES_FAVORITES           OptionPropertyNames = "favorites"
	OPTIONPROPERTYNAMES_FORM_NAME           OptionPropertyNames = "formName"
	OPTIONPROPERTYNAMES_HREF                OptionPropertyNames = "href"
	OPTIONPROPERTYNAMES_ID                  OptionPropertyNames = "id"
	OPTIONPROPERTYNAMES_LAST_UPDATED        OptionPropertyNames = "lastUpdated"
	OPTIONPROPERTYNAMES_LAST_UPDATED_BY     OptionPropertyNames = "lastUpdatedBy"
	OPTIONPROPERTYNAMES_NAME                OptionPropertyNames = "name"
	OPTIONPROPERTYNAMES_OPTION_SET          OptionPropertyNames = "optionSet"
	OPTIONPROPERTYNAMES_SHARING             OptionPropertyNames = "sharing"
	OPTIONPROPERTYNAMES_SHORT_NAME          OptionPropertyNames = "shortName"
	OPTIONPROPERTYNAMES_SORT_ORDER          OptionPropertyNames = "sortOrder"
	OPTIONPROPERTYNAMES_STYLE               OptionPropertyNames = "style"
	OPTIONPROPERTYNAMES_TRANSLATIONS        OptionPropertyNames = "translations"
)

// All allowed values of OptionPropertyNames enum
var AllowedOptionPropertyNamesEnumValues = []OptionPropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"favorite",
	"favorites",
	"formName",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"optionSet",
	"sharing",
	"shortName",
	"sortOrder",
	"style",
	"translations",
}

func (v *OptionPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OptionPropertyNames(value)
	for _, existing := range AllowedOptionPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OptionPropertyNames", value)
}

// NewOptionPropertyNamesFromValue returns a pointer to a valid OptionPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOptionPropertyNamesFromValue(v string) (*OptionPropertyNames, error) {
	ev := OptionPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OptionPropertyNames: valid values are %v", v, AllowedOptionPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OptionPropertyNames) IsValid() bool {
	for _, existing := range AllowedOptionPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OptionPropertyNames value
func (v OptionPropertyNames) Ptr() *OptionPropertyNames {
	return &v
}

type NullableOptionPropertyNames struct {
	value *OptionPropertyNames
	isSet bool
}

func (v NullableOptionPropertyNames) Get() *OptionPropertyNames {
	return v.value
}

func (v *NullableOptionPropertyNames) Set(val *OptionPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionPropertyNames(val *OptionPropertyNames) *NullableOptionPropertyNames {
	return &NullableOptionPropertyNames{value: val, isSet: true}
}

func (v NullableOptionPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
