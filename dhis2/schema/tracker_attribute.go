/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TrackerAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackerAttribute{}

// TrackerAttribute struct for TrackerAttribute
type TrackerAttribute struct {
	// A UID for an Attribute object   (Java name `org.hisp.dhis.attribute.Attribute`)
	Attribute   *string   `json:"attribute,omitempty"`
	Code        *string   `json:"code,omitempty"`
	CreatedAt   *Instant  `json:"createdAt,omitempty"`
	DisplayName *string   `json:"displayName,omitempty"`
	StoredBy    *string   `json:"storedBy,omitempty"`
	UpdatedAt   *Instant  `json:"updatedAt,omitempty"`
	Value       *string   `json:"value,omitempty"`
	ValueType   ValueType `json:"valueType"`
}

type _TrackerAttribute TrackerAttribute

// NewTrackerAttribute instantiates a new TrackerAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackerAttribute(valueType ValueType) *TrackerAttribute {
	this := TrackerAttribute{}
	this.ValueType = valueType
	return &this
}

// NewTrackerAttributeWithDefaults instantiates a new TrackerAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackerAttributeWithDefaults() *TrackerAttribute {
	this := TrackerAttribute{}
	return &this
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *TrackerAttribute) GetAttribute() string {
	if o == nil || IsNil(o.Attribute) {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerAttribute) GetAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *TrackerAttribute) HasAttribute() bool {
	if o != nil && !IsNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *TrackerAttribute) SetAttribute(v string) {
	o.Attribute = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TrackerAttribute) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerAttribute) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TrackerAttribute) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TrackerAttribute) SetCode(v string) {
	o.Code = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TrackerAttribute) GetCreatedAt() Instant {
	if o == nil || IsNil(o.CreatedAt) {
		var ret Instant
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerAttribute) GetCreatedAtOk() (*Instant, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TrackerAttribute) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given Instant and assigns it to the CreatedAt field.
func (o *TrackerAttribute) SetCreatedAt(v Instant) {
	o.CreatedAt = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *TrackerAttribute) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerAttribute) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *TrackerAttribute) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *TrackerAttribute) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *TrackerAttribute) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerAttribute) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *TrackerAttribute) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *TrackerAttribute) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TrackerAttribute) GetUpdatedAt() Instant {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret Instant
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerAttribute) GetUpdatedAtOk() (*Instant, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TrackerAttribute) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given Instant and assigns it to the UpdatedAt field.
func (o *TrackerAttribute) SetUpdatedAt(v Instant) {
	o.UpdatedAt = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TrackerAttribute) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackerAttribute) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TrackerAttribute) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TrackerAttribute) SetValue(v string) {
	o.Value = &v
}

// GetValueType returns the ValueType field value
func (o *TrackerAttribute) GetValueType() ValueType {
	if o == nil {
		var ret ValueType
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *TrackerAttribute) GetValueTypeOk() (*ValueType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *TrackerAttribute) SetValueType(v ValueType) {
	o.ValueType = v
}

func (o TrackerAttribute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackerAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	toSerialize["valueType"] = o.ValueType
	return toSerialize, nil
}

func (o *TrackerAttribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"valueType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackerAttribute := _TrackerAttribute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackerAttribute)

	if err != nil {
		return err
	}

	*o = TrackerAttribute(varTrackerAttribute)

	return err
}

type NullableTrackerAttribute struct {
	value *TrackerAttribute
	isSet bool
}

func (v NullableTrackerAttribute) Get() *TrackerAttribute {
	return v.value
}

func (v *NullableTrackerAttribute) Set(val *TrackerAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerAttribute(val *TrackerAttribute) *NullableTrackerAttribute {
	return &NullableTrackerAttribute{value: val, isSet: true}
}

func (v NullableTrackerAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
