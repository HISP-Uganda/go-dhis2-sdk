/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// FormType the model 'FormType'
type FormType string

// List of FormType
const (
	FORMTYPE_DEFAULT          FormType = "DEFAULT"
	FORMTYPE_CUSTOM           FormType = "CUSTOM"
	FORMTYPE_SECTION          FormType = "SECTION"
	FORMTYPE_SECTION_MULTIORG FormType = "SECTION_MULTIORG"
)

// All allowed values of FormType enum
var AllowedFormTypeEnumValues = []FormType{
	"DEFAULT",
	"CUSTOM",
	"SECTION",
	"SECTION_MULTIORG",
}

func (v *FormType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FormType(value)
	for _, existing := range AllowedFormTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FormType", value)
}

// NewFormTypeFromValue returns a pointer to a valid FormType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFormTypeFromValue(v string) (*FormType, error) {
	ev := FormType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FormType: valid values are %v", v, AllowedFormTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FormType) IsValid() bool {
	for _, existing := range AllowedFormTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FormType value
func (v FormType) Ptr() *FormType {
	return &v
}

type NullableFormType struct {
	value *FormType
	isSet bool
}

func (v NullableFormType) Get() *FormType {
	return v.value
}

func (v *NullableFormType) Set(val *FormType) {
	v.value = val
	v.isSet = true
}

func (v NullableFormType) IsSet() bool {
	return v.isSet
}

func (v *NullableFormType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormType(val *FormType) *NullableFormType {
	return &NullableFormType{value: val, isSet: true}
}

func (v NullableFormType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
