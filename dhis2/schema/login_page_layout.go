/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// LoginPageLayout the model 'LoginPageLayout'
type LoginPageLayout string

// List of LoginPageLayout
const (
	LOGINPAGELAYOUT_DEFAULT LoginPageLayout = "DEFAULT"
	LOGINPAGELAYOUT_SIDEBAR LoginPageLayout = "SIDEBAR"
	LOGINPAGELAYOUT_CUSTOM  LoginPageLayout = "CUSTOM"
)

// All allowed values of LoginPageLayout enum
var AllowedLoginPageLayoutEnumValues = []LoginPageLayout{
	"DEFAULT",
	"SIDEBAR",
	"CUSTOM",
}

func (v *LoginPageLayout) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoginPageLayout(value)
	for _, existing := range AllowedLoginPageLayoutEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoginPageLayout", value)
}

// NewLoginPageLayoutFromValue returns a pointer to a valid LoginPageLayout
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoginPageLayoutFromValue(v string) (*LoginPageLayout, error) {
	ev := LoginPageLayout(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoginPageLayout: valid values are %v", v, AllowedLoginPageLayoutEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoginPageLayout) IsValid() bool {
	for _, existing := range AllowedLoginPageLayoutEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoginPageLayout value
func (v LoginPageLayout) Ptr() *LoginPageLayout {
	return &v
}

type NullableLoginPageLayout struct {
	value *LoginPageLayout
	isSet bool
}

func (v NullableLoginPageLayout) Get() *LoginPageLayout {
	return v.value
}

func (v *NullableLoginPageLayout) Set(val *LoginPageLayout) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginPageLayout) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginPageLayout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginPageLayout(val *LoginPageLayout) *NullableLoginPageLayout {
	return &NullableLoginPageLayout{value: val, isSet: true}
}

func (v NullableLoginPageLayout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginPageLayout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
