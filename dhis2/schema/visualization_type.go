/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// VisualizationType the model 'VisualizationType'
type VisualizationType string

// List of VisualizationType
const (
	VISUALIZATIONTYPE_COLUMN                VisualizationType = "COLUMN"
	VISUALIZATIONTYPE_STACKED_COLUMN        VisualizationType = "STACKED_COLUMN"
	VISUALIZATIONTYPE_BAR                   VisualizationType = "BAR"
	VISUALIZATIONTYPE_STACKED_BAR           VisualizationType = "STACKED_BAR"
	VISUALIZATIONTYPE_LINE                  VisualizationType = "LINE"
	VISUALIZATIONTYPE_AREA                  VisualizationType = "AREA"
	VISUALIZATIONTYPE_STACKED_AREA          VisualizationType = "STACKED_AREA"
	VISUALIZATIONTYPE_PIE                   VisualizationType = "PIE"
	VISUALIZATIONTYPE_RADAR                 VisualizationType = "RADAR"
	VISUALIZATIONTYPE_GAUGE                 VisualizationType = "GAUGE"
	VISUALIZATIONTYPE_YEAR_OVER_YEAR_LINE   VisualizationType = "YEAR_OVER_YEAR_LINE"
	VISUALIZATIONTYPE_YEAR_OVER_YEAR_COLUMN VisualizationType = "YEAR_OVER_YEAR_COLUMN"
	VISUALIZATIONTYPE_SCATTER               VisualizationType = "SCATTER"
	VISUALIZATIONTYPE_BUBBLE                VisualizationType = "BUBBLE"
	VISUALIZATIONTYPE_SINGLE_VALUE          VisualizationType = "SINGLE_VALUE"
	VISUALIZATIONTYPE_PIVOT_TABLE           VisualizationType = "PIVOT_TABLE"
	VISUALIZATIONTYPE_OUTLIER_TABLE         VisualizationType = "OUTLIER_TABLE"
)

// All allowed values of VisualizationType enum
var AllowedVisualizationTypeEnumValues = []VisualizationType{
	"COLUMN",
	"STACKED_COLUMN",
	"BAR",
	"STACKED_BAR",
	"LINE",
	"AREA",
	"STACKED_AREA",
	"PIE",
	"RADAR",
	"GAUGE",
	"YEAR_OVER_YEAR_LINE",
	"YEAR_OVER_YEAR_COLUMN",
	"SCATTER",
	"BUBBLE",
	"SINGLE_VALUE",
	"PIVOT_TABLE",
	"OUTLIER_TABLE",
}

func (v *VisualizationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VisualizationType(value)
	for _, existing := range AllowedVisualizationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VisualizationType", value)
}

// NewVisualizationTypeFromValue returns a pointer to a valid VisualizationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVisualizationTypeFromValue(v string) (*VisualizationType, error) {
	ev := VisualizationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VisualizationType: valid values are %v", v, AllowedVisualizationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VisualizationType) IsValid() bool {
	for _, existing := range AllowedVisualizationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VisualizationType value
func (v VisualizationType) Ptr() *VisualizationType {
	return &v
}

type NullableVisualizationType struct {
	value *VisualizationType
	isSet bool
}

func (v NullableVisualizationType) Get() *VisualizationType {
	return v.value
}

func (v *NullableVisualizationType) Set(val *VisualizationType) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualizationType) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualizationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualizationType(val *VisualizationType) *NullableVisualizationType {
	return &NullableVisualizationType{value: val, isSet: true}
}

func (v NullableVisualizationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualizationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
