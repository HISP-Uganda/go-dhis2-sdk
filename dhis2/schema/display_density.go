/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DisplayDensity the model 'DisplayDensity'
type DisplayDensity string

// List of DisplayDensity
const (
	DISPLAYDENSITY_COMFORTABLE DisplayDensity = "COMFORTABLE"
	DISPLAYDENSITY_NORMAL      DisplayDensity = "NORMAL"
	DISPLAYDENSITY_COMPACT     DisplayDensity = "COMPACT"
	DISPLAYDENSITY_NONE        DisplayDensity = "NONE"
)

// All allowed values of DisplayDensity enum
var AllowedDisplayDensityEnumValues = []DisplayDensity{
	"COMFORTABLE",
	"NORMAL",
	"COMPACT",
	"NONE",
}

func (v *DisplayDensity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DisplayDensity(value)
	for _, existing := range AllowedDisplayDensityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DisplayDensity", value)
}

// NewDisplayDensityFromValue returns a pointer to a valid DisplayDensity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDisplayDensityFromValue(v string) (*DisplayDensity, error) {
	ev := DisplayDensity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DisplayDensity: valid values are %v", v, AllowedDisplayDensityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DisplayDensity) IsValid() bool {
	for _, existing := range AllowedDisplayDensityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DisplayDensity value
func (v DisplayDensity) Ptr() *DisplayDensity {
	return &v
}

type NullableDisplayDensity struct {
	value *DisplayDensity
	isSet bool
}

func (v NullableDisplayDensity) Get() *DisplayDensity {
	return v.value
}

func (v *NullableDisplayDensity) Set(val *DisplayDensity) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayDensity) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayDensity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayDensity(val *DisplayDensity) *NullableDisplayDensity {
	return &NullableDisplayDensity{value: val, isSet: true}
}

func (v NullableDisplayDensity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayDensity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
