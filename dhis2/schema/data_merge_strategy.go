/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DataMergeStrategy the model 'DataMergeStrategy'
type DataMergeStrategy string

// List of DataMergeStrategy
const (
	DATAMERGESTRATEGY_LAST_UPDATED DataMergeStrategy = "LAST_UPDATED"
	DATAMERGESTRATEGY_DISCARD      DataMergeStrategy = "DISCARD"
)

// All allowed values of DataMergeStrategy enum
var AllowedDataMergeStrategyEnumValues = []DataMergeStrategy{
	"LAST_UPDATED",
	"DISCARD",
}

func (v *DataMergeStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataMergeStrategy(value)
	for _, existing := range AllowedDataMergeStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataMergeStrategy", value)
}

// NewDataMergeStrategyFromValue returns a pointer to a valid DataMergeStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataMergeStrategyFromValue(v string) (*DataMergeStrategy, error) {
	ev := DataMergeStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataMergeStrategy: valid values are %v", v, AllowedDataMergeStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataMergeStrategy) IsValid() bool {
	for _, existing := range AllowedDataMergeStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataMergeStrategy value
func (v DataMergeStrategy) Ptr() *DataMergeStrategy {
	return &v
}

type NullableDataMergeStrategy struct {
	value *DataMergeStrategy
	isSet bool
}

func (v NullableDataMergeStrategy) Get() *DataMergeStrategy {
	return v.value
}

func (v *NullableDataMergeStrategy) Set(val *DataMergeStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableDataMergeStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableDataMergeStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataMergeStrategy(val *DataMergeStrategy) *NullableDataMergeStrategy {
	return &NullableDataMergeStrategy{value: val, isSet: true}
}

func (v NullableDataMergeStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataMergeStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
