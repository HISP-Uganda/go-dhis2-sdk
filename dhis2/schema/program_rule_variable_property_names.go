/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ProgramRuleVariablePropertyNames the model 'ProgramRuleVariablePropertyNames'
type ProgramRuleVariablePropertyNames string

// List of ProgramRuleVariablePropertyNames
const (
	PROGRAMRULEVARIABLEPROPERTYNAMES_ACCESS                            ProgramRuleVariablePropertyNames = "access"
	PROGRAMRULEVARIABLEPROPERTYNAMES_ATTRIBUTE_VALUES                  ProgramRuleVariablePropertyNames = "attributeValues"
	PROGRAMRULEVARIABLEPROPERTYNAMES_CODE                              ProgramRuleVariablePropertyNames = "code"
	PROGRAMRULEVARIABLEPROPERTYNAMES_CREATED                           ProgramRuleVariablePropertyNames = "created"
	PROGRAMRULEVARIABLEPROPERTYNAMES_CREATED_BY                        ProgramRuleVariablePropertyNames = "createdBy"
	PROGRAMRULEVARIABLEPROPERTYNAMES_DATA_ELEMENT                      ProgramRuleVariablePropertyNames = "dataElement"
	PROGRAMRULEVARIABLEPROPERTYNAMES_DISPLAY_NAME                      ProgramRuleVariablePropertyNames = "displayName"
	PROGRAMRULEVARIABLEPROPERTYNAMES_FAVORITE                          ProgramRuleVariablePropertyNames = "favorite"
	PROGRAMRULEVARIABLEPROPERTYNAMES_FAVORITES                         ProgramRuleVariablePropertyNames = "favorites"
	PROGRAMRULEVARIABLEPROPERTYNAMES_HREF                              ProgramRuleVariablePropertyNames = "href"
	PROGRAMRULEVARIABLEPROPERTYNAMES_ID                                ProgramRuleVariablePropertyNames = "id"
	PROGRAMRULEVARIABLEPROPERTYNAMES_LAST_UPDATED                      ProgramRuleVariablePropertyNames = "lastUpdated"
	PROGRAMRULEVARIABLEPROPERTYNAMES_LAST_UPDATED_BY                   ProgramRuleVariablePropertyNames = "lastUpdatedBy"
	PROGRAMRULEVARIABLEPROPERTYNAMES_NAME                              ProgramRuleVariablePropertyNames = "name"
	PROGRAMRULEVARIABLEPROPERTYNAMES_PROGRAM                           ProgramRuleVariablePropertyNames = "program"
	PROGRAMRULEVARIABLEPROPERTYNAMES_PROGRAM_RULE_VARIABLE_SOURCE_TYPE ProgramRuleVariablePropertyNames = "programRuleVariableSourceType"
	PROGRAMRULEVARIABLEPROPERTYNAMES_PROGRAM_STAGE                     ProgramRuleVariablePropertyNames = "programStage"
	PROGRAMRULEVARIABLEPROPERTYNAMES_SHARING                           ProgramRuleVariablePropertyNames = "sharing"
	PROGRAMRULEVARIABLEPROPERTYNAMES_TRACKED_ENTITY_ATTRIBUTE          ProgramRuleVariablePropertyNames = "trackedEntityAttribute"
	PROGRAMRULEVARIABLEPROPERTYNAMES_TRANSLATIONS                      ProgramRuleVariablePropertyNames = "translations"
	PROGRAMRULEVARIABLEPROPERTYNAMES_USE_CODE_FOR_OPTION_SET           ProgramRuleVariablePropertyNames = "useCodeForOptionSet"
	PROGRAMRULEVARIABLEPROPERTYNAMES_VALUE_TYPE                        ProgramRuleVariablePropertyNames = "valueType"
)

// All allowed values of ProgramRuleVariablePropertyNames enum
var AllowedProgramRuleVariablePropertyNamesEnumValues = []ProgramRuleVariablePropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"dataElement",
	"displayName",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"program",
	"programRuleVariableSourceType",
	"programStage",
	"sharing",
	"trackedEntityAttribute",
	"translations",
	"useCodeForOptionSet",
	"valueType",
}

func (v *ProgramRuleVariablePropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProgramRuleVariablePropertyNames(value)
	for _, existing := range AllowedProgramRuleVariablePropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProgramRuleVariablePropertyNames", value)
}

// NewProgramRuleVariablePropertyNamesFromValue returns a pointer to a valid ProgramRuleVariablePropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProgramRuleVariablePropertyNamesFromValue(v string) (*ProgramRuleVariablePropertyNames, error) {
	ev := ProgramRuleVariablePropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProgramRuleVariablePropertyNames: valid values are %v", v, AllowedProgramRuleVariablePropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProgramRuleVariablePropertyNames) IsValid() bool {
	for _, existing := range AllowedProgramRuleVariablePropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramRuleVariablePropertyNames value
func (v ProgramRuleVariablePropertyNames) Ptr() *ProgramRuleVariablePropertyNames {
	return &v
}

type NullableProgramRuleVariablePropertyNames struct {
	value *ProgramRuleVariablePropertyNames
	isSet bool
}

func (v NullableProgramRuleVariablePropertyNames) Get() *ProgramRuleVariablePropertyNames {
	return v.value
}

func (v *NullableProgramRuleVariablePropertyNames) Set(val *ProgramRuleVariablePropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramRuleVariablePropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramRuleVariablePropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramRuleVariablePropertyNames(val *ProgramRuleVariablePropertyNames) *NullableProgramRuleVariablePropertyNames {
	return &NullableProgramRuleVariablePropertyNames{value: val, isSet: true}
}

func (v NullableProgramRuleVariablePropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramRuleVariablePropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
