/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LegendDefinitions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegendDefinitions{}

// LegendDefinitions struct for LegendDefinitions
type LegendDefinitions struct {
	Set      *LegendSet            `json:"set,omitempty"`
	ShowKey  *bool                 `json:"showKey,omitempty"`
	Strategy LegendDisplayStrategy `json:"strategy"`
	Style    LegendDisplayStyle    `json:"style"`
}

type _LegendDefinitions LegendDefinitions

// NewLegendDefinitions instantiates a new LegendDefinitions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegendDefinitions(strategy LegendDisplayStrategy, style LegendDisplayStyle) *LegendDefinitions {
	this := LegendDefinitions{}
	this.Strategy = strategy
	this.Style = style
	return &this
}

// NewLegendDefinitionsWithDefaults instantiates a new LegendDefinitions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegendDefinitionsWithDefaults() *LegendDefinitions {
	this := LegendDefinitions{}
	return &this
}

// GetSet returns the Set field value if set, zero value otherwise.
func (o *LegendDefinitions) GetSet() LegendSet {
	if o == nil || IsNil(o.Set) {
		var ret LegendSet
		return ret
	}
	return *o.Set
}

// GetSetOk returns a tuple with the Set field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegendDefinitions) GetSetOk() (*LegendSet, bool) {
	if o == nil || IsNil(o.Set) {
		return nil, false
	}
	return o.Set, true
}

// HasSet returns a boolean if a field has been set.
func (o *LegendDefinitions) HasSet() bool {
	if o != nil && !IsNil(o.Set) {
		return true
	}

	return false
}

// SetSet gets a reference to the given LegendSet and assigns it to the Set field.
func (o *LegendDefinitions) SetSet(v LegendSet) {
	o.Set = &v
}

// GetShowKey returns the ShowKey field value if set, zero value otherwise.
func (o *LegendDefinitions) GetShowKey() bool {
	if o == nil || IsNil(o.ShowKey) {
		var ret bool
		return ret
	}
	return *o.ShowKey
}

// GetShowKeyOk returns a tuple with the ShowKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegendDefinitions) GetShowKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowKey) {
		return nil, false
	}
	return o.ShowKey, true
}

// HasShowKey returns a boolean if a field has been set.
func (o *LegendDefinitions) HasShowKey() bool {
	if o != nil && !IsNil(o.ShowKey) {
		return true
	}

	return false
}

// SetShowKey gets a reference to the given bool and assigns it to the ShowKey field.
func (o *LegendDefinitions) SetShowKey(v bool) {
	o.ShowKey = &v
}

// GetStrategy returns the Strategy field value
func (o *LegendDefinitions) GetStrategy() LegendDisplayStrategy {
	if o == nil {
		var ret LegendDisplayStrategy
		return ret
	}

	return o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value
// and a boolean to check if the value has been set.
func (o *LegendDefinitions) GetStrategyOk() (*LegendDisplayStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strategy, true
}

// SetStrategy sets field value
func (o *LegendDefinitions) SetStrategy(v LegendDisplayStrategy) {
	o.Strategy = v
}

// GetStyle returns the Style field value
func (o *LegendDefinitions) GetStyle() LegendDisplayStyle {
	if o == nil {
		var ret LegendDisplayStyle
		return ret
	}

	return o.Style
}

// GetStyleOk returns a tuple with the Style field value
// and a boolean to check if the value has been set.
func (o *LegendDefinitions) GetStyleOk() (*LegendDisplayStyle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Style, true
}

// SetStyle sets field value
func (o *LegendDefinitions) SetStyle(v LegendDisplayStyle) {
	o.Style = v
}

func (o LegendDefinitions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegendDefinitions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Set) {
		toSerialize["set"] = o.Set
	}
	if !IsNil(o.ShowKey) {
		toSerialize["showKey"] = o.ShowKey
	}
	toSerialize["strategy"] = o.Strategy
	toSerialize["style"] = o.Style
	return toSerialize, nil
}

func (o *LegendDefinitions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"strategy",
		"style",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLegendDefinitions := _LegendDefinitions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLegendDefinitions)

	if err != nil {
		return err
	}

	*o = LegendDefinitions(varLegendDefinitions)

	return err
}

type NullableLegendDefinitions struct {
	value *LegendDefinitions
	isSet bool
}

func (v NullableLegendDefinitions) Get() *LegendDefinitions {
	return v.value
}

func (v *NullableLegendDefinitions) Set(val *LegendDefinitions) {
	v.value = val
	v.isSet = true
}

func (v NullableLegendDefinitions) IsSet() bool {
	return v.isSet
}

func (v *NullableLegendDefinitions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegendDefinitions(val *LegendDefinitions) *NullableLegendDefinitions {
	return &NullableLegendDefinitions{value: val, isSet: true}
}

func (v NullableLegendDefinitions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegendDefinitions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
