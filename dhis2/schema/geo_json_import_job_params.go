/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GeoJsonImportJobParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoJsonImportJobParams{}

// GeoJsonImportJobParams struct for GeoJsonImportJobParams
type GeoJsonImportJobParams struct {
	AttributeId       *string              `json:"attributeId,omitempty"`
	DryRun            *bool                `json:"dryRun,omitempty"`
	IdType            IdentifiableProperty `json:"idType"`
	OrgUnitIdProperty *string              `json:"orgUnitIdProperty,omitempty"`
}

type _GeoJsonImportJobParams GeoJsonImportJobParams

// NewGeoJsonImportJobParams instantiates a new GeoJsonImportJobParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoJsonImportJobParams(idType IdentifiableProperty) *GeoJsonImportJobParams {
	this := GeoJsonImportJobParams{}
	this.IdType = idType
	return &this
}

// NewGeoJsonImportJobParamsWithDefaults instantiates a new GeoJsonImportJobParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoJsonImportJobParamsWithDefaults() *GeoJsonImportJobParams {
	this := GeoJsonImportJobParams{}
	return &this
}

// GetAttributeId returns the AttributeId field value if set, zero value otherwise.
func (o *GeoJsonImportJobParams) GetAttributeId() string {
	if o == nil || IsNil(o.AttributeId) {
		var ret string
		return ret
	}
	return *o.AttributeId
}

// GetAttributeIdOk returns a tuple with the AttributeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJsonImportJobParams) GetAttributeIdOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeId) {
		return nil, false
	}
	return o.AttributeId, true
}

// HasAttributeId returns a boolean if a field has been set.
func (o *GeoJsonImportJobParams) HasAttributeId() bool {
	if o != nil && !IsNil(o.AttributeId) {
		return true
	}

	return false
}

// SetAttributeId gets a reference to the given string and assigns it to the AttributeId field.
func (o *GeoJsonImportJobParams) SetAttributeId(v string) {
	o.AttributeId = &v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *GeoJsonImportJobParams) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJsonImportJobParams) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *GeoJsonImportJobParams) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *GeoJsonImportJobParams) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetIdType returns the IdType field value
func (o *GeoJsonImportJobParams) GetIdType() IdentifiableProperty {
	if o == nil {
		var ret IdentifiableProperty
		return ret
	}

	return o.IdType
}

// GetIdTypeOk returns a tuple with the IdType field value
// and a boolean to check if the value has been set.
func (o *GeoJsonImportJobParams) GetIdTypeOk() (*IdentifiableProperty, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdType, true
}

// SetIdType sets field value
func (o *GeoJsonImportJobParams) SetIdType(v IdentifiableProperty) {
	o.IdType = v
}

// GetOrgUnitIdProperty returns the OrgUnitIdProperty field value if set, zero value otherwise.
func (o *GeoJsonImportJobParams) GetOrgUnitIdProperty() string {
	if o == nil || IsNil(o.OrgUnitIdProperty) {
		var ret string
		return ret
	}
	return *o.OrgUnitIdProperty
}

// GetOrgUnitIdPropertyOk returns a tuple with the OrgUnitIdProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJsonImportJobParams) GetOrgUnitIdPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnitIdProperty) {
		return nil, false
	}
	return o.OrgUnitIdProperty, true
}

// HasOrgUnitIdProperty returns a boolean if a field has been set.
func (o *GeoJsonImportJobParams) HasOrgUnitIdProperty() bool {
	if o != nil && !IsNil(o.OrgUnitIdProperty) {
		return true
	}

	return false
}

// SetOrgUnitIdProperty gets a reference to the given string and assigns it to the OrgUnitIdProperty field.
func (o *GeoJsonImportJobParams) SetOrgUnitIdProperty(v string) {
	o.OrgUnitIdProperty = &v
}

func (o GeoJsonImportJobParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoJsonImportJobParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeId) {
		toSerialize["attributeId"] = o.AttributeId
	}
	if !IsNil(o.DryRun) {
		toSerialize["dryRun"] = o.DryRun
	}
	toSerialize["idType"] = o.IdType
	if !IsNil(o.OrgUnitIdProperty) {
		toSerialize["orgUnitIdProperty"] = o.OrgUnitIdProperty
	}
	return toSerialize, nil
}

func (o *GeoJsonImportJobParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"idType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeoJsonImportJobParams := _GeoJsonImportJobParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGeoJsonImportJobParams)

	if err != nil {
		return err
	}

	*o = GeoJsonImportJobParams(varGeoJsonImportJobParams)

	return err
}

type NullableGeoJsonImportJobParams struct {
	value *GeoJsonImportJobParams
	isSet bool
}

func (v NullableGeoJsonImportJobParams) Get() *GeoJsonImportJobParams {
	return v.value
}

func (v *NullableGeoJsonImportJobParams) Set(val *GeoJsonImportJobParams) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJsonImportJobParams) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJsonImportJobParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJsonImportJobParams(val *GeoJsonImportJobParams) *NullableGeoJsonImportJobParams {
	return &NullableGeoJsonImportJobParams{value: val, isSet: true}
}

func (v NullableGeoJsonImportJobParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJsonImportJobParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
