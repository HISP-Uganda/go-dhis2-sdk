/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ValueType the model 'ValueType'
type ValueType string

// List of ValueType
const (
	VALUETYPE_TEXT                     ValueType = "TEXT"
	VALUETYPE_LONG_TEXT                ValueType = "LONG_TEXT"
	VALUETYPE_MULTI_TEXT               ValueType = "MULTI_TEXT"
	VALUETYPE_LETTER                   ValueType = "LETTER"
	VALUETYPE_PHONE_NUMBER             ValueType = "PHONE_NUMBER"
	VALUETYPE_EMAIL                    ValueType = "EMAIL"
	VALUETYPE_BOOLEAN                  ValueType = "BOOLEAN"
	VALUETYPE_TRUE_ONLY                ValueType = "TRUE_ONLY"
	VALUETYPE_DATE                     ValueType = "DATE"
	VALUETYPE_DATETIME                 ValueType = "DATETIME"
	VALUETYPE_TIME                     ValueType = "TIME"
	VALUETYPE_NUMBER                   ValueType = "NUMBER"
	VALUETYPE_UNIT_INTERVAL            ValueType = "UNIT_INTERVAL"
	VALUETYPE_PERCENTAGE               ValueType = "PERCENTAGE"
	VALUETYPE_INTEGER                  ValueType = "INTEGER"
	VALUETYPE_INTEGER_POSITIVE         ValueType = "INTEGER_POSITIVE"
	VALUETYPE_INTEGER_NEGATIVE         ValueType = "INTEGER_NEGATIVE"
	VALUETYPE_INTEGER_ZERO_OR_POSITIVE ValueType = "INTEGER_ZERO_OR_POSITIVE"
	VALUETYPE_TRACKER_ASSOCIATE        ValueType = "TRACKER_ASSOCIATE"
	VALUETYPE_USERNAME                 ValueType = "USERNAME"
	VALUETYPE_COORDINATE               ValueType = "COORDINATE"
	VALUETYPE_ORGANISATION_UNIT        ValueType = "ORGANISATION_UNIT"
	VALUETYPE_REFERENCE                ValueType = "REFERENCE"
	VALUETYPE_AGE                      ValueType = "AGE"
	VALUETYPE_URL                      ValueType = "URL"
	VALUETYPE_FILE_RESOURCE            ValueType = "FILE_RESOURCE"
	VALUETYPE_IMAGE                    ValueType = "IMAGE"
	VALUETYPE_GEOJSON                  ValueType = "GEOJSON"
)

// All allowed values of ValueType enum
var AllowedValueTypeEnumValues = []ValueType{
	"TEXT",
	"LONG_TEXT",
	"MULTI_TEXT",
	"LETTER",
	"PHONE_NUMBER",
	"EMAIL",
	"BOOLEAN",
	"TRUE_ONLY",
	"DATE",
	"DATETIME",
	"TIME",
	"NUMBER",
	"UNIT_INTERVAL",
	"PERCENTAGE",
	"INTEGER",
	"INTEGER_POSITIVE",
	"INTEGER_NEGATIVE",
	"INTEGER_ZERO_OR_POSITIVE",
	"TRACKER_ASSOCIATE",
	"USERNAME",
	"COORDINATE",
	"ORGANISATION_UNIT",
	"REFERENCE",
	"AGE",
	"URL",
	"FILE_RESOURCE",
	"IMAGE",
	"GEOJSON",
}

func (v *ValueType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValueType(value)
	for _, existing := range AllowedValueTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValueType", value)
}

// NewValueTypeFromValue returns a pointer to a valid ValueType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValueTypeFromValue(v string) (*ValueType, error) {
	ev := ValueType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValueType: valid values are %v", v, AllowedValueTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValueType) IsValid() bool {
	for _, existing := range AllowedValueTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValueType value
func (v ValueType) Ptr() *ValueType {
	return &v
}

type NullableValueType struct {
	value *ValueType
	isSet bool
}

func (v NullableValueType) Get() *ValueType {
	return v.value
}

func (v *NullableValueType) Set(val *ValueType) {
	v.value = val
	v.isSet = true
}

func (v NullableValueType) IsSet() bool {
	return v.isSet
}

func (v *NullableValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueType(val *ValueType) *NullableValueType {
	return &NullableValueType{value: val, isSet: true}
}

func (v NullableValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
