/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DisplayProperty the model 'DisplayProperty'
type DisplayProperty string

// List of DisplayProperty
const (
	DISPLAYPROPERTY_NAME      DisplayProperty = "NAME"
	DISPLAYPROPERTY_SHORTNAME DisplayProperty = "SHORTNAME"
)

// All allowed values of DisplayProperty enum
var AllowedDisplayPropertyEnumValues = []DisplayProperty{
	"NAME",
	"SHORTNAME",
}

func (v *DisplayProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DisplayProperty(value)
	for _, existing := range AllowedDisplayPropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DisplayProperty", value)
}

// NewDisplayPropertyFromValue returns a pointer to a valid DisplayProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDisplayPropertyFromValue(v string) (*DisplayProperty, error) {
	ev := DisplayProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DisplayProperty: valid values are %v", v, AllowedDisplayPropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DisplayProperty) IsValid() bool {
	for _, existing := range AllowedDisplayPropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DisplayProperty value
func (v DisplayProperty) Ptr() *DisplayProperty {
	return &v
}

type NullableDisplayProperty struct {
	value *DisplayProperty
	isSet bool
}

func (v NullableDisplayProperty) Get() *DisplayProperty {
	return v.value
}

func (v *NullableDisplayProperty) Set(val *DisplayProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayProperty(val *DisplayProperty) *NullableDisplayProperty {
	return &NullableDisplayProperty{value: val, isSet: true}
}

func (v NullableDisplayProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
