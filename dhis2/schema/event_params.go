/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the EventParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventParams{}

// EventParams struct for EventParams
type EventParams struct {
	AssignedUser           *UserParams                                  `json:"assignedUser,omitempty"`
	AttributeOptionCombo   *CategoryOptionComboParams                   `json:"attributeOptionCombo,omitempty"`
	AttributeValues        []AttributeValueParams                       `json:"attributeValues,omitempty"`
	Code                   *string                                      `json:"code,omitempty"`
	Completed              *bool                                        `json:"completed,omitempty"`
	CompletedBy            *string                                      `json:"completedBy,omitempty"`
	CompletedDate          *time.Time                                   `json:"completedDate,omitempty"`
	CreatableInSearchScope *bool                                        `json:"creatableInSearchScope,omitempty"`
	Created                *time.Time                                   `json:"created,omitempty"`
	CreatedAtClient        *time.Time                                   `json:"createdAtClient,omitempty"`
	CreatedBy              *AggregateDataExchangeParamsCreatedBy        `json:"createdBy,omitempty"`
	CreatedByUserInfo      *UserInfoSnapshot                            `json:"createdByUserInfo,omitempty"`
	Deleted                *bool                                        `json:"deleted,omitempty"`
	DisplayName            *string                                      `json:"displayName,omitempty"`
	Enrollment             *EnrollmentParams                            `json:"enrollment,omitempty"`
	EventDataValues        []EventDataValue                             `json:"eventDataValues,omitempty"`
	EventDate              *time.Time                                   `json:"eventDate,omitempty"`
	Favorite               *bool                                        `json:"favorite,omitempty"`
	Favorites              []string                                     `json:"favorites,omitempty"`
	Geometry               map[string]interface{}                       `json:"geometry,omitempty"`
	Id                     *string                                      `json:"id,omitempty"`
	LastUpdated            *time.Time                                   `json:"lastUpdated,omitempty"`
	LastUpdatedAtClient    *time.Time                                   `json:"lastUpdatedAtClient,omitempty"`
	LastUpdatedBy          *AggregateDataExchangeParamsCreatedBy        `json:"lastUpdatedBy,omitempty"`
	LastUpdatedByUserInfo  *UserInfoSnapshot                            `json:"lastUpdatedByUserInfo,omitempty"`
	MessageConversations   []EnrollmentParamsMessageConversationsInner  `json:"messageConversations,omitempty"`
	Name                   *string                                      `json:"name,omitempty"`
	Notes                  []EnrollmentParamsTrackedEntityCommentsInner `json:"notes,omitempty"`
	OrganisationUnit       *OrganisationUnitParams                      `json:"organisationUnit,omitempty"`
	ProgramStage           *ProgramStageParams                          `json:"programStage,omitempty"`
	RelationshipItems      []RelationshipItemParams                     `json:"relationshipItems,omitempty"`
	ScheduledDate          *time.Time                                   `json:"scheduledDate,omitempty"`
	Sharing                *Sharing                                     `json:"sharing,omitempty"`
	Status                 EventStatus                                  `json:"status"`
	StoredBy               *string                                      `json:"storedBy,omitempty"`
	Translations           []Translation                                `json:"translations,omitempty"`
}

type _EventParams EventParams

// NewEventParams instantiates a new EventParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventParams(status EventStatus) *EventParams {
	this := EventParams{}
	this.Status = status
	return &this
}

// NewEventParamsWithDefaults instantiates a new EventParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventParamsWithDefaults() *EventParams {
	this := EventParams{}
	return &this
}

// GetAssignedUser returns the AssignedUser field value if set, zero value otherwise.
func (o *EventParams) GetAssignedUser() UserParams {
	if o == nil || IsNil(o.AssignedUser) {
		var ret UserParams
		return ret
	}
	return *o.AssignedUser
}

// GetAssignedUserOk returns a tuple with the AssignedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetAssignedUserOk() (*UserParams, bool) {
	if o == nil || IsNil(o.AssignedUser) {
		return nil, false
	}
	return o.AssignedUser, true
}

// HasAssignedUser returns a boolean if a field has been set.
func (o *EventParams) HasAssignedUser() bool {
	if o != nil && !IsNil(o.AssignedUser) {
		return true
	}

	return false
}

// SetAssignedUser gets a reference to the given UserParams and assigns it to the AssignedUser field.
func (o *EventParams) SetAssignedUser(v UserParams) {
	o.AssignedUser = &v
}

// GetAttributeOptionCombo returns the AttributeOptionCombo field value if set, zero value otherwise.
func (o *EventParams) GetAttributeOptionCombo() CategoryOptionComboParams {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		var ret CategoryOptionComboParams
		return ret
	}
	return *o.AttributeOptionCombo
}

// GetAttributeOptionComboOk returns a tuple with the AttributeOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetAttributeOptionComboOk() (*CategoryOptionComboParams, bool) {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		return nil, false
	}
	return o.AttributeOptionCombo, true
}

// HasAttributeOptionCombo returns a boolean if a field has been set.
func (o *EventParams) HasAttributeOptionCombo() bool {
	if o != nil && !IsNil(o.AttributeOptionCombo) {
		return true
	}

	return false
}

// SetAttributeOptionCombo gets a reference to the given CategoryOptionComboParams and assigns it to the AttributeOptionCombo field.
func (o *EventParams) SetAttributeOptionCombo(v CategoryOptionComboParams) {
	o.AttributeOptionCombo = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *EventParams) GetAttributeValues() []AttributeValueParams {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValueParams
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetAttributeValuesOk() ([]AttributeValueParams, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *EventParams) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValueParams and assigns it to the AttributeValues field.
func (o *EventParams) SetAttributeValues(v []AttributeValueParams) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *EventParams) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *EventParams) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *EventParams) SetCode(v string) {
	o.Code = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *EventParams) GetCompleted() bool {
	if o == nil || IsNil(o.Completed) {
		var ret bool
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetCompletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *EventParams) HasCompleted() bool {
	if o != nil && !IsNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given bool and assigns it to the Completed field.
func (o *EventParams) SetCompleted(v bool) {
	o.Completed = &v
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *EventParams) GetCompletedBy() string {
	if o == nil || IsNil(o.CompletedBy) {
		var ret string
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetCompletedByOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedBy) {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *EventParams) HasCompletedBy() bool {
	if o != nil && !IsNil(o.CompletedBy) {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given string and assigns it to the CompletedBy field.
func (o *EventParams) SetCompletedBy(v string) {
	o.CompletedBy = &v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *EventParams) GetCompletedDate() time.Time {
	if o == nil || IsNil(o.CompletedDate) {
		var ret time.Time
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetCompletedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *EventParams) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given time.Time and assigns it to the CompletedDate field.
func (o *EventParams) SetCompletedDate(v time.Time) {
	o.CompletedDate = &v
}

// GetCreatableInSearchScope returns the CreatableInSearchScope field value if set, zero value otherwise.
func (o *EventParams) GetCreatableInSearchScope() bool {
	if o == nil || IsNil(o.CreatableInSearchScope) {
		var ret bool
		return ret
	}
	return *o.CreatableInSearchScope
}

// GetCreatableInSearchScopeOk returns a tuple with the CreatableInSearchScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetCreatableInSearchScopeOk() (*bool, bool) {
	if o == nil || IsNil(o.CreatableInSearchScope) {
		return nil, false
	}
	return o.CreatableInSearchScope, true
}

// HasCreatableInSearchScope returns a boolean if a field has been set.
func (o *EventParams) HasCreatableInSearchScope() bool {
	if o != nil && !IsNil(o.CreatableInSearchScope) {
		return true
	}

	return false
}

// SetCreatableInSearchScope gets a reference to the given bool and assigns it to the CreatableInSearchScope field.
func (o *EventParams) SetCreatableInSearchScope(v bool) {
	o.CreatableInSearchScope = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *EventParams) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *EventParams) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *EventParams) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedAtClient returns the CreatedAtClient field value if set, zero value otherwise.
func (o *EventParams) GetCreatedAtClient() time.Time {
	if o == nil || IsNil(o.CreatedAtClient) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAtClient
}

// GetCreatedAtClientOk returns a tuple with the CreatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetCreatedAtClientOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAtClient) {
		return nil, false
	}
	return o.CreatedAtClient, true
}

// HasCreatedAtClient returns a boolean if a field has been set.
func (o *EventParams) HasCreatedAtClient() bool {
	if o != nil && !IsNil(o.CreatedAtClient) {
		return true
	}

	return false
}

// SetCreatedAtClient gets a reference to the given time.Time and assigns it to the CreatedAtClient field.
func (o *EventParams) SetCreatedAtClient(v time.Time) {
	o.CreatedAtClient = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *EventParams) GetCreatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetCreatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *EventParams) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the CreatedBy field.
func (o *EventParams) SetCreatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.CreatedBy = &v
}

// GetCreatedByUserInfo returns the CreatedByUserInfo field value if set, zero value otherwise.
func (o *EventParams) GetCreatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.CreatedByUserInfo
}

// GetCreatedByUserInfoOk returns a tuple with the CreatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetCreatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.CreatedByUserInfo) {
		return nil, false
	}
	return o.CreatedByUserInfo, true
}

// HasCreatedByUserInfo returns a boolean if a field has been set.
func (o *EventParams) HasCreatedByUserInfo() bool {
	if o != nil && !IsNil(o.CreatedByUserInfo) {
		return true
	}

	return false
}

// SetCreatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the CreatedByUserInfo field.
func (o *EventParams) SetCreatedByUserInfo(v UserInfoSnapshot) {
	o.CreatedByUserInfo = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *EventParams) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *EventParams) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *EventParams) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EventParams) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EventParams) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EventParams) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnrollment returns the Enrollment field value if set, zero value otherwise.
func (o *EventParams) GetEnrollment() EnrollmentParams {
	if o == nil || IsNil(o.Enrollment) {
		var ret EnrollmentParams
		return ret
	}
	return *o.Enrollment
}

// GetEnrollmentOk returns a tuple with the Enrollment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetEnrollmentOk() (*EnrollmentParams, bool) {
	if o == nil || IsNil(o.Enrollment) {
		return nil, false
	}
	return o.Enrollment, true
}

// HasEnrollment returns a boolean if a field has been set.
func (o *EventParams) HasEnrollment() bool {
	if o != nil && !IsNil(o.Enrollment) {
		return true
	}

	return false
}

// SetEnrollment gets a reference to the given EnrollmentParams and assigns it to the Enrollment field.
func (o *EventParams) SetEnrollment(v EnrollmentParams) {
	o.Enrollment = &v
}

// GetEventDataValues returns the EventDataValues field value if set, zero value otherwise.
func (o *EventParams) GetEventDataValues() []EventDataValue {
	if o == nil || IsNil(o.EventDataValues) {
		var ret []EventDataValue
		return ret
	}
	return o.EventDataValues
}

// GetEventDataValuesOk returns a tuple with the EventDataValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetEventDataValuesOk() ([]EventDataValue, bool) {
	if o == nil || IsNil(o.EventDataValues) {
		return nil, false
	}
	return o.EventDataValues, true
}

// HasEventDataValues returns a boolean if a field has been set.
func (o *EventParams) HasEventDataValues() bool {
	if o != nil && !IsNil(o.EventDataValues) {
		return true
	}

	return false
}

// SetEventDataValues gets a reference to the given []EventDataValue and assigns it to the EventDataValues field.
func (o *EventParams) SetEventDataValues(v []EventDataValue) {
	o.EventDataValues = v
}

// GetEventDate returns the EventDate field value if set, zero value otherwise.
func (o *EventParams) GetEventDate() time.Time {
	if o == nil || IsNil(o.EventDate) {
		var ret time.Time
		return ret
	}
	return *o.EventDate
}

// GetEventDateOk returns a tuple with the EventDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetEventDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EventDate) {
		return nil, false
	}
	return o.EventDate, true
}

// HasEventDate returns a boolean if a field has been set.
func (o *EventParams) HasEventDate() bool {
	if o != nil && !IsNil(o.EventDate) {
		return true
	}

	return false
}

// SetEventDate gets a reference to the given time.Time and assigns it to the EventDate field.
func (o *EventParams) SetEventDate(v time.Time) {
	o.EventDate = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *EventParams) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *EventParams) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *EventParams) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *EventParams) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *EventParams) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *EventParams) SetFavorites(v []string) {
	o.Favorites = v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *EventParams) GetGeometry() map[string]interface{} {
	if o == nil || IsNil(o.Geometry) {
		var ret map[string]interface{}
		return ret
	}
	return o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetGeometryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Geometry) {
		return map[string]interface{}{}, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *EventParams) HasGeometry() bool {
	if o != nil && !IsNil(o.Geometry) {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given map[string]interface{} and assigns it to the Geometry field.
func (o *EventParams) SetGeometry(v map[string]interface{}) {
	o.Geometry = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EventParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EventParams) SetId(v string) {
	o.Id = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *EventParams) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *EventParams) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *EventParams) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedAtClient returns the LastUpdatedAtClient field value if set, zero value otherwise.
func (o *EventParams) GetLastUpdatedAtClient() time.Time {
	if o == nil || IsNil(o.LastUpdatedAtClient) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedAtClient
}

// GetLastUpdatedAtClientOk returns a tuple with the LastUpdatedAtClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetLastUpdatedAtClientOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdatedAtClient) {
		return nil, false
	}
	return o.LastUpdatedAtClient, true
}

// HasLastUpdatedAtClient returns a boolean if a field has been set.
func (o *EventParams) HasLastUpdatedAtClient() bool {
	if o != nil && !IsNil(o.LastUpdatedAtClient) {
		return true
	}

	return false
}

// SetLastUpdatedAtClient gets a reference to the given time.Time and assigns it to the LastUpdatedAtClient field.
func (o *EventParams) SetLastUpdatedAtClient(v time.Time) {
	o.LastUpdatedAtClient = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *EventParams) GetLastUpdatedBy() AggregateDataExchangeParamsCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeParamsCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetLastUpdatedByOk() (*AggregateDataExchangeParamsCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *EventParams) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeParamsCreatedBy and assigns it to the LastUpdatedBy field.
func (o *EventParams) SetLastUpdatedBy(v AggregateDataExchangeParamsCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLastUpdatedByUserInfo returns the LastUpdatedByUserInfo field value if set, zero value otherwise.
func (o *EventParams) GetLastUpdatedByUserInfo() UserInfoSnapshot {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		var ret UserInfoSnapshot
		return ret
	}
	return *o.LastUpdatedByUserInfo
}

// GetLastUpdatedByUserInfoOk returns a tuple with the LastUpdatedByUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetLastUpdatedByUserInfoOk() (*UserInfoSnapshot, bool) {
	if o == nil || IsNil(o.LastUpdatedByUserInfo) {
		return nil, false
	}
	return o.LastUpdatedByUserInfo, true
}

// HasLastUpdatedByUserInfo returns a boolean if a field has been set.
func (o *EventParams) HasLastUpdatedByUserInfo() bool {
	if o != nil && !IsNil(o.LastUpdatedByUserInfo) {
		return true
	}

	return false
}

// SetLastUpdatedByUserInfo gets a reference to the given UserInfoSnapshot and assigns it to the LastUpdatedByUserInfo field.
func (o *EventParams) SetLastUpdatedByUserInfo(v UserInfoSnapshot) {
	o.LastUpdatedByUserInfo = &v
}

// GetMessageConversations returns the MessageConversations field value if set, zero value otherwise.
func (o *EventParams) GetMessageConversations() []EnrollmentParamsMessageConversationsInner {
	if o == nil || IsNil(o.MessageConversations) {
		var ret []EnrollmentParamsMessageConversationsInner
		return ret
	}
	return o.MessageConversations
}

// GetMessageConversationsOk returns a tuple with the MessageConversations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetMessageConversationsOk() ([]EnrollmentParamsMessageConversationsInner, bool) {
	if o == nil || IsNil(o.MessageConversations) {
		return nil, false
	}
	return o.MessageConversations, true
}

// HasMessageConversations returns a boolean if a field has been set.
func (o *EventParams) HasMessageConversations() bool {
	if o != nil && !IsNil(o.MessageConversations) {
		return true
	}

	return false
}

// SetMessageConversations gets a reference to the given []EnrollmentParamsMessageConversationsInner and assigns it to the MessageConversations field.
func (o *EventParams) SetMessageConversations(v []EnrollmentParamsMessageConversationsInner) {
	o.MessageConversations = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EventParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EventParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EventParams) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *EventParams) GetNotes() []EnrollmentParamsTrackedEntityCommentsInner {
	if o == nil || IsNil(o.Notes) {
		var ret []EnrollmentParamsTrackedEntityCommentsInner
		return ret
	}
	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetNotesOk() ([]EnrollmentParamsTrackedEntityCommentsInner, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *EventParams) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []EnrollmentParamsTrackedEntityCommentsInner and assigns it to the Notes field.
func (o *EventParams) SetNotes(v []EnrollmentParamsTrackedEntityCommentsInner) {
	o.Notes = v
}

// GetOrganisationUnit returns the OrganisationUnit field value if set, zero value otherwise.
func (o *EventParams) GetOrganisationUnit() OrganisationUnitParams {
	if o == nil || IsNil(o.OrganisationUnit) {
		var ret OrganisationUnitParams
		return ret
	}
	return *o.OrganisationUnit
}

// GetOrganisationUnitOk returns a tuple with the OrganisationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetOrganisationUnitOk() (*OrganisationUnitParams, bool) {
	if o == nil || IsNil(o.OrganisationUnit) {
		return nil, false
	}
	return o.OrganisationUnit, true
}

// HasOrganisationUnit returns a boolean if a field has been set.
func (o *EventParams) HasOrganisationUnit() bool {
	if o != nil && !IsNil(o.OrganisationUnit) {
		return true
	}

	return false
}

// SetOrganisationUnit gets a reference to the given OrganisationUnitParams and assigns it to the OrganisationUnit field.
func (o *EventParams) SetOrganisationUnit(v OrganisationUnitParams) {
	o.OrganisationUnit = &v
}

// GetProgramStage returns the ProgramStage field value if set, zero value otherwise.
func (o *EventParams) GetProgramStage() ProgramStageParams {
	if o == nil || IsNil(o.ProgramStage) {
		var ret ProgramStageParams
		return ret
	}
	return *o.ProgramStage
}

// GetProgramStageOk returns a tuple with the ProgramStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetProgramStageOk() (*ProgramStageParams, bool) {
	if o == nil || IsNil(o.ProgramStage) {
		return nil, false
	}
	return o.ProgramStage, true
}

// HasProgramStage returns a boolean if a field has been set.
func (o *EventParams) HasProgramStage() bool {
	if o != nil && !IsNil(o.ProgramStage) {
		return true
	}

	return false
}

// SetProgramStage gets a reference to the given ProgramStageParams and assigns it to the ProgramStage field.
func (o *EventParams) SetProgramStage(v ProgramStageParams) {
	o.ProgramStage = &v
}

// GetRelationshipItems returns the RelationshipItems field value if set, zero value otherwise.
func (o *EventParams) GetRelationshipItems() []RelationshipItemParams {
	if o == nil || IsNil(o.RelationshipItems) {
		var ret []RelationshipItemParams
		return ret
	}
	return o.RelationshipItems
}

// GetRelationshipItemsOk returns a tuple with the RelationshipItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetRelationshipItemsOk() ([]RelationshipItemParams, bool) {
	if o == nil || IsNil(o.RelationshipItems) {
		return nil, false
	}
	return o.RelationshipItems, true
}

// HasRelationshipItems returns a boolean if a field has been set.
func (o *EventParams) HasRelationshipItems() bool {
	if o != nil && !IsNil(o.RelationshipItems) {
		return true
	}

	return false
}

// SetRelationshipItems gets a reference to the given []RelationshipItemParams and assigns it to the RelationshipItems field.
func (o *EventParams) SetRelationshipItems(v []RelationshipItemParams) {
	o.RelationshipItems = v
}

// GetScheduledDate returns the ScheduledDate field value if set, zero value otherwise.
func (o *EventParams) GetScheduledDate() time.Time {
	if o == nil || IsNil(o.ScheduledDate) {
		var ret time.Time
		return ret
	}
	return *o.ScheduledDate
}

// GetScheduledDateOk returns a tuple with the ScheduledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetScheduledDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ScheduledDate) {
		return nil, false
	}
	return o.ScheduledDate, true
}

// HasScheduledDate returns a boolean if a field has been set.
func (o *EventParams) HasScheduledDate() bool {
	if o != nil && !IsNil(o.ScheduledDate) {
		return true
	}

	return false
}

// SetScheduledDate gets a reference to the given time.Time and assigns it to the ScheduledDate field.
func (o *EventParams) SetScheduledDate(v time.Time) {
	o.ScheduledDate = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *EventParams) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *EventParams) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *EventParams) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetStatus returns the Status field value
func (o *EventParams) GetStatus() EventStatus {
	if o == nil {
		var ret EventStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *EventParams) GetStatusOk() (*EventStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *EventParams) SetStatus(v EventStatus) {
	o.Status = v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *EventParams) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *EventParams) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *EventParams) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *EventParams) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventParams) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *EventParams) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *EventParams) SetTranslations(v []Translation) {
	o.Translations = v
}

func (o EventParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssignedUser) {
		toSerialize["assignedUser"] = o.AssignedUser
	}
	if !IsNil(o.AttributeOptionCombo) {
		toSerialize["attributeOptionCombo"] = o.AttributeOptionCombo
	}
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !IsNil(o.CompletedBy) {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if !IsNil(o.CompletedDate) {
		toSerialize["completedDate"] = o.CompletedDate
	}
	if !IsNil(o.CreatableInSearchScope) {
		toSerialize["creatableInSearchScope"] = o.CreatableInSearchScope
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedAtClient) {
		toSerialize["createdAtClient"] = o.CreatedAtClient
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CreatedByUserInfo) {
		toSerialize["createdByUserInfo"] = o.CreatedByUserInfo
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Enrollment) {
		toSerialize["enrollment"] = o.Enrollment
	}
	if !IsNil(o.EventDataValues) {
		toSerialize["eventDataValues"] = o.EventDataValues
	}
	if !IsNil(o.EventDate) {
		toSerialize["eventDate"] = o.EventDate
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.Geometry) {
		toSerialize["geometry"] = o.Geometry
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedAtClient) {
		toSerialize["lastUpdatedAtClient"] = o.LastUpdatedAtClient
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LastUpdatedByUserInfo) {
		toSerialize["lastUpdatedByUserInfo"] = o.LastUpdatedByUserInfo
	}
	if !IsNil(o.MessageConversations) {
		toSerialize["messageConversations"] = o.MessageConversations
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.OrganisationUnit) {
		toSerialize["organisationUnit"] = o.OrganisationUnit
	}
	if !IsNil(o.ProgramStage) {
		toSerialize["programStage"] = o.ProgramStage
	}
	if !IsNil(o.RelationshipItems) {
		toSerialize["relationshipItems"] = o.RelationshipItems
	}
	if !IsNil(o.ScheduledDate) {
		toSerialize["scheduledDate"] = o.ScheduledDate
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

func (o *EventParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventParams := _EventParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventParams)

	if err != nil {
		return err
	}

	*o = EventParams(varEventParams)

	return err
}

type NullableEventParams struct {
	value *EventParams
	isSet bool
}

func (v NullableEventParams) Get() *EventParams {
	return v.value
}

func (v *NullableEventParams) Set(val *EventParams) {
	v.value = val
	v.isSet = true
}

func (v NullableEventParams) IsSet() bool {
	return v.isSet
}

func (v *NullableEventParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventParams(val *EventParams) *NullableEventParams {
	return &NullableEventParams{value: val, isSet: true}
}

func (v NullableEventParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
