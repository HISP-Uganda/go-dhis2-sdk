/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesValidationRuleGroup the model 'PropertyNamesValidationRuleGroup'
type PropertyNamesValidationRuleGroup string

// List of PropertyNames_ValidationRuleGroup
const (
	PROPERTYNAMESVALIDATIONRULEGROUP_ACCESS              PropertyNamesValidationRuleGroup = "access"
	PROPERTYNAMESVALIDATIONRULEGROUP_ATTRIBUTE_VALUES    PropertyNamesValidationRuleGroup = "attributeValues"
	PROPERTYNAMESVALIDATIONRULEGROUP_CODE                PropertyNamesValidationRuleGroup = "code"
	PROPERTYNAMESVALIDATIONRULEGROUP_CREATED             PropertyNamesValidationRuleGroup = "created"
	PROPERTYNAMESVALIDATIONRULEGROUP_CREATED_BY          PropertyNamesValidationRuleGroup = "createdBy"
	PROPERTYNAMESVALIDATIONRULEGROUP_DESCRIPTION         PropertyNamesValidationRuleGroup = "description"
	PROPERTYNAMESVALIDATIONRULEGROUP_DISPLAY_NAME        PropertyNamesValidationRuleGroup = "displayName"
	PROPERTYNAMESVALIDATIONRULEGROUP_EXTERNAL_ACCESS     PropertyNamesValidationRuleGroup = "externalAccess"
	PROPERTYNAMESVALIDATIONRULEGROUP_FAVORITE            PropertyNamesValidationRuleGroup = "favorite"
	PROPERTYNAMESVALIDATIONRULEGROUP_FAVORITES           PropertyNamesValidationRuleGroup = "favorites"
	PROPERTYNAMESVALIDATIONRULEGROUP_HREF                PropertyNamesValidationRuleGroup = "href"
	PROPERTYNAMESVALIDATIONRULEGROUP_ID                  PropertyNamesValidationRuleGroup = "id"
	PROPERTYNAMESVALIDATIONRULEGROUP_LAST_UPDATED        PropertyNamesValidationRuleGroup = "lastUpdated"
	PROPERTYNAMESVALIDATIONRULEGROUP_LAST_UPDATED_BY     PropertyNamesValidationRuleGroup = "lastUpdatedBy"
	PROPERTYNAMESVALIDATIONRULEGROUP_NAME                PropertyNamesValidationRuleGroup = "name"
	PROPERTYNAMESVALIDATIONRULEGROUP_PUBLIC_ACCESS       PropertyNamesValidationRuleGroup = "publicAccess"
	PROPERTYNAMESVALIDATIONRULEGROUP_SHARING             PropertyNamesValidationRuleGroup = "sharing"
	PROPERTYNAMESVALIDATIONRULEGROUP_TRANSLATIONS        PropertyNamesValidationRuleGroup = "translations"
	PROPERTYNAMESVALIDATIONRULEGROUP_USER                PropertyNamesValidationRuleGroup = "user"
	PROPERTYNAMESVALIDATIONRULEGROUP_USER_ACCESSES       PropertyNamesValidationRuleGroup = "userAccesses"
	PROPERTYNAMESVALIDATIONRULEGROUP_USER_GROUP_ACCESSES PropertyNamesValidationRuleGroup = "userGroupAccesses"
	PROPERTYNAMESVALIDATIONRULEGROUP_VALIDATION_RULES    PropertyNamesValidationRuleGroup = "validationRules"
)

// All allowed values of PropertyNamesValidationRuleGroup enum
var AllowedPropertyNamesValidationRuleGroupEnumValues = []PropertyNamesValidationRuleGroup{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"description",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"publicAccess",
	"sharing",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"validationRules",
}

func (v *PropertyNamesValidationRuleGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesValidationRuleGroup(value)
	for _, existing := range AllowedPropertyNamesValidationRuleGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesValidationRuleGroup", value)
}

// NewPropertyNamesValidationRuleGroupFromValue returns a pointer to a valid PropertyNamesValidationRuleGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesValidationRuleGroupFromValue(v string) (*PropertyNamesValidationRuleGroup, error) {
	ev := PropertyNamesValidationRuleGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesValidationRuleGroup: valid values are %v", v, AllowedPropertyNamesValidationRuleGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesValidationRuleGroup) IsValid() bool {
	for _, existing := range AllowedPropertyNamesValidationRuleGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_ValidationRuleGroup value
func (v PropertyNamesValidationRuleGroup) Ptr() *PropertyNamesValidationRuleGroup {
	return &v
}

type NullablePropertyNamesValidationRuleGroup struct {
	value *PropertyNamesValidationRuleGroup
	isSet bool
}

func (v NullablePropertyNamesValidationRuleGroup) Get() *PropertyNamesValidationRuleGroup {
	return v.value
}

func (v *NullablePropertyNamesValidationRuleGroup) Set(val *PropertyNamesValidationRuleGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesValidationRuleGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesValidationRuleGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesValidationRuleGroup(val *PropertyNamesValidationRuleGroup) *NullablePropertyNamesValidationRuleGroup {
	return &NullablePropertyNamesValidationRuleGroup{value: val, isSet: true}
}

func (v NullablePropertyNamesValidationRuleGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesValidationRuleGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
