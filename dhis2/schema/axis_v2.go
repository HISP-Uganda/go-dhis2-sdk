/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AxisV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AxisV2{}

// AxisV2 struct for AxisV2
type AxisV2 struct {
	BaseLine   *Line         `json:"baseLine,omitempty"`
	Decimals   *int32        `json:"decimals,omitempty"`
	Index      *int32        `json:"index,omitempty"`
	Label      *StyledObject `json:"label,omitempty"`
	MaxValue   *float64      `json:"maxValue,omitempty"`
	MinValue   *float64      `json:"minValue,omitempty"`
	Steps      *int32        `json:"steps,omitempty"`
	TargetLine *Line         `json:"targetLine,omitempty"`
	Title      *StyledObject `json:"title,omitempty"`
	Type       AxisType      `json:"type"`
}

type _AxisV2 AxisV2

// NewAxisV2 instantiates a new AxisV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAxisV2(type_ AxisType) *AxisV2 {
	this := AxisV2{}
	this.Type = type_
	return &this
}

// NewAxisV2WithDefaults instantiates a new AxisV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAxisV2WithDefaults() *AxisV2 {
	this := AxisV2{}
	return &this
}

// GetBaseLine returns the BaseLine field value if set, zero value otherwise.
func (o *AxisV2) GetBaseLine() Line {
	if o == nil || IsNil(o.BaseLine) {
		var ret Line
		return ret
	}
	return *o.BaseLine
}

// GetBaseLineOk returns a tuple with the BaseLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AxisV2) GetBaseLineOk() (*Line, bool) {
	if o == nil || IsNil(o.BaseLine) {
		return nil, false
	}
	return o.BaseLine, true
}

// HasBaseLine returns a boolean if a field has been set.
func (o *AxisV2) HasBaseLine() bool {
	if o != nil && !IsNil(o.BaseLine) {
		return true
	}

	return false
}

// SetBaseLine gets a reference to the given Line and assigns it to the BaseLine field.
func (o *AxisV2) SetBaseLine(v Line) {
	o.BaseLine = &v
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *AxisV2) GetDecimals() int32 {
	if o == nil || IsNil(o.Decimals) {
		var ret int32
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AxisV2) GetDecimalsOk() (*int32, bool) {
	if o == nil || IsNil(o.Decimals) {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *AxisV2) HasDecimals() bool {
	if o != nil && !IsNil(o.Decimals) {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int32 and assigns it to the Decimals field.
func (o *AxisV2) SetDecimals(v int32) {
	o.Decimals = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *AxisV2) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AxisV2) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *AxisV2) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *AxisV2) SetIndex(v int32) {
	o.Index = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *AxisV2) GetLabel() StyledObject {
	if o == nil || IsNil(o.Label) {
		var ret StyledObject
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AxisV2) GetLabelOk() (*StyledObject, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *AxisV2) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given StyledObject and assigns it to the Label field.
func (o *AxisV2) SetLabel(v StyledObject) {
	o.Label = &v
}

// GetMaxValue returns the MaxValue field value if set, zero value otherwise.
func (o *AxisV2) GetMaxValue() float64 {
	if o == nil || IsNil(o.MaxValue) {
		var ret float64
		return ret
	}
	return *o.MaxValue
}

// GetMaxValueOk returns a tuple with the MaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AxisV2) GetMaxValueOk() (*float64, bool) {
	if o == nil || IsNil(o.MaxValue) {
		return nil, false
	}
	return o.MaxValue, true
}

// HasMaxValue returns a boolean if a field has been set.
func (o *AxisV2) HasMaxValue() bool {
	if o != nil && !IsNil(o.MaxValue) {
		return true
	}

	return false
}

// SetMaxValue gets a reference to the given float64 and assigns it to the MaxValue field.
func (o *AxisV2) SetMaxValue(v float64) {
	o.MaxValue = &v
}

// GetMinValue returns the MinValue field value if set, zero value otherwise.
func (o *AxisV2) GetMinValue() float64 {
	if o == nil || IsNil(o.MinValue) {
		var ret float64
		return ret
	}
	return *o.MinValue
}

// GetMinValueOk returns a tuple with the MinValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AxisV2) GetMinValueOk() (*float64, bool) {
	if o == nil || IsNil(o.MinValue) {
		return nil, false
	}
	return o.MinValue, true
}

// HasMinValue returns a boolean if a field has been set.
func (o *AxisV2) HasMinValue() bool {
	if o != nil && !IsNil(o.MinValue) {
		return true
	}

	return false
}

// SetMinValue gets a reference to the given float64 and assigns it to the MinValue field.
func (o *AxisV2) SetMinValue(v float64) {
	o.MinValue = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *AxisV2) GetSteps() int32 {
	if o == nil || IsNil(o.Steps) {
		var ret int32
		return ret
	}
	return *o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AxisV2) GetStepsOk() (*int32, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *AxisV2) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given int32 and assigns it to the Steps field.
func (o *AxisV2) SetSteps(v int32) {
	o.Steps = &v
}

// GetTargetLine returns the TargetLine field value if set, zero value otherwise.
func (o *AxisV2) GetTargetLine() Line {
	if o == nil || IsNil(o.TargetLine) {
		var ret Line
		return ret
	}
	return *o.TargetLine
}

// GetTargetLineOk returns a tuple with the TargetLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AxisV2) GetTargetLineOk() (*Line, bool) {
	if o == nil || IsNil(o.TargetLine) {
		return nil, false
	}
	return o.TargetLine, true
}

// HasTargetLine returns a boolean if a field has been set.
func (o *AxisV2) HasTargetLine() bool {
	if o != nil && !IsNil(o.TargetLine) {
		return true
	}

	return false
}

// SetTargetLine gets a reference to the given Line and assigns it to the TargetLine field.
func (o *AxisV2) SetTargetLine(v Line) {
	o.TargetLine = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AxisV2) GetTitle() StyledObject {
	if o == nil || IsNil(o.Title) {
		var ret StyledObject
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AxisV2) GetTitleOk() (*StyledObject, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AxisV2) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given StyledObject and assigns it to the Title field.
func (o *AxisV2) SetTitle(v StyledObject) {
	o.Title = &v
}

// GetType returns the Type field value
func (o *AxisV2) GetType() AxisType {
	if o == nil {
		var ret AxisType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AxisV2) GetTypeOk() (*AxisType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AxisV2) SetType(v AxisType) {
	o.Type = v
}

func (o AxisV2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AxisV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseLine) {
		toSerialize["baseLine"] = o.BaseLine
	}
	if !IsNil(o.Decimals) {
		toSerialize["decimals"] = o.Decimals
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.MaxValue) {
		toSerialize["maxValue"] = o.MaxValue
	}
	if !IsNil(o.MinValue) {
		toSerialize["minValue"] = o.MinValue
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	if !IsNil(o.TargetLine) {
		toSerialize["targetLine"] = o.TargetLine
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *AxisV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAxisV2 := _AxisV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAxisV2)

	if err != nil {
		return err
	}

	*o = AxisV2(varAxisV2)

	return err
}

type NullableAxisV2 struct {
	value *AxisV2
	isSet bool
}

func (v NullableAxisV2) Get() *AxisV2 {
	return v.value
}

func (v *NullableAxisV2) Set(val *AxisV2) {
	v.value = val
	v.isSet = true
}

func (v NullableAxisV2) IsSet() bool {
	return v.isSet
}

func (v *NullableAxisV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAxisV2(val *AxisV2) *NullableAxisV2 {
	return &NullableAxisV2{value: val, isSet: true}
}

func (v NullableAxisV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAxisV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
