/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the MetadataProposal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataProposal{}

// MetadataProposal struct for MetadataProposal
type MetadataProposal struct {
	Change      *any                   `json:"change,omitempty"`
	Comment     *string                `json:"comment,omitempty"`
	Created     *time.Time             `json:"created,omitempty"`
	CreatedBy   *UserDto               `json:"createdBy,omitempty"`
	Finalised   *time.Time             `json:"finalised,omitempty"`
	FinalisedBy *UserDto               `json:"finalisedBy,omitempty"`
	Id          *string                `json:"id,omitempty"`
	Reason      *string                `json:"reason,omitempty"`
	Status      MetadataProposalStatus `json:"status"`
	Target      MetadataProposalTarget `json:"target"`
	TargetId    *string                `json:"targetId,omitempty"`
	Type        MetadataProposalType   `json:"type"`
}

type _MetadataProposal MetadataProposal

// NewMetadataProposal instantiates a new MetadataProposal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataProposal(status MetadataProposalStatus, target MetadataProposalTarget, type_ MetadataProposalType) *MetadataProposal {
	this := MetadataProposal{}
	this.Status = status
	this.Target = target
	this.Type = type_
	return &this
}

// NewMetadataProposalWithDefaults instantiates a new MetadataProposal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataProposalWithDefaults() *MetadataProposal {
	this := MetadataProposal{}
	return &this
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *MetadataProposal) GetChange() any {
	if o == nil || IsNil(o.Change) {
		var ret any
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetChangeOk() (*any, bool) {
	if o == nil || IsNil(o.Change) {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *MetadataProposal) HasChange() bool {
	if o != nil && !IsNil(o.Change) {
		return true
	}

	return false
}

// SetChange gets a reference to the given any and assigns it to the Change field.
func (o *MetadataProposal) SetChange(v any) {
	o.Change = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *MetadataProposal) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *MetadataProposal) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *MetadataProposal) SetComment(v string) {
	o.Comment = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *MetadataProposal) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *MetadataProposal) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *MetadataProposal) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *MetadataProposal) GetCreatedBy() UserDto {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserDto
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetCreatedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *MetadataProposal) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserDto and assigns it to the CreatedBy field.
func (o *MetadataProposal) SetCreatedBy(v UserDto) {
	o.CreatedBy = &v
}

// GetFinalised returns the Finalised field value if set, zero value otherwise.
func (o *MetadataProposal) GetFinalised() time.Time {
	if o == nil || IsNil(o.Finalised) {
		var ret time.Time
		return ret
	}
	return *o.Finalised
}

// GetFinalisedOk returns a tuple with the Finalised field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetFinalisedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Finalised) {
		return nil, false
	}
	return o.Finalised, true
}

// HasFinalised returns a boolean if a field has been set.
func (o *MetadataProposal) HasFinalised() bool {
	if o != nil && !IsNil(o.Finalised) {
		return true
	}

	return false
}

// SetFinalised gets a reference to the given time.Time and assigns it to the Finalised field.
func (o *MetadataProposal) SetFinalised(v time.Time) {
	o.Finalised = &v
}

// GetFinalisedBy returns the FinalisedBy field value if set, zero value otherwise.
func (o *MetadataProposal) GetFinalisedBy() UserDto {
	if o == nil || IsNil(o.FinalisedBy) {
		var ret UserDto
		return ret
	}
	return *o.FinalisedBy
}

// GetFinalisedByOk returns a tuple with the FinalisedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetFinalisedByOk() (*UserDto, bool) {
	if o == nil || IsNil(o.FinalisedBy) {
		return nil, false
	}
	return o.FinalisedBy, true
}

// HasFinalisedBy returns a boolean if a field has been set.
func (o *MetadataProposal) HasFinalisedBy() bool {
	if o != nil && !IsNil(o.FinalisedBy) {
		return true
	}

	return false
}

// SetFinalisedBy gets a reference to the given UserDto and assigns it to the FinalisedBy field.
func (o *MetadataProposal) SetFinalisedBy(v UserDto) {
	o.FinalisedBy = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MetadataProposal) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MetadataProposal) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MetadataProposal) SetId(v string) {
	o.Id = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *MetadataProposal) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *MetadataProposal) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *MetadataProposal) SetReason(v string) {
	o.Reason = &v
}

// GetStatus returns the Status field value
func (o *MetadataProposal) GetStatus() MetadataProposalStatus {
	if o == nil {
		var ret MetadataProposalStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetStatusOk() (*MetadataProposalStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *MetadataProposal) SetStatus(v MetadataProposalStatus) {
	o.Status = v
}

// GetTarget returns the Target field value
func (o *MetadataProposal) GetTarget() MetadataProposalTarget {
	if o == nil {
		var ret MetadataProposalTarget
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetTargetOk() (*MetadataProposalTarget, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *MetadataProposal) SetTarget(v MetadataProposalTarget) {
	o.Target = v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *MetadataProposal) GetTargetId() string {
	if o == nil || IsNil(o.TargetId) {
		var ret string
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetTargetIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *MetadataProposal) HasTargetId() bool {
	if o != nil && !IsNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given string and assigns it to the TargetId field.
func (o *MetadataProposal) SetTargetId(v string) {
	o.TargetId = &v
}

// GetType returns the Type field value
func (o *MetadataProposal) GetType() MetadataProposalType {
	if o == nil {
		var ret MetadataProposalType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MetadataProposal) GetTypeOk() (*MetadataProposalType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MetadataProposal) SetType(v MetadataProposalType) {
	o.Type = v
}

func (o MetadataProposal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataProposal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Change) {
		toSerialize["change"] = o.Change
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Finalised) {
		toSerialize["finalised"] = o.Finalised
	}
	if !IsNil(o.FinalisedBy) {
		toSerialize["finalisedBy"] = o.FinalisedBy
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	toSerialize["status"] = o.Status
	toSerialize["target"] = o.Target
	if !IsNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *MetadataProposal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"target",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetadataProposal := _MetadataProposal{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetadataProposal)

	if err != nil {
		return err
	}

	*o = MetadataProposal(varMetadataProposal)

	return err
}

type NullableMetadataProposal struct {
	value *MetadataProposal
	isSet bool
}

func (v NullableMetadataProposal) Get() *MetadataProposal {
	return v.value
}

func (v *NullableMetadataProposal) Set(val *MetadataProposal) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataProposal) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataProposal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataProposal(val *MetadataProposal) *NullableMetadataProposal {
	return &NullableMetadataProposal{value: val, isSet: true}
}

func (v NullableMetadataProposal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataProposal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
