/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// AnalyticsPeriodBoundaryType the model 'AnalyticsPeriodBoundaryType'
type AnalyticsPeriodBoundaryType string

// List of AnalyticsPeriodBoundaryType
const (
	ANALYTICSPERIODBOUNDARYTYPE_BEFORE_START_OF_REPORTING_PERIOD AnalyticsPeriodBoundaryType = "BEFORE_START_OF_REPORTING_PERIOD"
	ANALYTICSPERIODBOUNDARYTYPE_BEFORE_END_OF_REPORTING_PERIOD   AnalyticsPeriodBoundaryType = "BEFORE_END_OF_REPORTING_PERIOD"
	ANALYTICSPERIODBOUNDARYTYPE_AFTER_START_OF_REPORTING_PERIOD  AnalyticsPeriodBoundaryType = "AFTER_START_OF_REPORTING_PERIOD"
	ANALYTICSPERIODBOUNDARYTYPE_AFTER_END_OF_REPORTING_PERIOD    AnalyticsPeriodBoundaryType = "AFTER_END_OF_REPORTING_PERIOD"
)

// All allowed values of AnalyticsPeriodBoundaryType enum
var AllowedAnalyticsPeriodBoundaryTypeEnumValues = []AnalyticsPeriodBoundaryType{
	"BEFORE_START_OF_REPORTING_PERIOD",
	"BEFORE_END_OF_REPORTING_PERIOD",
	"AFTER_START_OF_REPORTING_PERIOD",
	"AFTER_END_OF_REPORTING_PERIOD",
}

func (v *AnalyticsPeriodBoundaryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsPeriodBoundaryType(value)
	for _, existing := range AllowedAnalyticsPeriodBoundaryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsPeriodBoundaryType", value)
}

// NewAnalyticsPeriodBoundaryTypeFromValue returns a pointer to a valid AnalyticsPeriodBoundaryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsPeriodBoundaryTypeFromValue(v string) (*AnalyticsPeriodBoundaryType, error) {
	ev := AnalyticsPeriodBoundaryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsPeriodBoundaryType: valid values are %v", v, AllowedAnalyticsPeriodBoundaryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsPeriodBoundaryType) IsValid() bool {
	for _, existing := range AllowedAnalyticsPeriodBoundaryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsPeriodBoundaryType value
func (v AnalyticsPeriodBoundaryType) Ptr() *AnalyticsPeriodBoundaryType {
	return &v
}

type NullableAnalyticsPeriodBoundaryType struct {
	value *AnalyticsPeriodBoundaryType
	isSet bool
}

func (v NullableAnalyticsPeriodBoundaryType) Get() *AnalyticsPeriodBoundaryType {
	return v.value
}

func (v *NullableAnalyticsPeriodBoundaryType) Set(val *AnalyticsPeriodBoundaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsPeriodBoundaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsPeriodBoundaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsPeriodBoundaryType(val *AnalyticsPeriodBoundaryType) *NullableAnalyticsPeriodBoundaryType {
	return &NullableAnalyticsPeriodBoundaryType{value: val, isSet: true}
}

func (v NullableAnalyticsPeriodBoundaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsPeriodBoundaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
