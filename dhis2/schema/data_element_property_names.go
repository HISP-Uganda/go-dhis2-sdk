/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// DataElementPropertyNames the model 'DataElementPropertyNames'
type DataElementPropertyNames string

// List of DataElementPropertyNames
const (
	DATAELEMENTPROPERTYNAMES_ACCESS              DataElementPropertyNames = "access"
	DATAELEMENTPROPERTYNAMES_AGGREGATION_LEVELS  DataElementPropertyNames = "aggregationLevels"
	DATAELEMENTPROPERTYNAMES_AGGREGATION_TYPE    DataElementPropertyNames = "aggregationType"
	DATAELEMENTPROPERTYNAMES_ATTRIBUTE_VALUES    DataElementPropertyNames = "attributeValues"
	DATAELEMENTPROPERTYNAMES_CATEGORY_COMBO      DataElementPropertyNames = "categoryCombo"
	DATAELEMENTPROPERTYNAMES_CODE                DataElementPropertyNames = "code"
	DATAELEMENTPROPERTYNAMES_COMMENT_OPTION_SET  DataElementPropertyNames = "commentOptionSet"
	DATAELEMENTPROPERTYNAMES_CREATED             DataElementPropertyNames = "created"
	DATAELEMENTPROPERTYNAMES_CREATED_BY          DataElementPropertyNames = "createdBy"
	DATAELEMENTPROPERTYNAMES_DATA_ELEMENT_GROUPS DataElementPropertyNames = "dataElementGroups"
	DATAELEMENTPROPERTYNAMES_DATA_SET_ELEMENTS   DataElementPropertyNames = "dataSetElements"
	DATAELEMENTPROPERTYNAMES_DESCRIPTION         DataElementPropertyNames = "description"
	DATAELEMENTPROPERTYNAMES_DIMENSION_ITEM      DataElementPropertyNames = "dimensionItem"
	DATAELEMENTPROPERTYNAMES_DISPLAY_DESCRIPTION DataElementPropertyNames = "displayDescription"
	DATAELEMENTPROPERTYNAMES_DISPLAY_FORM_NAME   DataElementPropertyNames = "displayFormName"
	DATAELEMENTPROPERTYNAMES_DISPLAY_NAME        DataElementPropertyNames = "displayName"
	DATAELEMENTPROPERTYNAMES_DISPLAY_SHORT_NAME  DataElementPropertyNames = "displayShortName"
	DATAELEMENTPROPERTYNAMES_DOMAIN_TYPE         DataElementPropertyNames = "domainType"
	DATAELEMENTPROPERTYNAMES_FAVORITE            DataElementPropertyNames = "favorite"
	DATAELEMENTPROPERTYNAMES_FAVORITES           DataElementPropertyNames = "favorites"
	DATAELEMENTPROPERTYNAMES_FIELD_MASK          DataElementPropertyNames = "fieldMask"
	DATAELEMENTPROPERTYNAMES_FORM_NAME           DataElementPropertyNames = "formName"
	DATAELEMENTPROPERTYNAMES_HREF                DataElementPropertyNames = "href"
	DATAELEMENTPROPERTYNAMES_ID                  DataElementPropertyNames = "id"
	DATAELEMENTPROPERTYNAMES_LAST_UPDATED        DataElementPropertyNames = "lastUpdated"
	DATAELEMENTPROPERTYNAMES_LAST_UPDATED_BY     DataElementPropertyNames = "lastUpdatedBy"
	DATAELEMENTPROPERTYNAMES_LEGEND_SET          DataElementPropertyNames = "legendSet"
	DATAELEMENTPROPERTYNAMES_LEGEND_SETS         DataElementPropertyNames = "legendSets"
	DATAELEMENTPROPERTYNAMES_NAME                DataElementPropertyNames = "name"
	DATAELEMENTPROPERTYNAMES_OPTION_SET          DataElementPropertyNames = "optionSet"
	DATAELEMENTPROPERTYNAMES_OPTION_SET_VALUE    DataElementPropertyNames = "optionSetValue"
	DATAELEMENTPROPERTYNAMES_QUERY_MODS          DataElementPropertyNames = "queryMods"
	DATAELEMENTPROPERTYNAMES_SHARING             DataElementPropertyNames = "sharing"
	DATAELEMENTPROPERTYNAMES_SHORT_NAME          DataElementPropertyNames = "shortName"
	DATAELEMENTPROPERTYNAMES_STYLE               DataElementPropertyNames = "style"
	DATAELEMENTPROPERTYNAMES_TRANSLATIONS        DataElementPropertyNames = "translations"
	DATAELEMENTPROPERTYNAMES_URL                 DataElementPropertyNames = "url"
	DATAELEMENTPROPERTYNAMES_VALUE_TYPE          DataElementPropertyNames = "valueType"
	DATAELEMENTPROPERTYNAMES_VALUE_TYPE_OPTIONS  DataElementPropertyNames = "valueTypeOptions"
	DATAELEMENTPROPERTYNAMES_ZERO_IS_SIGNIFICANT DataElementPropertyNames = "zeroIsSignificant"
)

// All allowed values of DataElementPropertyNames enum
var AllowedDataElementPropertyNamesEnumValues = []DataElementPropertyNames{
	"access",
	"aggregationLevels",
	"aggregationType",
	"attributeValues",
	"categoryCombo",
	"code",
	"commentOptionSet",
	"created",
	"createdBy",
	"dataElementGroups",
	"dataSetElements",
	"description",
	"dimensionItem",
	"displayDescription",
	"displayFormName",
	"displayName",
	"displayShortName",
	"domainType",
	"favorite",
	"favorites",
	"fieldMask",
	"formName",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"legendSet",
	"legendSets",
	"name",
	"optionSet",
	"optionSetValue",
	"queryMods",
	"sharing",
	"shortName",
	"style",
	"translations",
	"url",
	"valueType",
	"valueTypeOptions",
	"zeroIsSignificant",
}

func (v *DataElementPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataElementPropertyNames(value)
	for _, existing := range AllowedDataElementPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataElementPropertyNames", value)
}

// NewDataElementPropertyNamesFromValue returns a pointer to a valid DataElementPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataElementPropertyNamesFromValue(v string) (*DataElementPropertyNames, error) {
	ev := DataElementPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataElementPropertyNames: valid values are %v", v, AllowedDataElementPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataElementPropertyNames) IsValid() bool {
	for _, existing := range AllowedDataElementPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataElementPropertyNames value
func (v DataElementPropertyNames) Ptr() *DataElementPropertyNames {
	return &v
}

type NullableDataElementPropertyNames struct {
	value *DataElementPropertyNames
	isSet bool
}

func (v NullableDataElementPropertyNames) Get() *DataElementPropertyNames {
	return v.value
}

func (v *NullableDataElementPropertyNames) Set(val *DataElementPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableDataElementPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableDataElementPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataElementPropertyNames(val *DataElementPropertyNames) *NullableDataElementPropertyNames {
	return &NullableDataElementPropertyNames{value: val, isSet: true}
}

func (v NullableDataElementPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataElementPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
