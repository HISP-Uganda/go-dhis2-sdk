/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ProgramMessagePropertyNames the model 'ProgramMessagePropertyNames'
type ProgramMessagePropertyNames string

// List of ProgramMessagePropertyNames
const (
	PROGRAMMESSAGEPROPERTYNAMES_ACCESS                ProgramMessagePropertyNames = "access"
	PROGRAMMESSAGEPROPERTYNAMES_ATTRIBUTE_VALUES      ProgramMessagePropertyNames = "attributeValues"
	PROGRAMMESSAGEPROPERTYNAMES_CODE                  ProgramMessagePropertyNames = "code"
	PROGRAMMESSAGEPROPERTYNAMES_CREATED               ProgramMessagePropertyNames = "created"
	PROGRAMMESSAGEPROPERTYNAMES_CREATED_BY            ProgramMessagePropertyNames = "createdBy"
	PROGRAMMESSAGEPROPERTYNAMES_DELIVERY_CHANNELS     ProgramMessagePropertyNames = "deliveryChannels"
	PROGRAMMESSAGEPROPERTYNAMES_DISPLAY_NAME          ProgramMessagePropertyNames = "displayName"
	PROGRAMMESSAGEPROPERTYNAMES_ENROLLMENT            ProgramMessagePropertyNames = "enrollment"
	PROGRAMMESSAGEPROPERTYNAMES_EVENT                 ProgramMessagePropertyNames = "event"
	PROGRAMMESSAGEPROPERTYNAMES_FAVORITE              ProgramMessagePropertyNames = "favorite"
	PROGRAMMESSAGEPROPERTYNAMES_FAVORITES             ProgramMessagePropertyNames = "favorites"
	PROGRAMMESSAGEPROPERTYNAMES_HREF                  ProgramMessagePropertyNames = "href"
	PROGRAMMESSAGEPROPERTYNAMES_ID                    ProgramMessagePropertyNames = "id"
	PROGRAMMESSAGEPROPERTYNAMES_LAST_UPDATED          ProgramMessagePropertyNames = "lastUpdated"
	PROGRAMMESSAGEPROPERTYNAMES_LAST_UPDATED_BY       ProgramMessagePropertyNames = "lastUpdatedBy"
	PROGRAMMESSAGEPROPERTYNAMES_MESSAGE_STATUS        ProgramMessagePropertyNames = "messageStatus"
	PROGRAMMESSAGEPROPERTYNAMES_NAME                  ProgramMessagePropertyNames = "name"
	PROGRAMMESSAGEPROPERTYNAMES_NOTIFICATION_TEMPLATE ProgramMessagePropertyNames = "notificationTemplate"
	PROGRAMMESSAGEPROPERTYNAMES_PROCESSED_DATE        ProgramMessagePropertyNames = "processedDate"
	PROGRAMMESSAGEPROPERTYNAMES_RECIPIENTS            ProgramMessagePropertyNames = "recipients"
	PROGRAMMESSAGEPROPERTYNAMES_SHARING               ProgramMessagePropertyNames = "sharing"
	PROGRAMMESSAGEPROPERTYNAMES_STORE_COPY            ProgramMessagePropertyNames = "storeCopy"
	PROGRAMMESSAGEPROPERTYNAMES_SUBJECT               ProgramMessagePropertyNames = "subject"
	PROGRAMMESSAGEPROPERTYNAMES_TEXT                  ProgramMessagePropertyNames = "text"
	PROGRAMMESSAGEPROPERTYNAMES_TRANSLATIONS          ProgramMessagePropertyNames = "translations"
)

// All allowed values of ProgramMessagePropertyNames enum
var AllowedProgramMessagePropertyNamesEnumValues = []ProgramMessagePropertyNames{
	"access",
	"attributeValues",
	"code",
	"created",
	"createdBy",
	"deliveryChannels",
	"displayName",
	"enrollment",
	"event",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"messageStatus",
	"name",
	"notificationTemplate",
	"processedDate",
	"recipients",
	"sharing",
	"storeCopy",
	"subject",
	"text",
	"translations",
}

func (v *ProgramMessagePropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProgramMessagePropertyNames(value)
	for _, existing := range AllowedProgramMessagePropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProgramMessagePropertyNames", value)
}

// NewProgramMessagePropertyNamesFromValue returns a pointer to a valid ProgramMessagePropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProgramMessagePropertyNamesFromValue(v string) (*ProgramMessagePropertyNames, error) {
	ev := ProgramMessagePropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProgramMessagePropertyNames: valid values are %v", v, AllowedProgramMessagePropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProgramMessagePropertyNames) IsValid() bool {
	for _, existing := range AllowedProgramMessagePropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramMessagePropertyNames value
func (v ProgramMessagePropertyNames) Ptr() *ProgramMessagePropertyNames {
	return &v
}

type NullableProgramMessagePropertyNames struct {
	value *ProgramMessagePropertyNames
	isSet bool
}

func (v NullableProgramMessagePropertyNames) Get() *ProgramMessagePropertyNames {
	return v.value
}

func (v *NullableProgramMessagePropertyNames) Set(val *ProgramMessagePropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramMessagePropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramMessagePropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramMessagePropertyNames(val *ProgramMessagePropertyNames) *NullableProgramMessagePropertyNames {
	return &NullableProgramMessagePropertyNames{value: val, isSet: true}
}

func (v NullableProgramMessagePropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramMessagePropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
