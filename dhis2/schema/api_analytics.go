/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
	"time"
)

// AnalyticsAPIService AnalyticsAPI service
type AnalyticsAPIService service

type ApiAnalyticsGetCsvRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) AggregationType(aggregationType string) ApiAnalyticsGetCsvRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetCsvRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) Columns(columns string) ApiAnalyticsGetCsvRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetCsvRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) Dimension(dimension []string) ApiAnalyticsGetCsvRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetCsvRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) EndDate(endDate time.Time) ApiAnalyticsGetCsvRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) Filter(filter []string) ApiAnalyticsGetCsvRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetCsvRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetCsvRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetCsvRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetCsvRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetCsvRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetCsvRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetCsvRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetCsvRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) Order(order string) ApiAnalyticsGetCsvRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetCsvRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetCsvRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetCsvRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetCsvRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetCsvRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetCsvRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) Rows(rows string) ApiAnalyticsGetCsvRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetCsvRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) SkipData(skipData bool) ApiAnalyticsGetCsvRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetCsvRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetCsvRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) StartDate(startDate time.Time) ApiAnalyticsGetCsvRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) TimeField(timeField string) ApiAnalyticsGetCsvRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetCsvRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetCsvRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetCsvRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetCsvRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnalyticsGetCsvExecute(r)
}

/*
AnalyticsGetCsv Method for AnalyticsGetCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetCsvRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetCsv(ctx context.Context) ApiAnalyticsGetCsvRequest {
	return ApiAnalyticsGetCsvRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) AnalyticsGetCsvExecute(r ApiAnalyticsGetCsvRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetCsv")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics.csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAnalyticsGetDataValueSetCsvRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) AggregationType(aggregationType string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) Columns(columns string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetDataValueSetCsvRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) Dimension(dimension []string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) EndDate(endDate time.Time) ApiAnalyticsGetDataValueSetCsvRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) Filter(filter []string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetDataValueSetCsvRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetDataValueSetCsvRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetDataValueSetCsvRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetDataValueSetCsvRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetDataValueSetCsvRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetDataValueSetCsvRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) Order(order string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetDataValueSetCsvRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) Rows(rows string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetDataValueSetCsvRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) SkipData(skipData bool) ApiAnalyticsGetDataValueSetCsvRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetDataValueSetCsvRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetDataValueSetCsvRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) StartDate(startDate time.Time) ApiAnalyticsGetDataValueSetCsvRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) TimeField(timeField string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetCsvRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetDataValueSetCsvRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetDataValueSetCsvRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnalyticsGetDataValueSetCsvExecute(r)
}

/*
AnalyticsGetDataValueSetCsv Method for AnalyticsGetDataValueSetCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetDataValueSetCsvRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetDataValueSetCsv(ctx context.Context) ApiAnalyticsGetDataValueSetCsvRequest {
	return ApiAnalyticsGetDataValueSetCsvRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) AnalyticsGetDataValueSetCsvExecute(r ApiAnalyticsGetDataValueSetCsvRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetDataValueSetCsv")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/dataValueSet.csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAnalyticsGetDataValueSetJsonRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) AggregationType(aggregationType string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) Columns(columns string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetDataValueSetJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) Dimension(dimension []string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) EndDate(endDate time.Time) ApiAnalyticsGetDataValueSetJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) Filter(filter []string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetDataValueSetJsonRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetDataValueSetJsonRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetDataValueSetJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetDataValueSetJsonRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetDataValueSetJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetDataValueSetJsonRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) Order(order string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetDataValueSetJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) Rows(rows string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetDataValueSetJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) SkipData(skipData bool) ApiAnalyticsGetDataValueSetJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetDataValueSetJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetDataValueSetJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) StartDate(startDate time.Time) ApiAnalyticsGetDataValueSetJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) TimeField(timeField string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetJsonRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetDataValueSetJsonRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetDataValueSetJsonRequest) Execute() (*DataValueSet, *http.Response, error) {
	return r.ApiService.AnalyticsGetDataValueSetJsonExecute(r)
}

/*
AnalyticsGetDataValueSetJson Method for AnalyticsGetDataValueSetJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetDataValueSetJsonRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetDataValueSetJson(ctx context.Context) ApiAnalyticsGetDataValueSetJsonRequest {
	return ApiAnalyticsGetDataValueSetJsonRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DataValueSet
func (a *AnalyticsAPIService) AnalyticsGetDataValueSetJsonExecute(r ApiAnalyticsGetDataValueSetJsonRequest) (*DataValueSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DataValueSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetDataValueSetJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/dataValueSet.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsGetDataValueSetXmlRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) AggregationType(aggregationType string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) Columns(columns string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetDataValueSetXmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) Dimension(dimension []string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) EndDate(endDate time.Time) ApiAnalyticsGetDataValueSetXmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) Filter(filter []string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetDataValueSetXmlRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetDataValueSetXmlRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetDataValueSetXmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetDataValueSetXmlRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetDataValueSetXmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetDataValueSetXmlRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) Order(order string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetDataValueSetXmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) Rows(rows string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetDataValueSetXmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) SkipData(skipData bool) ApiAnalyticsGetDataValueSetXmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetDataValueSetXmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetDataValueSetXmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) StartDate(startDate time.Time) ApiAnalyticsGetDataValueSetXmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) TimeField(timeField string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDataValueSetXmlRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetDataValueSetXmlRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetDataValueSetXmlRequest) Execute() (*DataValueSet, *http.Response, error) {
	return r.ApiService.AnalyticsGetDataValueSetXmlExecute(r)
}

/*
AnalyticsGetDataValueSetXml Method for AnalyticsGetDataValueSetXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetDataValueSetXmlRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetDataValueSetXml(ctx context.Context) ApiAnalyticsGetDataValueSetXmlRequest {
	return ApiAnalyticsGetDataValueSetXmlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DataValueSet
func (a *AnalyticsAPIService) AnalyticsGetDataValueSetXmlExecute(r ApiAnalyticsGetDataValueSetXmlRequest) (*DataValueSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DataValueSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetDataValueSetXml")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/dataValueSet.xml"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsGetDebugSqlRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) AggregationType(aggregationType string) ApiAnalyticsGetDebugSqlRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetDebugSqlRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) Columns(columns string) ApiAnalyticsGetDebugSqlRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetDebugSqlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) Dimension(dimension []string) ApiAnalyticsGetDebugSqlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetDebugSqlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) EndDate(endDate time.Time) ApiAnalyticsGetDebugSqlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) Filter(filter []string) ApiAnalyticsGetDebugSqlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetDebugSqlRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetDebugSqlRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetDebugSqlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetDebugSqlRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetDebugSqlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetDebugSqlRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetDebugSqlRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetDebugSqlRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) Order(order string) ApiAnalyticsGetDebugSqlRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetDebugSqlRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetDebugSqlRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetDebugSqlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetDebugSqlRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetDebugSqlRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetDebugSqlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) Rows(rows string) ApiAnalyticsGetDebugSqlRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetDebugSqlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) SkipData(skipData bool) ApiAnalyticsGetDebugSqlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetDebugSqlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetDebugSqlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) StartDate(startDate time.Time) ApiAnalyticsGetDebugSqlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) TimeField(timeField string) ApiAnalyticsGetDebugSqlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetDebugSqlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetDebugSqlRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetDebugSqlRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetDebugSqlRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.AnalyticsGetDebugSqlExecute(r)
}

/*
AnalyticsGetDebugSql Method for AnalyticsGetDebugSql

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetDebugSqlRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetDebugSql(ctx context.Context) ApiAnalyticsGetDebugSqlRequest {
	return ApiAnalyticsGetDebugSqlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *AnalyticsAPIService) AnalyticsGetDebugSqlExecute(r ApiAnalyticsGetDebugSqlRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetDebugSql")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/debug/sql"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html", "text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsGetExplainJsonRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) AggregationType(aggregationType string) ApiAnalyticsGetExplainJsonRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetExplainJsonRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) Columns(columns string) ApiAnalyticsGetExplainJsonRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetExplainJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) Dimension(dimension []string) ApiAnalyticsGetExplainJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetExplainJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) EndDate(endDate time.Time) ApiAnalyticsGetExplainJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) Filter(filter []string) ApiAnalyticsGetExplainJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetExplainJsonRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetExplainJsonRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetExplainJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetExplainJsonRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetExplainJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetExplainJsonRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetExplainJsonRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetExplainJsonRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) Order(order string) ApiAnalyticsGetExplainJsonRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetExplainJsonRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetExplainJsonRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetExplainJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetExplainJsonRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetExplainJsonRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetExplainJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) Rows(rows string) ApiAnalyticsGetExplainJsonRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetExplainJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) SkipData(skipData bool) ApiAnalyticsGetExplainJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetExplainJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetExplainJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) StartDate(startDate time.Time) ApiAnalyticsGetExplainJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) TimeField(timeField string) ApiAnalyticsGetExplainJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetExplainJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetExplainJsonRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetExplainJsonRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetExplainJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.AnalyticsGetExplainJsonExecute(r)
}

/*
AnalyticsGetExplainJson Method for AnalyticsGetExplainJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetExplainJsonRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetExplainJson(ctx context.Context) ApiAnalyticsGetExplainJsonRequest {
	return ApiAnalyticsGetExplainJsonRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) AnalyticsGetExplainJsonExecute(r ApiAnalyticsGetExplainJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetExplainJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/explain"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsGetHtmlRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) AggregationType(aggregationType string) ApiAnalyticsGetHtmlRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetHtmlRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) Columns(columns string) ApiAnalyticsGetHtmlRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetHtmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) Dimension(dimension []string) ApiAnalyticsGetHtmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetHtmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) EndDate(endDate time.Time) ApiAnalyticsGetHtmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) Filter(filter []string) ApiAnalyticsGetHtmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetHtmlRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetHtmlRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetHtmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetHtmlRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetHtmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetHtmlRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetHtmlRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetHtmlRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) Order(order string) ApiAnalyticsGetHtmlRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetHtmlRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetHtmlRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetHtmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetHtmlRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetHtmlRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetHtmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) Rows(rows string) ApiAnalyticsGetHtmlRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetHtmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) SkipData(skipData bool) ApiAnalyticsGetHtmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetHtmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetHtmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) StartDate(startDate time.Time) ApiAnalyticsGetHtmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) TimeField(timeField string) ApiAnalyticsGetHtmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetHtmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetHtmlRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetHtmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnalyticsGetHtmlExecute(r)
}

/*
AnalyticsGetHtml Method for AnalyticsGetHtml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetHtmlRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetHtml(ctx context.Context) ApiAnalyticsGetHtmlRequest {
	return ApiAnalyticsGetHtmlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) AnalyticsGetHtmlExecute(r ApiAnalyticsGetHtmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetHtml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics.html"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAnalyticsGetHtmlCssRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) AggregationType(aggregationType string) ApiAnalyticsGetHtmlCssRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetHtmlCssRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) Columns(columns string) ApiAnalyticsGetHtmlCssRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetHtmlCssRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) Dimension(dimension []string) ApiAnalyticsGetHtmlCssRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetHtmlCssRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) EndDate(endDate time.Time) ApiAnalyticsGetHtmlCssRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) Filter(filter []string) ApiAnalyticsGetHtmlCssRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetHtmlCssRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetHtmlCssRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetHtmlCssRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetHtmlCssRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetHtmlCssRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetHtmlCssRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetHtmlCssRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetHtmlCssRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) Order(order string) ApiAnalyticsGetHtmlCssRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetHtmlCssRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetHtmlCssRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetHtmlCssRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetHtmlCssRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetHtmlCssRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetHtmlCssRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) Rows(rows string) ApiAnalyticsGetHtmlCssRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetHtmlCssRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) SkipData(skipData bool) ApiAnalyticsGetHtmlCssRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetHtmlCssRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetHtmlCssRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) StartDate(startDate time.Time) ApiAnalyticsGetHtmlCssRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) TimeField(timeField string) ApiAnalyticsGetHtmlCssRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetHtmlCssRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetHtmlCssRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetHtmlCssRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetHtmlCssRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnalyticsGetHtmlCssExecute(r)
}

/*
AnalyticsGetHtmlCss Method for AnalyticsGetHtmlCss

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetHtmlCssRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetHtmlCss(ctx context.Context) ApiAnalyticsGetHtmlCssRequest {
	return ApiAnalyticsGetHtmlCssRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) AnalyticsGetHtmlCssExecute(r ApiAnalyticsGetHtmlCssRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetHtmlCss")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics.html+css"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAnalyticsGetJrxmlRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) AggregationType(aggregationType string) ApiAnalyticsGetJrxmlRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetJrxmlRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) Columns(columns string) ApiAnalyticsGetJrxmlRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetJrxmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) Dimension(dimension []string) ApiAnalyticsGetJrxmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetJrxmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) EndDate(endDate time.Time) ApiAnalyticsGetJrxmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) Filter(filter []string) ApiAnalyticsGetJrxmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetJrxmlRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetJrxmlRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetJrxmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetJrxmlRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetJrxmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetJrxmlRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetJrxmlRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetJrxmlRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) Order(order string) ApiAnalyticsGetJrxmlRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetJrxmlRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetJrxmlRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetJrxmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetJrxmlRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetJrxmlRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetJrxmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) Rows(rows string) ApiAnalyticsGetJrxmlRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetJrxmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) SkipData(skipData bool) ApiAnalyticsGetJrxmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetJrxmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetJrxmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) StartDate(startDate time.Time) ApiAnalyticsGetJrxmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) TimeField(timeField string) ApiAnalyticsGetJrxmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetJrxmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJrxmlRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetJrxmlRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetJrxmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnalyticsGetJrxmlExecute(r)
}

/*
AnalyticsGetJrxml Method for AnalyticsGetJrxml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetJrxmlRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetJrxml(ctx context.Context) ApiAnalyticsGetJrxmlRequest {
	return ApiAnalyticsGetJrxmlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) AnalyticsGetJrxmlExecute(r ApiAnalyticsGetJrxmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetJrxml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics.jrxml"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAnalyticsGetJsonRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) AggregationType(aggregationType string) ApiAnalyticsGetJsonRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetJsonRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) Columns(columns string) ApiAnalyticsGetJsonRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) Dimension(dimension []string) ApiAnalyticsGetJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) EndDate(endDate time.Time) ApiAnalyticsGetJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) Filter(filter []string) ApiAnalyticsGetJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetJsonRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetJsonRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetJsonRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetJsonRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetJsonRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetJsonRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) Order(order string) ApiAnalyticsGetJsonRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetJsonRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetJsonRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetJsonRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetJsonRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) Rows(rows string) ApiAnalyticsGetJsonRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) SkipData(skipData bool) ApiAnalyticsGetJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) StartDate(startDate time.Time) ApiAnalyticsGetJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) TimeField(timeField string) ApiAnalyticsGetJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetJsonRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetJsonRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.AnalyticsGetJsonExecute(r)
}

/*
AnalyticsGetJson Method for AnalyticsGetJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetJsonRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetJson(ctx context.Context) ApiAnalyticsGetJsonRequest {
	return ApiAnalyticsGetJsonRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) AnalyticsGetJsonExecute(r ApiAnalyticsGetJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsGetRawDataCsvRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) AggregationType(aggregationType string) ApiAnalyticsGetRawDataCsvRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetRawDataCsvRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) Columns(columns string) ApiAnalyticsGetRawDataCsvRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetRawDataCsvRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) Dimension(dimension []string) ApiAnalyticsGetRawDataCsvRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetRawDataCsvRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) EndDate(endDate time.Time) ApiAnalyticsGetRawDataCsvRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) Filter(filter []string) ApiAnalyticsGetRawDataCsvRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetRawDataCsvRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetRawDataCsvRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetRawDataCsvRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetRawDataCsvRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetRawDataCsvRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetRawDataCsvRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetRawDataCsvRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetRawDataCsvRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) Order(order string) ApiAnalyticsGetRawDataCsvRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetRawDataCsvRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetRawDataCsvRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetRawDataCsvRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetRawDataCsvRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetRawDataCsvRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetRawDataCsvRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) Rows(rows string) ApiAnalyticsGetRawDataCsvRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetRawDataCsvRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) SkipData(skipData bool) ApiAnalyticsGetRawDataCsvRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetRawDataCsvRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetRawDataCsvRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) StartDate(startDate time.Time) ApiAnalyticsGetRawDataCsvRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) TimeField(timeField string) ApiAnalyticsGetRawDataCsvRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetRawDataCsvRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataCsvRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetRawDataCsvRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetRawDataCsvRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnalyticsGetRawDataCsvExecute(r)
}

/*
AnalyticsGetRawDataCsv Method for AnalyticsGetRawDataCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetRawDataCsvRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetRawDataCsv(ctx context.Context) ApiAnalyticsGetRawDataCsvRequest {
	return ApiAnalyticsGetRawDataCsvRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) AnalyticsGetRawDataCsvExecute(r ApiAnalyticsGetRawDataCsvRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetRawDataCsv")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/rawData.csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAnalyticsGetRawDataJsonRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) AggregationType(aggregationType string) ApiAnalyticsGetRawDataJsonRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetRawDataJsonRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) Columns(columns string) ApiAnalyticsGetRawDataJsonRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetRawDataJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) Dimension(dimension []string) ApiAnalyticsGetRawDataJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetRawDataJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) EndDate(endDate time.Time) ApiAnalyticsGetRawDataJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) Filter(filter []string) ApiAnalyticsGetRawDataJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetRawDataJsonRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetRawDataJsonRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetRawDataJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetRawDataJsonRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetRawDataJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetRawDataJsonRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetRawDataJsonRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetRawDataJsonRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) Order(order string) ApiAnalyticsGetRawDataJsonRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetRawDataJsonRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetRawDataJsonRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetRawDataJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetRawDataJsonRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetRawDataJsonRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetRawDataJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) Rows(rows string) ApiAnalyticsGetRawDataJsonRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetRawDataJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) SkipData(skipData bool) ApiAnalyticsGetRawDataJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetRawDataJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetRawDataJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) StartDate(startDate time.Time) ApiAnalyticsGetRawDataJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) TimeField(timeField string) ApiAnalyticsGetRawDataJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetRawDataJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetRawDataJsonRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetRawDataJsonRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetRawDataJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.AnalyticsGetRawDataJsonExecute(r)
}

/*
AnalyticsGetRawDataJson Method for AnalyticsGetRawDataJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetRawDataJsonRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetRawDataJson(ctx context.Context) ApiAnalyticsGetRawDataJsonRequest {
	return ApiAnalyticsGetRawDataJsonRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) AnalyticsGetRawDataJsonExecute(r ApiAnalyticsGetRawDataJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetRawDataJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/rawData.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsGetTableTypesRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
}

func (r ApiAnalyticsGetTableTypesRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.AnalyticsGetTableTypesExecute(r)
}

/*
AnalyticsGetTableTypes Method for AnalyticsGetTableTypes

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetTableTypesRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetTableTypes(ctx context.Context) ApiAnalyticsGetTableTypesRequest {
	return ApiAnalyticsGetTableTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []string
func (a *AnalyticsAPIService) AnalyticsGetTableTypesExecute(r ApiAnalyticsGetTableTypesRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetTableTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/tableTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsGetXlsRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) AggregationType(aggregationType string) ApiAnalyticsGetXlsRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetXlsRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) Columns(columns string) ApiAnalyticsGetXlsRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetXlsRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) Dimension(dimension []string) ApiAnalyticsGetXlsRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetXlsRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) EndDate(endDate time.Time) ApiAnalyticsGetXlsRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) Filter(filter []string) ApiAnalyticsGetXlsRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetXlsRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetXlsRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetXlsRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetXlsRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetXlsRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetXlsRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetXlsRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetXlsRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) Order(order string) ApiAnalyticsGetXlsRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetXlsRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetXlsRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetXlsRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetXlsRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetXlsRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetXlsRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) Rows(rows string) ApiAnalyticsGetXlsRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetXlsRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) SkipData(skipData bool) ApiAnalyticsGetXlsRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetXlsRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetXlsRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) StartDate(startDate time.Time) ApiAnalyticsGetXlsRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) TimeField(timeField string) ApiAnalyticsGetXlsRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetXlsRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXlsRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetXlsRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetXlsRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnalyticsGetXlsExecute(r)
}

/*
AnalyticsGetXls Method for AnalyticsGetXls

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetXlsRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetXls(ctx context.Context) ApiAnalyticsGetXlsRequest {
	return ApiAnalyticsGetXlsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) AnalyticsGetXlsExecute(r ApiAnalyticsGetXlsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetXls")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics.xls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAnalyticsGetXmlRequest struct {
	ctx                           context.Context
	ApiService                    *AnalyticsAPIService
	aggregationType               *string
	approvalLevel                 *string
	columns                       *string
	completedOnly                 *bool
	dimension                     *[]string
	displayProperty               *string
	endDate                       *time.Time
	filter                        *[]string
	hideEmptyColumns              *bool
	hideEmptyRows                 *bool
	hierarchyMeta                 *bool
	ignoreLimit                   *bool
	includeMetadataDetails        *bool
	includeNumDen                 *bool
	inputIdScheme                 *string
	measureCriteria               *string
	order                         *string
	orgUnitField                  *string
	outputDataElementIdScheme     *string
	outputIdScheme                *string
	outputOrgUnitIdScheme         *string
	preAggregationMeasureCriteria *string
	relativePeriodDate            *time.Time
	rows                          *string
	showHierarchy                 *bool
	skipData                      *bool
	skipMeta                      *bool
	skipRounding                  *bool
	startDate                     *time.Time
	timeField                     *string
	userOrgUnit                   *string
	userOrgUnitType               *string
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) AggregationType(aggregationType string) ApiAnalyticsGetXmlRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) ApprovalLevel(approvalLevel string) ApiAnalyticsGetXmlRequest {
	r.approvalLevel = &approvalLevel
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) Columns(columns string) ApiAnalyticsGetXmlRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) CompletedOnly(completedOnly bool) ApiAnalyticsGetXmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) Dimension(dimension []string) ApiAnalyticsGetXmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) DisplayProperty(displayProperty string) ApiAnalyticsGetXmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) EndDate(endDate time.Time) ApiAnalyticsGetXmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) Filter(filter []string) ApiAnalyticsGetXmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) HideEmptyColumns(hideEmptyColumns bool) ApiAnalyticsGetXmlRequest {
	r.hideEmptyColumns = &hideEmptyColumns
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) HideEmptyRows(hideEmptyRows bool) ApiAnalyticsGetXmlRequest {
	r.hideEmptyRows = &hideEmptyRows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) HierarchyMeta(hierarchyMeta bool) ApiAnalyticsGetXmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) IgnoreLimit(ignoreLimit bool) ApiAnalyticsGetXmlRequest {
	r.ignoreLimit = &ignoreLimit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiAnalyticsGetXmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) IncludeNumDen(includeNumDen bool) ApiAnalyticsGetXmlRequest {
	r.includeNumDen = &includeNumDen
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) InputIdScheme(inputIdScheme string) ApiAnalyticsGetXmlRequest {
	r.inputIdScheme = &inputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) MeasureCriteria(measureCriteria string) ApiAnalyticsGetXmlRequest {
	r.measureCriteria = &measureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) Order(order string) ApiAnalyticsGetXmlRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) OrgUnitField(orgUnitField string) ApiAnalyticsGetXmlRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) OutputDataElementIdScheme(outputDataElementIdScheme string) ApiAnalyticsGetXmlRequest {
	r.outputDataElementIdScheme = &outputDataElementIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) OutputIdScheme(outputIdScheme string) ApiAnalyticsGetXmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) OutputOrgUnitIdScheme(outputOrgUnitIdScheme string) ApiAnalyticsGetXmlRequest {
	r.outputOrgUnitIdScheme = &outputOrgUnitIdScheme
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) PreAggregationMeasureCriteria(preAggregationMeasureCriteria string) ApiAnalyticsGetXmlRequest {
	r.preAggregationMeasureCriteria = &preAggregationMeasureCriteria
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiAnalyticsGetXmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) Rows(rows string) ApiAnalyticsGetXmlRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) ShowHierarchy(showHierarchy bool) ApiAnalyticsGetXmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) SkipData(skipData bool) ApiAnalyticsGetXmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) SkipMeta(skipMeta bool) ApiAnalyticsGetXmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) SkipRounding(skipRounding bool) ApiAnalyticsGetXmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) StartDate(startDate time.Time) ApiAnalyticsGetXmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) TimeField(timeField string) ApiAnalyticsGetXmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) UserOrgUnit(userOrgUnit string) ApiAnalyticsGetXmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiAnalyticsGetXmlRequest) UserOrgUnitType(userOrgUnitType string) ApiAnalyticsGetXmlRequest {
	r.userOrgUnitType = &userOrgUnitType
	return r
}

func (r ApiAnalyticsGetXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnalyticsGetXmlExecute(r)
}

/*
AnalyticsGetXml Method for AnalyticsGetXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsGetXmlRequest
*/
func (a *AnalyticsAPIService) AnalyticsGetXml(ctx context.Context) ApiAnalyticsGetXmlRequest {
	return ApiAnalyticsGetXmlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) AnalyticsGetXmlExecute(r ApiAnalyticsGetXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsGetXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics.xml"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.approvalLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalLevel", r.approvalLevel, "")
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.hideEmptyColumns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyColumns", r.hideEmptyColumns, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyColumns = &defaultValue
	}
	if r.hideEmptyRows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hideEmptyRows", r.hideEmptyRows, "")
	} else {
		var defaultValue bool = false
		r.hideEmptyRows = &defaultValue
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.ignoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLimit", r.ignoreLimit, "")
	} else {
		var defaultValue bool = false
		r.ignoreLimit = &defaultValue
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.includeNumDen != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNumDen", r.includeNumDen, "")
	} else {
		var defaultValue bool = false
		r.includeNumDen = &defaultValue
	}
	if r.inputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputIdScheme", r.inputIdScheme, "")
	}
	if r.measureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureCriteria", r.measureCriteria, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.outputDataElementIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputDataElementIdScheme", r.outputDataElementIdScheme, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputOrgUnitIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputOrgUnitIdScheme", r.outputOrgUnitIdScheme, "")
	}
	if r.preAggregationMeasureCriteria != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preAggregationMeasureCriteria", r.preAggregationMeasureCriteria, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.userOrgUnitType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnitType", r.userOrgUnitType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookAddCollectionItemRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	itemId     string
	property   string
	uid        string
}

func (r ApiAnalyticsTableHookAddCollectionItemRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookAddCollectionItemExecute(r)
}

/*
AnalyticsTableHookAddCollectionItem Method for AnalyticsTableHookAddCollectionItem

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId [no description yet]
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiAnalyticsTableHookAddCollectionItemRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookAddCollectionItem(ctx context.Context, itemId string, property string, uid string) ApiAnalyticsTableHookAddCollectionItemRequest {
	return ApiAnalyticsTableHookAddCollectionItemRequest{
		ApiService: a,
		ctx:        ctx,
		itemId:     itemId,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookAddCollectionItemExecute(r ApiAnalyticsTableHookAddCollectionItemRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookAddCollectionItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/{property}/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXmlRequest struct {
	ctx                 context.Context
	ApiService          *AnalyticsAPIService
	property            string
	uid                 string
	identifiableObjects *IdentifiableObjects
}

// [no description yet]
func (r ApiAnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXmlRequest) IdentifiableObjects(identifiableObjects IdentifiableObjects) ApiAnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXmlRequest {
	r.identifiableObjects = &identifiableObjects
	return r
}

func (r ApiAnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXmlRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXmlExecute(r)
}

/*
AnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXml Method for AnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiAnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXmlRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXml(ctx context.Context, property string, uid string) ApiAnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXmlRequest {
	return ApiAnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXmlRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXmlExecute(r ApiAnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXmlRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookAddCollectionItemsJsonaddCollectionItemsXml")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/{property}"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identifiableObjects
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookBulkSharingRequest struct {
	ctx                context.Context
	ApiService         *AnalyticsAPIService
	atomic             *bool
	atomicMode         *string
	flushMode          *string
	identifier         *string
	importMode         *string
	importReportMode   *string
	importStrategy     *string
	mergeMode          *string
	metadataSyncImport *bool
	page               *int32
	pageSize           *int32
	paging             *bool
	preheatMode        *string
	rootJunction       *string
	skipSharing        *bool
	skipTranslation    *bool
	skipValidation     *bool
	userOverrideMode   *string
	bulkJsonPatch      *BulkJsonPatch
}

// [no description yet]
func (r ApiAnalyticsTableHookBulkSharingRequest) Atomic(atomic bool) ApiAnalyticsTableHookBulkSharingRequest {
	r.atomic = &atomic
	return r
}

// Sets atomic mode, in the old importer we always did a best effort import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the &#x60;NONE&#x60; mode emulated the old behavior.
func (r ApiAnalyticsTableHookBulkSharingRequest) AtomicMode(atomicMode string) ApiAnalyticsTableHookBulkSharingRequest {
	r.atomicMode = &atomicMode
	return r
}

// Sets the flush mode, which controls when to flush the internal cache. It is strongly recommended to keep this to &#x60;AUTO&#x60; (which is the default). Only use &#x60;OBJECT&#x60; for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).
func (r ApiAnalyticsTableHookBulkSharingRequest) FlushMode(flushMode string) ApiAnalyticsTableHookBulkSharingRequest {
	r.flushMode = &flushMode
	return r
}

// Sets the identifier scheme to use for reference matching. &#x60;AUTO&#x60; means try &#x60;UID&#x60; first, then &#x60;CODE&#x60;.
func (r ApiAnalyticsTableHookBulkSharingRequest) Identifier(identifier string) ApiAnalyticsTableHookBulkSharingRequest {
	r.identifier = &identifier
	return r
}

// Sets overall import mode, decides whether or not to only &#x60;VALIDATE&#x60; or also &#x60;COMMIT&#x60; the metadata, this has similar functionality as our old dryRun flag.
func (r ApiAnalyticsTableHookBulkSharingRequest) ImportMode(importMode string) ApiAnalyticsTableHookBulkSharingRequest {
	r.importMode = &importMode
	return r
}

// Sets the &#x60;ImportReport&#x60; mode, controls how much is reported back after the import is done. &#x60;ERRORS&#x60; only includes ObjectReports for object which has errors. &#x60;FULL&#x60; returns an ObjectReport for all objects imported, and &#x60;DEBUG&#x60; returns the same plus a name for the object (if available).
func (r ApiAnalyticsTableHookBulkSharingRequest) ImportReportMode(importReportMode string) ApiAnalyticsTableHookBulkSharingRequest {
	r.importReportMode = &importReportMode
	return r
}

// Sets import strategy, &#x60;CREATE_AND_UPDATE&#x60; will try and match on identifier, if it doesn&#39;t exist, it will create the object.
func (r ApiAnalyticsTableHookBulkSharingRequest) ImportStrategy(importStrategy string) ApiAnalyticsTableHookBulkSharingRequest {
	r.importStrategy = &importStrategy
	return r
}

// Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, &#x60;MERGE&#x60; mode will only overwrite the old property if the new one is not-null, for &#x60;REPLACE&#x60; mode all properties are overwritten regardless of null or not. (*)
func (r ApiAnalyticsTableHookBulkSharingRequest) MergeMode(mergeMode string) ApiAnalyticsTableHookBulkSharingRequest {
	r.mergeMode = &mergeMode
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookBulkSharingRequest) MetadataSyncImport(metadataSyncImport bool) ApiAnalyticsTableHookBulkSharingRequest {
	r.metadataSyncImport = &metadataSyncImport
	return r
}

// Defines which page number to return.
func (r ApiAnalyticsTableHookBulkSharingRequest) Page(page int32) ApiAnalyticsTableHookBulkSharingRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiAnalyticsTableHookBulkSharingRequest) PageSize(pageSize int32) ApiAnalyticsTableHookBulkSharingRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiAnalyticsTableHookBulkSharingRequest) Paging(paging bool) ApiAnalyticsTableHookBulkSharingRequest {
	r.paging = &paging
	return r
}

// Sets the preheater mode, used to signal if preheating should be done for &#x60;ALL&#x60; (as it was before with &#x60;preheatCache&#x3D;true&#x60;) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to &#x60;NONE&#x60; is not recommended.
func (r ApiAnalyticsTableHookBulkSharingRequest) PreheatMode(preheatMode string) ApiAnalyticsTableHookBulkSharingRequest {
	r.preheatMode = &preheatMode
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiAnalyticsTableHookBulkSharingRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookBulkSharingRequest {
	r.rootJunction = &rootJunction
	return r
}

// Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.
func (r ApiAnalyticsTableHookBulkSharingRequest) SkipSharing(skipSharing bool) ApiAnalyticsTableHookBulkSharingRequest {
	r.skipSharing = &skipSharing
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookBulkSharingRequest) SkipTranslation(skipTranslation bool) ApiAnalyticsTableHookBulkSharingRequest {
	r.skipTranslation = &skipTranslation
	return r
}

// Skip validation for import. **NOT RECOMMENDED**
func (r ApiAnalyticsTableHookBulkSharingRequest) SkipValidation(skipValidation bool) ApiAnalyticsTableHookBulkSharingRequest {
	r.skipValidation = &skipValidation
	return r
}

// Allows you to override the user property of every object you are importing, the options are &#x60;NONE&#x60; (do nothing), &#x60;CURRENT&#x60; (use import user), &#x60;SELECTED&#x60; (select a specific user using overrideUser&#x3D;X)
func (r ApiAnalyticsTableHookBulkSharingRequest) UserOverrideMode(userOverrideMode string) ApiAnalyticsTableHookBulkSharingRequest {
	r.userOverrideMode = &userOverrideMode
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookBulkSharingRequest) BulkJsonPatch(bulkJsonPatch BulkJsonPatch) ApiAnalyticsTableHookBulkSharingRequest {
	r.bulkJsonPatch = &bulkJsonPatch
	return r
}

func (r ApiAnalyticsTableHookBulkSharingRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookBulkSharingExecute(r)
}

/*
AnalyticsTableHookBulkSharing Method for AnalyticsTableHookBulkSharing

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsTableHookBulkSharingRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookBulkSharing(ctx context.Context) ApiAnalyticsTableHookBulkSharingRequest {
	return ApiAnalyticsTableHookBulkSharingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookBulkSharingExecute(r ApiAnalyticsTableHookBulkSharingRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookBulkSharing")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/sharing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.atomic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomic", r.atomic, "")
	} else {
		var defaultValue bool = false
		r.atomic = &defaultValue
	}
	if r.atomicMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomicMode", r.atomicMode, "")
	} else {
		var defaultValue string = "ALL"
		r.atomicMode = &defaultValue
	}
	if r.flushMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flushMode", r.flushMode, "")
	} else {
		var defaultValue string = "AUTO"
		r.flushMode = &defaultValue
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	} else {
		var defaultValue string = "UID"
		r.identifier = &defaultValue
	}
	if r.importMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importMode", r.importMode, "")
	} else {
		var defaultValue string = "COMMIT"
		r.importMode = &defaultValue
	}
	if r.importReportMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importReportMode", r.importReportMode, "")
	} else {
		var defaultValue string = "ERRORS"
		r.importReportMode = &defaultValue
	}
	if r.importStrategy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importStrategy", r.importStrategy, "")
	} else {
		var defaultValue string = "CREATE_AND_UPDATE"
		r.importStrategy = &defaultValue
	}
	if r.mergeMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mergeMode", r.mergeMode, "")
	} else {
		var defaultValue string = "REPLACE"
		r.mergeMode = &defaultValue
	}
	if r.metadataSyncImport != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadataSyncImport", r.metadataSyncImport, "")
	} else {
		var defaultValue bool = false
		r.metadataSyncImport = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.preheatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preheatMode", r.preheatMode, "")
	} else {
		var defaultValue string = "REFERENCE"
		r.preheatMode = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	if r.skipSharing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSharing", r.skipSharing, "")
	} else {
		var defaultValue bool = false
		r.skipSharing = &defaultValue
	}
	if r.skipTranslation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipTranslation", r.skipTranslation, "")
	} else {
		var defaultValue bool = false
		r.skipTranslation = &defaultValue
	}
	if r.skipValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipValidation", r.skipValidation, "")
	} else {
		var defaultValue bool = false
		r.skipValidation = &defaultValue
	}
	if r.userOverrideMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOverrideMode", r.userOverrideMode, "")
	} else {
		var defaultValue string = "NONE"
		r.userOverrideMode = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkJsonPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookDeleteCollectionItemRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	itemId     string
	property   string
	uid        string
}

func (r ApiAnalyticsTableHookDeleteCollectionItemRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookDeleteCollectionItemExecute(r)
}

/*
AnalyticsTableHookDeleteCollectionItem Method for AnalyticsTableHookDeleteCollectionItem

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId [no description yet]
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiAnalyticsTableHookDeleteCollectionItemRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookDeleteCollectionItem(ctx context.Context, itemId string, property string, uid string) ApiAnalyticsTableHookDeleteCollectionItemRequest {
	return ApiAnalyticsTableHookDeleteCollectionItemRequest{
		ApiService: a,
		ctx:        ctx,
		itemId:     itemId,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookDeleteCollectionItemExecute(r ApiAnalyticsTableHookDeleteCollectionItemRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookDeleteCollectionItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/{property}/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest struct {
	ctx                 context.Context
	ApiService          *AnalyticsAPIService
	property            string
	uid                 string
	identifiableObjects *IdentifiableObjects
}

// [no description yet]
func (r ApiAnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest) IdentifiableObjects(identifiableObjects IdentifiableObjects) ApiAnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest {
	r.identifiableObjects = &identifiableObjects
	return r
}

func (r ApiAnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXmlExecute(r)
}

/*
AnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXml Method for AnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiAnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXml(ctx context.Context, property string, uid string) ApiAnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest {
	return ApiAnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXmlExecute(r ApiAnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookDeleteCollectionItemsJsondeleteCollectionItemsXml")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/{property}"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identifiableObjects
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookDeleteObjectRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
}

func (r ApiAnalyticsTableHookDeleteObjectRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookDeleteObjectExecute(r)
}

/*
AnalyticsTableHookDeleteObject Method for AnalyticsTableHookDeleteObject

Deletes the AnalyticsTableHook provided by ID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookDeleteObjectRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookDeleteObject(ctx context.Context, uid string) ApiAnalyticsTableHookDeleteObjectRequest {
	return ApiAnalyticsTableHookDeleteObjectRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookDeleteObjectExecute(r ApiAnalyticsTableHookDeleteObjectRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookDeleteObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookGetObjectRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	uid          string
	fields       *[]string
	filter       *[]string
	page         *int32
	pageSize     *int32
	paging       *bool
	rootJunction *string
}

// Limit the response to specific field(s).    See [Metadata-field-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_field_filter).
func (r ApiAnalyticsTableHookGetObjectRequest) Fields(fields []string) ApiAnalyticsTableHookGetObjectRequest {
	r.fields = &fields
	return r
}

// Apply filter operations to the returned list of metadata.    See [Metadata-object-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_object_filter).
func (r ApiAnalyticsTableHookGetObjectRequest) Filter(filter []string) ApiAnalyticsTableHookGetObjectRequest {
	r.filter = &filter
	return r
}

// Defines which page number to return.
func (r ApiAnalyticsTableHookGetObjectRequest) Page(page int32) ApiAnalyticsTableHookGetObjectRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiAnalyticsTableHookGetObjectRequest) PageSize(pageSize int32) ApiAnalyticsTableHookGetObjectRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiAnalyticsTableHookGetObjectRequest) Paging(paging bool) ApiAnalyticsTableHookGetObjectRequest {
	r.paging = &paging
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiAnalyticsTableHookGetObjectRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookGetObjectRequest {
	r.rootJunction = &rootJunction
	return r
}

func (r ApiAnalyticsTableHookGetObjectRequest) Execute() (*AnalyticsTableHook, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookGetObjectExecute(r)
}

/*
AnalyticsTableHookGetObject Method for AnalyticsTableHookGetObject

View a AnalyticsTableHook

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookGetObjectRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookGetObject(ctx context.Context, uid string) ApiAnalyticsTableHookGetObjectRequest {
	return ApiAnalyticsTableHookGetObjectRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return AnalyticsTableHook
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectExecute(r ApiAnalyticsTableHookGetObjectRequest) (*AnalyticsTableHook, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AnalyticsTableHook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookGetObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookGetObjectGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	uid          string
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Auto(auto string) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Describe(describe bool) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Fields(fields string) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Filter(filter string) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Headless(headless bool) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Inverse(inverse bool) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Locale(locale string) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Order(order string) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Page(page int32) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) PageListName(pageListName string) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) PageSize(pageSize int32) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) References(references bool) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Total(total bool) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Translate(translate bool) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookGetObjectGistAsCsvExecute(r)
}

/*
AnalyticsTableHookGetObjectGistAsCsv Method for AnalyticsTableHookGetObjectGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookGetObjectGistAsCsvRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectGistAsCsv(ctx context.Context, uid string) ApiAnalyticsTableHookGetObjectGistAsCsvRequest {
	return ApiAnalyticsTableHookGetObjectGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return string
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectGistAsCsvExecute(r ApiAnalyticsTableHookGetObjectGistAsCsvRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookGetObjectGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/gist.csv"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	uid          string
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Auto(auto string) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Describe(describe bool) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Fields(fields string) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Filter(filter string) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Headless(headless bool) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Inverse(inverse bool) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Locale(locale string) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Order(order string) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Page(page int32) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) PageListName(pageListName string) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) PageSize(pageSize int32) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) References(references bool) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Total(total bool) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Translate(translate bool) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookGetObjectGistgetObjectGistAsCsvExecute(r)
}

/*
AnalyticsTableHookGetObjectGistgetObjectGistAsCsv Method for AnalyticsTableHookGetObjectGistgetObjectGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectGistgetObjectGistAsCsv(ctx context.Context, uid string) ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest {
	return ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectGistgetObjectGistAsCsvExecute(r ApiAnalyticsTableHookGetObjectGistgetObjectGistAsCsvRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookGetObjectGistgetObjectGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/gist"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookGetObjectListRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	fields       *[]string
	filter       *[]string
	orders       *[]string
	page         *int32
	pageSize     *int32
	paging       *bool
	rootJunction *string
}

// &#x60;&lt;field-name&gt;[,&lt;field-name&gt;...]&#x60;
func (r ApiAnalyticsTableHookGetObjectListRequest) Fields(fields []string) ApiAnalyticsTableHookGetObjectListRequest {
	r.fields = &fields
	return r
}

// Apply filter operations to the returned list of metadata.    See [Metadata-object-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_object_filter).
func (r ApiAnalyticsTableHookGetObjectListRequest) Filter(filter []string) ApiAnalyticsTableHookGetObjectListRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectListRequest) Orders(orders []string) ApiAnalyticsTableHookGetObjectListRequest {
	r.orders = &orders
	return r
}

// Defines which page number to return.
func (r ApiAnalyticsTableHookGetObjectListRequest) Page(page int32) ApiAnalyticsTableHookGetObjectListRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiAnalyticsTableHookGetObjectListRequest) PageSize(pageSize int32) ApiAnalyticsTableHookGetObjectListRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiAnalyticsTableHookGetObjectListRequest) Paging(paging bool) ApiAnalyticsTableHookGetObjectListRequest {
	r.paging = &paging
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiAnalyticsTableHookGetObjectListRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookGetObjectListRequest {
	r.rootJunction = &rootJunction
	return r
}

func (r ApiAnalyticsTableHookGetObjectListRequest) Execute() (*AnalyticsTableHookGetObjectList200Response, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookGetObjectListExecute(r)
}

/*
AnalyticsTableHookGetObjectList Method for AnalyticsTableHookGetObjectList

List all AnalyticsTableHooks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsTableHookGetObjectListRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectList(ctx context.Context) ApiAnalyticsTableHookGetObjectListRequest {
	return ApiAnalyticsTableHookGetObjectListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AnalyticsTableHookGetObjectList200Response
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectListExecute(r ApiAnalyticsTableHookGetObjectListRequest) (*AnalyticsTableHookGetObjectList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AnalyticsTableHookGetObjectList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookGetObjectList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.orders != nil {
		t := *r.orders
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "orders", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "orders", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookGetObjectListCsvRequest struct {
	ctx            context.Context
	ApiService     *AnalyticsAPIService
	arraySeparator *string
	fields         *[]string
	filter         *[]string
	orders         *[]string
	page           *int32
	pageSize       *int32
	paging         *bool
	rootJunction   *string
	separator      *string
	skipHeader     *bool
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectListCsvRequest) ArraySeparator(arraySeparator string) ApiAnalyticsTableHookGetObjectListCsvRequest {
	r.arraySeparator = &arraySeparator
	return r
}

// Limit the response to specific field(s).    See [Metadata-field-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_field_filter).
func (r ApiAnalyticsTableHookGetObjectListCsvRequest) Fields(fields []string) ApiAnalyticsTableHookGetObjectListCsvRequest {
	r.fields = &fields
	return r
}

// Apply filter operations to the returned list of metadata.    See [Metadata-object-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_object_filter).
func (r ApiAnalyticsTableHookGetObjectListCsvRequest) Filter(filter []string) ApiAnalyticsTableHookGetObjectListCsvRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectListCsvRequest) Orders(orders []string) ApiAnalyticsTableHookGetObjectListCsvRequest {
	r.orders = &orders
	return r
}

// Defines which page number to return.
func (r ApiAnalyticsTableHookGetObjectListCsvRequest) Page(page int32) ApiAnalyticsTableHookGetObjectListCsvRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiAnalyticsTableHookGetObjectListCsvRequest) PageSize(pageSize int32) ApiAnalyticsTableHookGetObjectListCsvRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiAnalyticsTableHookGetObjectListCsvRequest) Paging(paging bool) ApiAnalyticsTableHookGetObjectListCsvRequest {
	r.paging = &paging
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiAnalyticsTableHookGetObjectListCsvRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookGetObjectListCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectListCsvRequest) Separator(separator string) ApiAnalyticsTableHookGetObjectListCsvRequest {
	r.separator = &separator
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectListCsvRequest) SkipHeader(skipHeader bool) ApiAnalyticsTableHookGetObjectListCsvRequest {
	r.skipHeader = &skipHeader
	return r
}

func (r ApiAnalyticsTableHookGetObjectListCsvRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookGetObjectListCsvExecute(r)
}

/*
AnalyticsTableHookGetObjectListCsv Method for AnalyticsTableHookGetObjectListCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsTableHookGetObjectListCsvRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectListCsv(ctx context.Context) ApiAnalyticsTableHookGetObjectListCsvRequest {
	return ApiAnalyticsTableHookGetObjectListCsvRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectListCsvExecute(r ApiAnalyticsTableHookGetObjectListCsvRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookGetObjectListCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/#getObjectListCsv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.arraySeparator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arraySeparator", r.arraySeparator, "")
	} else {
		var defaultValue string = ";"
		r.arraySeparator = &defaultValue
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.orders != nil {
		t := *r.orders
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "orders", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "orders", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	if r.separator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "separator", r.separator, "")
	} else {
		var defaultValue string = ","
		r.separator = &defaultValue
	}
	if r.skipHeader != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipHeader", r.skipHeader, "")
	} else {
		var defaultValue bool = false
		r.skipHeader = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/text", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookGetObjectListGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Auto(auto string) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Describe(describe bool) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Fields(fields string) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Filter(filter string) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Headless(headless bool) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Inverse(inverse bool) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Locale(locale string) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Order(order string) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Page(page int32) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) PageListName(pageListName string) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) PageSize(pageSize int32) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) References(references bool) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Total(total bool) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Translate(translate bool) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookGetObjectListGistAsCsvExecute(r)
}

/*
AnalyticsTableHookGetObjectListGistAsCsv Method for AnalyticsTableHookGetObjectListGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsTableHookGetObjectListGistAsCsvRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectListGistAsCsv(ctx context.Context) ApiAnalyticsTableHookGetObjectListGistAsCsvRequest {
	return ApiAnalyticsTableHookGetObjectListGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectListGistAsCsvExecute(r ApiAnalyticsTableHookGetObjectListGistAsCsvRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookGetObjectListGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/gist.csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Auto(auto string) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Describe(describe bool) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Fields(fields string) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Filter(filter string) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Headless(headless bool) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Inverse(inverse bool) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Locale(locale string) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Order(order string) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Page(page int32) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) PageListName(pageListName string) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) PageSize(pageSize int32) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) References(references bool) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Total(total bool) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Translate(translate bool) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) Execute() (*AnalyticsTableHookGetObjectListGistGetObjectListGistAsCsv200Response, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvExecute(r)
}

/*
AnalyticsTableHookGetObjectListGistgetObjectListGistAsCsv Method for AnalyticsTableHookGetObjectListGistgetObjectListGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectListGistgetObjectListGistAsCsv(ctx context.Context) ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest {
	return ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AnalyticsTableHookGetObjectListGistGetObjectListGistAsCsv200Response
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvExecute(r ApiAnalyticsTableHookGetObjectListGistgetObjectListGistAsCsvRequest) (*AnalyticsTableHookGetObjectListGistGetObjectListGistAsCsv200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AnalyticsTableHookGetObjectListGistGetObjectListGistAsCsv200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookGetObjectListGistgetObjectListGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/gist"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookGetObjectPropertyRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	property     string
	uid          string
	fields       *[]string
	locale       *string
	page         *int32
	pageSize     *int32
	paging       *bool
	rootJunction *string
	translate    *bool
}

// Limit the response to specific field(s).    See [Metadata-field-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_field_filter).
func (r ApiAnalyticsTableHookGetObjectPropertyRequest) Fields(fields []string) ApiAnalyticsTableHookGetObjectPropertyRequest {
	r.fields = &fields
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectPropertyRequest) Locale(locale string) ApiAnalyticsTableHookGetObjectPropertyRequest {
	r.locale = &locale
	return r
}

// Defines which page number to return.
func (r ApiAnalyticsTableHookGetObjectPropertyRequest) Page(page int32) ApiAnalyticsTableHookGetObjectPropertyRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiAnalyticsTableHookGetObjectPropertyRequest) PageSize(pageSize int32) ApiAnalyticsTableHookGetObjectPropertyRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiAnalyticsTableHookGetObjectPropertyRequest) Paging(paging bool) ApiAnalyticsTableHookGetObjectPropertyRequest {
	r.paging = &paging
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiAnalyticsTableHookGetObjectPropertyRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookGetObjectPropertyRequest {
	r.rootJunction = &rootJunction
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectPropertyRequest) Translate(translate bool) ApiAnalyticsTableHookGetObjectPropertyRequest {
	r.translate = &translate
	return r
}

func (r ApiAnalyticsTableHookGetObjectPropertyRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookGetObjectPropertyExecute(r)
}

/*
AnalyticsTableHookGetObjectProperty Method for AnalyticsTableHookGetObjectProperty

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiAnalyticsTableHookGetObjectPropertyRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectProperty(ctx context.Context, property string, uid string) ApiAnalyticsTableHookGetObjectPropertyRequest {
	return ApiAnalyticsTableHookGetObjectPropertyRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectPropertyExecute(r ApiAnalyticsTableHookGetObjectPropertyRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookGetObjectProperty")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/{property}"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	property     string
	uid          string
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Auto(auto string) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Describe(describe bool) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Fields(fields string) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Filter(filter string) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Headless(headless bool) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Inverse(inverse bool) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Locale(locale string) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Order(order string) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Page(page int32) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) PageListName(pageListName string) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) PageSize(pageSize int32) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) References(references bool) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Total(total bool) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Translate(translate bool) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookGetObjectPropertyGistAsCsvExecute(r)
}

/*
AnalyticsTableHookGetObjectPropertyGistAsCsv Method for AnalyticsTableHookGetObjectPropertyGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectPropertyGistAsCsv(ctx context.Context, property string, uid string) ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest {
	return ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return string
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectPropertyGistAsCsvExecute(r ApiAnalyticsTableHookGetObjectPropertyGistAsCsvRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookGetObjectPropertyGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/{property}/gist.csv"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	property     string
	uid          string
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Auto(auto string) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Describe(describe bool) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Fields(fields string) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Filter(filter string) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Headless(headless bool) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Inverse(inverse bool) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Locale(locale string) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Order(order string) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Page(page int32) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) PageListName(pageListName string) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) PageSize(pageSize int32) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) References(references bool) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Total(total bool) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Translate(translate bool) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Execute() (*AggregateDataExchangeGetObjectPropertyGistGetObjectPropertyGistAsCsv200Response, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvExecute(r)
}

/*
AnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsv Method for AnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsv(ctx context.Context, property string, uid string) ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	return ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return AggregateDataExchangeGetObjectPropertyGistGetObjectPropertyGistAsCsv200Response
func (a *AnalyticsAPIService) AnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvExecute(r ApiAnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) (*AggregateDataExchangeGetObjectPropertyGistGetObjectPropertyGistAsCsv200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AggregateDataExchangeGetObjectPropertyGistGetObjectPropertyGistAsCsv200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookGetObjectPropertyGistgetObjectPropertyGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/{property}/gist"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookPatchObjectRequest struct {
	ctx                context.Context
	ApiService         *AnalyticsAPIService
	uid                string
	atomicMode         *string
	flushMode          *string
	identifier         *string
	importMode         *string
	importReportMode   *string
	importStrategy     *string
	mergeMode          *string
	metadataSyncImport *bool
	page               *int32
	pageSize           *int32
	paging             *bool
	preheatMode        *string
	rootJunction       *string
	skipSharing        *bool
	skipTranslation    *bool
	skipValidation     *bool
	userOverrideMode   *string
	jsonPatch          *JsonPatch
}

// Sets atomic mode, in the old importer we always did a best effort import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the &#x60;NONE&#x60; mode emulated the old behavior.
func (r ApiAnalyticsTableHookPatchObjectRequest) AtomicMode(atomicMode string) ApiAnalyticsTableHookPatchObjectRequest {
	r.atomicMode = &atomicMode
	return r
}

// Sets the flush mode, which controls when to flush the internal cache. It is strongly recommended to keep this to &#x60;AUTO&#x60; (which is the default). Only use &#x60;OBJECT&#x60; for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).
func (r ApiAnalyticsTableHookPatchObjectRequest) FlushMode(flushMode string) ApiAnalyticsTableHookPatchObjectRequest {
	r.flushMode = &flushMode
	return r
}

// Sets the identifier scheme to use for reference matching. &#x60;AUTO&#x60; means try &#x60;UID&#x60; first, then &#x60;CODE&#x60;.
func (r ApiAnalyticsTableHookPatchObjectRequest) Identifier(identifier string) ApiAnalyticsTableHookPatchObjectRequest {
	r.identifier = &identifier
	return r
}

// Sets overall import mode, decides whether or not to only &#x60;VALIDATE&#x60; or also &#x60;COMMIT&#x60; the metadata, this has similar functionality as our old dryRun flag.
func (r ApiAnalyticsTableHookPatchObjectRequest) ImportMode(importMode string) ApiAnalyticsTableHookPatchObjectRequest {
	r.importMode = &importMode
	return r
}

// Sets the &#x60;ImportReport&#x60; mode, controls how much is reported back after the import is done. &#x60;ERRORS&#x60; only includes ObjectReports for object which has errors. &#x60;FULL&#x60; returns an ObjectReport for all objects imported, and &#x60;DEBUG&#x60; returns the same plus a name for the object (if available).
func (r ApiAnalyticsTableHookPatchObjectRequest) ImportReportMode(importReportMode string) ApiAnalyticsTableHookPatchObjectRequest {
	r.importReportMode = &importReportMode
	return r
}

// Sets import strategy, &#x60;CREATE_AND_UPDATE&#x60; will try and match on identifier, if it doesn&#39;t exist, it will create the object.
func (r ApiAnalyticsTableHookPatchObjectRequest) ImportStrategy(importStrategy string) ApiAnalyticsTableHookPatchObjectRequest {
	r.importStrategy = &importStrategy
	return r
}

// Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, &#x60;MERGE&#x60; mode will only overwrite the old property if the new one is not-null, for &#x60;REPLACE&#x60; mode all properties are overwritten regardless of null or not. (*)
func (r ApiAnalyticsTableHookPatchObjectRequest) MergeMode(mergeMode string) ApiAnalyticsTableHookPatchObjectRequest {
	r.mergeMode = &mergeMode
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookPatchObjectRequest) MetadataSyncImport(metadataSyncImport bool) ApiAnalyticsTableHookPatchObjectRequest {
	r.metadataSyncImport = &metadataSyncImport
	return r
}

// Defines which page number to return.
func (r ApiAnalyticsTableHookPatchObjectRequest) Page(page int32) ApiAnalyticsTableHookPatchObjectRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiAnalyticsTableHookPatchObjectRequest) PageSize(pageSize int32) ApiAnalyticsTableHookPatchObjectRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiAnalyticsTableHookPatchObjectRequest) Paging(paging bool) ApiAnalyticsTableHookPatchObjectRequest {
	r.paging = &paging
	return r
}

// Sets the preheater mode, used to signal if preheating should be done for &#x60;ALL&#x60; (as it was before with &#x60;preheatCache&#x3D;true&#x60;) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to &#x60;NONE&#x60; is not recommended.
func (r ApiAnalyticsTableHookPatchObjectRequest) PreheatMode(preheatMode string) ApiAnalyticsTableHookPatchObjectRequest {
	r.preheatMode = &preheatMode
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiAnalyticsTableHookPatchObjectRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookPatchObjectRequest {
	r.rootJunction = &rootJunction
	return r
}

// Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.
func (r ApiAnalyticsTableHookPatchObjectRequest) SkipSharing(skipSharing bool) ApiAnalyticsTableHookPatchObjectRequest {
	r.skipSharing = &skipSharing
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookPatchObjectRequest) SkipTranslation(skipTranslation bool) ApiAnalyticsTableHookPatchObjectRequest {
	r.skipTranslation = &skipTranslation
	return r
}

// Skip validation for import. **NOT RECOMMENDED**
func (r ApiAnalyticsTableHookPatchObjectRequest) SkipValidation(skipValidation bool) ApiAnalyticsTableHookPatchObjectRequest {
	r.skipValidation = &skipValidation
	return r
}

// Allows you to override the user property of every object you are importing, the options are &#x60;NONE&#x60; (do nothing), &#x60;CURRENT&#x60; (use import user), &#x60;SELECTED&#x60; (select a specific user using overrideUser&#x3D;X)
func (r ApiAnalyticsTableHookPatchObjectRequest) UserOverrideMode(userOverrideMode string) ApiAnalyticsTableHookPatchObjectRequest {
	r.userOverrideMode = &userOverrideMode
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookPatchObjectRequest) JsonPatch(jsonPatch JsonPatch) ApiAnalyticsTableHookPatchObjectRequest {
	r.jsonPatch = &jsonPatch
	return r
}

func (r ApiAnalyticsTableHookPatchObjectRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookPatchObjectExecute(r)
}

/*
AnalyticsTableHookPatchObject Method for AnalyticsTableHookPatchObject

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookPatchObjectRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookPatchObject(ctx context.Context, uid string) ApiAnalyticsTableHookPatchObjectRequest {
	return ApiAnalyticsTableHookPatchObjectRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookPatchObjectExecute(r ApiAnalyticsTableHookPatchObjectRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookPatchObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.atomicMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomicMode", r.atomicMode, "")
	} else {
		var defaultValue string = "ALL"
		r.atomicMode = &defaultValue
	}
	if r.flushMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flushMode", r.flushMode, "")
	} else {
		var defaultValue string = "AUTO"
		r.flushMode = &defaultValue
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	} else {
		var defaultValue string = "UID"
		r.identifier = &defaultValue
	}
	if r.importMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importMode", r.importMode, "")
	} else {
		var defaultValue string = "COMMIT"
		r.importMode = &defaultValue
	}
	if r.importReportMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importReportMode", r.importReportMode, "")
	} else {
		var defaultValue string = "ERRORS"
		r.importReportMode = &defaultValue
	}
	if r.importStrategy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importStrategy", r.importStrategy, "")
	} else {
		var defaultValue string = "CREATE_AND_UPDATE"
		r.importStrategy = &defaultValue
	}
	if r.mergeMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mergeMode", r.mergeMode, "")
	} else {
		var defaultValue string = "REPLACE"
		r.mergeMode = &defaultValue
	}
	if r.metadataSyncImport != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadataSyncImport", r.metadataSyncImport, "")
	} else {
		var defaultValue bool = false
		r.metadataSyncImport = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.preheatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preheatMode", r.preheatMode, "")
	} else {
		var defaultValue string = "REFERENCE"
		r.preheatMode = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	if r.skipSharing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSharing", r.skipSharing, "")
	} else {
		var defaultValue bool = false
		r.skipSharing = &defaultValue
	}
	if r.skipTranslation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipTranslation", r.skipTranslation, "")
	} else {
		var defaultValue bool = false
		r.skipTranslation = &defaultValue
	}
	if r.skipValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipValidation", r.skipValidation, "")
	} else {
		var defaultValue bool = false
		r.skipValidation = &defaultValue
	}
	if r.userOverrideMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOverrideMode", r.userOverrideMode, "")
	} else {
		var defaultValue string = "NONE"
		r.userOverrideMode = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest struct {
	ctx                context.Context
	ApiService         *AnalyticsAPIService
	atomicMode         *string
	flushMode          *string
	identifier         *string
	importMode         *string
	importReportMode   *string
	importStrategy     *string
	mergeMode          *string
	metadataSyncImport *bool
	preheatMode        *string
	skipSharing        *bool
	skipTranslation    *bool
	skipValidation     *bool
	userOverrideMode   *string
	analyticsTableHook *AnalyticsTableHook
}

// Sets atomic mode, in the old importer we always did a best effort import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the &#x60;NONE&#x60; mode emulated the old behavior.
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) AtomicMode(atomicMode string) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.atomicMode = &atomicMode
	return r
}

// Sets the flush mode, which controls when to flush the internal cache. It is strongly recommended to keep this to &#x60;AUTO&#x60; (which is the default). Only use &#x60;OBJECT&#x60; for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) FlushMode(flushMode string) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.flushMode = &flushMode
	return r
}

// Sets the identifier scheme to use for reference matching. &#x60;AUTO&#x60; means try &#x60;UID&#x60; first, then &#x60;CODE&#x60;.
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) Identifier(identifier string) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.identifier = &identifier
	return r
}

// Sets overall import mode, decides whether or not to only &#x60;VALIDATE&#x60; or also &#x60;COMMIT&#x60; the metadata, this has similar functionality as our old dryRun flag.
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) ImportMode(importMode string) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.importMode = &importMode
	return r
}

// Sets the &#x60;ImportReport&#x60; mode, controls how much is reported back after the import is done. &#x60;ERRORS&#x60; only includes ObjectReports for object which has errors. &#x60;FULL&#x60; returns an ObjectReport for all objects imported, and &#x60;DEBUG&#x60; returns the same plus a name for the object (if available).
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) ImportReportMode(importReportMode string) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.importReportMode = &importReportMode
	return r
}

// Sets import strategy, &#x60;CREATE_AND_UPDATE&#x60; will try and match on identifier, if it doesn&#39;t exist, it will create the object.
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) ImportStrategy(importStrategy string) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.importStrategy = &importStrategy
	return r
}

// Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, &#x60;MERGE&#x60; mode will only overwrite the old property if the new one is not-null, for &#x60;REPLACE&#x60; mode all properties are overwritten regardless of null or not. (*)
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) MergeMode(mergeMode string) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.mergeMode = &mergeMode
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) MetadataSyncImport(metadataSyncImport bool) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.metadataSyncImport = &metadataSyncImport
	return r
}

// Sets the preheater mode, used to signal if preheating should be done for &#x60;ALL&#x60; (as it was before with &#x60;preheatCache&#x3D;true&#x60;) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to &#x60;NONE&#x60; is not recommended.
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) PreheatMode(preheatMode string) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.preheatMode = &preheatMode
	return r
}

// Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) SkipSharing(skipSharing bool) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.skipSharing = &skipSharing
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) SkipTranslation(skipTranslation bool) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.skipTranslation = &skipTranslation
	return r
}

// Skip validation for import. **NOT RECOMMENDED**
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) SkipValidation(skipValidation bool) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.skipValidation = &skipValidation
	return r
}

// Allows you to override the user property of every object you are importing, the options are &#x60;NONE&#x60; (do nothing), &#x60;CURRENT&#x60; (use import user), &#x60;SELECTED&#x60; (select a specific user using overrideUser&#x3D;X)
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) UserOverrideMode(userOverrideMode string) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.userOverrideMode = &userOverrideMode
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) AnalyticsTableHook(analyticsTableHook AnalyticsTableHook) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	r.analyticsTableHook = &analyticsTableHook
	return r
}

func (r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookPostJsonObjectpostXmlObjectExecute(r)
}

/*
AnalyticsTableHookPostJsonObjectpostXmlObject Method for AnalyticsTableHookPostJsonObjectpostXmlObject

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookPostJsonObjectpostXmlObject(ctx context.Context) ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest {
	return ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookPostJsonObjectpostXmlObjectExecute(r ApiAnalyticsTableHookPostJsonObjectpostXmlObjectRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookPostJsonObjectpostXmlObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.atomicMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomicMode", r.atomicMode, "")
	} else {
		var defaultValue string = "ALL"
		r.atomicMode = &defaultValue
	}
	if r.flushMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flushMode", r.flushMode, "")
	} else {
		var defaultValue string = "AUTO"
		r.flushMode = &defaultValue
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	} else {
		var defaultValue string = "UID"
		r.identifier = &defaultValue
	}
	if r.importMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importMode", r.importMode, "")
	} else {
		var defaultValue string = "COMMIT"
		r.importMode = &defaultValue
	}
	if r.importReportMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importReportMode", r.importReportMode, "")
	} else {
		var defaultValue string = "ERRORS"
		r.importReportMode = &defaultValue
	}
	if r.importStrategy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importStrategy", r.importStrategy, "")
	} else {
		var defaultValue string = "CREATE_AND_UPDATE"
		r.importStrategy = &defaultValue
	}
	if r.mergeMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mergeMode", r.mergeMode, "")
	} else {
		var defaultValue string = "REPLACE"
		r.mergeMode = &defaultValue
	}
	if r.metadataSyncImport != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadataSyncImport", r.metadataSyncImport, "")
	} else {
		var defaultValue bool = false
		r.metadataSyncImport = &defaultValue
	}
	if r.preheatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preheatMode", r.preheatMode, "")
	} else {
		var defaultValue string = "REFERENCE"
		r.preheatMode = &defaultValue
	}
	if r.skipSharing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSharing", r.skipSharing, "")
	} else {
		var defaultValue bool = false
		r.skipSharing = &defaultValue
	}
	if r.skipTranslation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipTranslation", r.skipTranslation, "")
	} else {
		var defaultValue bool = false
		r.skipTranslation = &defaultValue
	}
	if r.skipValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipValidation", r.skipValidation, "")
	} else {
		var defaultValue bool = false
		r.skipValidation = &defaultValue
	}
	if r.userOverrideMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOverrideMode", r.userOverrideMode, "")
	} else {
		var defaultValue string = "NONE"
		r.userOverrideMode = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml", "text/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.analyticsTableHook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest struct {
	ctx                context.Context
	ApiService         *AnalyticsAPIService
	uid                string
	atomicMode         *string
	flushMode          *string
	identifier         *string
	importMode         *string
	importReportMode   *string
	importStrategy     *string
	mergeMode          *string
	metadataSyncImport *bool
	preheatMode        *string
	skipSharing        *bool
	skipTranslation    *bool
	skipValidation     *bool
	userOverrideMode   *string
	analyticsTableHook *AnalyticsTableHook
}

// Sets atomic mode, in the old importer we always did a best effort import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the &#x60;NONE&#x60; mode emulated the old behavior.
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) AtomicMode(atomicMode string) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.atomicMode = &atomicMode
	return r
}

// Sets the flush mode, which controls when to flush the internal cache. It is strongly recommended to keep this to &#x60;AUTO&#x60; (which is the default). Only use &#x60;OBJECT&#x60; for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) FlushMode(flushMode string) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.flushMode = &flushMode
	return r
}

// Sets the identifier scheme to use for reference matching. &#x60;AUTO&#x60; means try &#x60;UID&#x60; first, then &#x60;CODE&#x60;.
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) Identifier(identifier string) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.identifier = &identifier
	return r
}

// Sets overall import mode, decides whether or not to only &#x60;VALIDATE&#x60; or also &#x60;COMMIT&#x60; the metadata, this has similar functionality as our old dryRun flag.
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) ImportMode(importMode string) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.importMode = &importMode
	return r
}

// Sets the &#x60;ImportReport&#x60; mode, controls how much is reported back after the import is done. &#x60;ERRORS&#x60; only includes ObjectReports for object which has errors. &#x60;FULL&#x60; returns an ObjectReport for all objects imported, and &#x60;DEBUG&#x60; returns the same plus a name for the object (if available).
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) ImportReportMode(importReportMode string) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.importReportMode = &importReportMode
	return r
}

// Sets import strategy, &#x60;CREATE_AND_UPDATE&#x60; will try and match on identifier, if it doesn&#39;t exist, it will create the object.
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) ImportStrategy(importStrategy string) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.importStrategy = &importStrategy
	return r
}

// Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, &#x60;MERGE&#x60; mode will only overwrite the old property if the new one is not-null, for &#x60;REPLACE&#x60; mode all properties are overwritten regardless of null or not. (*)
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) MergeMode(mergeMode string) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.mergeMode = &mergeMode
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) MetadataSyncImport(metadataSyncImport bool) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.metadataSyncImport = &metadataSyncImport
	return r
}

// Sets the preheater mode, used to signal if preheating should be done for &#x60;ALL&#x60; (as it was before with &#x60;preheatCache&#x3D;true&#x60;) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to &#x60;NONE&#x60; is not recommended.
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) PreheatMode(preheatMode string) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.preheatMode = &preheatMode
	return r
}

// Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) SkipSharing(skipSharing bool) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.skipSharing = &skipSharing
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) SkipTranslation(skipTranslation bool) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.skipTranslation = &skipTranslation
	return r
}

// Skip validation for import. **NOT RECOMMENDED**
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) SkipValidation(skipValidation bool) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.skipValidation = &skipValidation
	return r
}

// Allows you to override the user property of every object you are importing, the options are &#x60;NONE&#x60; (do nothing), &#x60;CURRENT&#x60; (use import user), &#x60;SELECTED&#x60; (select a specific user using overrideUser&#x3D;X)
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) UserOverrideMode(userOverrideMode string) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.userOverrideMode = &userOverrideMode
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) AnalyticsTableHook(analyticsTableHook AnalyticsTableHook) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	r.analyticsTableHook = &analyticsTableHook
	return r
}

func (r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookPutJsonObjectputXmlObjectExecute(r)
}

/*
AnalyticsTableHookPutJsonObjectputXmlObject Method for AnalyticsTableHookPutJsonObjectputXmlObject

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookPutJsonObjectputXmlObject(ctx context.Context, uid string) ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest {
	return ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookPutJsonObjectputXmlObjectExecute(r ApiAnalyticsTableHookPutJsonObjectputXmlObjectRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookPutJsonObjectputXmlObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.atomicMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomicMode", r.atomicMode, "")
	} else {
		var defaultValue string = "ALL"
		r.atomicMode = &defaultValue
	}
	if r.flushMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flushMode", r.flushMode, "")
	} else {
		var defaultValue string = "AUTO"
		r.flushMode = &defaultValue
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	} else {
		var defaultValue string = "UID"
		r.identifier = &defaultValue
	}
	if r.importMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importMode", r.importMode, "")
	} else {
		var defaultValue string = "COMMIT"
		r.importMode = &defaultValue
	}
	if r.importReportMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importReportMode", r.importReportMode, "")
	} else {
		var defaultValue string = "ERRORS"
		r.importReportMode = &defaultValue
	}
	if r.importStrategy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importStrategy", r.importStrategy, "")
	} else {
		var defaultValue string = "CREATE_AND_UPDATE"
		r.importStrategy = &defaultValue
	}
	if r.mergeMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mergeMode", r.mergeMode, "")
	} else {
		var defaultValue string = "REPLACE"
		r.mergeMode = &defaultValue
	}
	if r.metadataSyncImport != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadataSyncImport", r.metadataSyncImport, "")
	} else {
		var defaultValue bool = false
		r.metadataSyncImport = &defaultValue
	}
	if r.preheatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preheatMode", r.preheatMode, "")
	} else {
		var defaultValue string = "REFERENCE"
		r.preheatMode = &defaultValue
	}
	if r.skipSharing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSharing", r.skipSharing, "")
	} else {
		var defaultValue bool = false
		r.skipSharing = &defaultValue
	}
	if r.skipTranslation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipTranslation", r.skipTranslation, "")
	} else {
		var defaultValue bool = false
		r.skipTranslation = &defaultValue
	}
	if r.skipValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipValidation", r.skipValidation, "")
	} else {
		var defaultValue bool = false
		r.skipValidation = &defaultValue
	}
	if r.userOverrideMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOverrideMode", r.userOverrideMode, "")
	} else {
		var defaultValue string = "NONE"
		r.userOverrideMode = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml", "text/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.analyticsTableHook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookRemoveAsFavoriteRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
}

func (r ApiAnalyticsTableHookRemoveAsFavoriteRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookRemoveAsFavoriteExecute(r)
}

/*
AnalyticsTableHookRemoveAsFavorite Method for AnalyticsTableHookRemoveAsFavorite

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookRemoveAsFavoriteRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookRemoveAsFavorite(ctx context.Context, uid string) ApiAnalyticsTableHookRemoveAsFavoriteRequest {
	return ApiAnalyticsTableHookRemoveAsFavoriteRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookRemoveAsFavoriteExecute(r ApiAnalyticsTableHookRemoveAsFavoriteRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookRemoveAsFavorite")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/favorite"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest struct {
	ctx                 context.Context
	ApiService          *AnalyticsAPIService
	property            string
	uid                 string
	identifiableObjects *IdentifiableObjects
}

// [no description yet]
func (r ApiAnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest) IdentifiableObjects(identifiableObjects IdentifiableObjects) ApiAnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest {
	r.identifiableObjects = &identifiableObjects
	return r
}

func (r ApiAnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXmlExecute(r)
}

/*
AnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXml Method for AnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiAnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXml(ctx context.Context, property string, uid string) ApiAnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest {
	return ApiAnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXmlExecute(r ApiAnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookReplaceCollectionItemsJsonreplaceCollectionItemsXml")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/{property}"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identifiableObjects
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookReplaceTranslationsRequest struct {
	ctx                                             context.Context
	ApiService                                      *AnalyticsAPIService
	uid                                             string
	aggregateDataExchangeReplaceTranslationsRequest *AggregateDataExchangeReplaceTranslationsRequest
}

// [no description yet]
func (r ApiAnalyticsTableHookReplaceTranslationsRequest) AggregateDataExchangeReplaceTranslationsRequest(aggregateDataExchangeReplaceTranslationsRequest AggregateDataExchangeReplaceTranslationsRequest) ApiAnalyticsTableHookReplaceTranslationsRequest {
	r.aggregateDataExchangeReplaceTranslationsRequest = &aggregateDataExchangeReplaceTranslationsRequest
	return r
}

func (r ApiAnalyticsTableHookReplaceTranslationsRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnalyticsTableHookReplaceTranslationsExecute(r)
}

/*
AnalyticsTableHookReplaceTranslations Method for AnalyticsTableHookReplaceTranslations

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookReplaceTranslationsRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookReplaceTranslations(ctx context.Context, uid string) ApiAnalyticsTableHookReplaceTranslationsRequest {
	return ApiAnalyticsTableHookReplaceTranslationsRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) AnalyticsTableHookReplaceTranslationsExecute(r ApiAnalyticsTableHookReplaceTranslationsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookReplaceTranslations")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/translations"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aggregateDataExchangeReplaceTranslationsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookSetAsFavoriteRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
}

func (r ApiAnalyticsTableHookSetAsFavoriteRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookSetAsFavoriteExecute(r)
}

/*
AnalyticsTableHookSetAsFavorite Method for AnalyticsTableHookSetAsFavorite

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookSetAsFavoriteRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookSetAsFavorite(ctx context.Context, uid string) ApiAnalyticsTableHookSetAsFavoriteRequest {
	return ApiAnalyticsTableHookSetAsFavoriteRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookSetAsFavoriteExecute(r ApiAnalyticsTableHookSetAsFavoriteRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookSetAsFavorite")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/favorite"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookSetSharingRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
	sharing    *Sharing
}

// [no description yet]
func (r ApiAnalyticsTableHookSetSharingRequest) Sharing(sharing Sharing) ApiAnalyticsTableHookSetSharingRequest {
	r.sharing = &sharing
	return r
}

func (r ApiAnalyticsTableHookSetSharingRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnalyticsTableHookSetSharingExecute(r)
}

/*
AnalyticsTableHookSetSharing Method for AnalyticsTableHookSetSharing

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookSetSharingRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookSetSharing(ctx context.Context, uid string) ApiAnalyticsTableHookSetSharingRequest {
	return ApiAnalyticsTableHookSetSharingRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) AnalyticsTableHookSetSharingExecute(r ApiAnalyticsTableHookSetSharingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookSetSharing")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/sharing"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sharing
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookSubscribeRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
}

func (r ApiAnalyticsTableHookSubscribeRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookSubscribeExecute(r)
}

/*
AnalyticsTableHookSubscribe Method for AnalyticsTableHookSubscribe

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookSubscribeRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookSubscribe(ctx context.Context, uid string) ApiAnalyticsTableHookSubscribeRequest {
	return ApiAnalyticsTableHookSubscribeRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookSubscribeExecute(r ApiAnalyticsTableHookSubscribeRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookSubscribe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/subscriber"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookUnsubscribeRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
}

func (r ApiAnalyticsTableHookUnsubscribeRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.AnalyticsTableHookUnsubscribeExecute(r)
}

/*
AnalyticsTableHookUnsubscribe Method for AnalyticsTableHookUnsubscribe

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiAnalyticsTableHookUnsubscribeRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookUnsubscribe(ctx context.Context, uid string) ApiAnalyticsTableHookUnsubscribeRequest {
	return ApiAnalyticsTableHookUnsubscribeRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) AnalyticsTableHookUnsubscribeExecute(r ApiAnalyticsTableHookUnsubscribeRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookUnsubscribe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/subscriber"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsTableHookUpdateObjectPropertyRequest struct {
	ctx                context.Context
	ApiService         *AnalyticsAPIService
	property           string
	uid                string
	atomicMode         *string
	flushMode          *string
	identifier         *string
	importMode         *string
	importReportMode   *string
	importStrategy     *string
	mergeMode          *string
	metadataSyncImport *bool
	page               *int32
	pageSize           *int32
	paging             *bool
	preheatMode        *string
	rootJunction       *string
	skipSharing        *bool
	skipTranslation    *bool
	skipValidation     *bool
	userOverrideMode   *string
	analyticsTableHook *AnalyticsTableHook
}

// Sets atomic mode, in the old importer we always did a best effort import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the &#x60;NONE&#x60; mode emulated the old behavior.
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) AtomicMode(atomicMode string) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.atomicMode = &atomicMode
	return r
}

// Sets the flush mode, which controls when to flush the internal cache. It is strongly recommended to keep this to &#x60;AUTO&#x60; (which is the default). Only use &#x60;OBJECT&#x60; for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) FlushMode(flushMode string) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.flushMode = &flushMode
	return r
}

// Sets the identifier scheme to use for reference matching. &#x60;AUTO&#x60; means try &#x60;UID&#x60; first, then &#x60;CODE&#x60;.
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) Identifier(identifier string) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.identifier = &identifier
	return r
}

// Sets overall import mode, decides whether or not to only &#x60;VALIDATE&#x60; or also &#x60;COMMIT&#x60; the metadata, this has similar functionality as our old dryRun flag.
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) ImportMode(importMode string) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.importMode = &importMode
	return r
}

// Sets the &#x60;ImportReport&#x60; mode, controls how much is reported back after the import is done. &#x60;ERRORS&#x60; only includes ObjectReports for object which has errors. &#x60;FULL&#x60; returns an ObjectReport for all objects imported, and &#x60;DEBUG&#x60; returns the same plus a name for the object (if available).
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) ImportReportMode(importReportMode string) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.importReportMode = &importReportMode
	return r
}

// Sets import strategy, &#x60;CREATE_AND_UPDATE&#x60; will try and match on identifier, if it doesn&#39;t exist, it will create the object.
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) ImportStrategy(importStrategy string) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.importStrategy = &importStrategy
	return r
}

// Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, &#x60;MERGE&#x60; mode will only overwrite the old property if the new one is not-null, for &#x60;REPLACE&#x60; mode all properties are overwritten regardless of null or not. (*)
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) MergeMode(mergeMode string) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.mergeMode = &mergeMode
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) MetadataSyncImport(metadataSyncImport bool) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.metadataSyncImport = &metadataSyncImport
	return r
}

// Defines which page number to return.
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) Page(page int32) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) PageSize(pageSize int32) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) Paging(paging bool) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.paging = &paging
	return r
}

// Sets the preheater mode, used to signal if preheating should be done for &#x60;ALL&#x60; (as it was before with &#x60;preheatCache&#x3D;true&#x60;) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to &#x60;NONE&#x60; is not recommended.
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) PreheatMode(preheatMode string) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.preheatMode = &preheatMode
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) RootJunction(rootJunction string) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.rootJunction = &rootJunction
	return r
}

// Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) SkipSharing(skipSharing bool) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.skipSharing = &skipSharing
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) SkipTranslation(skipTranslation bool) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.skipTranslation = &skipTranslation
	return r
}

// Skip validation for import. **NOT RECOMMENDED**
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) SkipValidation(skipValidation bool) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.skipValidation = &skipValidation
	return r
}

// Allows you to override the user property of every object you are importing, the options are &#x60;NONE&#x60; (do nothing), &#x60;CURRENT&#x60; (use import user), &#x60;SELECTED&#x60; (select a specific user using overrideUser&#x3D;X)
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) UserOverrideMode(userOverrideMode string) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.userOverrideMode = &userOverrideMode
	return r
}

// [no description yet]
func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) AnalyticsTableHook(analyticsTableHook AnalyticsTableHook) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	r.analyticsTableHook = &analyticsTableHook
	return r
}

func (r ApiAnalyticsTableHookUpdateObjectPropertyRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnalyticsTableHookUpdateObjectPropertyExecute(r)
}

/*
AnalyticsTableHookUpdateObjectProperty Method for AnalyticsTableHookUpdateObjectProperty

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiAnalyticsTableHookUpdateObjectPropertyRequest
*/
func (a *AnalyticsAPIService) AnalyticsTableHookUpdateObjectProperty(ctx context.Context, property string, uid string) ApiAnalyticsTableHookUpdateObjectPropertyRequest {
	return ApiAnalyticsTableHookUpdateObjectPropertyRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) AnalyticsTableHookUpdateObjectPropertyExecute(r ApiAnalyticsTableHookUpdateObjectPropertyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.AnalyticsTableHookUpdateObjectProperty")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analyticsTableHooks/{uid}/{property}"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return nil, reportError("uid must have less than 11 elements")
	}

	if r.atomicMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomicMode", r.atomicMode, "")
	} else {
		var defaultValue string = "ALL"
		r.atomicMode = &defaultValue
	}
	if r.flushMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flushMode", r.flushMode, "")
	} else {
		var defaultValue string = "AUTO"
		r.flushMode = &defaultValue
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	} else {
		var defaultValue string = "UID"
		r.identifier = &defaultValue
	}
	if r.importMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importMode", r.importMode, "")
	} else {
		var defaultValue string = "COMMIT"
		r.importMode = &defaultValue
	}
	if r.importReportMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importReportMode", r.importReportMode, "")
	} else {
		var defaultValue string = "ERRORS"
		r.importReportMode = &defaultValue
	}
	if r.importStrategy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importStrategy", r.importStrategy, "")
	} else {
		var defaultValue string = "CREATE_AND_UPDATE"
		r.importStrategy = &defaultValue
	}
	if r.mergeMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mergeMode", r.mergeMode, "")
	} else {
		var defaultValue string = "REPLACE"
		r.mergeMode = &defaultValue
	}
	if r.metadataSyncImport != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadataSyncImport", r.metadataSyncImport, "")
	} else {
		var defaultValue bool = false
		r.metadataSyncImport = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.preheatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preheatMode", r.preheatMode, "")
	} else {
		var defaultValue string = "REFERENCE"
		r.preheatMode = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	if r.skipSharing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSharing", r.skipSharing, "")
	} else {
		var defaultValue bool = false
		r.skipSharing = &defaultValue
	}
	if r.skipTranslation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipTranslation", r.skipTranslation, "")
	} else {
		var defaultValue bool = false
		r.skipTranslation = &defaultValue
	}
	if r.skipValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipValidation", r.skipValidation, "")
	} else {
		var defaultValue bool = false
		r.skipValidation = &defaultValue
	}
	if r.userOverrideMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOverrideMode", r.userOverrideMode, "")
	} else {
		var defaultValue string = "NONE"
		r.userOverrideMode = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.analyticsTableHook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetAggregateCsvRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) Page(page int32) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetAggregateCsvRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetAggregateCsvExecute(r)
}

/*
EnrollmentAnalyticsGetAggregateCsv Method for EnrollmentAnalyticsGetAggregateCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetAggregateCsvRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateCsv(ctx context.Context, program string) ApiEnrollmentAnalyticsGetAggregateCsvRequest {
	return ApiEnrollmentAnalyticsGetAggregateCsvRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateCsvExecute(r ApiEnrollmentAnalyticsGetAggregateCsvRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetAggregateCsv")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/aggregate/{program}.csv"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetAggregateDimensionsRequest struct {
	ctx                             context.Context
	ApiService                      *AnalyticsAPIService
	programId                       *string
	allowedOrderingFields           *[]string
	dtoNameToDatabaseNameTranslator *interface{}
	fields                          *[]string
	filter                          *[]string
	firstResult                     *int32
	legacy                          *bool
	order                           *[]OrderCriteria
	page                            *int32
	pageSize                        *int32
	pageSizeWithDefault             *int32
	pageWithDefault                 *int32
	paging                          *bool
	pagingRequest                   *bool
	rawOrder                        *[]OrderCriteria
	skipPaging                      *bool
	sortingRequest                  *bool
	totalPages                      *bool
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) ProgramId(programId string) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.programId = &programId
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) AllowedOrderingFields(allowedOrderingFields []string) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.allowedOrderingFields = &allowedOrderingFields
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) DtoNameToDatabaseNameTranslator(dtoNameToDatabaseNameTranslator interface{}) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.dtoNameToDatabaseNameTranslator = &dtoNameToDatabaseNameTranslator
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) Fields(fields []string) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.fields = &fields
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) FirstResult(firstResult int32) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.firstResult = &firstResult
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) Legacy(legacy bool) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.legacy = &legacy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) Order(order []OrderCriteria) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) Page(page int32) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) PageSizeWithDefault(pageSizeWithDefault int32) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.pageSizeWithDefault = &pageSizeWithDefault
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) PageWithDefault(pageWithDefault int32) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.pageWithDefault = &pageWithDefault
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) PagingRequest(pagingRequest bool) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.pagingRequest = &pagingRequest
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) RawOrder(rawOrder []OrderCriteria) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.rawOrder = &rawOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) SkipPaging(skipPaging bool) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.skipPaging = &skipPaging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) SortingRequest(sortingRequest bool) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.sortingRequest = &sortingRequest
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	r.totalPages = &totalPages
	return r
}

func (r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetAggregateDimensionsExecute(r)
}

/*
EnrollmentAnalyticsGetAggregateDimensions Method for EnrollmentAnalyticsGetAggregateDimensions

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiEnrollmentAnalyticsGetAggregateDimensionsRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateDimensions(ctx context.Context) ApiEnrollmentAnalyticsGetAggregateDimensionsRequest {
	return ApiEnrollmentAnalyticsGetAggregateDimensionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateDimensionsExecute(r ApiEnrollmentAnalyticsGetAggregateDimensionsRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetAggregateDimensions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/aggregate/dimensions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.programId == nil {
		return localVarReturnValue, nil, reportError("programId is required and must be specified")
	}

	if r.allowedOrderingFields != nil {
		t := *r.allowedOrderingFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowedOrderingFields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowedOrderingFields", t, "multi")
		}
	}
	if r.dtoNameToDatabaseNameTranslator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dtoNameToDatabaseNameTranslator", r.dtoNameToDatabaseNameTranslator, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.legacy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "legacy", r.legacy, "")
	}
	if r.order != nil {
		t := *r.order
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "order", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "order", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageSizeWithDefault != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSizeWithDefault", r.pageSizeWithDefault, "")
	}
	if r.pageWithDefault != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageWithDefault", r.pageWithDefault, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.pagingRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagingRequest", r.pagingRequest, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "programId", r.programId, "")
	if r.rawOrder != nil {
		t := *r.rawOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rawOrder", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rawOrder", t, "multi")
		}
	}
	if r.skipPaging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipPaging", r.skipPaging, "")
	}
	if r.sortingRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortingRequest", r.sortingRequest, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetAggregateHtmlRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) Page(page int32) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetAggregateHtmlExecute(r)
}

/*
EnrollmentAnalyticsGetAggregateHtml Method for EnrollmentAnalyticsGetAggregateHtml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetAggregateHtmlRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateHtml(ctx context.Context, program string) ApiEnrollmentAnalyticsGetAggregateHtmlRequest {
	return ApiEnrollmentAnalyticsGetAggregateHtmlRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateHtmlExecute(r ApiEnrollmentAnalyticsGetAggregateHtmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetAggregateHtml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/aggregate/{program}.html"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) Page(page int32) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetAggregateHtmlCssExecute(r)
}

/*
EnrollmentAnalyticsGetAggregateHtmlCss Method for EnrollmentAnalyticsGetAggregateHtmlCss

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateHtmlCss(ctx context.Context, program string) ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest {
	return ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateHtmlCssExecute(r ApiEnrollmentAnalyticsGetAggregateHtmlCssRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetAggregateHtmlCss")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/aggregate/{program}.html+css"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetAggregateJsonRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) Page(page int32) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetAggregateJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetAggregateJsonExecute(r)
}

/*
EnrollmentAnalyticsGetAggregateJson Method for EnrollmentAnalyticsGetAggregateJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetAggregateJsonRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateJson(ctx context.Context, program string) ApiEnrollmentAnalyticsGetAggregateJsonRequest {
	return ApiEnrollmentAnalyticsGetAggregateJsonRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateJsonExecute(r ApiEnrollmentAnalyticsGetAggregateJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetAggregateJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/aggregate/{program}"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetAggregateXlsRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) Page(page int32) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetAggregateXlsRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetAggregateXlsExecute(r)
}

/*
EnrollmentAnalyticsGetAggregateXls Method for EnrollmentAnalyticsGetAggregateXls

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetAggregateXlsRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateXls(ctx context.Context, program string) ApiEnrollmentAnalyticsGetAggregateXlsRequest {
	return ApiEnrollmentAnalyticsGetAggregateXlsRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateXlsExecute(r ApiEnrollmentAnalyticsGetAggregateXlsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetAggregateXls")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/aggregate/{program}.xls"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetAggregateXmlRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) Page(page int32) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetAggregateXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetAggregateXmlExecute(r)
}

/*
EnrollmentAnalyticsGetAggregateXml Method for EnrollmentAnalyticsGetAggregateXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetAggregateXmlRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateXml(ctx context.Context, program string) ApiEnrollmentAnalyticsGetAggregateXmlRequest {
	return ApiEnrollmentAnalyticsGetAggregateXmlRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetAggregateXmlExecute(r ApiEnrollmentAnalyticsGetAggregateXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetAggregateXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/aggregate/{program}.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) Page(page int32) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetExplainAggregateJsonExecute(r)
}

/*
EnrollmentAnalyticsGetExplainAggregateJson Method for EnrollmentAnalyticsGetExplainAggregateJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetExplainAggregateJson(ctx context.Context, program string) ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest {
	return ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetExplainAggregateJsonExecute(r ApiEnrollmentAnalyticsGetExplainAggregateJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetExplainAggregateJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/aggregate/{program}/explain"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetExplainQueryJsonRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) Page(page int32) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetExplainQueryJsonExecute(r)
}

/*
EnrollmentAnalyticsGetExplainQueryJson Method for EnrollmentAnalyticsGetExplainQueryJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetExplainQueryJsonRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetExplainQueryJson(ctx context.Context, program string) ApiEnrollmentAnalyticsGetExplainQueryJsonRequest {
	return ApiEnrollmentAnalyticsGetExplainQueryJsonRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetExplainQueryJsonExecute(r ApiEnrollmentAnalyticsGetExplainQueryJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetExplainQueryJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/query/{program}/explain"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetQueryCsvRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) Page(page int32) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetQueryCsvRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetQueryCsvExecute(r)
}

/*
EnrollmentAnalyticsGetQueryCsv Method for EnrollmentAnalyticsGetQueryCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetQueryCsvRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryCsv(ctx context.Context, program string) ApiEnrollmentAnalyticsGetQueryCsvRequest {
	return ApiEnrollmentAnalyticsGetQueryCsvRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryCsvExecute(r ApiEnrollmentAnalyticsGetQueryCsvRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetQueryCsv")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/query/{program}.csv"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetQueryDimensionsRequest struct {
	ctx                             context.Context
	ApiService                      *AnalyticsAPIService
	programId                       *string
	allowedOrderingFields           *[]string
	dtoNameToDatabaseNameTranslator *interface{}
	fields                          *[]string
	filter                          *[]string
	firstResult                     *int32
	legacy                          *bool
	order                           *[]OrderCriteria
	page                            *int32
	pageSize                        *int32
	pageSizeWithDefault             *int32
	pageWithDefault                 *int32
	paging                          *bool
	pagingRequest                   *bool
	rawOrder                        *[]OrderCriteria
	skipPaging                      *bool
	sortingRequest                  *bool
	totalPages                      *bool
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) ProgramId(programId string) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.programId = &programId
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) AllowedOrderingFields(allowedOrderingFields []string) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.allowedOrderingFields = &allowedOrderingFields
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) DtoNameToDatabaseNameTranslator(dtoNameToDatabaseNameTranslator interface{}) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.dtoNameToDatabaseNameTranslator = &dtoNameToDatabaseNameTranslator
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) Fields(fields []string) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.fields = &fields
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) FirstResult(firstResult int32) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.firstResult = &firstResult
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) Legacy(legacy bool) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.legacy = &legacy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) Order(order []OrderCriteria) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) Page(page int32) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) PageSizeWithDefault(pageSizeWithDefault int32) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.pageSizeWithDefault = &pageSizeWithDefault
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) PageWithDefault(pageWithDefault int32) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.pageWithDefault = &pageWithDefault
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) PagingRequest(pagingRequest bool) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.pagingRequest = &pagingRequest
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) RawOrder(rawOrder []OrderCriteria) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.rawOrder = &rawOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) SkipPaging(skipPaging bool) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.skipPaging = &skipPaging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) SortingRequest(sortingRequest bool) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.sortingRequest = &sortingRequest
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	r.totalPages = &totalPages
	return r
}

func (r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetQueryDimensionsExecute(r)
}

/*
EnrollmentAnalyticsGetQueryDimensions Method for EnrollmentAnalyticsGetQueryDimensions

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiEnrollmentAnalyticsGetQueryDimensionsRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryDimensions(ctx context.Context) ApiEnrollmentAnalyticsGetQueryDimensionsRequest {
	return ApiEnrollmentAnalyticsGetQueryDimensionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryDimensionsExecute(r ApiEnrollmentAnalyticsGetQueryDimensionsRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetQueryDimensions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/query/dimensions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.programId == nil {
		return localVarReturnValue, nil, reportError("programId is required and must be specified")
	}

	if r.allowedOrderingFields != nil {
		t := *r.allowedOrderingFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowedOrderingFields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowedOrderingFields", t, "multi")
		}
	}
	if r.dtoNameToDatabaseNameTranslator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dtoNameToDatabaseNameTranslator", r.dtoNameToDatabaseNameTranslator, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.legacy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "legacy", r.legacy, "")
	}
	if r.order != nil {
		t := *r.order
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "order", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "order", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageSizeWithDefault != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSizeWithDefault", r.pageSizeWithDefault, "")
	}
	if r.pageWithDefault != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageWithDefault", r.pageWithDefault, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.pagingRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagingRequest", r.pagingRequest, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "programId", r.programId, "")
	if r.rawOrder != nil {
		t := *r.rawOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rawOrder", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rawOrder", t, "multi")
		}
	}
	if r.skipPaging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipPaging", r.skipPaging, "")
	}
	if r.sortingRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortingRequest", r.sortingRequest, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetQueryHtmlRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) Page(page int32) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetQueryHtmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetQueryHtmlExecute(r)
}

/*
EnrollmentAnalyticsGetQueryHtml Method for EnrollmentAnalyticsGetQueryHtml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetQueryHtmlRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryHtml(ctx context.Context, program string) ApiEnrollmentAnalyticsGetQueryHtmlRequest {
	return ApiEnrollmentAnalyticsGetQueryHtmlRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryHtmlExecute(r ApiEnrollmentAnalyticsGetQueryHtmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetQueryHtml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/query/{program}.html"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetQueryHtmlCssRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) Page(page int32) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetQueryHtmlCssExecute(r)
}

/*
EnrollmentAnalyticsGetQueryHtmlCss Method for EnrollmentAnalyticsGetQueryHtmlCss

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetQueryHtmlCssRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryHtmlCss(ctx context.Context, program string) ApiEnrollmentAnalyticsGetQueryHtmlCssRequest {
	return ApiEnrollmentAnalyticsGetQueryHtmlCssRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryHtmlCssExecute(r ApiEnrollmentAnalyticsGetQueryHtmlCssRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetQueryHtmlCss")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/query/{program}.html+css"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetQueryJsonRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) Page(page int32) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetQueryJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetQueryJsonExecute(r)
}

/*
EnrollmentAnalyticsGetQueryJson Method for EnrollmentAnalyticsGetQueryJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetQueryJsonRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryJson(ctx context.Context, program string) ApiEnrollmentAnalyticsGetQueryJsonRequest {
	return ApiEnrollmentAnalyticsGetQueryJsonRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryJsonExecute(r ApiEnrollmentAnalyticsGetQueryJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetQueryJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/query/{program}"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetQueryXlsRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) Page(page int32) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetQueryXlsRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetQueryXlsExecute(r)
}

/*
EnrollmentAnalyticsGetQueryXls Method for EnrollmentAnalyticsGetQueryXls

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetQueryXlsRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryXls(ctx context.Context, program string) ApiEnrollmentAnalyticsGetQueryXlsRequest {
	return ApiEnrollmentAnalyticsGetQueryXlsRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryXlsExecute(r ApiEnrollmentAnalyticsGetQueryXlsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetQueryXls")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/query/{program}.xls"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnrollmentAnalyticsGetQueryXmlRequest struct {
	ctx                    context.Context
	ApiService             *AnalyticsAPIService
	program                string
	aggregateEndpoint      *bool
	aggregatedEnrollments  *bool
	asc                    *[]string
	completedOnly          *bool
	coordinateField        *string
	coordinatesOnly        *bool
	dataIdScheme           *string
	desc                   *[]string
	dimension              *[]string
	displayProperty        *string
	endDate                *time.Time
	endpointAction         *string
	endpointItem           *string
	enhancedConditions     *bool
	enrollmentDate         *string
	enrollmentEndpointItem *bool
	filter                 *[]string
	headers                *[]string
	hierarchyMeta          *bool
	incidentDate           *string
	includeMetadataDetails *bool
	lastUpdated            *string
	ouMode                 *string
	outputIdScheme         *string
	page                   *int32
	pageSize               *int32
	paging                 *bool
	programStatus          *[]string
	queryEndpoint          *bool
	relativePeriodDate     *time.Time
	rowContext             *bool
	showHierarchy          *bool
	skipData               *bool
	skipMeta               *bool
	skipRounding           *bool
	sortOrder              *string
	startDate              *time.Time
	timeField              *string
	totalPages             *bool
	userOrgUnit            *string
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) AggregatedEnrollments(aggregatedEnrollments bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.aggregatedEnrollments = &aggregatedEnrollments
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) Asc(asc []string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) CompletedOnly(completedOnly bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) CoordinateField(coordinateField string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) CoordinatesOnly(coordinatesOnly bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) DataIdScheme(dataIdScheme string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) Desc(desc []string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) Dimension(dimension []string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) DisplayProperty(displayProperty string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) EndDate(endDate time.Time) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) EndpointAction(endpointAction string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) EndpointItem(endpointItem string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) EnhancedConditions(enhancedConditions bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) EnrollmentDate(enrollmentDate string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) Filter(filter []string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) Headers(headers []string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) HierarchyMeta(hierarchyMeta bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) IncidentDate(incidentDate string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) LastUpdated(lastUpdated string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) OuMode(ouMode string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) OutputIdScheme(outputIdScheme string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) Page(page int32) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) PageSize(pageSize int32) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) Paging(paging bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) ProgramStatus(programStatus []string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) QueryEndpoint(queryEndpoint bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) RowContext(rowContext bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) ShowHierarchy(showHierarchy bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) SkipData(skipData bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) SkipMeta(skipMeta bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) SkipRounding(skipRounding bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) SortOrder(sortOrder string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) StartDate(startDate time.Time) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) TimeField(timeField string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) TotalPages(totalPages bool) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) UserOrgUnit(userOrgUnit string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

func (r ApiEnrollmentAnalyticsGetQueryXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnrollmentAnalyticsGetQueryXmlExecute(r)
}

/*
EnrollmentAnalyticsGetQueryXml Method for EnrollmentAnalyticsGetQueryXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEnrollmentAnalyticsGetQueryXmlRequest
*/
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryXml(ctx context.Context, program string) ApiEnrollmentAnalyticsGetQueryXmlRequest {
	return ApiEnrollmentAnalyticsGetQueryXmlRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EnrollmentAnalyticsGetQueryXmlExecute(r ApiEnrollmentAnalyticsGetQueryXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EnrollmentAnalyticsGetQueryXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/enrollments/query/{program}.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregatedEnrollments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregatedEnrollments", r.aggregatedEnrollments, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = false
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetAggregateCsvRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Asc(asc []string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Columns(columns string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Desc(desc []string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Dimension(dimension []string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetAggregateCsvRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) EventDate(eventDate string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Filter(filter []string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Headers(headers []string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Limit(limit int32) ApiEventAnalyticsGetAggregateCsvRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) OuMode(ouMode string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) OutputType(outputType string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Page(page int32) ApiEventAnalyticsGetAggregateCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) PageSize(pageSize int32) ApiEventAnalyticsGetAggregateCsvRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Paging(paging bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetAggregateCsvRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) RowContext(rowContext bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Rows(rows string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) SkipData(skipData bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Stage(stage string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetAggregateCsvRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) TimeField(timeField string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetAggregateCsvRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateCsvRequest) Value(value string) ApiEventAnalyticsGetAggregateCsvRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetAggregateCsvRequest) Execute() (*http.Response, error) {
	return r.ApiService.EventAnalyticsGetAggregateCsvExecute(r)
}

/*
EventAnalyticsGetAggregateCsv Method for EventAnalyticsGetAggregateCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetAggregateCsvRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateCsv(ctx context.Context, program string) ApiEventAnalyticsGetAggregateCsvRequest {
	return ApiEventAnalyticsGetAggregateCsvRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateCsvExecute(r ApiEventAnalyticsGetAggregateCsvRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetAggregateCsv")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/aggregate/{program}.csv"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetAggregateDimensionsRequest struct {
	ctx                             context.Context
	ApiService                      *AnalyticsAPIService
	programStageId                  *string
	allowedOrderingFields           *[]string
	dtoNameToDatabaseNameTranslator *interface{}
	fields                          *[]string
	filter                          *[]string
	firstResult                     *int32
	legacy                          *bool
	order                           *[]OrderCriteria
	page                            *int32
	pageSize                        *int32
	pageSizeWithDefault             *int32
	pageWithDefault                 *int32
	paging                          *bool
	pagingRequest                   *bool
	rawOrder                        *[]OrderCriteria
	skipPaging                      *bool
	sortingRequest                  *bool
	totalPages                      *bool
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) ProgramStageId(programStageId string) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.programStageId = &programStageId
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) AllowedOrderingFields(allowedOrderingFields []string) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.allowedOrderingFields = &allowedOrderingFields
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) DtoNameToDatabaseNameTranslator(dtoNameToDatabaseNameTranslator interface{}) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.dtoNameToDatabaseNameTranslator = &dtoNameToDatabaseNameTranslator
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) Fields(fields []string) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.fields = &fields
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) Filter(filter []string) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) FirstResult(firstResult int32) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.firstResult = &firstResult
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) Legacy(legacy bool) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.legacy = &legacy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) Order(order []OrderCriteria) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) Page(page int32) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) PageSize(pageSize int32) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) PageSizeWithDefault(pageSizeWithDefault int32) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.pageSizeWithDefault = &pageSizeWithDefault
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) PageWithDefault(pageWithDefault int32) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.pageWithDefault = &pageWithDefault
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) Paging(paging bool) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) PagingRequest(pagingRequest bool) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.pagingRequest = &pagingRequest
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) RawOrder(rawOrder []OrderCriteria) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.rawOrder = &rawOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) SkipPaging(skipPaging bool) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.skipPaging = &skipPaging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) SortingRequest(sortingRequest bool) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.sortingRequest = &sortingRequest
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateDimensionsRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetAggregateDimensionsRequest {
	r.totalPages = &totalPages
	return r
}

func (r ApiEventAnalyticsGetAggregateDimensionsRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.EventAnalyticsGetAggregateDimensionsExecute(r)
}

/*
EventAnalyticsGetAggregateDimensions Method for EventAnalyticsGetAggregateDimensions

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiEventAnalyticsGetAggregateDimensionsRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateDimensions(ctx context.Context) ApiEventAnalyticsGetAggregateDimensionsRequest {
	return ApiEventAnalyticsGetAggregateDimensionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateDimensionsExecute(r ApiEventAnalyticsGetAggregateDimensionsRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetAggregateDimensions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/aggregate/dimensions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.programStageId == nil {
		return localVarReturnValue, nil, reportError("programStageId is required and must be specified")
	}

	if r.allowedOrderingFields != nil {
		t := *r.allowedOrderingFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowedOrderingFields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowedOrderingFields", t, "multi")
		}
	}
	if r.dtoNameToDatabaseNameTranslator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dtoNameToDatabaseNameTranslator", r.dtoNameToDatabaseNameTranslator, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.legacy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "legacy", r.legacy, "")
	}
	if r.order != nil {
		t := *r.order
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "order", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "order", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageSizeWithDefault != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSizeWithDefault", r.pageSizeWithDefault, "")
	}
	if r.pageWithDefault != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageWithDefault", r.pageWithDefault, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.pagingRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagingRequest", r.pagingRequest, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "programStageId", r.programStageId, "")
	if r.rawOrder != nil {
		t := *r.rawOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rawOrder", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rawOrder", t, "multi")
		}
	}
	if r.skipPaging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipPaging", r.skipPaging, "")
	}
	if r.sortingRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortingRequest", r.sortingRequest, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetAggregateHtmlRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Asc(asc []string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Columns(columns string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Desc(desc []string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Dimension(dimension []string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) EventDate(eventDate string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Filter(filter []string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Headers(headers []string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Limit(limit int32) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) OuMode(ouMode string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) OutputType(outputType string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Page(page int32) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) PageSize(pageSize int32) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Paging(paging bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) RowContext(rowContext bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Rows(rows string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) SkipData(skipData bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Stage(stage string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) TimeField(timeField string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlRequest) Value(value string) ApiEventAnalyticsGetAggregateHtmlRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetAggregateHtmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.EventAnalyticsGetAggregateHtmlExecute(r)
}

/*
EventAnalyticsGetAggregateHtml Method for EventAnalyticsGetAggregateHtml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetAggregateHtmlRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateHtml(ctx context.Context, program string) ApiEventAnalyticsGetAggregateHtmlRequest {
	return ApiEventAnalyticsGetAggregateHtmlRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateHtmlExecute(r ApiEventAnalyticsGetAggregateHtmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetAggregateHtml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/aggregate/{program}.html"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetAggregateHtmlCssRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Asc(asc []string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Columns(columns string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Desc(desc []string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Dimension(dimension []string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) EventDate(eventDate string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Filter(filter []string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Headers(headers []string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Limit(limit int32) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) OuMode(ouMode string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) OutputType(outputType string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Page(page int32) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) PageSize(pageSize int32) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Paging(paging bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) RowContext(rowContext bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Rows(rows string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) SkipData(skipData bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Stage(stage string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) TimeField(timeField string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Value(value string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetAggregateHtmlCssRequest) Execute() (*http.Response, error) {
	return r.ApiService.EventAnalyticsGetAggregateHtmlCssExecute(r)
}

/*
EventAnalyticsGetAggregateHtmlCss Method for EventAnalyticsGetAggregateHtmlCss

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetAggregateHtmlCssRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateHtmlCss(ctx context.Context, program string) ApiEventAnalyticsGetAggregateHtmlCssRequest {
	return ApiEventAnalyticsGetAggregateHtmlCssRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateHtmlCssExecute(r ApiEventAnalyticsGetAggregateHtmlCssRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetAggregateHtmlCss")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/aggregate/{program}.html+css"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetAggregateJsonRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Asc(asc []string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Columns(columns string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Desc(desc []string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Dimension(dimension []string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetAggregateJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) EventDate(eventDate string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Filter(filter []string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Headers(headers []string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Limit(limit int32) ApiEventAnalyticsGetAggregateJsonRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) OuMode(ouMode string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) OutputType(outputType string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Page(page int32) ApiEventAnalyticsGetAggregateJsonRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) PageSize(pageSize int32) ApiEventAnalyticsGetAggregateJsonRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Paging(paging bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetAggregateJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) RowContext(rowContext bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Rows(rows string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) SkipData(skipData bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Stage(stage string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetAggregateJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) TimeField(timeField string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetAggregateJsonRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateJsonRequest) Value(value string) ApiEventAnalyticsGetAggregateJsonRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetAggregateJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.EventAnalyticsGetAggregateJsonExecute(r)
}

/*
EventAnalyticsGetAggregateJson Method for EventAnalyticsGetAggregateJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetAggregateJsonRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateJson(ctx context.Context, program string) ApiEventAnalyticsGetAggregateJsonRequest {
	return ApiEventAnalyticsGetAggregateJsonRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateJsonExecute(r ApiEventAnalyticsGetAggregateJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetAggregateJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/aggregate/{program}"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetAggregateXlsRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Asc(asc []string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Columns(columns string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Desc(desc []string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Dimension(dimension []string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetAggregateXlsRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) EventDate(eventDate string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Filter(filter []string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Headers(headers []string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Limit(limit int32) ApiEventAnalyticsGetAggregateXlsRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) OuMode(ouMode string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) OutputType(outputType string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Page(page int32) ApiEventAnalyticsGetAggregateXlsRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) PageSize(pageSize int32) ApiEventAnalyticsGetAggregateXlsRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Paging(paging bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetAggregateXlsRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) RowContext(rowContext bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Rows(rows string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) SkipData(skipData bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Stage(stage string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetAggregateXlsRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) TimeField(timeField string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetAggregateXlsRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXlsRequest) Value(value string) ApiEventAnalyticsGetAggregateXlsRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetAggregateXlsRequest) Execute() (*http.Response, error) {
	return r.ApiService.EventAnalyticsGetAggregateXlsExecute(r)
}

/*
EventAnalyticsGetAggregateXls Method for EventAnalyticsGetAggregateXls

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetAggregateXlsRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateXls(ctx context.Context, program string) ApiEventAnalyticsGetAggregateXlsRequest {
	return ApiEventAnalyticsGetAggregateXlsRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateXlsExecute(r ApiEventAnalyticsGetAggregateXlsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetAggregateXls")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/aggregate/{program}.xls"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetAggregateXmlRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Asc(asc []string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Columns(columns string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Desc(desc []string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Dimension(dimension []string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetAggregateXmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) EventDate(eventDate string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Filter(filter []string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Headers(headers []string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Limit(limit int32) ApiEventAnalyticsGetAggregateXmlRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) OuMode(ouMode string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) OutputType(outputType string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Page(page int32) ApiEventAnalyticsGetAggregateXmlRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) PageSize(pageSize int32) ApiEventAnalyticsGetAggregateXmlRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Paging(paging bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetAggregateXmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) RowContext(rowContext bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Rows(rows string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) SkipData(skipData bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Stage(stage string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetAggregateXmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) TimeField(timeField string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetAggregateXmlRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetAggregateXmlRequest) Value(value string) ApiEventAnalyticsGetAggregateXmlRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetAggregateXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.EventAnalyticsGetAggregateXmlExecute(r)
}

/*
EventAnalyticsGetAggregateXml Method for EventAnalyticsGetAggregateXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetAggregateXmlRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateXml(ctx context.Context, program string) ApiEventAnalyticsGetAggregateXmlRequest {
	return ApiEventAnalyticsGetAggregateXmlRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EventAnalyticsGetAggregateXmlExecute(r ApiEventAnalyticsGetAggregateXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetAggregateXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/aggregate/{program}.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetClusterJsonRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	bbox                      *string
	clusterSize               *int64
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeClusterPoints      *bool
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Bbox(bbox string) ApiEventAnalyticsGetClusterJsonRequest {
	r.bbox = &bbox
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) ClusterSize(clusterSize int64) ApiEventAnalyticsGetClusterJsonRequest {
	r.clusterSize = &clusterSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetClusterJsonRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Asc(asc []string) ApiEventAnalyticsGetClusterJsonRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Columns(columns string) ApiEventAnalyticsGetClusterJsonRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetClusterJsonRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetClusterJsonRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Desc(desc []string) ApiEventAnalyticsGetClusterJsonRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Dimension(dimension []string) ApiEventAnalyticsGetClusterJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetClusterJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetClusterJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetClusterJsonRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetClusterJsonRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetClusterJsonRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) EventDate(eventDate string) ApiEventAnalyticsGetClusterJsonRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetClusterJsonRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetClusterJsonRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Filter(filter []string) ApiEventAnalyticsGetClusterJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Headers(headers []string) ApiEventAnalyticsGetClusterJsonRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetClusterJsonRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) IncludeClusterPoints(includeClusterPoints bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.includeClusterPoints = &includeClusterPoints
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetClusterJsonRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Limit(limit int32) ApiEventAnalyticsGetClusterJsonRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetClusterJsonRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) OuMode(ouMode string) ApiEventAnalyticsGetClusterJsonRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetClusterJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) OutputType(outputType string) ApiEventAnalyticsGetClusterJsonRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Page(page int32) ApiEventAnalyticsGetClusterJsonRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) PageSize(pageSize int32) ApiEventAnalyticsGetClusterJsonRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Paging(paging bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetClusterJsonRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetClusterJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) RowContext(rowContext bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Rows(rows string) ApiEventAnalyticsGetClusterJsonRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetClusterJsonRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) SkipData(skipData bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetClusterJsonRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Stage(stage string) ApiEventAnalyticsGetClusterJsonRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetClusterJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) TimeField(timeField string) ApiEventAnalyticsGetClusterJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetClusterJsonRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetClusterJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetClusterJsonRequest) Value(value string) ApiEventAnalyticsGetClusterJsonRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetClusterJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.EventAnalyticsGetClusterJsonExecute(r)
}

/*
EventAnalyticsGetClusterJson Method for EventAnalyticsGetClusterJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetClusterJsonRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetClusterJson(ctx context.Context, program string) ApiEventAnalyticsGetClusterJsonRequest {
	return ApiEventAnalyticsGetClusterJsonRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) EventAnalyticsGetClusterJsonExecute(r ApiEventAnalyticsGetClusterJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetClusterJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/cluster/{program}"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bbox == nil {
		return localVarReturnValue, nil, reportError("bbox is required and must be specified")
	}
	if r.clusterSize == nil {
		return localVarReturnValue, nil, reportError("clusterSize is required and must be specified")
	}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "bbox", r.bbox, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "clusterSize", r.clusterSize, "")
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeClusterPoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeClusterPoints", r.includeClusterPoints, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetCountJsonRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetCountJsonRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetCountJsonRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetCountJsonRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Asc(asc []string) ApiEventAnalyticsGetCountJsonRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetCountJsonRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Columns(columns string) ApiEventAnalyticsGetCountJsonRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetCountJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetCountJsonRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetCountJsonRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetCountJsonRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetCountJsonRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Desc(desc []string) ApiEventAnalyticsGetCountJsonRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Dimension(dimension []string) ApiEventAnalyticsGetCountJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetCountJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetCountJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetCountJsonRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetCountJsonRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetCountJsonRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetCountJsonRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetCountJsonRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) EventDate(eventDate string) ApiEventAnalyticsGetCountJsonRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetCountJsonRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetCountJsonRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Filter(filter []string) ApiEventAnalyticsGetCountJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Headers(headers []string) ApiEventAnalyticsGetCountJsonRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetCountJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetCountJsonRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetCountJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetCountJsonRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Limit(limit int32) ApiEventAnalyticsGetCountJsonRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetCountJsonRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) OuMode(ouMode string) ApiEventAnalyticsGetCountJsonRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetCountJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) OutputType(outputType string) ApiEventAnalyticsGetCountJsonRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Page(page int32) ApiEventAnalyticsGetCountJsonRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) PageSize(pageSize int32) ApiEventAnalyticsGetCountJsonRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Paging(paging bool) ApiEventAnalyticsGetCountJsonRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetCountJsonRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetCountJsonRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetCountJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) RowContext(rowContext bool) ApiEventAnalyticsGetCountJsonRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Rows(rows string) ApiEventAnalyticsGetCountJsonRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetCountJsonRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetCountJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) SkipData(skipData bool) ApiEventAnalyticsGetCountJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetCountJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetCountJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetCountJsonRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Stage(stage string) ApiEventAnalyticsGetCountJsonRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetCountJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) TimeField(timeField string) ApiEventAnalyticsGetCountJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetCountJsonRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetCountJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetCountJsonRequest) Value(value string) ApiEventAnalyticsGetCountJsonRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetCountJsonRequest) Execute() (*Rectangle, *http.Response, error) {
	return r.ApiService.EventAnalyticsGetCountJsonExecute(r)
}

/*
EventAnalyticsGetCountJson Method for EventAnalyticsGetCountJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetCountJsonRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetCountJson(ctx context.Context, program string) ApiEventAnalyticsGetCountJsonRequest {
	return ApiEventAnalyticsGetCountJsonRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
//
//	@return Rectangle
func (a *AnalyticsAPIService) EventAnalyticsGetCountJsonExecute(r ApiEventAnalyticsGetCountJsonRequest) (*Rectangle, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Rectangle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetCountJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/count/{program}"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetExplainAggregateJsonRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Asc(asc []string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Columns(columns string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Desc(desc []string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Dimension(dimension []string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) EventDate(eventDate string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Filter(filter []string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Headers(headers []string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Limit(limit int32) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) OuMode(ouMode string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) OutputType(outputType string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Page(page int32) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) PageSize(pageSize int32) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Paging(paging bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) RowContext(rowContext bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Rows(rows string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) SkipData(skipData bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Stage(stage string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) TimeField(timeField string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Value(value string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetExplainAggregateJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.EventAnalyticsGetExplainAggregateJsonExecute(r)
}

/*
EventAnalyticsGetExplainAggregateJson Method for EventAnalyticsGetExplainAggregateJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetExplainAggregateJsonRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetExplainAggregateJson(ctx context.Context, program string) ApiEventAnalyticsGetExplainAggregateJsonRequest {
	return ApiEventAnalyticsGetExplainAggregateJsonRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) EventAnalyticsGetExplainAggregateJsonExecute(r ApiEventAnalyticsGetExplainAggregateJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetExplainAggregateJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/aggregate/{program}/explain"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetExplainQueryJsonRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Asc(asc []string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Columns(columns string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Desc(desc []string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Dimension(dimension []string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) EventDate(eventDate string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Filter(filter []string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Headers(headers []string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Limit(limit int32) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) OuMode(ouMode string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) OutputType(outputType string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Page(page int32) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) PageSize(pageSize int32) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Paging(paging bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) RowContext(rowContext bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Rows(rows string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) SkipData(skipData bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Stage(stage string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) TimeField(timeField string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Value(value string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetExplainQueryJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.EventAnalyticsGetExplainQueryJsonExecute(r)
}

/*
EventAnalyticsGetExplainQueryJson Method for EventAnalyticsGetExplainQueryJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetExplainQueryJsonRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetExplainQueryJson(ctx context.Context, program string) ApiEventAnalyticsGetExplainQueryJsonRequest {
	return ApiEventAnalyticsGetExplainQueryJsonRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) EventAnalyticsGetExplainQueryJsonExecute(r ApiEventAnalyticsGetExplainQueryJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetExplainQueryJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/query/{program}/explain"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetQueryCsvRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetQueryCsvRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Asc(asc []string) ApiEventAnalyticsGetQueryCsvRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Columns(columns string) ApiEventAnalyticsGetQueryCsvRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetQueryCsvRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetQueryCsvRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Desc(desc []string) ApiEventAnalyticsGetQueryCsvRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Dimension(dimension []string) ApiEventAnalyticsGetQueryCsvRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetQueryCsvRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetQueryCsvRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetQueryCsvRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetQueryCsvRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetQueryCsvRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) EventDate(eventDate string) ApiEventAnalyticsGetQueryCsvRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetQueryCsvRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetQueryCsvRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Filter(filter []string) ApiEventAnalyticsGetQueryCsvRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Headers(headers []string) ApiEventAnalyticsGetQueryCsvRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetQueryCsvRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetQueryCsvRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Limit(limit int32) ApiEventAnalyticsGetQueryCsvRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetQueryCsvRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) OuMode(ouMode string) ApiEventAnalyticsGetQueryCsvRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetQueryCsvRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) OutputType(outputType string) ApiEventAnalyticsGetQueryCsvRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Page(page int32) ApiEventAnalyticsGetQueryCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) PageSize(pageSize int32) ApiEventAnalyticsGetQueryCsvRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Paging(paging bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetQueryCsvRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetQueryCsvRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) RowContext(rowContext bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Rows(rows string) ApiEventAnalyticsGetQueryCsvRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetQueryCsvRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) SkipData(skipData bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetQueryCsvRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Stage(stage string) ApiEventAnalyticsGetQueryCsvRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetQueryCsvRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) TimeField(timeField string) ApiEventAnalyticsGetQueryCsvRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetQueryCsvRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetQueryCsvRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryCsvRequest) Value(value string) ApiEventAnalyticsGetQueryCsvRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetQueryCsvRequest) Execute() (*http.Response, error) {
	return r.ApiService.EventAnalyticsGetQueryCsvExecute(r)
}

/*
EventAnalyticsGetQueryCsv Method for EventAnalyticsGetQueryCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetQueryCsvRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetQueryCsv(ctx context.Context, program string) ApiEventAnalyticsGetQueryCsvRequest {
	return ApiEventAnalyticsGetQueryCsvRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EventAnalyticsGetQueryCsvExecute(r ApiEventAnalyticsGetQueryCsvRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetQueryCsv")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/query/{program}.csv"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetQueryDimensionsRequest struct {
	ctx                             context.Context
	ApiService                      *AnalyticsAPIService
	programStageId                  *string
	allowedOrderingFields           *[]string
	dtoNameToDatabaseNameTranslator *interface{}
	fields                          *[]string
	filter                          *[]string
	firstResult                     *int32
	legacy                          *bool
	order                           *[]OrderCriteria
	page                            *int32
	pageSize                        *int32
	pageSizeWithDefault             *int32
	pageWithDefault                 *int32
	paging                          *bool
	pagingRequest                   *bool
	rawOrder                        *[]OrderCriteria
	skipPaging                      *bool
	sortingRequest                  *bool
	totalPages                      *bool
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) ProgramStageId(programStageId string) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.programStageId = &programStageId
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) AllowedOrderingFields(allowedOrderingFields []string) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.allowedOrderingFields = &allowedOrderingFields
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) DtoNameToDatabaseNameTranslator(dtoNameToDatabaseNameTranslator interface{}) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.dtoNameToDatabaseNameTranslator = &dtoNameToDatabaseNameTranslator
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) Fields(fields []string) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.fields = &fields
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) Filter(filter []string) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) FirstResult(firstResult int32) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.firstResult = &firstResult
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) Legacy(legacy bool) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.legacy = &legacy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) Order(order []OrderCriteria) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.order = &order
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) Page(page int32) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) PageSize(pageSize int32) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) PageSizeWithDefault(pageSizeWithDefault int32) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.pageSizeWithDefault = &pageSizeWithDefault
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) PageWithDefault(pageWithDefault int32) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.pageWithDefault = &pageWithDefault
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) Paging(paging bool) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) PagingRequest(pagingRequest bool) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.pagingRequest = &pagingRequest
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) RawOrder(rawOrder []OrderCriteria) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.rawOrder = &rawOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) SkipPaging(skipPaging bool) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.skipPaging = &skipPaging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) SortingRequest(sortingRequest bool) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.sortingRequest = &sortingRequest
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryDimensionsRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetQueryDimensionsRequest {
	r.totalPages = &totalPages
	return r
}

func (r ApiEventAnalyticsGetQueryDimensionsRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.EventAnalyticsGetQueryDimensionsExecute(r)
}

/*
EventAnalyticsGetQueryDimensions Method for EventAnalyticsGetQueryDimensions

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiEventAnalyticsGetQueryDimensionsRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetQueryDimensions(ctx context.Context) ApiEventAnalyticsGetQueryDimensionsRequest {
	return ApiEventAnalyticsGetQueryDimensionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *AnalyticsAPIService) EventAnalyticsGetQueryDimensionsExecute(r ApiEventAnalyticsGetQueryDimensionsRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetQueryDimensions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/query/dimensions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.programStageId == nil {
		return localVarReturnValue, nil, reportError("programStageId is required and must be specified")
	}

	if r.allowedOrderingFields != nil {
		t := *r.allowedOrderingFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowedOrderingFields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowedOrderingFields", t, "multi")
		}
	}
	if r.dtoNameToDatabaseNameTranslator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dtoNameToDatabaseNameTranslator", r.dtoNameToDatabaseNameTranslator, "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.legacy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "legacy", r.legacy, "")
	}
	if r.order != nil {
		t := *r.order
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "order", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "order", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageSizeWithDefault != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSizeWithDefault", r.pageSizeWithDefault, "")
	}
	if r.pageWithDefault != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageWithDefault", r.pageWithDefault, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.pagingRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagingRequest", r.pagingRequest, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "programStageId", r.programStageId, "")
	if r.rawOrder != nil {
		t := *r.rawOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rawOrder", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rawOrder", t, "multi")
		}
	}
	if r.skipPaging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipPaging", r.skipPaging, "")
	}
	if r.sortingRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortingRequest", r.sortingRequest, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetQueryHtmlRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Asc(asc []string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Columns(columns string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Desc(desc []string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Dimension(dimension []string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetQueryHtmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) EventDate(eventDate string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Filter(filter []string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Headers(headers []string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Limit(limit int32) ApiEventAnalyticsGetQueryHtmlRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) OuMode(ouMode string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) OutputType(outputType string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Page(page int32) ApiEventAnalyticsGetQueryHtmlRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) PageSize(pageSize int32) ApiEventAnalyticsGetQueryHtmlRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Paging(paging bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetQueryHtmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) RowContext(rowContext bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Rows(rows string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) SkipData(skipData bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Stage(stage string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetQueryHtmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) TimeField(timeField string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetQueryHtmlRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlRequest) Value(value string) ApiEventAnalyticsGetQueryHtmlRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetQueryHtmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.EventAnalyticsGetQueryHtmlExecute(r)
}

/*
EventAnalyticsGetQueryHtml Method for EventAnalyticsGetQueryHtml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetQueryHtmlRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetQueryHtml(ctx context.Context, program string) ApiEventAnalyticsGetQueryHtmlRequest {
	return ApiEventAnalyticsGetQueryHtmlRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EventAnalyticsGetQueryHtmlExecute(r ApiEventAnalyticsGetQueryHtmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetQueryHtml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/query/{program}.html"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetQueryHtmlCssRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Asc(asc []string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Columns(columns string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Desc(desc []string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Dimension(dimension []string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) EventDate(eventDate string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Filter(filter []string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Headers(headers []string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Limit(limit int32) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) OuMode(ouMode string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) OutputType(outputType string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Page(page int32) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) PageSize(pageSize int32) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Paging(paging bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) RowContext(rowContext bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Rows(rows string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) SkipData(skipData bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Stage(stage string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) TimeField(timeField string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Value(value string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetQueryHtmlCssRequest) Execute() (*http.Response, error) {
	return r.ApiService.EventAnalyticsGetQueryHtmlCssExecute(r)
}

/*
EventAnalyticsGetQueryHtmlCss Method for EventAnalyticsGetQueryHtmlCss

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetQueryHtmlCssRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetQueryHtmlCss(ctx context.Context, program string) ApiEventAnalyticsGetQueryHtmlCssRequest {
	return ApiEventAnalyticsGetQueryHtmlCssRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EventAnalyticsGetQueryHtmlCssExecute(r ApiEventAnalyticsGetQueryHtmlCssRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetQueryHtmlCss")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/query/{program}.html+css"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetQueryJsonRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetQueryJsonRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Asc(asc []string) ApiEventAnalyticsGetQueryJsonRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Columns(columns string) ApiEventAnalyticsGetQueryJsonRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetQueryJsonRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetQueryJsonRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Desc(desc []string) ApiEventAnalyticsGetQueryJsonRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Dimension(dimension []string) ApiEventAnalyticsGetQueryJsonRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetQueryJsonRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetQueryJsonRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetQueryJsonRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetQueryJsonRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetQueryJsonRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) EventDate(eventDate string) ApiEventAnalyticsGetQueryJsonRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetQueryJsonRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetQueryJsonRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Filter(filter []string) ApiEventAnalyticsGetQueryJsonRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Headers(headers []string) ApiEventAnalyticsGetQueryJsonRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetQueryJsonRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetQueryJsonRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Limit(limit int32) ApiEventAnalyticsGetQueryJsonRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetQueryJsonRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) OuMode(ouMode string) ApiEventAnalyticsGetQueryJsonRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetQueryJsonRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) OutputType(outputType string) ApiEventAnalyticsGetQueryJsonRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Page(page int32) ApiEventAnalyticsGetQueryJsonRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) PageSize(pageSize int32) ApiEventAnalyticsGetQueryJsonRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Paging(paging bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetQueryJsonRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetQueryJsonRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) RowContext(rowContext bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Rows(rows string) ApiEventAnalyticsGetQueryJsonRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetQueryJsonRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) SkipData(skipData bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetQueryJsonRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Stage(stage string) ApiEventAnalyticsGetQueryJsonRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetQueryJsonRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) TimeField(timeField string) ApiEventAnalyticsGetQueryJsonRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetQueryJsonRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetQueryJsonRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryJsonRequest) Value(value string) ApiEventAnalyticsGetQueryJsonRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetQueryJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.EventAnalyticsGetQueryJsonExecute(r)
}

/*
EventAnalyticsGetQueryJson Method for EventAnalyticsGetQueryJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetQueryJsonRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetQueryJson(ctx context.Context, program string) ApiEventAnalyticsGetQueryJsonRequest {
	return ApiEventAnalyticsGetQueryJsonRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) EventAnalyticsGetQueryJsonExecute(r ApiEventAnalyticsGetQueryJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetQueryJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/query/{program}"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/javascript", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetQueryXlsRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetQueryXlsRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Asc(asc []string) ApiEventAnalyticsGetQueryXlsRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Columns(columns string) ApiEventAnalyticsGetQueryXlsRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetQueryXlsRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetQueryXlsRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Desc(desc []string) ApiEventAnalyticsGetQueryXlsRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Dimension(dimension []string) ApiEventAnalyticsGetQueryXlsRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetQueryXlsRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetQueryXlsRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetQueryXlsRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetQueryXlsRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetQueryXlsRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) EventDate(eventDate string) ApiEventAnalyticsGetQueryXlsRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetQueryXlsRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetQueryXlsRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Filter(filter []string) ApiEventAnalyticsGetQueryXlsRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Headers(headers []string) ApiEventAnalyticsGetQueryXlsRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetQueryXlsRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetQueryXlsRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Limit(limit int32) ApiEventAnalyticsGetQueryXlsRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetQueryXlsRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) OuMode(ouMode string) ApiEventAnalyticsGetQueryXlsRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetQueryXlsRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) OutputType(outputType string) ApiEventAnalyticsGetQueryXlsRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Page(page int32) ApiEventAnalyticsGetQueryXlsRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) PageSize(pageSize int32) ApiEventAnalyticsGetQueryXlsRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Paging(paging bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetQueryXlsRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetQueryXlsRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) RowContext(rowContext bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Rows(rows string) ApiEventAnalyticsGetQueryXlsRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetQueryXlsRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) SkipData(skipData bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetQueryXlsRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Stage(stage string) ApiEventAnalyticsGetQueryXlsRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetQueryXlsRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) TimeField(timeField string) ApiEventAnalyticsGetQueryXlsRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetQueryXlsRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetQueryXlsRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXlsRequest) Value(value string) ApiEventAnalyticsGetQueryXlsRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetQueryXlsRequest) Execute() (*http.Response, error) {
	return r.ApiService.EventAnalyticsGetQueryXlsExecute(r)
}

/*
EventAnalyticsGetQueryXls Method for EventAnalyticsGetQueryXls

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetQueryXlsRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetQueryXls(ctx context.Context, program string) ApiEventAnalyticsGetQueryXlsRequest {
	return ApiEventAnalyticsGetQueryXlsRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EventAnalyticsGetQueryXlsExecute(r ApiEventAnalyticsGetQueryXlsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetQueryXls")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/query/{program}.xls"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEventAnalyticsGetQueryXmlRequest struct {
	ctx                       context.Context
	ApiService                *AnalyticsAPIService
	program                   string
	aggregateData             *bool
	aggregateEndpoint         *bool
	aggregationType           *string
	asc                       *[]string
	collapseDataDimensions    *bool
	columns                   *string
	completedOnly             *bool
	coordinateField           *string
	coordinatesOnly           *bool
	dataIdScheme              *string
	defaultCoordinateFallback *bool
	desc                      *[]string
	dimension                 *[]string
	displayProperty           *string
	endDate                   *time.Time
	endpointAction            *string
	endpointItem              *string
	enhancedConditions        *bool
	enrollmentDate            *string
	enrollmentEndpointItem    *bool
	eventDate                 *string
	eventStatus               *[]string
	fallbackCoordinateField   *string
	filter                    *[]string
	headers                   *[]string
	hierarchyMeta             *bool
	incidentDate              *string
	includeMetadataDetails    *bool
	lastUpdated               *string
	limit                     *int32
	orgUnitField              *string
	ouMode                    *string
	outputIdScheme            *string
	outputType                *string
	page                      *int32
	pageSize                  *int32
	paging                    *bool
	programStatus             *[]string
	queryEndpoint             *bool
	relativePeriodDate        *time.Time
	rowContext                *bool
	rows                      *string
	scheduledDate             *string
	showHierarchy             *bool
	skipData                  *bool
	skipMeta                  *bool
	skipRounding              *bool
	sortOrder                 *string
	stage                     *string
	startDate                 *time.Time
	timeField                 *string
	totalPages                *bool
	userOrgUnit               *string
	value                     *string
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) AggregateData(aggregateData bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.aggregateData = &aggregateData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) AggregateEndpoint(aggregateEndpoint bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.aggregateEndpoint = &aggregateEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) AggregationType(aggregationType string) ApiEventAnalyticsGetQueryXmlRequest {
	r.aggregationType = &aggregationType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Asc(asc []string) ApiEventAnalyticsGetQueryXmlRequest {
	r.asc = &asc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) CollapseDataDimensions(collapseDataDimensions bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.collapseDataDimensions = &collapseDataDimensions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Columns(columns string) ApiEventAnalyticsGetQueryXmlRequest {
	r.columns = &columns
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) CompletedOnly(completedOnly bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.completedOnly = &completedOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) CoordinateField(coordinateField string) ApiEventAnalyticsGetQueryXmlRequest {
	r.coordinateField = &coordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) CoordinatesOnly(coordinatesOnly bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.coordinatesOnly = &coordinatesOnly
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) DataIdScheme(dataIdScheme string) ApiEventAnalyticsGetQueryXmlRequest {
	r.dataIdScheme = &dataIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) DefaultCoordinateFallback(defaultCoordinateFallback bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.defaultCoordinateFallback = &defaultCoordinateFallback
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Desc(desc []string) ApiEventAnalyticsGetQueryXmlRequest {
	r.desc = &desc
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Dimension(dimension []string) ApiEventAnalyticsGetQueryXmlRequest {
	r.dimension = &dimension
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) DisplayProperty(displayProperty string) ApiEventAnalyticsGetQueryXmlRequest {
	r.displayProperty = &displayProperty
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) EndDate(endDate time.Time) ApiEventAnalyticsGetQueryXmlRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) EndpointAction(endpointAction string) ApiEventAnalyticsGetQueryXmlRequest {
	r.endpointAction = &endpointAction
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) EndpointItem(endpointItem string) ApiEventAnalyticsGetQueryXmlRequest {
	r.endpointItem = &endpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) EnhancedConditions(enhancedConditions bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.enhancedConditions = &enhancedConditions
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) EnrollmentDate(enrollmentDate string) ApiEventAnalyticsGetQueryXmlRequest {
	r.enrollmentDate = &enrollmentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) EnrollmentEndpointItem(enrollmentEndpointItem bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.enrollmentEndpointItem = &enrollmentEndpointItem
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) EventDate(eventDate string) ApiEventAnalyticsGetQueryXmlRequest {
	r.eventDate = &eventDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) EventStatus(eventStatus []string) ApiEventAnalyticsGetQueryXmlRequest {
	r.eventStatus = &eventStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) FallbackCoordinateField(fallbackCoordinateField string) ApiEventAnalyticsGetQueryXmlRequest {
	r.fallbackCoordinateField = &fallbackCoordinateField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Filter(filter []string) ApiEventAnalyticsGetQueryXmlRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Headers(headers []string) ApiEventAnalyticsGetQueryXmlRequest {
	r.headers = &headers
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) HierarchyMeta(hierarchyMeta bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.hierarchyMeta = &hierarchyMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) IncidentDate(incidentDate string) ApiEventAnalyticsGetQueryXmlRequest {
	r.incidentDate = &incidentDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) IncludeMetadataDetails(includeMetadataDetails bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.includeMetadataDetails = &includeMetadataDetails
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) LastUpdated(lastUpdated string) ApiEventAnalyticsGetQueryXmlRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Limit(limit int32) ApiEventAnalyticsGetQueryXmlRequest {
	r.limit = &limit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) OrgUnitField(orgUnitField string) ApiEventAnalyticsGetQueryXmlRequest {
	r.orgUnitField = &orgUnitField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) OuMode(ouMode string) ApiEventAnalyticsGetQueryXmlRequest {
	r.ouMode = &ouMode
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) OutputIdScheme(outputIdScheme string) ApiEventAnalyticsGetQueryXmlRequest {
	r.outputIdScheme = &outputIdScheme
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) OutputType(outputType string) ApiEventAnalyticsGetQueryXmlRequest {
	r.outputType = &outputType
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Page(page int32) ApiEventAnalyticsGetQueryXmlRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) PageSize(pageSize int32) ApiEventAnalyticsGetQueryXmlRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Paging(paging bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) ProgramStatus(programStatus []string) ApiEventAnalyticsGetQueryXmlRequest {
	r.programStatus = &programStatus
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) QueryEndpoint(queryEndpoint bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.queryEndpoint = &queryEndpoint
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) RelativePeriodDate(relativePeriodDate time.Time) ApiEventAnalyticsGetQueryXmlRequest {
	r.relativePeriodDate = &relativePeriodDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) RowContext(rowContext bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.rowContext = &rowContext
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Rows(rows string) ApiEventAnalyticsGetQueryXmlRequest {
	r.rows = &rows
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) ScheduledDate(scheduledDate string) ApiEventAnalyticsGetQueryXmlRequest {
	r.scheduledDate = &scheduledDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) ShowHierarchy(showHierarchy bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.showHierarchy = &showHierarchy
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) SkipData(skipData bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.skipData = &skipData
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) SkipMeta(skipMeta bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.skipMeta = &skipMeta
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) SkipRounding(skipRounding bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.skipRounding = &skipRounding
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) SortOrder(sortOrder string) ApiEventAnalyticsGetQueryXmlRequest {
	r.sortOrder = &sortOrder
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Stage(stage string) ApiEventAnalyticsGetQueryXmlRequest {
	r.stage = &stage
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) StartDate(startDate time.Time) ApiEventAnalyticsGetQueryXmlRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) TimeField(timeField string) ApiEventAnalyticsGetQueryXmlRequest {
	r.timeField = &timeField
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) TotalPages(totalPages bool) ApiEventAnalyticsGetQueryXmlRequest {
	r.totalPages = &totalPages
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) UserOrgUnit(userOrgUnit string) ApiEventAnalyticsGetQueryXmlRequest {
	r.userOrgUnit = &userOrgUnit
	return r
}

// [no description yet]
func (r ApiEventAnalyticsGetQueryXmlRequest) Value(value string) ApiEventAnalyticsGetQueryXmlRequest {
	r.value = &value
	return r
}

func (r ApiEventAnalyticsGetQueryXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.EventAnalyticsGetQueryXmlExecute(r)
}

/*
EventAnalyticsGetQueryXml Method for EventAnalyticsGetQueryXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param program [no description yet]
	@return ApiEventAnalyticsGetQueryXmlRequest
*/
func (a *AnalyticsAPIService) EventAnalyticsGetQueryXml(ctx context.Context, program string) ApiEventAnalyticsGetQueryXmlRequest {
	return ApiEventAnalyticsGetQueryXmlRequest{
		ApiService: a,
		ctx:        ctx,
		program:    program,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) EventAnalyticsGetQueryXmlExecute(r ApiEventAnalyticsGetQueryXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.EventAnalyticsGetQueryXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/analytics/events/query/{program}.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"program"+"}", url.PathEscape(parameterValueToString(r.program, "program")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aggregateData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateData", r.aggregateData, "")
	} else {
		var defaultValue bool = false
		r.aggregateData = &defaultValue
	}
	if r.aggregateEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateEndpoint", r.aggregateEndpoint, "")
	}
	if r.aggregationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregationType", r.aggregationType, "")
	}
	if r.asc != nil {
		t := *r.asc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asc", t, "multi")
		}
	}
	if r.collapseDataDimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseDataDimensions", r.collapseDataDimensions, "")
	} else {
		var defaultValue bool = false
		r.collapseDataDimensions = &defaultValue
	}
	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	if r.completedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedOnly", r.completedOnly, "")
	} else {
		var defaultValue bool = false
		r.completedOnly = &defaultValue
	}
	if r.coordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinateField", r.coordinateField, "")
	}
	if r.coordinatesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinatesOnly", r.coordinatesOnly, "")
	} else {
		var defaultValue bool = false
		r.coordinatesOnly = &defaultValue
	}
	if r.dataIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataIdScheme", r.dataIdScheme, "")
	}
	if r.defaultCoordinateFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCoordinateFallback", r.defaultCoordinateFallback, "")
	} else {
		var defaultValue bool = false
		r.defaultCoordinateFallback = &defaultValue
	}
	if r.desc != nil {
		t := *r.desc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "desc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "desc", t, "multi")
		}
	}
	if r.dimension != nil {
		t := *r.dimension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimension", t, "multi")
		}
	}
	if r.displayProperty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayProperty", r.displayProperty, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.endpointAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointAction", r.endpointAction, "")
	} else {
		var defaultValue string = "OTHER"
		r.endpointAction = &defaultValue
	}
	if r.endpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointItem", r.endpointItem, "")
	}
	if r.enhancedConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enhancedConditions", r.enhancedConditions, "")
	} else {
		var defaultValue bool = false
		r.enhancedConditions = &defaultValue
	}
	if r.enrollmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentDate", r.enrollmentDate, "")
	}
	if r.enrollmentEndpointItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enrollmentEndpointItem", r.enrollmentEndpointItem, "")
	}
	if r.eventDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventDate", r.eventDate, "")
	}
	if r.eventStatus != nil {
		t := *r.eventStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventStatus", t, "multi")
		}
	}
	if r.fallbackCoordinateField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fallbackCoordinateField", r.fallbackCoordinateField, "")
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "multi")
		}
	}
	if r.hierarchyMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hierarchyMeta", r.hierarchyMeta, "")
	} else {
		var defaultValue bool = false
		r.hierarchyMeta = &defaultValue
	}
	if r.incidentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentDate", r.incidentDate, "")
	}
	if r.includeMetadataDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMetadataDetails", r.includeMetadataDetails, "")
	} else {
		var defaultValue bool = false
		r.includeMetadataDetails = &defaultValue
	}
	if r.lastUpdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastUpdated", r.lastUpdated, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orgUnitField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgUnitField", r.orgUnitField, "")
	}
	if r.ouMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ouMode", r.ouMode, "")
	} else {
		var defaultValue string = "DESCENDANTS"
		r.ouMode = &defaultValue
	}
	if r.outputIdScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIdScheme", r.outputIdScheme, "")
	}
	if r.outputType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outputType", r.outputType, "")
	} else {
		var defaultValue string = "EVENT"
		r.outputType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	} else {
		var defaultValue bool = true
		r.paging = &defaultValue
	}
	if r.programStatus != nil {
		t := *r.programStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "programStatus", t, "multi")
		}
	}
	if r.queryEndpoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndpoint", r.queryEndpoint, "")
	}
	if r.relativePeriodDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePeriodDate", r.relativePeriodDate, "")
	}
	if r.rowContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rowContext", r.rowContext, "")
	} else {
		var defaultValue bool = false
		r.rowContext = &defaultValue
	}
	if r.rows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rows", r.rows, "")
	}
	if r.scheduledDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledDate", r.scheduledDate, "")
	}
	if r.showHierarchy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHierarchy", r.showHierarchy, "")
	} else {
		var defaultValue bool = false
		r.showHierarchy = &defaultValue
	}
	if r.skipData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipData", r.skipData, "")
	} else {
		var defaultValue bool = false
		r.skipData = &defaultValue
	}
	if r.skipMeta != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipMeta", r.skipMeta, "")
	} else {
		var defaultValue bool = false
		r.skipMeta = &defaultValue
	}
	if r.skipRounding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipRounding", r.skipRounding, "")
	} else {
		var defaultValue bool = false
		r.skipRounding = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.stage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stage", r.stage, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.timeField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeField", r.timeField, "")
	}
	if r.totalPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPages", r.totalPages, "")
	} else {
		var defaultValue bool = true
		r.totalPages = &defaultValue
	}
	if r.userOrgUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOrgUnit", r.userOrgUnit, "")
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemAddCollectionItemRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	itemId     string
	property   string
	uid        string
}

func (r ApiExpressionDimensionItemAddCollectionItemRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemAddCollectionItemExecute(r)
}

/*
ExpressionDimensionItemAddCollectionItem Method for ExpressionDimensionItemAddCollectionItem

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId [no description yet]
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiExpressionDimensionItemAddCollectionItemRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemAddCollectionItem(ctx context.Context, itemId string, property string, uid string) ApiExpressionDimensionItemAddCollectionItemRequest {
	return ApiExpressionDimensionItemAddCollectionItemRequest{
		ApiService: a,
		ctx:        ctx,
		itemId:     itemId,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemAddCollectionItemExecute(r ApiExpressionDimensionItemAddCollectionItemRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemAddCollectionItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/{property}/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXmlRequest struct {
	ctx                 context.Context
	ApiService          *AnalyticsAPIService
	property            string
	uid                 string
	identifiableObjects *IdentifiableObjects
}

// [no description yet]
func (r ApiExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXmlRequest) IdentifiableObjects(identifiableObjects IdentifiableObjects) ApiExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXmlRequest {
	r.identifiableObjects = &identifiableObjects
	return r
}

func (r ApiExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXmlRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXmlExecute(r)
}

/*
ExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXml Method for ExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXmlRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXml(ctx context.Context, property string, uid string) ApiExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXmlRequest {
	return ApiExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXmlRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXmlExecute(r ApiExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXmlRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemAddCollectionItemsJsonaddCollectionItemsXml")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/{property}"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identifiableObjects
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemBulkSharingRequest struct {
	ctx                context.Context
	ApiService         *AnalyticsAPIService
	atomic             *bool
	atomicMode         *string
	flushMode          *string
	identifier         *string
	importMode         *string
	importReportMode   *string
	importStrategy     *string
	mergeMode          *string
	metadataSyncImport *bool
	page               *int32
	pageSize           *int32
	paging             *bool
	preheatMode        *string
	rootJunction       *string
	skipSharing        *bool
	skipTranslation    *bool
	skipValidation     *bool
	userOverrideMode   *string
	bulkJsonPatch      *BulkJsonPatch
}

// [no description yet]
func (r ApiExpressionDimensionItemBulkSharingRequest) Atomic(atomic bool) ApiExpressionDimensionItemBulkSharingRequest {
	r.atomic = &atomic
	return r
}

// Sets atomic mode, in the old importer we always did a best effort import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the &#x60;NONE&#x60; mode emulated the old behavior.
func (r ApiExpressionDimensionItemBulkSharingRequest) AtomicMode(atomicMode string) ApiExpressionDimensionItemBulkSharingRequest {
	r.atomicMode = &atomicMode
	return r
}

// Sets the flush mode, which controls when to flush the internal cache. It is strongly recommended to keep this to &#x60;AUTO&#x60; (which is the default). Only use &#x60;OBJECT&#x60; for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).
func (r ApiExpressionDimensionItemBulkSharingRequest) FlushMode(flushMode string) ApiExpressionDimensionItemBulkSharingRequest {
	r.flushMode = &flushMode
	return r
}

// Sets the identifier scheme to use for reference matching. &#x60;AUTO&#x60; means try &#x60;UID&#x60; first, then &#x60;CODE&#x60;.
func (r ApiExpressionDimensionItemBulkSharingRequest) Identifier(identifier string) ApiExpressionDimensionItemBulkSharingRequest {
	r.identifier = &identifier
	return r
}

// Sets overall import mode, decides whether or not to only &#x60;VALIDATE&#x60; or also &#x60;COMMIT&#x60; the metadata, this has similar functionality as our old dryRun flag.
func (r ApiExpressionDimensionItemBulkSharingRequest) ImportMode(importMode string) ApiExpressionDimensionItemBulkSharingRequest {
	r.importMode = &importMode
	return r
}

// Sets the &#x60;ImportReport&#x60; mode, controls how much is reported back after the import is done. &#x60;ERRORS&#x60; only includes ObjectReports for object which has errors. &#x60;FULL&#x60; returns an ObjectReport for all objects imported, and &#x60;DEBUG&#x60; returns the same plus a name for the object (if available).
func (r ApiExpressionDimensionItemBulkSharingRequest) ImportReportMode(importReportMode string) ApiExpressionDimensionItemBulkSharingRequest {
	r.importReportMode = &importReportMode
	return r
}

// Sets import strategy, &#x60;CREATE_AND_UPDATE&#x60; will try and match on identifier, if it doesn&#39;t exist, it will create the object.
func (r ApiExpressionDimensionItemBulkSharingRequest) ImportStrategy(importStrategy string) ApiExpressionDimensionItemBulkSharingRequest {
	r.importStrategy = &importStrategy
	return r
}

// Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, &#x60;MERGE&#x60; mode will only overwrite the old property if the new one is not-null, for &#x60;REPLACE&#x60; mode all properties are overwritten regardless of null or not. (*)
func (r ApiExpressionDimensionItemBulkSharingRequest) MergeMode(mergeMode string) ApiExpressionDimensionItemBulkSharingRequest {
	r.mergeMode = &mergeMode
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemBulkSharingRequest) MetadataSyncImport(metadataSyncImport bool) ApiExpressionDimensionItemBulkSharingRequest {
	r.metadataSyncImport = &metadataSyncImport
	return r
}

// Defines which page number to return.
func (r ApiExpressionDimensionItemBulkSharingRequest) Page(page int32) ApiExpressionDimensionItemBulkSharingRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiExpressionDimensionItemBulkSharingRequest) PageSize(pageSize int32) ApiExpressionDimensionItemBulkSharingRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiExpressionDimensionItemBulkSharingRequest) Paging(paging bool) ApiExpressionDimensionItemBulkSharingRequest {
	r.paging = &paging
	return r
}

// Sets the preheater mode, used to signal if preheating should be done for &#x60;ALL&#x60; (as it was before with &#x60;preheatCache&#x3D;true&#x60;) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to &#x60;NONE&#x60; is not recommended.
func (r ApiExpressionDimensionItemBulkSharingRequest) PreheatMode(preheatMode string) ApiExpressionDimensionItemBulkSharingRequest {
	r.preheatMode = &preheatMode
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiExpressionDimensionItemBulkSharingRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemBulkSharingRequest {
	r.rootJunction = &rootJunction
	return r
}

// Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.
func (r ApiExpressionDimensionItemBulkSharingRequest) SkipSharing(skipSharing bool) ApiExpressionDimensionItemBulkSharingRequest {
	r.skipSharing = &skipSharing
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemBulkSharingRequest) SkipTranslation(skipTranslation bool) ApiExpressionDimensionItemBulkSharingRequest {
	r.skipTranslation = &skipTranslation
	return r
}

// Skip validation for import. **NOT RECOMMENDED**
func (r ApiExpressionDimensionItemBulkSharingRequest) SkipValidation(skipValidation bool) ApiExpressionDimensionItemBulkSharingRequest {
	r.skipValidation = &skipValidation
	return r
}

// Allows you to override the user property of every object you are importing, the options are &#x60;NONE&#x60; (do nothing), &#x60;CURRENT&#x60; (use import user), &#x60;SELECTED&#x60; (select a specific user using overrideUser&#x3D;X)
func (r ApiExpressionDimensionItemBulkSharingRequest) UserOverrideMode(userOverrideMode string) ApiExpressionDimensionItemBulkSharingRequest {
	r.userOverrideMode = &userOverrideMode
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemBulkSharingRequest) BulkJsonPatch(bulkJsonPatch BulkJsonPatch) ApiExpressionDimensionItemBulkSharingRequest {
	r.bulkJsonPatch = &bulkJsonPatch
	return r
}

func (r ApiExpressionDimensionItemBulkSharingRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemBulkSharingExecute(r)
}

/*
ExpressionDimensionItemBulkSharing Method for ExpressionDimensionItemBulkSharing

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExpressionDimensionItemBulkSharingRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemBulkSharing(ctx context.Context) ApiExpressionDimensionItemBulkSharingRequest {
	return ApiExpressionDimensionItemBulkSharingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemBulkSharingExecute(r ApiExpressionDimensionItemBulkSharingRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemBulkSharing")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/sharing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.atomic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomic", r.atomic, "")
	} else {
		var defaultValue bool = false
		r.atomic = &defaultValue
	}
	if r.atomicMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomicMode", r.atomicMode, "")
	} else {
		var defaultValue string = "ALL"
		r.atomicMode = &defaultValue
	}
	if r.flushMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flushMode", r.flushMode, "")
	} else {
		var defaultValue string = "AUTO"
		r.flushMode = &defaultValue
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	} else {
		var defaultValue string = "UID"
		r.identifier = &defaultValue
	}
	if r.importMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importMode", r.importMode, "")
	} else {
		var defaultValue string = "COMMIT"
		r.importMode = &defaultValue
	}
	if r.importReportMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importReportMode", r.importReportMode, "")
	} else {
		var defaultValue string = "ERRORS"
		r.importReportMode = &defaultValue
	}
	if r.importStrategy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importStrategy", r.importStrategy, "")
	} else {
		var defaultValue string = "CREATE_AND_UPDATE"
		r.importStrategy = &defaultValue
	}
	if r.mergeMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mergeMode", r.mergeMode, "")
	} else {
		var defaultValue string = "REPLACE"
		r.mergeMode = &defaultValue
	}
	if r.metadataSyncImport != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadataSyncImport", r.metadataSyncImport, "")
	} else {
		var defaultValue bool = false
		r.metadataSyncImport = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.preheatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preheatMode", r.preheatMode, "")
	} else {
		var defaultValue string = "REFERENCE"
		r.preheatMode = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	if r.skipSharing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSharing", r.skipSharing, "")
	} else {
		var defaultValue bool = false
		r.skipSharing = &defaultValue
	}
	if r.skipTranslation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipTranslation", r.skipTranslation, "")
	} else {
		var defaultValue bool = false
		r.skipTranslation = &defaultValue
	}
	if r.skipValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipValidation", r.skipValidation, "")
	} else {
		var defaultValue bool = false
		r.skipValidation = &defaultValue
	}
	if r.userOverrideMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOverrideMode", r.userOverrideMode, "")
	} else {
		var defaultValue string = "NONE"
		r.userOverrideMode = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkJsonPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemDeleteCollectionItemRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	itemId     string
	property   string
	uid        string
}

func (r ApiExpressionDimensionItemDeleteCollectionItemRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemDeleteCollectionItemExecute(r)
}

/*
ExpressionDimensionItemDeleteCollectionItem Method for ExpressionDimensionItemDeleteCollectionItem

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId [no description yet]
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiExpressionDimensionItemDeleteCollectionItemRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemDeleteCollectionItem(ctx context.Context, itemId string, property string, uid string) ApiExpressionDimensionItemDeleteCollectionItemRequest {
	return ApiExpressionDimensionItemDeleteCollectionItemRequest{
		ApiService: a,
		ctx:        ctx,
		itemId:     itemId,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemDeleteCollectionItemExecute(r ApiExpressionDimensionItemDeleteCollectionItemRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemDeleteCollectionItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/{property}/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest struct {
	ctx                 context.Context
	ApiService          *AnalyticsAPIService
	property            string
	uid                 string
	identifiableObjects *IdentifiableObjects
}

// [no description yet]
func (r ApiExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest) IdentifiableObjects(identifiableObjects IdentifiableObjects) ApiExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest {
	r.identifiableObjects = &identifiableObjects
	return r
}

func (r ApiExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXmlExecute(r)
}

/*
ExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXml Method for ExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXml(ctx context.Context, property string, uid string) ApiExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest {
	return ApiExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXmlExecute(r ApiExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXmlRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemDeleteCollectionItemsJsondeleteCollectionItemsXml")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/{property}"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identifiableObjects
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemDeleteObjectRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
}

func (r ApiExpressionDimensionItemDeleteObjectRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemDeleteObjectExecute(r)
}

/*
ExpressionDimensionItemDeleteObject Method for ExpressionDimensionItemDeleteObject

Deletes the ExpressionDimensionItem provided by ID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemDeleteObjectRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemDeleteObject(ctx context.Context, uid string) ApiExpressionDimensionItemDeleteObjectRequest {
	return ApiExpressionDimensionItemDeleteObjectRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemDeleteObjectExecute(r ApiExpressionDimensionItemDeleteObjectRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemDeleteObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemGetObjectRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	uid          string
	fields       *[]string
	filter       *[]string
	page         *int32
	pageSize     *int32
	paging       *bool
	rootJunction *string
}

// Limit the response to specific field(s).    See [Metadata-field-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_field_filter).
func (r ApiExpressionDimensionItemGetObjectRequest) Fields(fields []string) ApiExpressionDimensionItemGetObjectRequest {
	r.fields = &fields
	return r
}

// Apply filter operations to the returned list of metadata.    See [Metadata-object-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_object_filter).
func (r ApiExpressionDimensionItemGetObjectRequest) Filter(filter []string) ApiExpressionDimensionItemGetObjectRequest {
	r.filter = &filter
	return r
}

// Defines which page number to return.
func (r ApiExpressionDimensionItemGetObjectRequest) Page(page int32) ApiExpressionDimensionItemGetObjectRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiExpressionDimensionItemGetObjectRequest) PageSize(pageSize int32) ApiExpressionDimensionItemGetObjectRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiExpressionDimensionItemGetObjectRequest) Paging(paging bool) ApiExpressionDimensionItemGetObjectRequest {
	r.paging = &paging
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiExpressionDimensionItemGetObjectRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemGetObjectRequest {
	r.rootJunction = &rootJunction
	return r
}

func (r ApiExpressionDimensionItemGetObjectRequest) Execute() (*ExpressionDimensionItem, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemGetObjectExecute(r)
}

/*
ExpressionDimensionItemGetObject Method for ExpressionDimensionItemGetObject

View a ExpressionDimensionItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemGetObjectRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObject(ctx context.Context, uid string) ApiExpressionDimensionItemGetObjectRequest {
	return ApiExpressionDimensionItemGetObjectRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return ExpressionDimensionItem
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectExecute(r ApiExpressionDimensionItemGetObjectRequest) (*ExpressionDimensionItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExpressionDimensionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemGetObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemGetObjectGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	uid          string
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Auto(auto string) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Describe(describe bool) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Fields(fields string) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Filter(filter string) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Headless(headless bool) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Inverse(inverse bool) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Locale(locale string) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Order(order string) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Page(page int32) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) PageListName(pageListName string) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) PageSize(pageSize int32) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) References(references bool) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Total(total bool) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Translate(translate bool) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemGetObjectGistAsCsvExecute(r)
}

/*
ExpressionDimensionItemGetObjectGistAsCsv Method for ExpressionDimensionItemGetObjectGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemGetObjectGistAsCsvRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectGistAsCsv(ctx context.Context, uid string) ApiExpressionDimensionItemGetObjectGistAsCsvRequest {
	return ApiExpressionDimensionItemGetObjectGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return string
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectGistAsCsvExecute(r ApiExpressionDimensionItemGetObjectGistAsCsvRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemGetObjectGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/gist.csv"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	uid          string
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Auto(auto string) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Describe(describe bool) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Fields(fields string) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Filter(filter string) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Headless(headless bool) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Inverse(inverse bool) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Locale(locale string) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Order(order string) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Page(page int32) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) PageListName(pageListName string) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) PageSize(pageSize int32) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) References(references bool) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Total(total bool) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Translate(translate bool) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemGetObjectGistgetObjectGistAsCsvExecute(r)
}

/*
ExpressionDimensionItemGetObjectGistgetObjectGistAsCsv Method for ExpressionDimensionItemGetObjectGistgetObjectGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectGistgetObjectGistAsCsv(ctx context.Context, uid string) ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest {
	return ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectGistgetObjectGistAsCsvExecute(r ApiExpressionDimensionItemGetObjectGistgetObjectGistAsCsvRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemGetObjectGistgetObjectGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/gist"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemGetObjectListRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	fields       *[]string
	filter       *[]string
	orders       *[]string
	page         *int32
	pageSize     *int32
	paging       *bool
	rootJunction *string
}

// &#x60;&lt;field-name&gt;[,&lt;field-name&gt;...]&#x60;
func (r ApiExpressionDimensionItemGetObjectListRequest) Fields(fields []string) ApiExpressionDimensionItemGetObjectListRequest {
	r.fields = &fields
	return r
}

// Apply filter operations to the returned list of metadata.    See [Metadata-object-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_object_filter).
func (r ApiExpressionDimensionItemGetObjectListRequest) Filter(filter []string) ApiExpressionDimensionItemGetObjectListRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectListRequest) Orders(orders []string) ApiExpressionDimensionItemGetObjectListRequest {
	r.orders = &orders
	return r
}

// Defines which page number to return.
func (r ApiExpressionDimensionItemGetObjectListRequest) Page(page int32) ApiExpressionDimensionItemGetObjectListRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiExpressionDimensionItemGetObjectListRequest) PageSize(pageSize int32) ApiExpressionDimensionItemGetObjectListRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiExpressionDimensionItemGetObjectListRequest) Paging(paging bool) ApiExpressionDimensionItemGetObjectListRequest {
	r.paging = &paging
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiExpressionDimensionItemGetObjectListRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemGetObjectListRequest {
	r.rootJunction = &rootJunction
	return r
}

func (r ApiExpressionDimensionItemGetObjectListRequest) Execute() (*ExpressionDimensionItemGetObjectList200Response, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemGetObjectListExecute(r)
}

/*
ExpressionDimensionItemGetObjectList Method for ExpressionDimensionItemGetObjectList

List all ExpressionDimensionItems

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExpressionDimensionItemGetObjectListRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectList(ctx context.Context) ApiExpressionDimensionItemGetObjectListRequest {
	return ApiExpressionDimensionItemGetObjectListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ExpressionDimensionItemGetObjectList200Response
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectListExecute(r ApiExpressionDimensionItemGetObjectListRequest) (*ExpressionDimensionItemGetObjectList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExpressionDimensionItemGetObjectList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemGetObjectList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.orders != nil {
		t := *r.orders
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "orders", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "orders", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemGetObjectListCsvRequest struct {
	ctx            context.Context
	ApiService     *AnalyticsAPIService
	arraySeparator *string
	fields         *[]string
	filter         *[]string
	orders         *[]string
	page           *int32
	pageSize       *int32
	paging         *bool
	rootJunction   *string
	separator      *string
	skipHeader     *bool
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectListCsvRequest) ArraySeparator(arraySeparator string) ApiExpressionDimensionItemGetObjectListCsvRequest {
	r.arraySeparator = &arraySeparator
	return r
}

// Limit the response to specific field(s).    See [Metadata-field-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_field_filter).
func (r ApiExpressionDimensionItemGetObjectListCsvRequest) Fields(fields []string) ApiExpressionDimensionItemGetObjectListCsvRequest {
	r.fields = &fields
	return r
}

// Apply filter operations to the returned list of metadata.    See [Metadata-object-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_object_filter).
func (r ApiExpressionDimensionItemGetObjectListCsvRequest) Filter(filter []string) ApiExpressionDimensionItemGetObjectListCsvRequest {
	r.filter = &filter
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectListCsvRequest) Orders(orders []string) ApiExpressionDimensionItemGetObjectListCsvRequest {
	r.orders = &orders
	return r
}

// Defines which page number to return.
func (r ApiExpressionDimensionItemGetObjectListCsvRequest) Page(page int32) ApiExpressionDimensionItemGetObjectListCsvRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiExpressionDimensionItemGetObjectListCsvRequest) PageSize(pageSize int32) ApiExpressionDimensionItemGetObjectListCsvRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiExpressionDimensionItemGetObjectListCsvRequest) Paging(paging bool) ApiExpressionDimensionItemGetObjectListCsvRequest {
	r.paging = &paging
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiExpressionDimensionItemGetObjectListCsvRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemGetObjectListCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectListCsvRequest) Separator(separator string) ApiExpressionDimensionItemGetObjectListCsvRequest {
	r.separator = &separator
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectListCsvRequest) SkipHeader(skipHeader bool) ApiExpressionDimensionItemGetObjectListCsvRequest {
	r.skipHeader = &skipHeader
	return r
}

func (r ApiExpressionDimensionItemGetObjectListCsvRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemGetObjectListCsvExecute(r)
}

/*
ExpressionDimensionItemGetObjectListCsv Method for ExpressionDimensionItemGetObjectListCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExpressionDimensionItemGetObjectListCsvRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectListCsv(ctx context.Context) ApiExpressionDimensionItemGetObjectListCsvRequest {
	return ApiExpressionDimensionItemGetObjectListCsvRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectListCsvExecute(r ApiExpressionDimensionItemGetObjectListCsvRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemGetObjectListCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/#getObjectListCsv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.arraySeparator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arraySeparator", r.arraySeparator, "")
	} else {
		var defaultValue string = ";"
		r.arraySeparator = &defaultValue
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.filter != nil {
		t := *r.filter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter", t, "multi")
		}
	}
	if r.orders != nil {
		t := *r.orders
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "orders", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "orders", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	if r.separator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "separator", r.separator, "")
	} else {
		var defaultValue string = ","
		r.separator = &defaultValue
	}
	if r.skipHeader != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipHeader", r.skipHeader, "")
	} else {
		var defaultValue bool = false
		r.skipHeader = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/text", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemGetObjectListGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Auto(auto string) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Describe(describe bool) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Fields(fields string) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Filter(filter string) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Headless(headless bool) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Inverse(inverse bool) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Locale(locale string) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Order(order string) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Page(page int32) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) PageListName(pageListName string) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) PageSize(pageSize int32) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) References(references bool) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Total(total bool) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Translate(translate bool) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemGetObjectListGistAsCsvExecute(r)
}

/*
ExpressionDimensionItemGetObjectListGistAsCsv Method for ExpressionDimensionItemGetObjectListGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExpressionDimensionItemGetObjectListGistAsCsvRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectListGistAsCsv(ctx context.Context) ApiExpressionDimensionItemGetObjectListGistAsCsvRequest {
	return ApiExpressionDimensionItemGetObjectListGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectListGistAsCsvExecute(r ApiExpressionDimensionItemGetObjectListGistAsCsvRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemGetObjectListGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/gist.csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Auto(auto string) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Describe(describe bool) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Fields(fields string) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Filter(filter string) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Headless(headless bool) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Inverse(inverse bool) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Locale(locale string) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Order(order string) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Page(page int32) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) PageListName(pageListName string) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) PageSize(pageSize int32) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) References(references bool) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Total(total bool) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Translate(translate bool) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) Execute() (*ExpressionDimensionItemGetObjectListGistGetObjectListGistAsCsv200Response, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvExecute(r)
}

/*
ExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsv Method for ExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsv(ctx context.Context) ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest {
	return ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ExpressionDimensionItemGetObjectListGistGetObjectListGistAsCsv200Response
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvExecute(r ApiExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsvRequest) (*ExpressionDimensionItemGetObjectListGistGetObjectListGistAsCsv200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExpressionDimensionItemGetObjectListGistGetObjectListGistAsCsv200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemGetObjectListGistgetObjectListGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/gist"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemGetObjectPropertyRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	property     string
	uid          string
	fields       *[]string
	locale       *string
	page         *int32
	pageSize     *int32
	paging       *bool
	rootJunction *string
	translate    *bool
}

// Limit the response to specific field(s).    See [Metadata-field-filter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata.html#webapi_metadata_field_filter).
func (r ApiExpressionDimensionItemGetObjectPropertyRequest) Fields(fields []string) ApiExpressionDimensionItemGetObjectPropertyRequest {
	r.fields = &fields
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectPropertyRequest) Locale(locale string) ApiExpressionDimensionItemGetObjectPropertyRequest {
	r.locale = &locale
	return r
}

// Defines which page number to return.
func (r ApiExpressionDimensionItemGetObjectPropertyRequest) Page(page int32) ApiExpressionDimensionItemGetObjectPropertyRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiExpressionDimensionItemGetObjectPropertyRequest) PageSize(pageSize int32) ApiExpressionDimensionItemGetObjectPropertyRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiExpressionDimensionItemGetObjectPropertyRequest) Paging(paging bool) ApiExpressionDimensionItemGetObjectPropertyRequest {
	r.paging = &paging
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiExpressionDimensionItemGetObjectPropertyRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemGetObjectPropertyRequest {
	r.rootJunction = &rootJunction
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectPropertyRequest) Translate(translate bool) ApiExpressionDimensionItemGetObjectPropertyRequest {
	r.translate = &translate
	return r
}

func (r ApiExpressionDimensionItemGetObjectPropertyRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemGetObjectPropertyExecute(r)
}

/*
ExpressionDimensionItemGetObjectProperty Method for ExpressionDimensionItemGetObjectProperty

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiExpressionDimensionItemGetObjectPropertyRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectProperty(ctx context.Context, property string, uid string) ApiExpressionDimensionItemGetObjectPropertyRequest {
	return ApiExpressionDimensionItemGetObjectPropertyRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectPropertyExecute(r ApiExpressionDimensionItemGetObjectPropertyRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemGetObjectProperty")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/{property}"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "multi")
		}
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	property     string
	uid          string
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Auto(auto string) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Describe(describe bool) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Fields(fields string) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Filter(filter string) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Headless(headless bool) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Inverse(inverse bool) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Locale(locale string) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Order(order string) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Page(page int32) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) PageListName(pageListName string) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) PageSize(pageSize int32) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) References(references bool) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Total(total bool) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Translate(translate bool) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemGetObjectPropertyGistAsCsvExecute(r)
}

/*
ExpressionDimensionItemGetObjectPropertyGistAsCsv Method for ExpressionDimensionItemGetObjectPropertyGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectPropertyGistAsCsv(ctx context.Context, property string, uid string) ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest {
	return ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return string
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectPropertyGistAsCsvExecute(r ApiExpressionDimensionItemGetObjectPropertyGistAsCsvRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemGetObjectPropertyGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/{property}/gist.csv"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest struct {
	ctx          context.Context
	ApiService   *AnalyticsAPIService
	property     string
	uid          string
	absoluteUrls *bool
	auto         *string
	describe     *bool
	fields       *string
	filter       *string
	headless     *bool
	inverse      *bool
	locale       *string
	order        *string
	page         *int32
	pageListName *string
	pageSize     *int32
	references   *bool
	rootJunction *string
	total        *bool
	translate    *bool
}

// Use absolute (&#x60;true&#x60;) or relative URLs (&#x60;false&#x60;, default) when linking to other objects.   See [Gist absoluteUrls parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_absoluteUrls).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) AbsoluteUrls(absoluteUrls bool) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.absoluteUrls = &absoluteUrls
	return r
}

// The extent of fields to include when no specific list of fields is provided using &#x60;fields&#x60; so that  that listed fields are automatically determined.   See [Gist auto parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-auto-parameter).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Auto(auto string) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.auto = &auto
	return r
}

// When &#x60;true&#x60; the query is not executed but the planned execution is described back similar to using _describe_ in SQL/database context.
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Describe(describe bool) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.describe = &describe
	return r
}

// A comma seperated list of fields to include in the response. &#x60;*&#x60; includes all &#x60;auto&#x60; detected fields.   See [Gist fields parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_fields).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Fields(fields string) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.fields = &fields
	return r
}

// A comma seperated list of filters.   See [Gist filter parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_filter).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Filter(filter string) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.filter = &filter
	return r
}

// Endpoints returning a list by default wrap the items with an envelope containing the pager and the list, which is named according to the type of object listed.   See [Gist headless parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_headless).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Headless(headless bool) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.headless = &headless
	return r
}

// Inverse can be used in context of a collection field gist of the form /api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;/gist to not list all items that are contained in the member collection but all items that are not contained in the member collection.   See [Gist inverse parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#the-inverse-parameter).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Inverse(inverse bool) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.inverse = &inverse
	return r
}

// Switch translation language of display names. If not specified the translation language is the one configured in the users account settings.   See [Gist locale parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_locale).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Locale(locale string) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.locale = &locale
	return r
}

// To sort the list of items - one or more order expressions can be given.   See [Gist order parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_order).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Order(order string) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.order = &order
	return r
}

// The viewed page in paged list starting with 1 for the first page   See [Gist page parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_page).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Page(page int32) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) PageListName(pageListName string) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.pageListName = &pageListName
	return r
}

// The number of items on a page. Maximum is 1000 items.   See [Gist pageSize parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_pageSize).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) PageSize(pageSize int32) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.pageSize = &pageSize
	return r
}

// By default, the Gist API includes links to referenced objects. This can be disabled by using &#x60;references&#x3D;false&#x60;.
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) References(references bool) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.references = &references
	return r
}

// Combine &#x60;filter&#x60;s with &#x60;AND&#x60; (default) or &#x60;OR&#x60; logic combinator   See [Gist rootJunction parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_rootJunction).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.rootJunction = &rootJunction
	return r
}

// By default, a gist query will not count the total number of matches should those exceed the &#x60;pageSize&#x60; limit.   Using &#x60;total&#x3D;true&#x60; the pager includes the total number of matches.   See [Gist total parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_total).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Total(total bool) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.total = &total
	return r
}

// Fields like _name_ or _shortName_ can be translated (internationalised).   By default, any translatable field that has a translation is returned translated given that the user requesting the gist has an interface language configured.   To return the plain non-translated field use &#x60;translate&#x3D;false&#x60;.   See [Gist translate parameter](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/metadata-gist.html#gist_parameters_translate).
func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Translate(translate bool) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	r.translate = &translate
	return r
}

func (r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) Execute() (*AggregateDataExchangeGetObjectPropertyGistGetObjectPropertyGistAsCsv200Response, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvExecute(r)
}

/*
ExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsv Method for ExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsv(ctx context.Context, property string, uid string) ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest {
	return ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return AggregateDataExchangeGetObjectPropertyGistGetObjectPropertyGistAsCsv200Response
func (a *AnalyticsAPIService) ExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvExecute(r ApiExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsvRequest) (*AggregateDataExchangeGetObjectPropertyGistGetObjectPropertyGistAsCsv200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AggregateDataExchangeGetObjectPropertyGistGetObjectPropertyGistAsCsv200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemGetObjectPropertyGistgetObjectPropertyGistAsCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/{property}/gist"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.absoluteUrls != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absoluteUrls", r.absoluteUrls, "")
	} else {
		var defaultValue bool = false
		r.absoluteUrls = &defaultValue
	}
	if r.auto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto", r.auto, "")
	}
	if r.describe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "describe", r.describe, "")
	} else {
		var defaultValue bool = false
		r.describe = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.headless != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "headless", r.headless, "")
	} else {
		var defaultValue bool = false
		r.headless = &defaultValue
	}
	if r.inverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inverse", r.inverse, "")
	} else {
		var defaultValue bool = false
		r.inverse = &defaultValue
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	} else {
		var defaultValue string = ""
		r.locale = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageListName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageListName", r.pageListName, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "")
	} else {
		var defaultValue bool = true
		r.references = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	} else {
		var defaultValue string = "AND"
		r.rootJunction = &defaultValue
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue bool = false
		r.total = &defaultValue
	}
	if r.translate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate", r.translate, "")
	} else {
		var defaultValue bool = true
		r.translate = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemPatchObjectRequest struct {
	ctx                context.Context
	ApiService         *AnalyticsAPIService
	uid                string
	atomicMode         *string
	flushMode          *string
	identifier         *string
	importMode         *string
	importReportMode   *string
	importStrategy     *string
	mergeMode          *string
	metadataSyncImport *bool
	page               *int32
	pageSize           *int32
	paging             *bool
	preheatMode        *string
	rootJunction       *string
	skipSharing        *bool
	skipTranslation    *bool
	skipValidation     *bool
	userOverrideMode   *string
	jsonPatch          *JsonPatch
}

// Sets atomic mode, in the old importer we always did a best effort import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the &#x60;NONE&#x60; mode emulated the old behavior.
func (r ApiExpressionDimensionItemPatchObjectRequest) AtomicMode(atomicMode string) ApiExpressionDimensionItemPatchObjectRequest {
	r.atomicMode = &atomicMode
	return r
}

// Sets the flush mode, which controls when to flush the internal cache. It is strongly recommended to keep this to &#x60;AUTO&#x60; (which is the default). Only use &#x60;OBJECT&#x60; for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).
func (r ApiExpressionDimensionItemPatchObjectRequest) FlushMode(flushMode string) ApiExpressionDimensionItemPatchObjectRequest {
	r.flushMode = &flushMode
	return r
}

// Sets the identifier scheme to use for reference matching. &#x60;AUTO&#x60; means try &#x60;UID&#x60; first, then &#x60;CODE&#x60;.
func (r ApiExpressionDimensionItemPatchObjectRequest) Identifier(identifier string) ApiExpressionDimensionItemPatchObjectRequest {
	r.identifier = &identifier
	return r
}

// Sets overall import mode, decides whether or not to only &#x60;VALIDATE&#x60; or also &#x60;COMMIT&#x60; the metadata, this has similar functionality as our old dryRun flag.
func (r ApiExpressionDimensionItemPatchObjectRequest) ImportMode(importMode string) ApiExpressionDimensionItemPatchObjectRequest {
	r.importMode = &importMode
	return r
}

// Sets the &#x60;ImportReport&#x60; mode, controls how much is reported back after the import is done. &#x60;ERRORS&#x60; only includes ObjectReports for object which has errors. &#x60;FULL&#x60; returns an ObjectReport for all objects imported, and &#x60;DEBUG&#x60; returns the same plus a name for the object (if available).
func (r ApiExpressionDimensionItemPatchObjectRequest) ImportReportMode(importReportMode string) ApiExpressionDimensionItemPatchObjectRequest {
	r.importReportMode = &importReportMode
	return r
}

// Sets import strategy, &#x60;CREATE_AND_UPDATE&#x60; will try and match on identifier, if it doesn&#39;t exist, it will create the object.
func (r ApiExpressionDimensionItemPatchObjectRequest) ImportStrategy(importStrategy string) ApiExpressionDimensionItemPatchObjectRequest {
	r.importStrategy = &importStrategy
	return r
}

// Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, &#x60;MERGE&#x60; mode will only overwrite the old property if the new one is not-null, for &#x60;REPLACE&#x60; mode all properties are overwritten regardless of null or not. (*)
func (r ApiExpressionDimensionItemPatchObjectRequest) MergeMode(mergeMode string) ApiExpressionDimensionItemPatchObjectRequest {
	r.mergeMode = &mergeMode
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemPatchObjectRequest) MetadataSyncImport(metadataSyncImport bool) ApiExpressionDimensionItemPatchObjectRequest {
	r.metadataSyncImport = &metadataSyncImport
	return r
}

// Defines which page number to return.
func (r ApiExpressionDimensionItemPatchObjectRequest) Page(page int32) ApiExpressionDimensionItemPatchObjectRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiExpressionDimensionItemPatchObjectRequest) PageSize(pageSize int32) ApiExpressionDimensionItemPatchObjectRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiExpressionDimensionItemPatchObjectRequest) Paging(paging bool) ApiExpressionDimensionItemPatchObjectRequest {
	r.paging = &paging
	return r
}

// Sets the preheater mode, used to signal if preheating should be done for &#x60;ALL&#x60; (as it was before with &#x60;preheatCache&#x3D;true&#x60;) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to &#x60;NONE&#x60; is not recommended.
func (r ApiExpressionDimensionItemPatchObjectRequest) PreheatMode(preheatMode string) ApiExpressionDimensionItemPatchObjectRequest {
	r.preheatMode = &preheatMode
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiExpressionDimensionItemPatchObjectRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemPatchObjectRequest {
	r.rootJunction = &rootJunction
	return r
}

// Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.
func (r ApiExpressionDimensionItemPatchObjectRequest) SkipSharing(skipSharing bool) ApiExpressionDimensionItemPatchObjectRequest {
	r.skipSharing = &skipSharing
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemPatchObjectRequest) SkipTranslation(skipTranslation bool) ApiExpressionDimensionItemPatchObjectRequest {
	r.skipTranslation = &skipTranslation
	return r
}

// Skip validation for import. **NOT RECOMMENDED**
func (r ApiExpressionDimensionItemPatchObjectRequest) SkipValidation(skipValidation bool) ApiExpressionDimensionItemPatchObjectRequest {
	r.skipValidation = &skipValidation
	return r
}

// Allows you to override the user property of every object you are importing, the options are &#x60;NONE&#x60; (do nothing), &#x60;CURRENT&#x60; (use import user), &#x60;SELECTED&#x60; (select a specific user using overrideUser&#x3D;X)
func (r ApiExpressionDimensionItemPatchObjectRequest) UserOverrideMode(userOverrideMode string) ApiExpressionDimensionItemPatchObjectRequest {
	r.userOverrideMode = &userOverrideMode
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemPatchObjectRequest) JsonPatch(jsonPatch JsonPatch) ApiExpressionDimensionItemPatchObjectRequest {
	r.jsonPatch = &jsonPatch
	return r
}

func (r ApiExpressionDimensionItemPatchObjectRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemPatchObjectExecute(r)
}

/*
ExpressionDimensionItemPatchObject Method for ExpressionDimensionItemPatchObject

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemPatchObjectRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemPatchObject(ctx context.Context, uid string) ApiExpressionDimensionItemPatchObjectRequest {
	return ApiExpressionDimensionItemPatchObjectRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemPatchObjectExecute(r ApiExpressionDimensionItemPatchObjectRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemPatchObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.atomicMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomicMode", r.atomicMode, "")
	} else {
		var defaultValue string = "ALL"
		r.atomicMode = &defaultValue
	}
	if r.flushMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flushMode", r.flushMode, "")
	} else {
		var defaultValue string = "AUTO"
		r.flushMode = &defaultValue
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	} else {
		var defaultValue string = "UID"
		r.identifier = &defaultValue
	}
	if r.importMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importMode", r.importMode, "")
	} else {
		var defaultValue string = "COMMIT"
		r.importMode = &defaultValue
	}
	if r.importReportMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importReportMode", r.importReportMode, "")
	} else {
		var defaultValue string = "ERRORS"
		r.importReportMode = &defaultValue
	}
	if r.importStrategy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importStrategy", r.importStrategy, "")
	} else {
		var defaultValue string = "CREATE_AND_UPDATE"
		r.importStrategy = &defaultValue
	}
	if r.mergeMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mergeMode", r.mergeMode, "")
	} else {
		var defaultValue string = "REPLACE"
		r.mergeMode = &defaultValue
	}
	if r.metadataSyncImport != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadataSyncImport", r.metadataSyncImport, "")
	} else {
		var defaultValue bool = false
		r.metadataSyncImport = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.preheatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preheatMode", r.preheatMode, "")
	} else {
		var defaultValue string = "REFERENCE"
		r.preheatMode = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	if r.skipSharing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSharing", r.skipSharing, "")
	} else {
		var defaultValue bool = false
		r.skipSharing = &defaultValue
	}
	if r.skipTranslation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipTranslation", r.skipTranslation, "")
	} else {
		var defaultValue bool = false
		r.skipTranslation = &defaultValue
	}
	if r.skipValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipValidation", r.skipValidation, "")
	} else {
		var defaultValue bool = false
		r.skipValidation = &defaultValue
	}
	if r.userOverrideMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOverrideMode", r.userOverrideMode, "")
	} else {
		var defaultValue string = "NONE"
		r.userOverrideMode = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jsonPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest struct {
	ctx                     context.Context
	ApiService              *AnalyticsAPIService
	atomicMode              *string
	flushMode               *string
	identifier              *string
	importMode              *string
	importReportMode        *string
	importStrategy          *string
	mergeMode               *string
	metadataSyncImport      *bool
	preheatMode             *string
	skipSharing             *bool
	skipTranslation         *bool
	skipValidation          *bool
	userOverrideMode        *string
	expressionDimensionItem *ExpressionDimensionItem
}

// Sets atomic mode, in the old importer we always did a best effort import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the &#x60;NONE&#x60; mode emulated the old behavior.
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) AtomicMode(atomicMode string) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.atomicMode = &atomicMode
	return r
}

// Sets the flush mode, which controls when to flush the internal cache. It is strongly recommended to keep this to &#x60;AUTO&#x60; (which is the default). Only use &#x60;OBJECT&#x60; for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) FlushMode(flushMode string) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.flushMode = &flushMode
	return r
}

// Sets the identifier scheme to use for reference matching. &#x60;AUTO&#x60; means try &#x60;UID&#x60; first, then &#x60;CODE&#x60;.
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) Identifier(identifier string) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.identifier = &identifier
	return r
}

// Sets overall import mode, decides whether or not to only &#x60;VALIDATE&#x60; or also &#x60;COMMIT&#x60; the metadata, this has similar functionality as our old dryRun flag.
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) ImportMode(importMode string) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.importMode = &importMode
	return r
}

// Sets the &#x60;ImportReport&#x60; mode, controls how much is reported back after the import is done. &#x60;ERRORS&#x60; only includes ObjectReports for object which has errors. &#x60;FULL&#x60; returns an ObjectReport for all objects imported, and &#x60;DEBUG&#x60; returns the same plus a name for the object (if available).
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) ImportReportMode(importReportMode string) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.importReportMode = &importReportMode
	return r
}

// Sets import strategy, &#x60;CREATE_AND_UPDATE&#x60; will try and match on identifier, if it doesn&#39;t exist, it will create the object.
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) ImportStrategy(importStrategy string) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.importStrategy = &importStrategy
	return r
}

// Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, &#x60;MERGE&#x60; mode will only overwrite the old property if the new one is not-null, for &#x60;REPLACE&#x60; mode all properties are overwritten regardless of null or not. (*)
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) MergeMode(mergeMode string) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.mergeMode = &mergeMode
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) MetadataSyncImport(metadataSyncImport bool) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.metadataSyncImport = &metadataSyncImport
	return r
}

// Sets the preheater mode, used to signal if preheating should be done for &#x60;ALL&#x60; (as it was before with &#x60;preheatCache&#x3D;true&#x60;) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to &#x60;NONE&#x60; is not recommended.
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) PreheatMode(preheatMode string) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.preheatMode = &preheatMode
	return r
}

// Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) SkipSharing(skipSharing bool) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.skipSharing = &skipSharing
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) SkipTranslation(skipTranslation bool) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.skipTranslation = &skipTranslation
	return r
}

// Skip validation for import. **NOT RECOMMENDED**
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) SkipValidation(skipValidation bool) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.skipValidation = &skipValidation
	return r
}

// Allows you to override the user property of every object you are importing, the options are &#x60;NONE&#x60; (do nothing), &#x60;CURRENT&#x60; (use import user), &#x60;SELECTED&#x60; (select a specific user using overrideUser&#x3D;X)
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) UserOverrideMode(userOverrideMode string) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.userOverrideMode = &userOverrideMode
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) ExpressionDimensionItem(expressionDimensionItem ExpressionDimensionItem) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	r.expressionDimensionItem = &expressionDimensionItem
	return r
}

func (r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemPostJsonObjectpostXmlObjectExecute(r)
}

/*
ExpressionDimensionItemPostJsonObjectpostXmlObject Method for ExpressionDimensionItemPostJsonObjectpostXmlObject

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemPostJsonObjectpostXmlObject(ctx context.Context) ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest {
	return ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemPostJsonObjectpostXmlObjectExecute(r ApiExpressionDimensionItemPostJsonObjectpostXmlObjectRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemPostJsonObjectpostXmlObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.atomicMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomicMode", r.atomicMode, "")
	} else {
		var defaultValue string = "ALL"
		r.atomicMode = &defaultValue
	}
	if r.flushMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flushMode", r.flushMode, "")
	} else {
		var defaultValue string = "AUTO"
		r.flushMode = &defaultValue
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	} else {
		var defaultValue string = "UID"
		r.identifier = &defaultValue
	}
	if r.importMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importMode", r.importMode, "")
	} else {
		var defaultValue string = "COMMIT"
		r.importMode = &defaultValue
	}
	if r.importReportMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importReportMode", r.importReportMode, "")
	} else {
		var defaultValue string = "ERRORS"
		r.importReportMode = &defaultValue
	}
	if r.importStrategy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importStrategy", r.importStrategy, "")
	} else {
		var defaultValue string = "CREATE_AND_UPDATE"
		r.importStrategy = &defaultValue
	}
	if r.mergeMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mergeMode", r.mergeMode, "")
	} else {
		var defaultValue string = "REPLACE"
		r.mergeMode = &defaultValue
	}
	if r.metadataSyncImport != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadataSyncImport", r.metadataSyncImport, "")
	} else {
		var defaultValue bool = false
		r.metadataSyncImport = &defaultValue
	}
	if r.preheatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preheatMode", r.preheatMode, "")
	} else {
		var defaultValue string = "REFERENCE"
		r.preheatMode = &defaultValue
	}
	if r.skipSharing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSharing", r.skipSharing, "")
	} else {
		var defaultValue bool = false
		r.skipSharing = &defaultValue
	}
	if r.skipTranslation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipTranslation", r.skipTranslation, "")
	} else {
		var defaultValue bool = false
		r.skipTranslation = &defaultValue
	}
	if r.skipValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipValidation", r.skipValidation, "")
	} else {
		var defaultValue bool = false
		r.skipValidation = &defaultValue
	}
	if r.userOverrideMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOverrideMode", r.userOverrideMode, "")
	} else {
		var defaultValue string = "NONE"
		r.userOverrideMode = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml", "text/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.expressionDimensionItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest struct {
	ctx                     context.Context
	ApiService              *AnalyticsAPIService
	uid                     string
	atomicMode              *string
	flushMode               *string
	identifier              *string
	importMode              *string
	importReportMode        *string
	importStrategy          *string
	mergeMode               *string
	metadataSyncImport      *bool
	preheatMode             *string
	skipSharing             *bool
	skipTranslation         *bool
	skipValidation          *bool
	userOverrideMode        *string
	expressionDimensionItem *ExpressionDimensionItem
}

// Sets atomic mode, in the old importer we always did a best effort import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the &#x60;NONE&#x60; mode emulated the old behavior.
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) AtomicMode(atomicMode string) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.atomicMode = &atomicMode
	return r
}

// Sets the flush mode, which controls when to flush the internal cache. It is strongly recommended to keep this to &#x60;AUTO&#x60; (which is the default). Only use &#x60;OBJECT&#x60; for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) FlushMode(flushMode string) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.flushMode = &flushMode
	return r
}

// Sets the identifier scheme to use for reference matching. &#x60;AUTO&#x60; means try &#x60;UID&#x60; first, then &#x60;CODE&#x60;.
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) Identifier(identifier string) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.identifier = &identifier
	return r
}

// Sets overall import mode, decides whether or not to only &#x60;VALIDATE&#x60; or also &#x60;COMMIT&#x60; the metadata, this has similar functionality as our old dryRun flag.
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) ImportMode(importMode string) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.importMode = &importMode
	return r
}

// Sets the &#x60;ImportReport&#x60; mode, controls how much is reported back after the import is done. &#x60;ERRORS&#x60; only includes ObjectReports for object which has errors. &#x60;FULL&#x60; returns an ObjectReport for all objects imported, and &#x60;DEBUG&#x60; returns the same plus a name for the object (if available).
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) ImportReportMode(importReportMode string) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.importReportMode = &importReportMode
	return r
}

// Sets import strategy, &#x60;CREATE_AND_UPDATE&#x60; will try and match on identifier, if it doesn&#39;t exist, it will create the object.
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) ImportStrategy(importStrategy string) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.importStrategy = &importStrategy
	return r
}

// Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, &#x60;MERGE&#x60; mode will only overwrite the old property if the new one is not-null, for &#x60;REPLACE&#x60; mode all properties are overwritten regardless of null or not. (*)
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) MergeMode(mergeMode string) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.mergeMode = &mergeMode
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) MetadataSyncImport(metadataSyncImport bool) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.metadataSyncImport = &metadataSyncImport
	return r
}

// Sets the preheater mode, used to signal if preheating should be done for &#x60;ALL&#x60; (as it was before with &#x60;preheatCache&#x3D;true&#x60;) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to &#x60;NONE&#x60; is not recommended.
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) PreheatMode(preheatMode string) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.preheatMode = &preheatMode
	return r
}

// Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) SkipSharing(skipSharing bool) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.skipSharing = &skipSharing
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) SkipTranslation(skipTranslation bool) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.skipTranslation = &skipTranslation
	return r
}

// Skip validation for import. **NOT RECOMMENDED**
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) SkipValidation(skipValidation bool) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.skipValidation = &skipValidation
	return r
}

// Allows you to override the user property of every object you are importing, the options are &#x60;NONE&#x60; (do nothing), &#x60;CURRENT&#x60; (use import user), &#x60;SELECTED&#x60; (select a specific user using overrideUser&#x3D;X)
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) UserOverrideMode(userOverrideMode string) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.userOverrideMode = &userOverrideMode
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) ExpressionDimensionItem(expressionDimensionItem ExpressionDimensionItem) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	r.expressionDimensionItem = &expressionDimensionItem
	return r
}

func (r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemPutJsonObjectputXmlObjectExecute(r)
}

/*
ExpressionDimensionItemPutJsonObjectputXmlObject Method for ExpressionDimensionItemPutJsonObjectputXmlObject

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemPutJsonObjectputXmlObject(ctx context.Context, uid string) ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest {
	return ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemPutJsonObjectputXmlObjectExecute(r ApiExpressionDimensionItemPutJsonObjectputXmlObjectRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemPutJsonObjectputXmlObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	if r.atomicMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomicMode", r.atomicMode, "")
	} else {
		var defaultValue string = "ALL"
		r.atomicMode = &defaultValue
	}
	if r.flushMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flushMode", r.flushMode, "")
	} else {
		var defaultValue string = "AUTO"
		r.flushMode = &defaultValue
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	} else {
		var defaultValue string = "UID"
		r.identifier = &defaultValue
	}
	if r.importMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importMode", r.importMode, "")
	} else {
		var defaultValue string = "COMMIT"
		r.importMode = &defaultValue
	}
	if r.importReportMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importReportMode", r.importReportMode, "")
	} else {
		var defaultValue string = "ERRORS"
		r.importReportMode = &defaultValue
	}
	if r.importStrategy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importStrategy", r.importStrategy, "")
	} else {
		var defaultValue string = "CREATE_AND_UPDATE"
		r.importStrategy = &defaultValue
	}
	if r.mergeMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mergeMode", r.mergeMode, "")
	} else {
		var defaultValue string = "REPLACE"
		r.mergeMode = &defaultValue
	}
	if r.metadataSyncImport != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadataSyncImport", r.metadataSyncImport, "")
	} else {
		var defaultValue bool = false
		r.metadataSyncImport = &defaultValue
	}
	if r.preheatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preheatMode", r.preheatMode, "")
	} else {
		var defaultValue string = "REFERENCE"
		r.preheatMode = &defaultValue
	}
	if r.skipSharing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSharing", r.skipSharing, "")
	} else {
		var defaultValue bool = false
		r.skipSharing = &defaultValue
	}
	if r.skipTranslation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipTranslation", r.skipTranslation, "")
	} else {
		var defaultValue bool = false
		r.skipTranslation = &defaultValue
	}
	if r.skipValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipValidation", r.skipValidation, "")
	} else {
		var defaultValue bool = false
		r.skipValidation = &defaultValue
	}
	if r.userOverrideMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOverrideMode", r.userOverrideMode, "")
	} else {
		var defaultValue string = "NONE"
		r.userOverrideMode = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml", "text/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.expressionDimensionItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemRemoveAsFavoriteRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
}

func (r ApiExpressionDimensionItemRemoveAsFavoriteRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemRemoveAsFavoriteExecute(r)
}

/*
ExpressionDimensionItemRemoveAsFavorite Method for ExpressionDimensionItemRemoveAsFavorite

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemRemoveAsFavoriteRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemRemoveAsFavorite(ctx context.Context, uid string) ApiExpressionDimensionItemRemoveAsFavoriteRequest {
	return ApiExpressionDimensionItemRemoveAsFavoriteRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemRemoveAsFavoriteExecute(r ApiExpressionDimensionItemRemoveAsFavoriteRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemRemoveAsFavorite")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/favorite"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest struct {
	ctx                 context.Context
	ApiService          *AnalyticsAPIService
	property            string
	uid                 string
	identifiableObjects *IdentifiableObjects
}

// [no description yet]
func (r ApiExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest) IdentifiableObjects(identifiableObjects IdentifiableObjects) ApiExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest {
	r.identifiableObjects = &identifiableObjects
	return r
}

func (r ApiExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXmlExecute(r)
}

/*
ExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXml Method for ExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXml(ctx context.Context, property string, uid string) ApiExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest {
	return ApiExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXmlExecute(r ApiExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXmlRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemReplaceCollectionItemsJsonreplaceCollectionItemsXml")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/{property}"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identifiableObjects
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemReplaceTranslationsRequest struct {
	ctx                                             context.Context
	ApiService                                      *AnalyticsAPIService
	uid                                             string
	aggregateDataExchangeReplaceTranslationsRequest *AggregateDataExchangeReplaceTranslationsRequest
}

// [no description yet]
func (r ApiExpressionDimensionItemReplaceTranslationsRequest) AggregateDataExchangeReplaceTranslationsRequest(aggregateDataExchangeReplaceTranslationsRequest AggregateDataExchangeReplaceTranslationsRequest) ApiExpressionDimensionItemReplaceTranslationsRequest {
	r.aggregateDataExchangeReplaceTranslationsRequest = &aggregateDataExchangeReplaceTranslationsRequest
	return r
}

func (r ApiExpressionDimensionItemReplaceTranslationsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExpressionDimensionItemReplaceTranslationsExecute(r)
}

/*
ExpressionDimensionItemReplaceTranslations Method for ExpressionDimensionItemReplaceTranslations

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemReplaceTranslationsRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemReplaceTranslations(ctx context.Context, uid string) ApiExpressionDimensionItemReplaceTranslationsRequest {
	return ApiExpressionDimensionItemReplaceTranslationsRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) ExpressionDimensionItemReplaceTranslationsExecute(r ApiExpressionDimensionItemReplaceTranslationsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemReplaceTranslations")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/translations"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aggregateDataExchangeReplaceTranslationsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemSetAsFavoriteRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
}

func (r ApiExpressionDimensionItemSetAsFavoriteRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemSetAsFavoriteExecute(r)
}

/*
ExpressionDimensionItemSetAsFavorite Method for ExpressionDimensionItemSetAsFavorite

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemSetAsFavoriteRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemSetAsFavorite(ctx context.Context, uid string) ApiExpressionDimensionItemSetAsFavoriteRequest {
	return ApiExpressionDimensionItemSetAsFavoriteRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemSetAsFavoriteExecute(r ApiExpressionDimensionItemSetAsFavoriteRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemSetAsFavorite")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/favorite"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemSetSharingRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
	sharing    *Sharing
}

// [no description yet]
func (r ApiExpressionDimensionItemSetSharingRequest) Sharing(sharing Sharing) ApiExpressionDimensionItemSetSharingRequest {
	r.sharing = &sharing
	return r
}

func (r ApiExpressionDimensionItemSetSharingRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExpressionDimensionItemSetSharingExecute(r)
}

/*
ExpressionDimensionItemSetSharing Method for ExpressionDimensionItemSetSharing

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemSetSharingRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemSetSharing(ctx context.Context, uid string) ApiExpressionDimensionItemSetSharingRequest {
	return ApiExpressionDimensionItemSetSharingRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) ExpressionDimensionItemSetSharingExecute(r ApiExpressionDimensionItemSetSharingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemSetSharing")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/sharing"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sharing
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemSubscribeRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
}

func (r ApiExpressionDimensionItemSubscribeRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemSubscribeExecute(r)
}

/*
ExpressionDimensionItemSubscribe Method for ExpressionDimensionItemSubscribe

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemSubscribeRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemSubscribe(ctx context.Context, uid string) ApiExpressionDimensionItemSubscribeRequest {
	return ApiExpressionDimensionItemSubscribeRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemSubscribeExecute(r ApiExpressionDimensionItemSubscribeRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemSubscribe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/subscriber"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemUnsubscribeRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	uid        string
}

func (r ApiExpressionDimensionItemUnsubscribeRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionDimensionItemUnsubscribeExecute(r)
}

/*
ExpressionDimensionItemUnsubscribe Method for ExpressionDimensionItemUnsubscribe

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uid [no description yet]
	@return ApiExpressionDimensionItemUnsubscribeRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemUnsubscribe(ctx context.Context, uid string) ApiExpressionDimensionItemUnsubscribeRequest {
	return ApiExpressionDimensionItemUnsubscribeRequest{
		ApiService: a,
		ctx:        ctx,
		uid:        uid,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionDimensionItemUnsubscribeExecute(r ApiExpressionDimensionItemUnsubscribeRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemUnsubscribe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/subscriber"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return localVarReturnValue, nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return localVarReturnValue, nil, reportError("uid must have less than 11 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExpressionDimensionItemUpdateObjectPropertyRequest struct {
	ctx                     context.Context
	ApiService              *AnalyticsAPIService
	property                string
	uid                     string
	atomicMode              *string
	flushMode               *string
	identifier              *string
	importMode              *string
	importReportMode        *string
	importStrategy          *string
	mergeMode               *string
	metadataSyncImport      *bool
	page                    *int32
	pageSize                *int32
	paging                  *bool
	preheatMode             *string
	rootJunction            *string
	skipSharing             *bool
	skipTranslation         *bool
	skipValidation          *bool
	userOverrideMode        *string
	expressionDimensionItem *ExpressionDimensionItem
}

// Sets atomic mode, in the old importer we always did a best effort import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the &#x60;NONE&#x60; mode emulated the old behavior.
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) AtomicMode(atomicMode string) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.atomicMode = &atomicMode
	return r
}

// Sets the flush mode, which controls when to flush the internal cache. It is strongly recommended to keep this to &#x60;AUTO&#x60; (which is the default). Only use &#x60;OBJECT&#x60; for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) FlushMode(flushMode string) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.flushMode = &flushMode
	return r
}

// Sets the identifier scheme to use for reference matching. &#x60;AUTO&#x60; means try &#x60;UID&#x60; first, then &#x60;CODE&#x60;.
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) Identifier(identifier string) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.identifier = &identifier
	return r
}

// Sets overall import mode, decides whether or not to only &#x60;VALIDATE&#x60; or also &#x60;COMMIT&#x60; the metadata, this has similar functionality as our old dryRun flag.
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) ImportMode(importMode string) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.importMode = &importMode
	return r
}

// Sets the &#x60;ImportReport&#x60; mode, controls how much is reported back after the import is done. &#x60;ERRORS&#x60; only includes ObjectReports for object which has errors. &#x60;FULL&#x60; returns an ObjectReport for all objects imported, and &#x60;DEBUG&#x60; returns the same plus a name for the object (if available).
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) ImportReportMode(importReportMode string) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.importReportMode = &importReportMode
	return r
}

// Sets import strategy, &#x60;CREATE_AND_UPDATE&#x60; will try and match on identifier, if it doesn&#39;t exist, it will create the object.
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) ImportStrategy(importStrategy string) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.importStrategy = &importStrategy
	return r
}

// Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, &#x60;MERGE&#x60; mode will only overwrite the old property if the new one is not-null, for &#x60;REPLACE&#x60; mode all properties are overwritten regardless of null or not. (*)
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) MergeMode(mergeMode string) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.mergeMode = &mergeMode
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) MetadataSyncImport(metadataSyncImport bool) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.metadataSyncImport = &metadataSyncImport
	return r
}

// Defines which page number to return.
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) Page(page int32) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.page = &page
	return r
}

// Defines the number of elements to return for each page.
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) PageSize(pageSize int32) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.pageSize = &pageSize
	return r
}

// Indicates whether to return lists of elements in pages.
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) Paging(paging bool) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.paging = &paging
	return r
}

// Sets the preheater mode, used to signal if preheating should be done for &#x60;ALL&#x60; (as it was before with &#x60;preheatCache&#x3D;true&#x60;) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to &#x60;NONE&#x60; is not recommended.
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) PreheatMode(preheatMode string) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.preheatMode = &preheatMode
	return r
}

// Combine filters with &#x60;AND&#x60; (default) or &#x60;OR&#x60;
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) RootJunction(rootJunction string) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.rootJunction = &rootJunction
	return r
}

// Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) SkipSharing(skipSharing bool) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.skipSharing = &skipSharing
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) SkipTranslation(skipTranslation bool) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.skipTranslation = &skipTranslation
	return r
}

// Skip validation for import. **NOT RECOMMENDED**
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) SkipValidation(skipValidation bool) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.skipValidation = &skipValidation
	return r
}

// Allows you to override the user property of every object you are importing, the options are &#x60;NONE&#x60; (do nothing), &#x60;CURRENT&#x60; (use import user), &#x60;SELECTED&#x60; (select a specific user using overrideUser&#x3D;X)
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) UserOverrideMode(userOverrideMode string) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.userOverrideMode = &userOverrideMode
	return r
}

// [no description yet]
func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) ExpressionDimensionItem(expressionDimensionItem ExpressionDimensionItem) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	r.expressionDimensionItem = &expressionDimensionItem
	return r
}

func (r ApiExpressionDimensionItemUpdateObjectPropertyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExpressionDimensionItemUpdateObjectPropertyExecute(r)
}

/*
ExpressionDimensionItemUpdateObjectProperty Method for ExpressionDimensionItemUpdateObjectProperty

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param property [no description yet]
	@param uid [no description yet]
	@return ApiExpressionDimensionItemUpdateObjectPropertyRequest
*/
func (a *AnalyticsAPIService) ExpressionDimensionItemUpdateObjectProperty(ctx context.Context, property string, uid string) ApiExpressionDimensionItemUpdateObjectPropertyRequest {
	return ApiExpressionDimensionItemUpdateObjectPropertyRequest{
		ApiService: a,
		ctx:        ctx,
		property:   property,
		uid:        uid,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) ExpressionDimensionItemUpdateObjectPropertyExecute(r ApiExpressionDimensionItemUpdateObjectPropertyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionDimensionItemUpdateObjectProperty")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressionDimensionItems/{uid}/{property}"
	localVarPath = strings.Replace(localVarPath, "{"+"property"+"}", url.PathEscape(parameterValueToString(r.property, "property")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.uid) < 11 {
		return nil, reportError("uid must have at least 11 elements")
	}
	if strlen(r.uid) > 11 {
		return nil, reportError("uid must have less than 11 elements")
	}

	if r.atomicMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "atomicMode", r.atomicMode, "")
	} else {
		var defaultValue string = "ALL"
		r.atomicMode = &defaultValue
	}
	if r.flushMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flushMode", r.flushMode, "")
	} else {
		var defaultValue string = "AUTO"
		r.flushMode = &defaultValue
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	} else {
		var defaultValue string = "UID"
		r.identifier = &defaultValue
	}
	if r.importMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importMode", r.importMode, "")
	} else {
		var defaultValue string = "COMMIT"
		r.importMode = &defaultValue
	}
	if r.importReportMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importReportMode", r.importReportMode, "")
	} else {
		var defaultValue string = "ERRORS"
		r.importReportMode = &defaultValue
	}
	if r.importStrategy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importStrategy", r.importStrategy, "")
	} else {
		var defaultValue string = "CREATE_AND_UPDATE"
		r.importStrategy = &defaultValue
	}
	if r.mergeMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mergeMode", r.mergeMode, "")
	} else {
		var defaultValue string = "REPLACE"
		r.mergeMode = &defaultValue
	}
	if r.metadataSyncImport != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadataSyncImport", r.metadataSyncImport, "")
	} else {
		var defaultValue bool = false
		r.metadataSyncImport = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.preheatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preheatMode", r.preheatMode, "")
	} else {
		var defaultValue string = "REFERENCE"
		r.preheatMode = &defaultValue
	}
	if r.rootJunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootJunction", r.rootJunction, "")
	}
	if r.skipSharing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSharing", r.skipSharing, "")
	} else {
		var defaultValue bool = false
		r.skipSharing = &defaultValue
	}
	if r.skipTranslation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipTranslation", r.skipTranslation, "")
	} else {
		var defaultValue bool = false
		r.skipTranslation = &defaultValue
	}
	if r.skipValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipValidation", r.skipValidation, "")
	} else {
		var defaultValue bool = false
		r.skipValidation = &defaultValue
	}
	if r.userOverrideMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOverrideMode", r.userOverrideMode, "")
	} else {
		var defaultValue string = "NONE"
		r.userOverrideMode = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.expressionDimensionItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v WebMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExpressionGetExpressionDescriptionRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	expression *string
}

// [no description yet]
func (r ApiExpressionGetExpressionDescriptionRequest) Expression(expression string) ApiExpressionGetExpressionDescriptionRequest {
	r.expression = &expression
	return r
}

func (r ApiExpressionGetExpressionDescriptionRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ExpressionGetExpressionDescriptionExecute(r)
}

/*
ExpressionGetExpressionDescription Method for ExpressionGetExpressionDescription

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExpressionGetExpressionDescriptionRequest
*/
func (a *AnalyticsAPIService) ExpressionGetExpressionDescription(ctx context.Context) ApiExpressionGetExpressionDescriptionRequest {
	return ApiExpressionGetExpressionDescriptionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ExpressionGetExpressionDescriptionExecute(r ApiExpressionGetExpressionDescriptionRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ExpressionGetExpressionDescription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expressions/description"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.expression == nil {
		return localVarReturnValue, nil, reportError("expression is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "expression", r.expression, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMinMaxDataElementDeleteObjectRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
}

func (r ApiMinMaxDataElementDeleteObjectRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.MinMaxDataElementDeleteObjectExecute(r)
}

/*
MinMaxDataElementDeleteObject Method for MinMaxDataElementDeleteObject

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiMinMaxDataElementDeleteObjectRequest
*/
func (a *AnalyticsAPIService) MinMaxDataElementDeleteObject(ctx context.Context) ApiMinMaxDataElementDeleteObjectRequest {
	return ApiMinMaxDataElementDeleteObjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) MinMaxDataElementDeleteObjectExecute(r ApiMinMaxDataElementDeleteObjectRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.MinMaxDataElementDeleteObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/minMaxDataElements/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMinMaxDataElementGetObjectListRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	filters    *[]string
	page       *int32
	pageSize   *int32
	paging     *bool
	skipPaging *bool
	total      *int32
}

// [no description yet]
func (r ApiMinMaxDataElementGetObjectListRequest) Filters(filters []string) ApiMinMaxDataElementGetObjectListRequest {
	r.filters = &filters
	return r
}

// [no description yet]
func (r ApiMinMaxDataElementGetObjectListRequest) Page(page int32) ApiMinMaxDataElementGetObjectListRequest {
	r.page = &page
	return r
}

// [no description yet]
func (r ApiMinMaxDataElementGetObjectListRequest) PageSize(pageSize int32) ApiMinMaxDataElementGetObjectListRequest {
	r.pageSize = &pageSize
	return r
}

// [no description yet]
func (r ApiMinMaxDataElementGetObjectListRequest) Paging(paging bool) ApiMinMaxDataElementGetObjectListRequest {
	r.paging = &paging
	return r
}

// [no description yet]
func (r ApiMinMaxDataElementGetObjectListRequest) SkipPaging(skipPaging bool) ApiMinMaxDataElementGetObjectListRequest {
	r.skipPaging = &skipPaging
	return r
}

// [no description yet]
func (r ApiMinMaxDataElementGetObjectListRequest) Total(total int32) ApiMinMaxDataElementGetObjectListRequest {
	r.total = &total
	return r
}

func (r ApiMinMaxDataElementGetObjectListRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.MinMaxDataElementGetObjectListExecute(r)
}

/*
MinMaxDataElementGetObjectList Method for MinMaxDataElementGetObjectList

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiMinMaxDataElementGetObjectListRequest
*/
func (a *AnalyticsAPIService) MinMaxDataElementGetObjectList(ctx context.Context) ApiMinMaxDataElementGetObjectListRequest {
	return ApiMinMaxDataElementGetObjectListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *AnalyticsAPIService) MinMaxDataElementGetObjectListExecute(r ApiMinMaxDataElementGetObjectListRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.MinMaxDataElementGetObjectList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/minMaxDataElements/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filters", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filters", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 50
		r.pageSize = &defaultValue
	}
	if r.paging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging", r.paging, "")
	}
	if r.skipPaging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipPaging", r.skipPaging, "")
	}
	if r.total != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "total", r.total, "")
	} else {
		var defaultValue int32 = 0
		r.total = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMinMaxDataElementPostJsonObjectRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
}

func (r ApiMinMaxDataElementPostJsonObjectRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.MinMaxDataElementPostJsonObjectExecute(r)
}

/*
MinMaxDataElementPostJsonObject Method for MinMaxDataElementPostJsonObject

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiMinMaxDataElementPostJsonObjectRequest
*/
func (a *AnalyticsAPIService) MinMaxDataElementPostJsonObject(ctx context.Context) ApiMinMaxDataElementPostJsonObjectRequest {
	return ApiMinMaxDataElementPostJsonObjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) MinMaxDataElementPostJsonObjectExecute(r ApiMinMaxDataElementPostJsonObjectRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.MinMaxDataElementPostJsonObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/minMaxDataElements/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMinMaxValueGenerationGenerateMinMaxValueRequest struct {
	ctx               context.Context
	ApiService        *AnalyticsAPIService
	minMaxValueParams *MinMaxValueParams
}

// [no description yet]
func (r ApiMinMaxValueGenerationGenerateMinMaxValueRequest) MinMaxValueParams(minMaxValueParams MinMaxValueParams) ApiMinMaxValueGenerationGenerateMinMaxValueRequest {
	r.minMaxValueParams = &minMaxValueParams
	return r
}

func (r ApiMinMaxValueGenerationGenerateMinMaxValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.MinMaxValueGenerationGenerateMinMaxValueExecute(r)
}

/*
MinMaxValueGenerationGenerateMinMaxValue Method for MinMaxValueGenerationGenerateMinMaxValue

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiMinMaxValueGenerationGenerateMinMaxValueRequest
*/
func (a *AnalyticsAPIService) MinMaxValueGenerationGenerateMinMaxValue(ctx context.Context) ApiMinMaxValueGenerationGenerateMinMaxValueRequest {
	return ApiMinMaxValueGenerationGenerateMinMaxValueRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) MinMaxValueGenerationGenerateMinMaxValueExecute(r ApiMinMaxValueGenerationGenerateMinMaxValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.MinMaxValueGenerationGenerateMinMaxValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/minMaxValues/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.minMaxValueParams == nil {
		return nil, reportError("minMaxValueParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.minMaxValueParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMinMaxValueGenerationRemoveMinMaxValueRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	ds         *[]string
	ou         string
}

// [no description yet]
func (r ApiMinMaxValueGenerationRemoveMinMaxValueRequest) Ds(ds []string) ApiMinMaxValueGenerationRemoveMinMaxValueRequest {
	r.ds = &ds
	return r
}

func (r ApiMinMaxValueGenerationRemoveMinMaxValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.MinMaxValueGenerationRemoveMinMaxValueExecute(r)
}

/*
MinMaxValueGenerationRemoveMinMaxValue Method for MinMaxValueGenerationRemoveMinMaxValue

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ou [no description yet]
	@return ApiMinMaxValueGenerationRemoveMinMaxValueRequest
*/
func (a *AnalyticsAPIService) MinMaxValueGenerationRemoveMinMaxValue(ctx context.Context, ou string) ApiMinMaxValueGenerationRemoveMinMaxValueRequest {
	return ApiMinMaxValueGenerationRemoveMinMaxValueRequest{
		ApiService: a,
		ctx:        ctx,
		ou:         ou,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) MinMaxValueGenerationRemoveMinMaxValueExecute(r ApiMinMaxValueGenerationRemoveMinMaxValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.MinMaxValueGenerationRemoveMinMaxValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/minMaxValues/{ou}"
	localVarPath = strings.Replace(localVarPath, "{"+"ou"+"}", url.PathEscape(parameterValueToString(r.ou, "ou")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ds == nil {
		return nil, reportError("ds is required and must be specified")
	}

	{
		t := *r.ds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ds", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrgUnitAnalyticsGetCsvRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	ou         *string
	ougs       *string
	columns    *string
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetCsvRequest) Ou(ou string) ApiOrgUnitAnalyticsGetCsvRequest {
	r.ou = &ou
	return r
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetCsvRequest) Ougs(ougs string) ApiOrgUnitAnalyticsGetCsvRequest {
	r.ougs = &ougs
	return r
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetCsvRequest) Columns(columns string) ApiOrgUnitAnalyticsGetCsvRequest {
	r.columns = &columns
	return r
}

func (r ApiOrgUnitAnalyticsGetCsvRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrgUnitAnalyticsGetCsvExecute(r)
}

/*
OrgUnitAnalyticsGetCsv Method for OrgUnitAnalyticsGetCsv

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOrgUnitAnalyticsGetCsvRequest
*/
func (a *AnalyticsAPIService) OrgUnitAnalyticsGetCsv(ctx context.Context) ApiOrgUnitAnalyticsGetCsvRequest {
	return ApiOrgUnitAnalyticsGetCsvRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) OrgUnitAnalyticsGetCsvExecute(r ApiOrgUnitAnalyticsGetCsvRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.OrgUnitAnalyticsGetCsv")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgUnitAnalytics.csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ou == nil {
		return nil, reportError("ou is required and must be specified")
	}
	if r.ougs == nil {
		return nil, reportError("ougs is required and must be specified")
	}

	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "ou", r.ou, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "ougs", r.ougs, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrgUnitAnalyticsGetJsonRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	ou         *string
	ougs       *string
	columns    *string
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetJsonRequest) Ou(ou string) ApiOrgUnitAnalyticsGetJsonRequest {
	r.ou = &ou
	return r
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetJsonRequest) Ougs(ougs string) ApiOrgUnitAnalyticsGetJsonRequest {
	r.ougs = &ougs
	return r
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetJsonRequest) Columns(columns string) ApiOrgUnitAnalyticsGetJsonRequest {
	r.columns = &columns
	return r
}

func (r ApiOrgUnitAnalyticsGetJsonRequest) Execute() (*Grid, *http.Response, error) {
	return r.ApiService.OrgUnitAnalyticsGetJsonExecute(r)
}

/*
OrgUnitAnalyticsGetJson Method for OrgUnitAnalyticsGetJson

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOrgUnitAnalyticsGetJsonRequest
*/
func (a *AnalyticsAPIService) OrgUnitAnalyticsGetJson(ctx context.Context) ApiOrgUnitAnalyticsGetJsonRequest {
	return ApiOrgUnitAnalyticsGetJsonRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Grid
func (a *AnalyticsAPIService) OrgUnitAnalyticsGetJsonExecute(r ApiOrgUnitAnalyticsGetJsonRequest) (*Grid, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Grid
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.OrgUnitAnalyticsGetJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgUnitAnalytics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ou == nil {
		return localVarReturnValue, nil, reportError("ou is required and must be specified")
	}
	if r.ougs == nil {
		return localVarReturnValue, nil, reportError("ougs is required and must be specified")
	}

	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "ou", r.ou, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "ougs", r.ougs, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrgUnitAnalyticsGetPdfRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	ou         *string
	ougs       *string
	columns    *string
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetPdfRequest) Ou(ou string) ApiOrgUnitAnalyticsGetPdfRequest {
	r.ou = &ou
	return r
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetPdfRequest) Ougs(ougs string) ApiOrgUnitAnalyticsGetPdfRequest {
	r.ougs = &ougs
	return r
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetPdfRequest) Columns(columns string) ApiOrgUnitAnalyticsGetPdfRequest {
	r.columns = &columns
	return r
}

func (r ApiOrgUnitAnalyticsGetPdfRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrgUnitAnalyticsGetPdfExecute(r)
}

/*
OrgUnitAnalyticsGetPdf Method for OrgUnitAnalyticsGetPdf

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOrgUnitAnalyticsGetPdfRequest
*/
func (a *AnalyticsAPIService) OrgUnitAnalyticsGetPdf(ctx context.Context) ApiOrgUnitAnalyticsGetPdfRequest {
	return ApiOrgUnitAnalyticsGetPdfRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) OrgUnitAnalyticsGetPdfExecute(r ApiOrgUnitAnalyticsGetPdfRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.OrgUnitAnalyticsGetPdf")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgUnitAnalytics.pdf"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ou == nil {
		return nil, reportError("ou is required and must be specified")
	}
	if r.ougs == nil {
		return nil, reportError("ougs is required and must be specified")
	}

	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "ou", r.ou, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "ougs", r.ougs, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrgUnitAnalyticsGetXlsRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
	ou         *string
	ougs       *string
	columns    *string
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetXlsRequest) Ou(ou string) ApiOrgUnitAnalyticsGetXlsRequest {
	r.ou = &ou
	return r
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetXlsRequest) Ougs(ougs string) ApiOrgUnitAnalyticsGetXlsRequest {
	r.ougs = &ougs
	return r
}

// [no description yet]
func (r ApiOrgUnitAnalyticsGetXlsRequest) Columns(columns string) ApiOrgUnitAnalyticsGetXlsRequest {
	r.columns = &columns
	return r
}

func (r ApiOrgUnitAnalyticsGetXlsRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrgUnitAnalyticsGetXlsExecute(r)
}

/*
OrgUnitAnalyticsGetXls Method for OrgUnitAnalyticsGetXls

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOrgUnitAnalyticsGetXlsRequest
*/
func (a *AnalyticsAPIService) OrgUnitAnalyticsGetXls(ctx context.Context) ApiOrgUnitAnalyticsGetXlsRequest {
	return ApiOrgUnitAnalyticsGetXlsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AnalyticsAPIService) OrgUnitAnalyticsGetXlsExecute(r ApiOrgUnitAnalyticsGetXlsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.OrgUnitAnalyticsGetXls")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgUnitAnalytics.xls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ou == nil {
		return nil, reportError("ou is required and must be specified")
	}
	if r.ougs == nil {
		return nil, reportError("ougs is required and must be specified")
	}

	if r.columns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "ou", r.ou, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "ougs", r.ougs, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPredictionRunPredictorsRequest struct {
	ctx            context.Context
	ApiService     *AnalyticsAPIService
	endDate        *time.Time
	startDate      *time.Time
	async          *bool
	predictor      *[]string
	predictorGroup *[]string
}

// [no description yet]
func (r ApiPredictionRunPredictorsRequest) EndDate(endDate time.Time) ApiPredictionRunPredictorsRequest {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiPredictionRunPredictorsRequest) StartDate(startDate time.Time) ApiPredictionRunPredictorsRequest {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiPredictionRunPredictorsRequest) Async(async bool) ApiPredictionRunPredictorsRequest {
	r.async = &async
	return r
}

// [no description yet]
func (r ApiPredictionRunPredictorsRequest) Predictor(predictor []string) ApiPredictionRunPredictorsRequest {
	r.predictor = &predictor
	return r
}

// [no description yet]
func (r ApiPredictionRunPredictorsRequest) PredictorGroup(predictorGroup []string) ApiPredictionRunPredictorsRequest {
	r.predictorGroup = &predictorGroup
	return r
}

func (r ApiPredictionRunPredictorsRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.PredictionRunPredictorsExecute(r)
}

/*
PredictionRunPredictors Method for PredictionRunPredictors

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPredictionRunPredictorsRequest
*/
func (a *AnalyticsAPIService) PredictionRunPredictors(ctx context.Context) ApiPredictionRunPredictorsRequest {
	return ApiPredictionRunPredictorsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) PredictionRunPredictorsExecute(r ApiPredictionRunPredictorsRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.PredictionRunPredictors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/predictions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "")
	} else {
		var defaultValue bool = false
		r.async = &defaultValue
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	if r.predictor != nil {
		t := *r.predictor
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "predictor", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "predictor", t, "multi")
		}
	}
	if r.predictorGroup != nil {
		t := *r.predictorGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "predictorGroup", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "predictorGroup", t, "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPredictionRunPredictors2Request struct {
	ctx            context.Context
	ApiService     *AnalyticsAPIService
	endDate        *time.Time
	startDate      *time.Time
	async          *bool
	predictor      *[]string
	predictorGroup *[]string
}

// [no description yet]
func (r ApiPredictionRunPredictors2Request) EndDate(endDate time.Time) ApiPredictionRunPredictors2Request {
	r.endDate = &endDate
	return r
}

// [no description yet]
func (r ApiPredictionRunPredictors2Request) StartDate(startDate time.Time) ApiPredictionRunPredictors2Request {
	r.startDate = &startDate
	return r
}

// [no description yet]
func (r ApiPredictionRunPredictors2Request) Async(async bool) ApiPredictionRunPredictors2Request {
	r.async = &async
	return r
}

// [no description yet]
func (r ApiPredictionRunPredictors2Request) Predictor(predictor []string) ApiPredictionRunPredictors2Request {
	r.predictor = &predictor
	return r
}

// [no description yet]
func (r ApiPredictionRunPredictors2Request) PredictorGroup(predictorGroup []string) ApiPredictionRunPredictors2Request {
	r.predictorGroup = &predictorGroup
	return r
}

func (r ApiPredictionRunPredictors2Request) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.PredictionRunPredictors2Execute(r)
}

/*
PredictionRunPredictors2 Method for PredictionRunPredictors2

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPredictionRunPredictors2Request
*/
func (a *AnalyticsAPIService) PredictionRunPredictors2(ctx context.Context) ApiPredictionRunPredictors2Request {
	return ApiPredictionRunPredictors2Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) PredictionRunPredictors2Execute(r ApiPredictionRunPredictors2Request) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.PredictionRunPredictors2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/predictions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "")
	} else {
		var defaultValue bool = false
		r.async = &defaultValue
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	if r.predictor != nil {
		t := *r.predictor
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "predictor", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "predictor", t, "multi")
		}
	}
	if r.predictorGroup != nil {
		t := *r.predictorGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "predictorGroup", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "predictorGroup", t, "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportTemplateGetReportDesignHtmlRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
}

func (r ApiReportTemplateGetReportDesignHtmlRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ReportTemplateGetReportDesignHtmlExecute(r)
}

/*
ReportTemplateGetReportDesignHtml Method for ReportTemplateGetReportDesignHtml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiReportTemplateGetReportDesignHtmlRequest
*/
func (a *AnalyticsAPIService) ReportTemplateGetReportDesignHtml(ctx context.Context) ApiReportTemplateGetReportDesignHtmlRequest {
	return ApiReportTemplateGetReportDesignHtmlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *AnalyticsAPIService) ReportTemplateGetReportDesignHtmlExecute(r ApiReportTemplateGetReportDesignHtmlRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ReportTemplateGetReportDesignHtml")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reportTemplate.html"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportTemplateGetReportDesignJrxmlRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
}

func (r ApiReportTemplateGetReportDesignJrxmlRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ReportTemplateGetReportDesignJrxmlExecute(r)
}

/*
ReportTemplateGetReportDesignJrxml Method for ReportTemplateGetReportDesignJrxml

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiReportTemplateGetReportDesignJrxmlRequest
*/
func (a *AnalyticsAPIService) ReportTemplateGetReportDesignJrxml(ctx context.Context) ApiReportTemplateGetReportDesignJrxmlRequest {
	return ApiReportTemplateGetReportDesignJrxmlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *AnalyticsAPIService) ReportTemplateGetReportDesignJrxmlExecute(r ApiReportTemplateGetReportDesignJrxmlRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ReportTemplateGetReportDesignJrxml")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reportTemplate.xml"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceTableAnalyticsRequest struct {
	ctx                  context.Context
	ApiService           *AnalyticsAPIService
	lastYears            *int32
	skipAggregate        *bool
	skipEnrollment       *bool
	skipEvents           *bool
	skipOrgUnitOwnership *bool
	skipResourceTables   *bool
}

// [no description yet]
func (r ApiResourceTableAnalyticsRequest) LastYears(lastYears int32) ApiResourceTableAnalyticsRequest {
	r.lastYears = &lastYears
	return r
}

// [no description yet]
func (r ApiResourceTableAnalyticsRequest) SkipAggregate(skipAggregate bool) ApiResourceTableAnalyticsRequest {
	r.skipAggregate = &skipAggregate
	return r
}

// [no description yet]
func (r ApiResourceTableAnalyticsRequest) SkipEnrollment(skipEnrollment bool) ApiResourceTableAnalyticsRequest {
	r.skipEnrollment = &skipEnrollment
	return r
}

// [no description yet]
func (r ApiResourceTableAnalyticsRequest) SkipEvents(skipEvents bool) ApiResourceTableAnalyticsRequest {
	r.skipEvents = &skipEvents
	return r
}

// [no description yet]
func (r ApiResourceTableAnalyticsRequest) SkipOrgUnitOwnership(skipOrgUnitOwnership bool) ApiResourceTableAnalyticsRequest {
	r.skipOrgUnitOwnership = &skipOrgUnitOwnership
	return r
}

// [no description yet]
func (r ApiResourceTableAnalyticsRequest) SkipResourceTables(skipResourceTables bool) ApiResourceTableAnalyticsRequest {
	r.skipResourceTables = &skipResourceTables
	return r
}

func (r ApiResourceTableAnalyticsRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ResourceTableAnalyticsExecute(r)
}

/*
ResourceTableAnalytics Method for ResourceTableAnalytics

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiResourceTableAnalyticsRequest
*/
func (a *AnalyticsAPIService) ResourceTableAnalytics(ctx context.Context) ApiResourceTableAnalyticsRequest {
	return ApiResourceTableAnalyticsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ResourceTableAnalyticsExecute(r ApiResourceTableAnalyticsRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ResourceTableAnalytics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resourceTables/analytics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.lastYears != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastYears", r.lastYears, "")
	}
	if r.skipAggregate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipAggregate", r.skipAggregate, "")
	}
	if r.skipEnrollment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipEnrollment", r.skipEnrollment, "")
	}
	if r.skipEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipEvents", r.skipEvents, "")
	}
	if r.skipOrgUnitOwnership != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipOrgUnitOwnership", r.skipOrgUnitOwnership, "")
	}
	if r.skipResourceTables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipResourceTables", r.skipResourceTables, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceTableAnalytics2Request struct {
	ctx                  context.Context
	ApiService           *AnalyticsAPIService
	lastYears            *int32
	skipAggregate        *bool
	skipEnrollment       *bool
	skipEvents           *bool
	skipOrgUnitOwnership *bool
	skipResourceTables   *bool
}

// [no description yet]
func (r ApiResourceTableAnalytics2Request) LastYears(lastYears int32) ApiResourceTableAnalytics2Request {
	r.lastYears = &lastYears
	return r
}

// [no description yet]
func (r ApiResourceTableAnalytics2Request) SkipAggregate(skipAggregate bool) ApiResourceTableAnalytics2Request {
	r.skipAggregate = &skipAggregate
	return r
}

// [no description yet]
func (r ApiResourceTableAnalytics2Request) SkipEnrollment(skipEnrollment bool) ApiResourceTableAnalytics2Request {
	r.skipEnrollment = &skipEnrollment
	return r
}

// [no description yet]
func (r ApiResourceTableAnalytics2Request) SkipEvents(skipEvents bool) ApiResourceTableAnalytics2Request {
	r.skipEvents = &skipEvents
	return r
}

// [no description yet]
func (r ApiResourceTableAnalytics2Request) SkipOrgUnitOwnership(skipOrgUnitOwnership bool) ApiResourceTableAnalytics2Request {
	r.skipOrgUnitOwnership = &skipOrgUnitOwnership
	return r
}

// [no description yet]
func (r ApiResourceTableAnalytics2Request) SkipResourceTables(skipResourceTables bool) ApiResourceTableAnalytics2Request {
	r.skipResourceTables = &skipResourceTables
	return r
}

func (r ApiResourceTableAnalytics2Request) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ResourceTableAnalytics2Execute(r)
}

/*
ResourceTableAnalytics2 Method for ResourceTableAnalytics2

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiResourceTableAnalytics2Request
*/
func (a *AnalyticsAPIService) ResourceTableAnalytics2(ctx context.Context) ApiResourceTableAnalytics2Request {
	return ApiResourceTableAnalytics2Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ResourceTableAnalytics2Execute(r ApiResourceTableAnalytics2Request) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ResourceTableAnalytics2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resourceTables/analytics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.lastYears != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastYears", r.lastYears, "")
	}
	if r.skipAggregate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipAggregate", r.skipAggregate, "")
	}
	if r.skipEnrollment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipEnrollment", r.skipEnrollment, "")
	}
	if r.skipEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipEvents", r.skipEvents, "")
	}
	if r.skipOrgUnitOwnership != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipOrgUnitOwnership", r.skipOrgUnitOwnership, "")
	}
	if r.skipResourceTables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipResourceTables", r.skipResourceTables, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceTableMonitoringRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
}

func (r ApiResourceTableMonitoringRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ResourceTableMonitoringExecute(r)
}

/*
ResourceTableMonitoring Method for ResourceTableMonitoring

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiResourceTableMonitoringRequest
*/
func (a *AnalyticsAPIService) ResourceTableMonitoring(ctx context.Context) ApiResourceTableMonitoringRequest {
	return ApiResourceTableMonitoringRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ResourceTableMonitoringExecute(r ApiResourceTableMonitoringRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ResourceTableMonitoring")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resourceTables/monitoring"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceTableMonitoring2Request struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
}

func (r ApiResourceTableMonitoring2Request) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ResourceTableMonitoring2Execute(r)
}

/*
ResourceTableMonitoring2 Method for ResourceTableMonitoring2

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiResourceTableMonitoring2Request
*/
func (a *AnalyticsAPIService) ResourceTableMonitoring2(ctx context.Context) ApiResourceTableMonitoring2Request {
	return ApiResourceTableMonitoring2Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ResourceTableMonitoring2Execute(r ApiResourceTableMonitoring2Request) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ResourceTableMonitoring2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resourceTables/monitoring"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceTableResourceTablesRequest struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
}

func (r ApiResourceTableResourceTablesRequest) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ResourceTableResourceTablesExecute(r)
}

/*
ResourceTableResourceTables Method for ResourceTableResourceTables

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiResourceTableResourceTablesRequest
*/
func (a *AnalyticsAPIService) ResourceTableResourceTables(ctx context.Context) ApiResourceTableResourceTablesRequest {
	return ApiResourceTableResourceTablesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ResourceTableResourceTablesExecute(r ApiResourceTableResourceTablesRequest) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ResourceTableResourceTables")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resourceTables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceTableResourceTables2Request struct {
	ctx        context.Context
	ApiService *AnalyticsAPIService
}

func (r ApiResourceTableResourceTables2Request) Execute() (*WebMessage, *http.Response, error) {
	return r.ApiService.ResourceTableResourceTables2Execute(r)
}

/*
ResourceTableResourceTables2 Method for ResourceTableResourceTables2

[no description yet]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiResourceTableResourceTables2Request
*/
func (a *AnalyticsAPIService) ResourceTableResourceTables2(ctx context.Context) ApiResourceTableResourceTables2Request {
	return ApiResourceTableResourceTables2Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WebMessage
func (a *AnalyticsAPIService) ResourceTableResourceTables2Execute(r ApiResourceTableResourceTables2Request) (*WebMessage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsAPIService.ResourceTableResourceTables2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resourceTables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
