/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesUser the model 'PropertyNamesUser'
type PropertyNamesUser string

// List of PropertyNames_User
const (
	PROPERTYNAMESUSER_ACCESS                                PropertyNamesUser = "access"
	PROPERTYNAMESUSER_ACCOUNT_EXPIRY                        PropertyNamesUser = "accountExpiry"
	PROPERTYNAMESUSER_ATTRIBUTE_VALUES                      PropertyNamesUser = "attributeValues"
	PROPERTYNAMESUSER_AVATAR                                PropertyNamesUser = "avatar"
	PROPERTYNAMESUSER_BIRTHDAY                              PropertyNamesUser = "birthday"
	PROPERTYNAMESUSER_CAT_DIMENSION_CONSTRAINTS             PropertyNamesUser = "catDimensionConstraints"
	PROPERTYNAMESUSER_CODE                                  PropertyNamesUser = "code"
	PROPERTYNAMESUSER_COGS_DIMENSION_CONSTRAINTS            PropertyNamesUser = "cogsDimensionConstraints"
	PROPERTYNAMESUSER_CREATED                               PropertyNamesUser = "created"
	PROPERTYNAMESUSER_CREATED_BY                            PropertyNamesUser = "createdBy"
	PROPERTYNAMESUSER_DATA_VIEW_MAX_ORGANISATION_UNIT_LEVEL PropertyNamesUser = "dataViewMaxOrganisationUnitLevel"
	PROPERTYNAMESUSER_DATA_VIEW_ORGANISATION_UNITS          PropertyNamesUser = "dataViewOrganisationUnits"
	PROPERTYNAMESUSER_DISABLED                              PropertyNamesUser = "disabled"
	PROPERTYNAMESUSER_DISPLAY_NAME                          PropertyNamesUser = "displayName"
	PROPERTYNAMESUSER_EDUCATION                             PropertyNamesUser = "education"
	PROPERTYNAMESUSER_EMAIL                                 PropertyNamesUser = "email"
	PROPERTYNAMESUSER_EMPLOYER                              PropertyNamesUser = "employer"
	PROPERTYNAMESUSER_EXTERNAL_ACCESS                       PropertyNamesUser = "externalAccess"
	PROPERTYNAMESUSER_EXTERNAL_AUTH                         PropertyNamesUser = "externalAuth"
	PROPERTYNAMESUSER_FACEBOOK_MESSENGER                    PropertyNamesUser = "facebookMessenger"
	PROPERTYNAMESUSER_FAVORITE                              PropertyNamesUser = "favorite"
	PROPERTYNAMESUSER_FAVORITES                             PropertyNamesUser = "favorites"
	PROPERTYNAMESUSER_FIRST_NAME                            PropertyNamesUser = "firstName"
	PROPERTYNAMESUSER_GENDER                                PropertyNamesUser = "gender"
	PROPERTYNAMESUSER_HREF                                  PropertyNamesUser = "href"
	PROPERTYNAMESUSER_ID                                    PropertyNamesUser = "id"
	PROPERTYNAMESUSER_INTERESTS                             PropertyNamesUser = "interests"
	PROPERTYNAMESUSER_INTRODUCTION                          PropertyNamesUser = "introduction"
	PROPERTYNAMESUSER_INVITATION                            PropertyNamesUser = "invitation"
	PROPERTYNAMESUSER_JOB_TITLE                             PropertyNamesUser = "jobTitle"
	PROPERTYNAMESUSER_LANGUAGES                             PropertyNamesUser = "languages"
	PROPERTYNAMESUSER_LAST_CHECKED_INTERPRETATIONS          PropertyNamesUser = "lastCheckedInterpretations"
	PROPERTYNAMESUSER_LAST_LOGIN                            PropertyNamesUser = "lastLogin"
	PROPERTYNAMESUSER_LAST_UPDATED                          PropertyNamesUser = "lastUpdated"
	PROPERTYNAMESUSER_LAST_UPDATED_BY                       PropertyNamesUser = "lastUpdatedBy"
	PROPERTYNAMESUSER_LDAP_ID                               PropertyNamesUser = "ldapId"
	PROPERTYNAMESUSER_NATIONALITY                           PropertyNamesUser = "nationality"
	PROPERTYNAMESUSER_OPEN_ID                               PropertyNamesUser = "openId"
	PROPERTYNAMESUSER_ORGANISATION_UNITS                    PropertyNamesUser = "organisationUnits"
	PROPERTYNAMESUSER_PASSWORD                              PropertyNamesUser = "password"
	PROPERTYNAMESUSER_PASSWORD_LAST_UPDATED                 PropertyNamesUser = "passwordLastUpdated"
	PROPERTYNAMESUSER_PHONE_NUMBER                          PropertyNamesUser = "phoneNumber"
	PROPERTYNAMESUSER_PUBLIC_ACCESS                         PropertyNamesUser = "publicAccess"
	PROPERTYNAMESUSER_SELF_REGISTERED                       PropertyNamesUser = "selfRegistered"
	PROPERTYNAMESUSER_SETTINGS                              PropertyNamesUser = "settings"
	PROPERTYNAMESUSER_SHARING                               PropertyNamesUser = "sharing"
	PROPERTYNAMESUSER_SKYPE                                 PropertyNamesUser = "skype"
	PROPERTYNAMESUSER_SURNAME                               PropertyNamesUser = "surname"
	PROPERTYNAMESUSER_TEI_SEARCH_ORGANISATION_UNITS         PropertyNamesUser = "teiSearchOrganisationUnits"
	PROPERTYNAMESUSER_TELEGRAM                              PropertyNamesUser = "telegram"
	PROPERTYNAMESUSER_TRANSLATIONS                          PropertyNamesUser = "translations"
	PROPERTYNAMESUSER_TWITTER                               PropertyNamesUser = "twitter"
	PROPERTYNAMESUSER_TWO_FACTOR_ENABLED                    PropertyNamesUser = "twoFactorEnabled"
	PROPERTYNAMESUSER_USER                                  PropertyNamesUser = "user"
	PROPERTYNAMESUSER_USER_ACCESSES                         PropertyNamesUser = "userAccesses"
	PROPERTYNAMESUSER_USER_CREDENTIALS                      PropertyNamesUser = "userCredentials"
	PROPERTYNAMESUSER_USER_GROUP_ACCESSES                   PropertyNamesUser = "userGroupAccesses"
	PROPERTYNAMESUSER_USER_GROUPS                           PropertyNamesUser = "userGroups"
	PROPERTYNAMESUSER_USER_ROLES                            PropertyNamesUser = "userRoles"
	PROPERTYNAMESUSER_USERNAME                              PropertyNamesUser = "username"
	PROPERTYNAMESUSER_WELCOME_MESSAGE                       PropertyNamesUser = "welcomeMessage"
	PROPERTYNAMESUSER_WHATS_APP                             PropertyNamesUser = "whatsApp"
)

// All allowed values of PropertyNamesUser enum
var AllowedPropertyNamesUserEnumValues = []PropertyNamesUser{
	"access",
	"accountExpiry",
	"attributeValues",
	"avatar",
	"birthday",
	"catDimensionConstraints",
	"code",
	"cogsDimensionConstraints",
	"created",
	"createdBy",
	"dataViewMaxOrganisationUnitLevel",
	"dataViewOrganisationUnits",
	"disabled",
	"displayName",
	"education",
	"email",
	"employer",
	"externalAccess",
	"externalAuth",
	"facebookMessenger",
	"favorite",
	"favorites",
	"firstName",
	"gender",
	"href",
	"id",
	"interests",
	"introduction",
	"invitation",
	"jobTitle",
	"languages",
	"lastCheckedInterpretations",
	"lastLogin",
	"lastUpdated",
	"lastUpdatedBy",
	"ldapId",
	"nationality",
	"openId",
	"organisationUnits",
	"password",
	"passwordLastUpdated",
	"phoneNumber",
	"publicAccess",
	"selfRegistered",
	"settings",
	"sharing",
	"skype",
	"surname",
	"teiSearchOrganisationUnits",
	"telegram",
	"translations",
	"twitter",
	"twoFactorEnabled",
	"user",
	"userAccesses",
	"userCredentials",
	"userGroupAccesses",
	"userGroups",
	"userRoles",
	"username",
	"welcomeMessage",
	"whatsApp",
}

func (v *PropertyNamesUser) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesUser(value)
	for _, existing := range AllowedPropertyNamesUserEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesUser", value)
}

// NewPropertyNamesUserFromValue returns a pointer to a valid PropertyNamesUser
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesUserFromValue(v string) (*PropertyNamesUser, error) {
	ev := PropertyNamesUser(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesUser: valid values are %v", v, AllowedPropertyNamesUserEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesUser) IsValid() bool {
	for _, existing := range AllowedPropertyNamesUserEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_User value
func (v PropertyNamesUser) Ptr() *PropertyNamesUser {
	return &v
}

type NullablePropertyNamesUser struct {
	value *PropertyNamesUser
	isSet bool
}

func (v NullablePropertyNamesUser) Get() *PropertyNamesUser {
	return v.value
}

func (v *NullablePropertyNamesUser) Set(val *PropertyNamesUser) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesUser) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesUser(val *PropertyNamesUser) *NullablePropertyNamesUser {
	return &NullablePropertyNamesUser{value: val, isSet: true}
}

func (v NullablePropertyNamesUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
