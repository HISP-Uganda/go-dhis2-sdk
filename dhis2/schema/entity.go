/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Entity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Entity{}

// Entity struct for Entity
type Entity struct {
	ErrorReports []TrackerImportError `json:"errorReports,omitempty"`
	TrackerType  TrackerType          `json:"trackerType"`
	Uid          *string              `json:"uid,omitempty"`
}

type _Entity Entity

// NewEntity instantiates a new Entity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntity(trackerType TrackerType) *Entity {
	this := Entity{}
	this.TrackerType = trackerType
	return &this
}

// NewEntityWithDefaults instantiates a new Entity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityWithDefaults() *Entity {
	this := Entity{}
	return &this
}

// GetErrorReports returns the ErrorReports field value if set, zero value otherwise.
func (o *Entity) GetErrorReports() []TrackerImportError {
	if o == nil || IsNil(o.ErrorReports) {
		var ret []TrackerImportError
		return ret
	}
	return o.ErrorReports
}

// GetErrorReportsOk returns a tuple with the ErrorReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetErrorReportsOk() ([]TrackerImportError, bool) {
	if o == nil || IsNil(o.ErrorReports) {
		return nil, false
	}
	return o.ErrorReports, true
}

// HasErrorReports returns a boolean if a field has been set.
func (o *Entity) HasErrorReports() bool {
	if o != nil && !IsNil(o.ErrorReports) {
		return true
	}

	return false
}

// SetErrorReports gets a reference to the given []TrackerImportError and assigns it to the ErrorReports field.
func (o *Entity) SetErrorReports(v []TrackerImportError) {
	o.ErrorReports = v
}

// GetTrackerType returns the TrackerType field value
func (o *Entity) GetTrackerType() TrackerType {
	if o == nil {
		var ret TrackerType
		return ret
	}

	return o.TrackerType
}

// GetTrackerTypeOk returns a tuple with the TrackerType field value
// and a boolean to check if the value has been set.
func (o *Entity) GetTrackerTypeOk() (*TrackerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackerType, true
}

// SetTrackerType sets field value
func (o *Entity) SetTrackerType(v TrackerType) {
	o.TrackerType = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *Entity) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entity) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *Entity) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *Entity) SetUid(v string) {
	o.Uid = &v
}

func (o Entity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Entity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorReports) {
		toSerialize["errorReports"] = o.ErrorReports
	}
	toSerialize["trackerType"] = o.TrackerType
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

func (o *Entity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trackerType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntity := _Entity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEntity)

	if err != nil {
		return err
	}

	*o = Entity(varEntity)

	return err
}

type NullableEntity struct {
	value *Entity
	isSet bool
}

func (v NullableEntity) Get() *Entity {
	return v.value
}

func (v *NullableEntity) Set(val *Entity) {
	v.value = val
	v.isSet = true
}

func (v NullableEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntity(val *Entity) *NullableEntity {
	return &NullableEntity{value: val, isSet: true}
}

func (v NullableEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
