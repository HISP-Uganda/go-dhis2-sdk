/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AxisType the model 'AxisType'
type AxisType string

// List of AxisType
const (
	AXISTYPE_DOMAIN AxisType = "DOMAIN"
	AXISTYPE_RANGE  AxisType = "RANGE"
)

// All allowed values of AxisType enum
var AllowedAxisTypeEnumValues = []AxisType{
	"DOMAIN",
	"RANGE",
}

func (v *AxisType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AxisType(value)
	for _, existing := range AllowedAxisTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AxisType", value)
}

// NewAxisTypeFromValue returns a pointer to a valid AxisType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAxisTypeFromValue(v string) (*AxisType, error) {
	ev := AxisType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AxisType: valid values are %v", v, AllowedAxisTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AxisType) IsValid() bool {
	for _, existing := range AllowedAxisTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AxisType value
func (v AxisType) Ptr() *AxisType {
	return &v
}

type NullableAxisType struct {
	value *AxisType
	isSet bool
}

func (v NullableAxisType) Get() *AxisType {
	return v.value
}

func (v *NullableAxisType) Set(val *AxisType) {
	v.value = val
	v.isSet = true
}

func (v NullableAxisType) IsSet() bool {
	return v.isSet
}

func (v *NullableAxisType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAxisType(val *AxisType) *NullableAxisType {
	return &NullableAxisType{value: val, isSet: true}
}

func (v NullableAxisType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAxisType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
