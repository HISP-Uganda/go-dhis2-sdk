/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// ProgramRuleActionEvaluationTime the model 'ProgramRuleActionEvaluationTime'
type ProgramRuleActionEvaluationTime string

// List of ProgramRuleActionEvaluationTime
const (
	PROGRAMRULEACTIONEVALUATIONTIME_ON_DATA_ENTRY ProgramRuleActionEvaluationTime = "ON_DATA_ENTRY"
	PROGRAMRULEACTIONEVALUATIONTIME_ON_COMPLETE   ProgramRuleActionEvaluationTime = "ON_COMPLETE"
	PROGRAMRULEACTIONEVALUATIONTIME_ALWAYS        ProgramRuleActionEvaluationTime = "ALWAYS"
)

// All allowed values of ProgramRuleActionEvaluationTime enum
var AllowedProgramRuleActionEvaluationTimeEnumValues = []ProgramRuleActionEvaluationTime{
	"ON_DATA_ENTRY",
	"ON_COMPLETE",
	"ALWAYS",
}

func (v *ProgramRuleActionEvaluationTime) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProgramRuleActionEvaluationTime(value)
	for _, existing := range AllowedProgramRuleActionEvaluationTimeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProgramRuleActionEvaluationTime", value)
}

// NewProgramRuleActionEvaluationTimeFromValue returns a pointer to a valid ProgramRuleActionEvaluationTime
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProgramRuleActionEvaluationTimeFromValue(v string) (*ProgramRuleActionEvaluationTime, error) {
	ev := ProgramRuleActionEvaluationTime(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProgramRuleActionEvaluationTime: valid values are %v", v, AllowedProgramRuleActionEvaluationTimeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProgramRuleActionEvaluationTime) IsValid() bool {
	for _, existing := range AllowedProgramRuleActionEvaluationTimeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramRuleActionEvaluationTime value
func (v ProgramRuleActionEvaluationTime) Ptr() *ProgramRuleActionEvaluationTime {
	return &v
}

type NullableProgramRuleActionEvaluationTime struct {
	value *ProgramRuleActionEvaluationTime
	isSet bool
}

func (v NullableProgramRuleActionEvaluationTime) Get() *ProgramRuleActionEvaluationTime {
	return v.value
}

func (v *NullableProgramRuleActionEvaluationTime) Set(val *ProgramRuleActionEvaluationTime) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramRuleActionEvaluationTime) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramRuleActionEvaluationTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramRuleActionEvaluationTime(val *ProgramRuleActionEvaluationTime) *NullableProgramRuleActionEvaluationTime {
	return &NullableProgramRuleActionEvaluationTime{value: val, isSet: true}
}

func (v NullableProgramRuleActionEvaluationTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramRuleActionEvaluationTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
