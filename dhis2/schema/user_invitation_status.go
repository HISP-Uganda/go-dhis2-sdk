/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// UserInvitationStatus the model 'UserInvitationStatus'
type UserInvitationStatus string

// List of UserInvitationStatus
const (
	USERINVITATIONSTATUS_NONE    UserInvitationStatus = "NONE"
	USERINVITATIONSTATUS_ALL     UserInvitationStatus = "ALL"
	USERINVITATIONSTATUS_EXPIRED UserInvitationStatus = "EXPIRED"
)

// All allowed values of UserInvitationStatus enum
var AllowedUserInvitationStatusEnumValues = []UserInvitationStatus{
	"NONE",
	"ALL",
	"EXPIRED",
}

func (v *UserInvitationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserInvitationStatus(value)
	for _, existing := range AllowedUserInvitationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserInvitationStatus", value)
}

// NewUserInvitationStatusFromValue returns a pointer to a valid UserInvitationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserInvitationStatusFromValue(v string) (*UserInvitationStatus, error) {
	ev := UserInvitationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserInvitationStatus: valid values are %v", v, AllowedUserInvitationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserInvitationStatus) IsValid() bool {
	for _, existing := range AllowedUserInvitationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserInvitationStatus value
func (v UserInvitationStatus) Ptr() *UserInvitationStatus {
	return &v
}

type NullableUserInvitationStatus struct {
	value *UserInvitationStatus
	isSet bool
}

func (v NullableUserInvitationStatus) Get() *UserInvitationStatus {
	return v.value
}

func (v *NullableUserInvitationStatus) Set(val *UserInvitationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInvitationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInvitationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInvitationStatus(val *UserInvitationStatus) *NullableUserInvitationStatus {
	return &NullableUserInvitationStatus{value: val, isSet: true}
}

func (v NullableUserInvitationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInvitationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
