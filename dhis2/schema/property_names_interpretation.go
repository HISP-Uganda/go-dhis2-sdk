/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesInterpretation the model 'PropertyNamesInterpretation'
type PropertyNamesInterpretation string

// List of PropertyNames_Interpretation
const (
	PROPERTYNAMESINTERPRETATION_ACCESS              PropertyNamesInterpretation = "access"
	PROPERTYNAMESINTERPRETATION_ATTRIBUTE_VALUES    PropertyNamesInterpretation = "attributeValues"
	PROPERTYNAMESINTERPRETATION_CODE                PropertyNamesInterpretation = "code"
	PROPERTYNAMESINTERPRETATION_COMMENTS            PropertyNamesInterpretation = "comments"
	PROPERTYNAMESINTERPRETATION_CREATED             PropertyNamesInterpretation = "created"
	PROPERTYNAMESINTERPRETATION_CREATED_BY          PropertyNamesInterpretation = "createdBy"
	PROPERTYNAMESINTERPRETATION_DATA_SET            PropertyNamesInterpretation = "dataSet"
	PROPERTYNAMESINTERPRETATION_DISPLAY_NAME        PropertyNamesInterpretation = "displayName"
	PROPERTYNAMESINTERPRETATION_EVENT_CHART         PropertyNamesInterpretation = "eventChart"
	PROPERTYNAMESINTERPRETATION_EVENT_REPORT        PropertyNamesInterpretation = "eventReport"
	PROPERTYNAMESINTERPRETATION_EVENT_VISUALIZATION PropertyNamesInterpretation = "eventVisualization"
	PROPERTYNAMESINTERPRETATION_EXTERNAL_ACCESS     PropertyNamesInterpretation = "externalAccess"
	PROPERTYNAMESINTERPRETATION_FAVORITE            PropertyNamesInterpretation = "favorite"
	PROPERTYNAMESINTERPRETATION_FAVORITES           PropertyNamesInterpretation = "favorites"
	PROPERTYNAMESINTERPRETATION_HREF                PropertyNamesInterpretation = "href"
	PROPERTYNAMESINTERPRETATION_ID                  PropertyNamesInterpretation = "id"
	PROPERTYNAMESINTERPRETATION_LAST_UPDATED        PropertyNamesInterpretation = "lastUpdated"
	PROPERTYNAMESINTERPRETATION_LAST_UPDATED_BY     PropertyNamesInterpretation = "lastUpdatedBy"
	PROPERTYNAMESINTERPRETATION_LIKED_BY            PropertyNamesInterpretation = "likedBy"
	PROPERTYNAMESINTERPRETATION_LIKES               PropertyNamesInterpretation = "likes"
	PROPERTYNAMESINTERPRETATION_MAP                 PropertyNamesInterpretation = "map"
	PROPERTYNAMESINTERPRETATION_MENTIONS            PropertyNamesInterpretation = "mentions"
	PROPERTYNAMESINTERPRETATION_ORGANISATION_UNIT   PropertyNamesInterpretation = "organisationUnit"
	PROPERTYNAMESINTERPRETATION_PERIOD              PropertyNamesInterpretation = "period"
	PROPERTYNAMESINTERPRETATION_PUBLIC_ACCESS       PropertyNamesInterpretation = "publicAccess"
	PROPERTYNAMESINTERPRETATION_SHARING             PropertyNamesInterpretation = "sharing"
	PROPERTYNAMESINTERPRETATION_TEXT                PropertyNamesInterpretation = "text"
	PROPERTYNAMESINTERPRETATION_TRANSLATIONS        PropertyNamesInterpretation = "translations"
	PROPERTYNAMESINTERPRETATION_TYPE                PropertyNamesInterpretation = "type"
	PROPERTYNAMESINTERPRETATION_USER                PropertyNamesInterpretation = "user"
	PROPERTYNAMESINTERPRETATION_USER_ACCESSES       PropertyNamesInterpretation = "userAccesses"
	PROPERTYNAMESINTERPRETATION_USER_GROUP_ACCESSES PropertyNamesInterpretation = "userGroupAccesses"
	PROPERTYNAMESINTERPRETATION_VISUALIZATION       PropertyNamesInterpretation = "visualization"
)

// All allowed values of PropertyNamesInterpretation enum
var AllowedPropertyNamesInterpretationEnumValues = []PropertyNamesInterpretation{
	"access",
	"attributeValues",
	"code",
	"comments",
	"created",
	"createdBy",
	"dataSet",
	"displayName",
	"eventChart",
	"eventReport",
	"eventVisualization",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"likedBy",
	"likes",
	"map",
	"mentions",
	"organisationUnit",
	"period",
	"publicAccess",
	"sharing",
	"text",
	"translations",
	"type",
	"user",
	"userAccesses",
	"userGroupAccesses",
	"visualization",
}

func (v *PropertyNamesInterpretation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesInterpretation(value)
	for _, existing := range AllowedPropertyNamesInterpretationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesInterpretation", value)
}

// NewPropertyNamesInterpretationFromValue returns a pointer to a valid PropertyNamesInterpretation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesInterpretationFromValue(v string) (*PropertyNamesInterpretation, error) {
	ev := PropertyNamesInterpretation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesInterpretation: valid values are %v", v, AllowedPropertyNamesInterpretationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesInterpretation) IsValid() bool {
	for _, existing := range AllowedPropertyNamesInterpretationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_Interpretation value
func (v PropertyNamesInterpretation) Ptr() *PropertyNamesInterpretation {
	return &v
}

type NullablePropertyNamesInterpretation struct {
	value *PropertyNamesInterpretation
	isSet bool
}

func (v NullablePropertyNamesInterpretation) Get() *PropertyNamesInterpretation {
	return v.value
}

func (v *NullablePropertyNamesInterpretation) Set(val *PropertyNamesInterpretation) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesInterpretation) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesInterpretation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesInterpretation(val *PropertyNamesInterpretation) *NullablePropertyNamesInterpretation {
	return &NullablePropertyNamesInterpretation{value: val, isSet: true}
}

func (v NullablePropertyNamesInterpretation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesInterpretation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
