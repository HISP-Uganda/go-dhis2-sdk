/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TextMode the model 'TextMode'
type TextMode string

// List of TextMode
const (
	TEXTMODE_AUTO   TextMode = "AUTO"
	TEXTMODE_CUSTOM TextMode = "CUSTOM"
)

// All allowed values of TextMode enum
var AllowedTextModeEnumValues = []TextMode{
	"AUTO",
	"CUSTOM",
}

func (v *TextMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TextMode(value)
	for _, existing := range AllowedTextModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TextMode", value)
}

// NewTextModeFromValue returns a pointer to a valid TextMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTextModeFromValue(v string) (*TextMode, error) {
	ev := TextMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TextMode: valid values are %v", v, AllowedTextModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TextMode) IsValid() bool {
	for _, existing := range AllowedTextModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TextMode value
func (v TextMode) Ptr() *TextMode {
	return &v
}

type NullableTextMode struct {
	value *TextMode
	isSet bool
}

func (v NullableTextMode) Get() *TextMode {
	return v.value
}

func (v *NullableTextMode) Set(val *TextMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTextMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTextMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextMode(val *TextMode) *NullableTextMode {
	return &NullableTextMode{value: val, isSet: true}
}

func (v NullableTextMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
