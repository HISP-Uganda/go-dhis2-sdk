/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// JobProgressStatus the model 'JobProgressStatus'
type JobProgressStatus string

// List of JobProgressStatus
const (
	JOBPROGRESSSTATUS_RUNNING   JobProgressStatus = "RUNNING"
	JOBPROGRESSSTATUS_SUCCESS   JobProgressStatus = "SUCCESS"
	JOBPROGRESSSTATUS_ERROR     JobProgressStatus = "ERROR"
	JOBPROGRESSSTATUS_CANCELLED JobProgressStatus = "CANCELLED"
)

// All allowed values of JobProgressStatus enum
var AllowedJobProgressStatusEnumValues = []JobProgressStatus{
	"RUNNING",
	"SUCCESS",
	"ERROR",
	"CANCELLED",
}

func (v *JobProgressStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobProgressStatus(value)
	for _, existing := range AllowedJobProgressStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobProgressStatus", value)
}

// NewJobProgressStatusFromValue returns a pointer to a valid JobProgressStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobProgressStatusFromValue(v string) (*JobProgressStatus, error) {
	ev := JobProgressStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobProgressStatus: valid values are %v", v, AllowedJobProgressStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobProgressStatus) IsValid() bool {
	for _, existing := range AllowedJobProgressStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobProgressStatus value
func (v JobProgressStatus) Ptr() *JobProgressStatus {
	return &v
}

type NullableJobProgressStatus struct {
	value *JobProgressStatus
	isSet bool
}

func (v NullableJobProgressStatus) Get() *JobProgressStatus {
	return v.value
}

func (v *NullableJobProgressStatus) Set(val *JobProgressStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableJobProgressStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableJobProgressStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobProgressStatus(val *JobProgressStatus) *NullableJobProgressStatus {
	return &NullableJobProgressStatus{value: val, isSet: true}
}

func (v NullableJobProgressStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobProgressStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
