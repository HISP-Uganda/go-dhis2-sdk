/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LegacyUserAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegacyUserAccess{}

// LegacyUserAccess struct for LegacyUserAccess
type LegacyUserAccess struct {
	Access      *string                        `json:"access,omitempty"`
	DisplayName *string                        `json:"displayName,omitempty"`
	Id          *string                        `json:"id,omitempty"`
	User        AggregateDataExchangeCreatedBy `json:"user"`
	UserUid     *string                        `json:"userUid,omitempty"`
}

type _LegacyUserAccess LegacyUserAccess

// NewLegacyUserAccess instantiates a new LegacyUserAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyUserAccess(user AggregateDataExchangeCreatedBy) *LegacyUserAccess {
	this := LegacyUserAccess{}
	this.User = user
	return &this
}

// NewLegacyUserAccessWithDefaults instantiates a new LegacyUserAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyUserAccessWithDefaults() *LegacyUserAccess {
	this := LegacyUserAccess{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *LegacyUserAccess) GetAccess() string {
	if o == nil || IsNil(o.Access) {
		var ret string
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyUserAccess) GetAccessOk() (*string, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *LegacyUserAccess) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given string and assigns it to the Access field.
func (o *LegacyUserAccess) SetAccess(v string) {
	o.Access = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *LegacyUserAccess) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyUserAccess) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *LegacyUserAccess) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *LegacyUserAccess) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LegacyUserAccess) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyUserAccess) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LegacyUserAccess) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LegacyUserAccess) SetId(v string) {
	o.Id = &v
}

// GetUser returns the User field value
func (o *LegacyUserAccess) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *LegacyUserAccess) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *LegacyUserAccess) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = v
}

// GetUserUid returns the UserUid field value if set, zero value otherwise.
func (o *LegacyUserAccess) GetUserUid() string {
	if o == nil || IsNil(o.UserUid) {
		var ret string
		return ret
	}
	return *o.UserUid
}

// GetUserUidOk returns a tuple with the UserUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyUserAccess) GetUserUidOk() (*string, bool) {
	if o == nil || IsNil(o.UserUid) {
		return nil, false
	}
	return o.UserUid, true
}

// HasUserUid returns a boolean if a field has been set.
func (o *LegacyUserAccess) HasUserUid() bool {
	if o != nil && !IsNil(o.UserUid) {
		return true
	}

	return false
}

// SetUserUid gets a reference to the given string and assigns it to the UserUid field.
func (o *LegacyUserAccess) SetUserUid(v string) {
	o.UserUid = &v
}

func (o LegacyUserAccess) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegacyUserAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["user"] = o.User
	if !IsNil(o.UserUid) {
		toSerialize["userUid"] = o.UserUid
	}
	return toSerialize, nil
}

func (o *LegacyUserAccess) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLegacyUserAccess := _LegacyUserAccess{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLegacyUserAccess)

	if err != nil {
		return err
	}

	*o = LegacyUserAccess(varLegacyUserAccess)

	return err
}

type NullableLegacyUserAccess struct {
	value *LegacyUserAccess
	isSet bool
}

func (v NullableLegacyUserAccess) Get() *LegacyUserAccess {
	return v.value
}

func (v *NullableLegacyUserAccess) Set(val *LegacyUserAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyUserAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyUserAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyUserAccess(val *LegacyUserAccess) *NullableLegacyUserAccess {
	return &NullableLegacyUserAccess{value: val, isSet: true}
}

func (v NullableLegacyUserAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyUserAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
