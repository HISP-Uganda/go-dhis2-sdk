/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// IdentifiableObjectPropertyNames the model 'IdentifiableObjectPropertyNames'
type IdentifiableObjectPropertyNames string

// List of IdentifiableObjectPropertyNames
const (
	IDENTIFIABLEOBJECTPROPERTYNAMES_ID IdentifiableObjectPropertyNames = "id"
)

// All allowed values of IdentifiableObjectPropertyNames enum
var AllowedIdentifiableObjectPropertyNamesEnumValues = []IdentifiableObjectPropertyNames{
	"id",
}

func (v *IdentifiableObjectPropertyNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentifiableObjectPropertyNames(value)
	for _, existing := range AllowedIdentifiableObjectPropertyNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentifiableObjectPropertyNames", value)
}

// NewIdentifiableObjectPropertyNamesFromValue returns a pointer to a valid IdentifiableObjectPropertyNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentifiableObjectPropertyNamesFromValue(v string) (*IdentifiableObjectPropertyNames, error) {
	ev := IdentifiableObjectPropertyNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentifiableObjectPropertyNames: valid values are %v", v, AllowedIdentifiableObjectPropertyNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentifiableObjectPropertyNames) IsValid() bool {
	for _, existing := range AllowedIdentifiableObjectPropertyNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentifiableObjectPropertyNames value
func (v IdentifiableObjectPropertyNames) Ptr() *IdentifiableObjectPropertyNames {
	return &v
}

type NullableIdentifiableObjectPropertyNames struct {
	value *IdentifiableObjectPropertyNames
	isSet bool
}

func (v NullableIdentifiableObjectPropertyNames) Get() *IdentifiableObjectPropertyNames {
	return v.value
}

func (v *NullableIdentifiableObjectPropertyNames) Set(val *IdentifiableObjectPropertyNames) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifiableObjectPropertyNames) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifiableObjectPropertyNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifiableObjectPropertyNames(val *IdentifiableObjectPropertyNames) *NullableIdentifiableObjectPropertyNames {
	return &NullableIdentifiableObjectPropertyNames{value: val, isSet: true}
}

func (v NullableIdentifiableObjectPropertyNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifiableObjectPropertyNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
