/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesSMSCommand the model 'PropertyNamesSMSCommand'
type PropertyNamesSMSCommand string

// List of PropertyNames_SMSCommand
const (
	PROPERTYNAMESSMSCOMMAND_ACCESS                            PropertyNamesSMSCommand = "access"
	PROPERTYNAMESSMSCOMMAND_ATTRIBUTE_VALUES                  PropertyNamesSMSCommand = "attributeValues"
	PROPERTYNAMESSMSCOMMAND_CODE                              PropertyNamesSMSCommand = "code"
	PROPERTYNAMESSMSCOMMAND_CODE_VALUE_SEPARATOR              PropertyNamesSMSCommand = "codeValueSeparator"
	PROPERTYNAMESSMSCOMMAND_COMPLETENESS_METHOD               PropertyNamesSMSCommand = "completenessMethod"
	PROPERTYNAMESSMSCOMMAND_CREATED                           PropertyNamesSMSCommand = "created"
	PROPERTYNAMESSMSCOMMAND_CREATED_BY                        PropertyNamesSMSCommand = "createdBy"
	PROPERTYNAMESSMSCOMMAND_CURRENT_PERIOD_USED_FOR_REPORTING PropertyNamesSMSCommand = "currentPeriodUsedForReporting"
	PROPERTYNAMESSMSCOMMAND_DATASET                           PropertyNamesSMSCommand = "dataset"
	PROPERTYNAMESSMSCOMMAND_DEFAULT_MESSAGE                   PropertyNamesSMSCommand = "defaultMessage"
	PROPERTYNAMESSMSCOMMAND_DISPLAY_NAME                      PropertyNamesSMSCommand = "displayName"
	PROPERTYNAMESSMSCOMMAND_EXTERNAL_ACCESS                   PropertyNamesSMSCommand = "externalAccess"
	PROPERTYNAMESSMSCOMMAND_FAVORITE                          PropertyNamesSMSCommand = "favorite"
	PROPERTYNAMESSMSCOMMAND_FAVORITES                         PropertyNamesSMSCommand = "favorites"
	PROPERTYNAMESSMSCOMMAND_HREF                              PropertyNamesSMSCommand = "href"
	PROPERTYNAMESSMSCOMMAND_ID                                PropertyNamesSMSCommand = "id"
	PROPERTYNAMESSMSCOMMAND_LAST_UPDATED                      PropertyNamesSMSCommand = "lastUpdated"
	PROPERTYNAMESSMSCOMMAND_LAST_UPDATED_BY                   PropertyNamesSMSCommand = "lastUpdatedBy"
	PROPERTYNAMESSMSCOMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE    PropertyNamesSMSCommand = "moreThanOneOrgUnitMessage"
	PROPERTYNAMESSMSCOMMAND_NAME                              PropertyNamesSMSCommand = "name"
	PROPERTYNAMESSMSCOMMAND_NO_USER_MESSAGE                   PropertyNamesSMSCommand = "noUserMessage"
	PROPERTYNAMESSMSCOMMAND_PARSER_TYPE                       PropertyNamesSMSCommand = "parserType"
	PROPERTYNAMESSMSCOMMAND_PROGRAM                           PropertyNamesSMSCommand = "program"
	PROPERTYNAMESSMSCOMMAND_PROGRAM_STAGE                     PropertyNamesSMSCommand = "programStage"
	PROPERTYNAMESSMSCOMMAND_PUBLIC_ACCESS                     PropertyNamesSMSCommand = "publicAccess"
	PROPERTYNAMESSMSCOMMAND_RECEIVED_MESSAGE                  PropertyNamesSMSCommand = "receivedMessage"
	PROPERTYNAMESSMSCOMMAND_SEPARATOR                         PropertyNamesSMSCommand = "separator"
	PROPERTYNAMESSMSCOMMAND_SHARING                           PropertyNamesSMSCommand = "sharing"
	PROPERTYNAMESSMSCOMMAND_SMS_CODES                         PropertyNamesSMSCommand = "smsCodes"
	PROPERTYNAMESSMSCOMMAND_SPECIAL_CHARACTERS                PropertyNamesSMSCommand = "specialCharacters"
	PROPERTYNAMESSMSCOMMAND_SUCCESS_MESSAGE                   PropertyNamesSMSCommand = "successMessage"
	PROPERTYNAMESSMSCOMMAND_TRANSLATIONS                      PropertyNamesSMSCommand = "translations"
	PROPERTYNAMESSMSCOMMAND_USER                              PropertyNamesSMSCommand = "user"
	PROPERTYNAMESSMSCOMMAND_USER_ACCESSES                     PropertyNamesSMSCommand = "userAccesses"
	PROPERTYNAMESSMSCOMMAND_USER_GROUP                        PropertyNamesSMSCommand = "userGroup"
	PROPERTYNAMESSMSCOMMAND_USER_GROUP_ACCESSES               PropertyNamesSMSCommand = "userGroupAccesses"
	PROPERTYNAMESSMSCOMMAND_WRONG_FORMAT_MESSAGE              PropertyNamesSMSCommand = "wrongFormatMessage"
)

// All allowed values of PropertyNamesSMSCommand enum
var AllowedPropertyNamesSMSCommandEnumValues = []PropertyNamesSMSCommand{
	"access",
	"attributeValues",
	"code",
	"codeValueSeparator",
	"completenessMethod",
	"created",
	"createdBy",
	"currentPeriodUsedForReporting",
	"dataset",
	"defaultMessage",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"moreThanOneOrgUnitMessage",
	"name",
	"noUserMessage",
	"parserType",
	"program",
	"programStage",
	"publicAccess",
	"receivedMessage",
	"separator",
	"sharing",
	"smsCodes",
	"specialCharacters",
	"successMessage",
	"translations",
	"user",
	"userAccesses",
	"userGroup",
	"userGroupAccesses",
	"wrongFormatMessage",
}

func (v *PropertyNamesSMSCommand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesSMSCommand(value)
	for _, existing := range AllowedPropertyNamesSMSCommandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesSMSCommand", value)
}

// NewPropertyNamesSMSCommandFromValue returns a pointer to a valid PropertyNamesSMSCommand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesSMSCommandFromValue(v string) (*PropertyNamesSMSCommand, error) {
	ev := PropertyNamesSMSCommand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesSMSCommand: valid values are %v", v, AllowedPropertyNamesSMSCommandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesSMSCommand) IsValid() bool {
	for _, existing := range AllowedPropertyNamesSMSCommandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_SMSCommand value
func (v PropertyNamesSMSCommand) Ptr() *PropertyNamesSMSCommand {
	return &v
}

type NullablePropertyNamesSMSCommand struct {
	value *PropertyNamesSMSCommand
	isSet bool
}

func (v NullablePropertyNamesSMSCommand) Get() *PropertyNamesSMSCommand {
	return v.value
}

func (v *NullablePropertyNamesSMSCommand) Set(val *PropertyNamesSMSCommand) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesSMSCommand) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesSMSCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesSMSCommand(val *PropertyNamesSMSCommand) *NullablePropertyNamesSMSCommand {
	return &NullablePropertyNamesSMSCommand{value: val, isSet: true}
}

func (v NullablePropertyNamesSMSCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesSMSCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
