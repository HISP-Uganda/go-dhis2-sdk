/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
)

// checks if the DataValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataValue{}

// DataValue struct for DataValue
type DataValue struct {
	AttributeOptionCombo *string `json:"attributeOptionCombo,omitempty"`
	CategoryOptionCombo  *string `json:"categoryOptionCombo,omitempty"`
	Comment              *string `json:"comment,omitempty"`
	Created              *string `json:"created,omitempty"`
	DataElement          *string `json:"dataElement,omitempty"`
	Deleted              *bool   `json:"deleted,omitempty"`
	Followup             *bool   `json:"followup,omitempty"`
	LastUpdated          *string `json:"lastUpdated,omitempty"`
	OrgUnit              *string `json:"orgUnit,omitempty"`
	Period               *string `json:"period,omitempty"`
	StoredBy             *string `json:"storedBy,omitempty"`
	Value                *string `json:"value,omitempty"`
}

// NewDataValue instantiates a new DataValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataValue() *DataValue {
	this := DataValue{}
	return &this
}

// NewDataValueWithDefaults instantiates a new DataValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataValueWithDefaults() *DataValue {
	this := DataValue{}
	return &this
}

// GetAttributeOptionCombo returns the AttributeOptionCombo field value if set, zero value otherwise.
func (o *DataValue) GetAttributeOptionCombo() string {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		var ret string
		return ret
	}
	return *o.AttributeOptionCombo
}

// GetAttributeOptionComboOk returns a tuple with the AttributeOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetAttributeOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeOptionCombo) {
		return nil, false
	}
	return o.AttributeOptionCombo, true
}

// HasAttributeOptionCombo returns a boolean if a field has been set.
func (o *DataValue) HasAttributeOptionCombo() bool {
	if o != nil && !IsNil(o.AttributeOptionCombo) {
		return true
	}

	return false
}

// SetAttributeOptionCombo gets a reference to the given string and assigns it to the AttributeOptionCombo field.
func (o *DataValue) SetAttributeOptionCombo(v string) {
	o.AttributeOptionCombo = &v
}

// GetCategoryOptionCombo returns the CategoryOptionCombo field value if set, zero value otherwise.
func (o *DataValue) GetCategoryOptionCombo() string {
	if o == nil || IsNil(o.CategoryOptionCombo) {
		var ret string
		return ret
	}
	return *o.CategoryOptionCombo
}

// GetCategoryOptionComboOk returns a tuple with the CategoryOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetCategoryOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryOptionCombo) {
		return nil, false
	}
	return o.CategoryOptionCombo, true
}

// HasCategoryOptionCombo returns a boolean if a field has been set.
func (o *DataValue) HasCategoryOptionCombo() bool {
	if o != nil && !IsNil(o.CategoryOptionCombo) {
		return true
	}

	return false
}

// SetCategoryOptionCombo gets a reference to the given string and assigns it to the CategoryOptionCombo field.
func (o *DataValue) SetCategoryOptionCombo(v string) {
	o.CategoryOptionCombo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DataValue) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DataValue) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DataValue) SetComment(v string) {
	o.Comment = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DataValue) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DataValue) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *DataValue) SetCreated(v string) {
	o.Created = &v
}

// GetDataElement returns the DataElement field value if set, zero value otherwise.
func (o *DataValue) GetDataElement() string {
	if o == nil || IsNil(o.DataElement) {
		var ret string
		return ret
	}
	return *o.DataElement
}

// GetDataElementOk returns a tuple with the DataElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetDataElementOk() (*string, bool) {
	if o == nil || IsNil(o.DataElement) {
		return nil, false
	}
	return o.DataElement, true
}

// HasDataElement returns a boolean if a field has been set.
func (o *DataValue) HasDataElement() bool {
	if o != nil && !IsNil(o.DataElement) {
		return true
	}

	return false
}

// SetDataElement gets a reference to the given string and assigns it to the DataElement field.
func (o *DataValue) SetDataElement(v string) {
	o.DataElement = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *DataValue) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *DataValue) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *DataValue) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetFollowup returns the Followup field value if set, zero value otherwise.
func (o *DataValue) GetFollowup() bool {
	if o == nil || IsNil(o.Followup) {
		var ret bool
		return ret
	}
	return *o.Followup
}

// GetFollowupOk returns a tuple with the Followup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetFollowupOk() (*bool, bool) {
	if o == nil || IsNil(o.Followup) {
		return nil, false
	}
	return o.Followup, true
}

// HasFollowup returns a boolean if a field has been set.
func (o *DataValue) HasFollowup() bool {
	if o != nil && !IsNil(o.Followup) {
		return true
	}

	return false
}

// SetFollowup gets a reference to the given bool and assigns it to the Followup field.
func (o *DataValue) SetFollowup(v bool) {
	o.Followup = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *DataValue) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *DataValue) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *DataValue) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetOrgUnit returns the OrgUnit field value if set, zero value otherwise.
func (o *DataValue) GetOrgUnit() string {
	if o == nil || IsNil(o.OrgUnit) {
		var ret string
		return ret
	}
	return *o.OrgUnit
}

// GetOrgUnitOk returns a tuple with the OrgUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetOrgUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUnit) {
		return nil, false
	}
	return o.OrgUnit, true
}

// HasOrgUnit returns a boolean if a field has been set.
func (o *DataValue) HasOrgUnit() bool {
	if o != nil && !IsNil(o.OrgUnit) {
		return true
	}

	return false
}

// SetOrgUnit gets a reference to the given string and assigns it to the OrgUnit field.
func (o *DataValue) SetOrgUnit(v string) {
	o.OrgUnit = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *DataValue) GetPeriod() string {
	if o == nil || IsNil(o.Period) {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *DataValue) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *DataValue) SetPeriod(v string) {
	o.Period = &v
}

// GetStoredBy returns the StoredBy field value if set, zero value otherwise.
func (o *DataValue) GetStoredBy() string {
	if o == nil || IsNil(o.StoredBy) {
		var ret string
		return ret
	}
	return *o.StoredBy
}

// GetStoredByOk returns a tuple with the StoredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetStoredByOk() (*string, bool) {
	if o == nil || IsNil(o.StoredBy) {
		return nil, false
	}
	return o.StoredBy, true
}

// HasStoredBy returns a boolean if a field has been set.
func (o *DataValue) HasStoredBy() bool {
	if o != nil && !IsNil(o.StoredBy) {
		return true
	}

	return false
}

// SetStoredBy gets a reference to the given string and assigns it to the StoredBy field.
func (o *DataValue) SetStoredBy(v string) {
	o.StoredBy = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DataValue) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataValue) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DataValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DataValue) SetValue(v string) {
	o.Value = &v
}

func (o DataValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeOptionCombo) {
		toSerialize["attributeOptionCombo"] = o.AttributeOptionCombo
	}
	if !IsNil(o.CategoryOptionCombo) {
		toSerialize["categoryOptionCombo"] = o.CategoryOptionCombo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.DataElement) {
		toSerialize["dataElement"] = o.DataElement
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Followup) {
		toSerialize["followup"] = o.Followup
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.OrgUnit) {
		toSerialize["orgUnit"] = o.OrgUnit
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.StoredBy) {
		toSerialize["storedBy"] = o.StoredBy
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableDataValue struct {
	value *DataValue
	isSet bool
}

func (v NullableDataValue) Get() *DataValue {
	return v.value
}

func (v *NullableDataValue) Set(val *DataValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDataValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDataValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataValue(val *DataValue) *NullableDataValue {
	return &NullableDataValue{value: val, isSet: true}
}

func (v NullableDataValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
