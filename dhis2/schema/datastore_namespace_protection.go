/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DatastoreNamespaceProtection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreNamespaceProtection{}

// DatastoreNamespaceProtection struct for DatastoreNamespaceProtection
type DatastoreNamespaceProtection struct {
	Namespace        string         `json:"namespace"`
	ReadAuthorities  []string       `json:"readAuthorities"`
	Reads            ProtectionType `json:"reads"`
	WriteAuthorities []string       `json:"writeAuthorities"`
	Writes           ProtectionType `json:"writes"`
}

type _DatastoreNamespaceProtection DatastoreNamespaceProtection

// NewDatastoreNamespaceProtection instantiates a new DatastoreNamespaceProtection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreNamespaceProtection(namespace string, readAuthorities []string, reads ProtectionType, writeAuthorities []string, writes ProtectionType) *DatastoreNamespaceProtection {
	this := DatastoreNamespaceProtection{}
	this.Namespace = namespace
	this.ReadAuthorities = readAuthorities
	this.Reads = reads
	this.WriteAuthorities = writeAuthorities
	this.Writes = writes
	return &this
}

// NewDatastoreNamespaceProtectionWithDefaults instantiates a new DatastoreNamespaceProtection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreNamespaceProtectionWithDefaults() *DatastoreNamespaceProtection {
	this := DatastoreNamespaceProtection{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *DatastoreNamespaceProtection) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *DatastoreNamespaceProtection) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *DatastoreNamespaceProtection) SetNamespace(v string) {
	o.Namespace = v
}

// GetReadAuthorities returns the ReadAuthorities field value
func (o *DatastoreNamespaceProtection) GetReadAuthorities() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ReadAuthorities
}

// GetReadAuthoritiesOk returns a tuple with the ReadAuthorities field value
// and a boolean to check if the value has been set.
func (o *DatastoreNamespaceProtection) GetReadAuthoritiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReadAuthorities, true
}

// SetReadAuthorities sets field value
func (o *DatastoreNamespaceProtection) SetReadAuthorities(v []string) {
	o.ReadAuthorities = v
}

// GetReads returns the Reads field value
func (o *DatastoreNamespaceProtection) GetReads() ProtectionType {
	if o == nil {
		var ret ProtectionType
		return ret
	}

	return o.Reads
}

// GetReadsOk returns a tuple with the Reads field value
// and a boolean to check if the value has been set.
func (o *DatastoreNamespaceProtection) GetReadsOk() (*ProtectionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reads, true
}

// SetReads sets field value
func (o *DatastoreNamespaceProtection) SetReads(v ProtectionType) {
	o.Reads = v
}

// GetWriteAuthorities returns the WriteAuthorities field value
func (o *DatastoreNamespaceProtection) GetWriteAuthorities() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.WriteAuthorities
}

// GetWriteAuthoritiesOk returns a tuple with the WriteAuthorities field value
// and a boolean to check if the value has been set.
func (o *DatastoreNamespaceProtection) GetWriteAuthoritiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WriteAuthorities, true
}

// SetWriteAuthorities sets field value
func (o *DatastoreNamespaceProtection) SetWriteAuthorities(v []string) {
	o.WriteAuthorities = v
}

// GetWrites returns the Writes field value
func (o *DatastoreNamespaceProtection) GetWrites() ProtectionType {
	if o == nil {
		var ret ProtectionType
		return ret
	}

	return o.Writes
}

// GetWritesOk returns a tuple with the Writes field value
// and a boolean to check if the value has been set.
func (o *DatastoreNamespaceProtection) GetWritesOk() (*ProtectionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Writes, true
}

// SetWrites sets field value
func (o *DatastoreNamespaceProtection) SetWrites(v ProtectionType) {
	o.Writes = v
}

func (o DatastoreNamespaceProtection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreNamespaceProtection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespace"] = o.Namespace
	toSerialize["readAuthorities"] = o.ReadAuthorities
	toSerialize["reads"] = o.Reads
	toSerialize["writeAuthorities"] = o.WriteAuthorities
	toSerialize["writes"] = o.Writes
	return toSerialize, nil
}

func (o *DatastoreNamespaceProtection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespace",
		"readAuthorities",
		"reads",
		"writeAuthorities",
		"writes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatastoreNamespaceProtection := _DatastoreNamespaceProtection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDatastoreNamespaceProtection)

	if err != nil {
		return err
	}

	*o = DatastoreNamespaceProtection(varDatastoreNamespaceProtection)

	return err
}

type NullableDatastoreNamespaceProtection struct {
	value *DatastoreNamespaceProtection
	isSet bool
}

func (v NullableDatastoreNamespaceProtection) Get() *DatastoreNamespaceProtection {
	return v.value
}

func (v *NullableDatastoreNamespaceProtection) Set(val *DatastoreNamespaceProtection) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreNamespaceProtection) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreNamespaceProtection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreNamespaceProtection(val *DatastoreNamespaceProtection) *NullableDatastoreNamespaceProtection {
	return &NullableDatastoreNamespaceProtection{value: val, isSet: true}
}

func (v NullableDatastoreNamespaceProtection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreNamespaceProtection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
