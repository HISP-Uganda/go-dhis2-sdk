/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ValidationRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationRule{}

// ValidationRule struct for ValidationRule
type ValidationRule struct {
	Access                              *Access                                    `json:"access,omitempty"`
	AggregateExportAttributeOptionCombo *string                                    `json:"aggregateExportAttributeOptionCombo,omitempty"`
	AggregateExportCategoryOptionCombo  *string                                    `json:"aggregateExportCategoryOptionCombo,omitempty"`
	AggregationType                     string                                     `json:"aggregationType"`
	AttributeValues                     []AttributeValue                           `json:"attributeValues,omitempty"`
	Code                                *string                                    `json:"code,omitempty"`
	Created                             *time.Time                                 `json:"created,omitempty"`
	CreatedBy                           *AggregateDataExchangeCreatedBy            `json:"createdBy,omitempty"`
	Description                         *string                                    `json:"description,omitempty"`
	DimensionItem                       *string                                    `json:"dimensionItem,omitempty"`
	DimensionItemType                   string                                     `json:"dimensionItemType"`
	DisplayDescription                  *string                                    `json:"displayDescription,omitempty"`
	DisplayFormName                     *string                                    `json:"displayFormName,omitempty"`
	DisplayInstruction                  *string                                    `json:"displayInstruction,omitempty"`
	DisplayName                         *string                                    `json:"displayName,omitempty"`
	DisplayShortName                    *string                                    `json:"displayShortName,omitempty"`
	ExternalAccess                      *bool                                      `json:"externalAccess,omitempty"`
	Favorite                            *bool                                      `json:"favorite,omitempty"`
	Favorites                           []string                                   `json:"favorites,omitempty"`
	FormName                            *string                                    `json:"formName,omitempty"`
	Href                                *string                                    `json:"href,omitempty"`
	Id                                  *string                                    `json:"id,omitempty"`
	Importance                          string                                     `json:"importance"`
	Instruction                         *string                                    `json:"instruction,omitempty"`
	LastUpdated                         *time.Time                                 `json:"lastUpdated,omitempty"`
	LastUpdatedBy                       *AggregateDataExchangeCreatedBy            `json:"lastUpdatedBy,omitempty"`
	LeftSide                            *Expression                                `json:"leftSide,omitempty"`
	LegendSet                           *CategoryLegendSet                         `json:"legendSet,omitempty"`
	LegendSets                          []CategoryLegendSet                        `json:"legendSets,omitempty"`
	Name                                *string                                    `json:"name,omitempty"`
	NotificationTemplates               []ValidationRuleNotificationTemplatesInner `json:"notificationTemplates,omitempty"`
	Operator                            string                                     `json:"operator"`
	OrganisationUnitLevels              []int32                                    `json:"organisationUnitLevels,omitempty"`
	PeriodType                          *string                                    `json:"periodType,omitempty"`
	PublicAccess                        *string                                    `json:"publicAccess,omitempty"`
	QueryMods                           *QueryModifiers                            `json:"queryMods,omitempty"`
	RightSide                           *Expression                                `json:"rightSide,omitempty"`
	Sharing                             *Sharing                                   `json:"sharing,omitempty"`
	ShortName                           *string                                    `json:"shortName,omitempty"`
	SkipFormValidation                  *bool                                      `json:"skipFormValidation,omitempty"`
	Translations                        []Translation                              `json:"translations,omitempty"`
	User                                *AggregateDataExchangeCreatedBy            `json:"user,omitempty"`
	UserAccesses                        []LegacyUserAccess                         `json:"userAccesses,omitempty"`
	UserGroupAccesses                   []LegacyUserGroupAccess                    `json:"userGroupAccesses,omitempty"`
	ValidationRuleGroups                []ValidationRuleValidationRuleGroupsInner  `json:"validationRuleGroups,omitempty"`
}

type _ValidationRule ValidationRule

// NewValidationRule instantiates a new ValidationRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationRule(aggregationType string, dimensionItemType string, importance string, operator string) *ValidationRule {
	this := ValidationRule{}
	this.AggregationType = aggregationType
	this.DimensionItemType = dimensionItemType
	this.Importance = importance
	this.Operator = operator
	return &this
}

// NewValidationRuleWithDefaults instantiates a new ValidationRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationRuleWithDefaults() *ValidationRule {
	this := ValidationRule{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *ValidationRule) GetAccess() Access {
	if o == nil || IsNil(o.Access) {
		var ret Access
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetAccessOk() (*Access, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *ValidationRule) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given Access and assigns it to the Access field.
func (o *ValidationRule) SetAccess(v Access) {
	o.Access = &v
}

// GetAggregateExportAttributeOptionCombo returns the AggregateExportAttributeOptionCombo field value if set, zero value otherwise.
func (o *ValidationRule) GetAggregateExportAttributeOptionCombo() string {
	if o == nil || IsNil(o.AggregateExportAttributeOptionCombo) {
		var ret string
		return ret
	}
	return *o.AggregateExportAttributeOptionCombo
}

// GetAggregateExportAttributeOptionComboOk returns a tuple with the AggregateExportAttributeOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetAggregateExportAttributeOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.AggregateExportAttributeOptionCombo) {
		return nil, false
	}
	return o.AggregateExportAttributeOptionCombo, true
}

// HasAggregateExportAttributeOptionCombo returns a boolean if a field has been set.
func (o *ValidationRule) HasAggregateExportAttributeOptionCombo() bool {
	if o != nil && !IsNil(o.AggregateExportAttributeOptionCombo) {
		return true
	}

	return false
}

// SetAggregateExportAttributeOptionCombo gets a reference to the given string and assigns it to the AggregateExportAttributeOptionCombo field.
func (o *ValidationRule) SetAggregateExportAttributeOptionCombo(v string) {
	o.AggregateExportAttributeOptionCombo = &v
}

// GetAggregateExportCategoryOptionCombo returns the AggregateExportCategoryOptionCombo field value if set, zero value otherwise.
func (o *ValidationRule) GetAggregateExportCategoryOptionCombo() string {
	if o == nil || IsNil(o.AggregateExportCategoryOptionCombo) {
		var ret string
		return ret
	}
	return *o.AggregateExportCategoryOptionCombo
}

// GetAggregateExportCategoryOptionComboOk returns a tuple with the AggregateExportCategoryOptionCombo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetAggregateExportCategoryOptionComboOk() (*string, bool) {
	if o == nil || IsNil(o.AggregateExportCategoryOptionCombo) {
		return nil, false
	}
	return o.AggregateExportCategoryOptionCombo, true
}

// HasAggregateExportCategoryOptionCombo returns a boolean if a field has been set.
func (o *ValidationRule) HasAggregateExportCategoryOptionCombo() bool {
	if o != nil && !IsNil(o.AggregateExportCategoryOptionCombo) {
		return true
	}

	return false
}

// SetAggregateExportCategoryOptionCombo gets a reference to the given string and assigns it to the AggregateExportCategoryOptionCombo field.
func (o *ValidationRule) SetAggregateExportCategoryOptionCombo(v string) {
	o.AggregateExportCategoryOptionCombo = &v
}

// GetAggregationType returns the AggregationType field value
func (o *ValidationRule) GetAggregationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetAggregationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *ValidationRule) SetAggregationType(v string) {
	o.AggregationType = v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *ValidationRule) GetAttributeValues() []AttributeValue {
	if o == nil || IsNil(o.AttributeValues) {
		var ret []AttributeValue
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetAttributeValuesOk() ([]AttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *ValidationRule) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []AttributeValue and assigns it to the AttributeValues field.
func (o *ValidationRule) SetAttributeValues(v []AttributeValue) {
	o.AttributeValues = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ValidationRule) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ValidationRule) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ValidationRule) SetCode(v string) {
	o.Code = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ValidationRule) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ValidationRule) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ValidationRule) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ValidationRule) GetCreatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetCreatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ValidationRule) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the CreatedBy field.
func (o *ValidationRule) SetCreatedBy(v AggregateDataExchangeCreatedBy) {
	o.CreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ValidationRule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ValidationRule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ValidationRule) SetDescription(v string) {
	o.Description = &v
}

// GetDimensionItem returns the DimensionItem field value if set, zero value otherwise.
func (o *ValidationRule) GetDimensionItem() string {
	if o == nil || IsNil(o.DimensionItem) {
		var ret string
		return ret
	}
	return *o.DimensionItem
}

// GetDimensionItemOk returns a tuple with the DimensionItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetDimensionItemOk() (*string, bool) {
	if o == nil || IsNil(o.DimensionItem) {
		return nil, false
	}
	return o.DimensionItem, true
}

// HasDimensionItem returns a boolean if a field has been set.
func (o *ValidationRule) HasDimensionItem() bool {
	if o != nil && !IsNil(o.DimensionItem) {
		return true
	}

	return false
}

// SetDimensionItem gets a reference to the given string and assigns it to the DimensionItem field.
func (o *ValidationRule) SetDimensionItem(v string) {
	o.DimensionItem = &v
}

// GetDimensionItemType returns the DimensionItemType field value
func (o *ValidationRule) GetDimensionItemType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DimensionItemType
}

// GetDimensionItemTypeOk returns a tuple with the DimensionItemType field value
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetDimensionItemTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DimensionItemType, true
}

// SetDimensionItemType sets field value
func (o *ValidationRule) SetDimensionItemType(v string) {
	o.DimensionItemType = v
}

// GetDisplayDescription returns the DisplayDescription field value if set, zero value otherwise.
func (o *ValidationRule) GetDisplayDescription() string {
	if o == nil || IsNil(o.DisplayDescription) {
		var ret string
		return ret
	}
	return *o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDescription) {
		return nil, false
	}
	return o.DisplayDescription, true
}

// HasDisplayDescription returns a boolean if a field has been set.
func (o *ValidationRule) HasDisplayDescription() bool {
	if o != nil && !IsNil(o.DisplayDescription) {
		return true
	}

	return false
}

// SetDisplayDescription gets a reference to the given string and assigns it to the DisplayDescription field.
func (o *ValidationRule) SetDisplayDescription(v string) {
	o.DisplayDescription = &v
}

// GetDisplayFormName returns the DisplayFormName field value if set, zero value otherwise.
func (o *ValidationRule) GetDisplayFormName() string {
	if o == nil || IsNil(o.DisplayFormName) {
		var ret string
		return ret
	}
	return *o.DisplayFormName
}

// GetDisplayFormNameOk returns a tuple with the DisplayFormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetDisplayFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayFormName) {
		return nil, false
	}
	return o.DisplayFormName, true
}

// HasDisplayFormName returns a boolean if a field has been set.
func (o *ValidationRule) HasDisplayFormName() bool {
	if o != nil && !IsNil(o.DisplayFormName) {
		return true
	}

	return false
}

// SetDisplayFormName gets a reference to the given string and assigns it to the DisplayFormName field.
func (o *ValidationRule) SetDisplayFormName(v string) {
	o.DisplayFormName = &v
}

// GetDisplayInstruction returns the DisplayInstruction field value if set, zero value otherwise.
func (o *ValidationRule) GetDisplayInstruction() string {
	if o == nil || IsNil(o.DisplayInstruction) {
		var ret string
		return ret
	}
	return *o.DisplayInstruction
}

// GetDisplayInstructionOk returns a tuple with the DisplayInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetDisplayInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayInstruction) {
		return nil, false
	}
	return o.DisplayInstruction, true
}

// HasDisplayInstruction returns a boolean if a field has been set.
func (o *ValidationRule) HasDisplayInstruction() bool {
	if o != nil && !IsNil(o.DisplayInstruction) {
		return true
	}

	return false
}

// SetDisplayInstruction gets a reference to the given string and assigns it to the DisplayInstruction field.
func (o *ValidationRule) SetDisplayInstruction(v string) {
	o.DisplayInstruction = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ValidationRule) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ValidationRule) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ValidationRule) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayShortName returns the DisplayShortName field value if set, zero value otherwise.
func (o *ValidationRule) GetDisplayShortName() string {
	if o == nil || IsNil(o.DisplayShortName) {
		var ret string
		return ret
	}
	return *o.DisplayShortName
}

// GetDisplayShortNameOk returns a tuple with the DisplayShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetDisplayShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayShortName) {
		return nil, false
	}
	return o.DisplayShortName, true
}

// HasDisplayShortName returns a boolean if a field has been set.
func (o *ValidationRule) HasDisplayShortName() bool {
	if o != nil && !IsNil(o.DisplayShortName) {
		return true
	}

	return false
}

// SetDisplayShortName gets a reference to the given string and assigns it to the DisplayShortName field.
func (o *ValidationRule) SetDisplayShortName(v string) {
	o.DisplayShortName = &v
}

// GetExternalAccess returns the ExternalAccess field value if set, zero value otherwise.
func (o *ValidationRule) GetExternalAccess() bool {
	if o == nil || IsNil(o.ExternalAccess) {
		var ret bool
		return ret
	}
	return *o.ExternalAccess
}

// GetExternalAccessOk returns a tuple with the ExternalAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetExternalAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalAccess) {
		return nil, false
	}
	return o.ExternalAccess, true
}

// HasExternalAccess returns a boolean if a field has been set.
func (o *ValidationRule) HasExternalAccess() bool {
	if o != nil && !IsNil(o.ExternalAccess) {
		return true
	}

	return false
}

// SetExternalAccess gets a reference to the given bool and assigns it to the ExternalAccess field.
func (o *ValidationRule) SetExternalAccess(v bool) {
	o.ExternalAccess = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *ValidationRule) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *ValidationRule) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *ValidationRule) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetFavorites returns the Favorites field value if set, zero value otherwise.
func (o *ValidationRule) GetFavorites() []string {
	if o == nil || IsNil(o.Favorites) {
		var ret []string
		return ret
	}
	return o.Favorites
}

// GetFavoritesOk returns a tuple with the Favorites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetFavoritesOk() ([]string, bool) {
	if o == nil || IsNil(o.Favorites) {
		return nil, false
	}
	return o.Favorites, true
}

// HasFavorites returns a boolean if a field has been set.
func (o *ValidationRule) HasFavorites() bool {
	if o != nil && !IsNil(o.Favorites) {
		return true
	}

	return false
}

// SetFavorites gets a reference to the given []string and assigns it to the Favorites field.
func (o *ValidationRule) SetFavorites(v []string) {
	o.Favorites = v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *ValidationRule) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *ValidationRule) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *ValidationRule) SetFormName(v string) {
	o.FormName = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ValidationRule) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ValidationRule) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ValidationRule) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ValidationRule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ValidationRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ValidationRule) SetId(v string) {
	o.Id = &v
}

// GetImportance returns the Importance field value
func (o *ValidationRule) GetImportance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Importance
}

// GetImportanceOk returns a tuple with the Importance field value
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetImportanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Importance, true
}

// SetImportance sets field value
func (o *ValidationRule) SetImportance(v string) {
	o.Importance = v
}

// GetInstruction returns the Instruction field value if set, zero value otherwise.
func (o *ValidationRule) GetInstruction() string {
	if o == nil || IsNil(o.Instruction) {
		var ret string
		return ret
	}
	return *o.Instruction
}

// GetInstructionOk returns a tuple with the Instruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.Instruction) {
		return nil, false
	}
	return o.Instruction, true
}

// HasInstruction returns a boolean if a field has been set.
func (o *ValidationRule) HasInstruction() bool {
	if o != nil && !IsNil(o.Instruction) {
		return true
	}

	return false
}

// SetInstruction gets a reference to the given string and assigns it to the Instruction field.
func (o *ValidationRule) SetInstruction(v string) {
	o.Instruction = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *ValidationRule) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *ValidationRule) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *ValidationRule) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *ValidationRule) GetLastUpdatedBy() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetLastUpdatedByOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *ValidationRule) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the LastUpdatedBy field.
func (o *ValidationRule) SetLastUpdatedBy(v AggregateDataExchangeCreatedBy) {
	o.LastUpdatedBy = &v
}

// GetLeftSide returns the LeftSide field value if set, zero value otherwise.
func (o *ValidationRule) GetLeftSide() Expression {
	if o == nil || IsNil(o.LeftSide) {
		var ret Expression
		return ret
	}
	return *o.LeftSide
}

// GetLeftSideOk returns a tuple with the LeftSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetLeftSideOk() (*Expression, bool) {
	if o == nil || IsNil(o.LeftSide) {
		return nil, false
	}
	return o.LeftSide, true
}

// HasLeftSide returns a boolean if a field has been set.
func (o *ValidationRule) HasLeftSide() bool {
	if o != nil && !IsNil(o.LeftSide) {
		return true
	}

	return false
}

// SetLeftSide gets a reference to the given Expression and assigns it to the LeftSide field.
func (o *ValidationRule) SetLeftSide(v Expression) {
	o.LeftSide = &v
}

// GetLegendSet returns the LegendSet field value if set, zero value otherwise.
func (o *ValidationRule) GetLegendSet() CategoryLegendSet {
	if o == nil || IsNil(o.LegendSet) {
		var ret CategoryLegendSet
		return ret
	}
	return *o.LegendSet
}

// GetLegendSetOk returns a tuple with the LegendSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetLegendSetOk() (*CategoryLegendSet, bool) {
	if o == nil || IsNil(o.LegendSet) {
		return nil, false
	}
	return o.LegendSet, true
}

// HasLegendSet returns a boolean if a field has been set.
func (o *ValidationRule) HasLegendSet() bool {
	if o != nil && !IsNil(o.LegendSet) {
		return true
	}

	return false
}

// SetLegendSet gets a reference to the given CategoryLegendSet and assigns it to the LegendSet field.
func (o *ValidationRule) SetLegendSet(v CategoryLegendSet) {
	o.LegendSet = &v
}

// GetLegendSets returns the LegendSets field value if set, zero value otherwise.
func (o *ValidationRule) GetLegendSets() []CategoryLegendSet {
	if o == nil || IsNil(o.LegendSets) {
		var ret []CategoryLegendSet
		return ret
	}
	return o.LegendSets
}

// GetLegendSetsOk returns a tuple with the LegendSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetLegendSetsOk() ([]CategoryLegendSet, bool) {
	if o == nil || IsNil(o.LegendSets) {
		return nil, false
	}
	return o.LegendSets, true
}

// HasLegendSets returns a boolean if a field has been set.
func (o *ValidationRule) HasLegendSets() bool {
	if o != nil && !IsNil(o.LegendSets) {
		return true
	}

	return false
}

// SetLegendSets gets a reference to the given []CategoryLegendSet and assigns it to the LegendSets field.
func (o *ValidationRule) SetLegendSets(v []CategoryLegendSet) {
	o.LegendSets = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ValidationRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ValidationRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ValidationRule) SetName(v string) {
	o.Name = &v
}

// GetNotificationTemplates returns the NotificationTemplates field value if set, zero value otherwise.
func (o *ValidationRule) GetNotificationTemplates() []ValidationRuleNotificationTemplatesInner {
	if o == nil || IsNil(o.NotificationTemplates) {
		var ret []ValidationRuleNotificationTemplatesInner
		return ret
	}
	return o.NotificationTemplates
}

// GetNotificationTemplatesOk returns a tuple with the NotificationTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetNotificationTemplatesOk() ([]ValidationRuleNotificationTemplatesInner, bool) {
	if o == nil || IsNil(o.NotificationTemplates) {
		return nil, false
	}
	return o.NotificationTemplates, true
}

// HasNotificationTemplates returns a boolean if a field has been set.
func (o *ValidationRule) HasNotificationTemplates() bool {
	if o != nil && !IsNil(o.NotificationTemplates) {
		return true
	}

	return false
}

// SetNotificationTemplates gets a reference to the given []ValidationRuleNotificationTemplatesInner and assigns it to the NotificationTemplates field.
func (o *ValidationRule) SetNotificationTemplates(v []ValidationRuleNotificationTemplatesInner) {
	o.NotificationTemplates = v
}

// GetOperator returns the Operator field value
func (o *ValidationRule) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *ValidationRule) SetOperator(v string) {
	o.Operator = v
}

// GetOrganisationUnitLevels returns the OrganisationUnitLevels field value if set, zero value otherwise.
func (o *ValidationRule) GetOrganisationUnitLevels() []int32 {
	if o == nil || IsNil(o.OrganisationUnitLevels) {
		var ret []int32
		return ret
	}
	return o.OrganisationUnitLevels
}

// GetOrganisationUnitLevelsOk returns a tuple with the OrganisationUnitLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetOrganisationUnitLevelsOk() ([]int32, bool) {
	if o == nil || IsNil(o.OrganisationUnitLevels) {
		return nil, false
	}
	return o.OrganisationUnitLevels, true
}

// HasOrganisationUnitLevels returns a boolean if a field has been set.
func (o *ValidationRule) HasOrganisationUnitLevels() bool {
	if o != nil && !IsNil(o.OrganisationUnitLevels) {
		return true
	}

	return false
}

// SetOrganisationUnitLevels gets a reference to the given []int32 and assigns it to the OrganisationUnitLevels field.
func (o *ValidationRule) SetOrganisationUnitLevels(v []int32) {
	o.OrganisationUnitLevels = v
}

// GetPeriodType returns the PeriodType field value if set, zero value otherwise.
func (o *ValidationRule) GetPeriodType() string {
	if o == nil || IsNil(o.PeriodType) {
		var ret string
		return ret
	}
	return *o.PeriodType
}

// GetPeriodTypeOk returns a tuple with the PeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetPeriodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodType) {
		return nil, false
	}
	return o.PeriodType, true
}

// HasPeriodType returns a boolean if a field has been set.
func (o *ValidationRule) HasPeriodType() bool {
	if o != nil && !IsNil(o.PeriodType) {
		return true
	}

	return false
}

// SetPeriodType gets a reference to the given string and assigns it to the PeriodType field.
func (o *ValidationRule) SetPeriodType(v string) {
	o.PeriodType = &v
}

// GetPublicAccess returns the PublicAccess field value if set, zero value otherwise.
func (o *ValidationRule) GetPublicAccess() string {
	if o == nil || IsNil(o.PublicAccess) {
		var ret string
		return ret
	}
	return *o.PublicAccess
}

// GetPublicAccessOk returns a tuple with the PublicAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetPublicAccessOk() (*string, bool) {
	if o == nil || IsNil(o.PublicAccess) {
		return nil, false
	}
	return o.PublicAccess, true
}

// HasPublicAccess returns a boolean if a field has been set.
func (o *ValidationRule) HasPublicAccess() bool {
	if o != nil && !IsNil(o.PublicAccess) {
		return true
	}

	return false
}

// SetPublicAccess gets a reference to the given string and assigns it to the PublicAccess field.
func (o *ValidationRule) SetPublicAccess(v string) {
	o.PublicAccess = &v
}

// GetQueryMods returns the QueryMods field value if set, zero value otherwise.
func (o *ValidationRule) GetQueryMods() QueryModifiers {
	if o == nil || IsNil(o.QueryMods) {
		var ret QueryModifiers
		return ret
	}
	return *o.QueryMods
}

// GetQueryModsOk returns a tuple with the QueryMods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetQueryModsOk() (*QueryModifiers, bool) {
	if o == nil || IsNil(o.QueryMods) {
		return nil, false
	}
	return o.QueryMods, true
}

// HasQueryMods returns a boolean if a field has been set.
func (o *ValidationRule) HasQueryMods() bool {
	if o != nil && !IsNil(o.QueryMods) {
		return true
	}

	return false
}

// SetQueryMods gets a reference to the given QueryModifiers and assigns it to the QueryMods field.
func (o *ValidationRule) SetQueryMods(v QueryModifiers) {
	o.QueryMods = &v
}

// GetRightSide returns the RightSide field value if set, zero value otherwise.
func (o *ValidationRule) GetRightSide() Expression {
	if o == nil || IsNil(o.RightSide) {
		var ret Expression
		return ret
	}
	return *o.RightSide
}

// GetRightSideOk returns a tuple with the RightSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetRightSideOk() (*Expression, bool) {
	if o == nil || IsNil(o.RightSide) {
		return nil, false
	}
	return o.RightSide, true
}

// HasRightSide returns a boolean if a field has been set.
func (o *ValidationRule) HasRightSide() bool {
	if o != nil && !IsNil(o.RightSide) {
		return true
	}

	return false
}

// SetRightSide gets a reference to the given Expression and assigns it to the RightSide field.
func (o *ValidationRule) SetRightSide(v Expression) {
	o.RightSide = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *ValidationRule) GetSharing() Sharing {
	if o == nil || IsNil(o.Sharing) {
		var ret Sharing
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetSharingOk() (*Sharing, bool) {
	if o == nil || IsNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *ValidationRule) HasSharing() bool {
	if o != nil && !IsNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given Sharing and assigns it to the Sharing field.
func (o *ValidationRule) SetSharing(v Sharing) {
	o.Sharing = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *ValidationRule) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *ValidationRule) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *ValidationRule) SetShortName(v string) {
	o.ShortName = &v
}

// GetSkipFormValidation returns the SkipFormValidation field value if set, zero value otherwise.
func (o *ValidationRule) GetSkipFormValidation() bool {
	if o == nil || IsNil(o.SkipFormValidation) {
		var ret bool
		return ret
	}
	return *o.SkipFormValidation
}

// GetSkipFormValidationOk returns a tuple with the SkipFormValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetSkipFormValidationOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipFormValidation) {
		return nil, false
	}
	return o.SkipFormValidation, true
}

// HasSkipFormValidation returns a boolean if a field has been set.
func (o *ValidationRule) HasSkipFormValidation() bool {
	if o != nil && !IsNil(o.SkipFormValidation) {
		return true
	}

	return false
}

// SetSkipFormValidation gets a reference to the given bool and assigns it to the SkipFormValidation field.
func (o *ValidationRule) SetSkipFormValidation(v bool) {
	o.SkipFormValidation = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *ValidationRule) GetTranslations() []Translation {
	if o == nil || IsNil(o.Translations) {
		var ret []Translation
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetTranslationsOk() ([]Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *ValidationRule) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []Translation and assigns it to the Translations field.
func (o *ValidationRule) SetTranslations(v []Translation) {
	o.Translations = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ValidationRule) GetUser() AggregateDataExchangeCreatedBy {
	if o == nil || IsNil(o.User) {
		var ret AggregateDataExchangeCreatedBy
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetUserOk() (*AggregateDataExchangeCreatedBy, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ValidationRule) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AggregateDataExchangeCreatedBy and assigns it to the User field.
func (o *ValidationRule) SetUser(v AggregateDataExchangeCreatedBy) {
	o.User = &v
}

// GetUserAccesses returns the UserAccesses field value if set, zero value otherwise.
func (o *ValidationRule) GetUserAccesses() []LegacyUserAccess {
	if o == nil || IsNil(o.UserAccesses) {
		var ret []LegacyUserAccess
		return ret
	}
	return o.UserAccesses
}

// GetUserAccessesOk returns a tuple with the UserAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetUserAccessesOk() ([]LegacyUserAccess, bool) {
	if o == nil || IsNil(o.UserAccesses) {
		return nil, false
	}
	return o.UserAccesses, true
}

// HasUserAccesses returns a boolean if a field has been set.
func (o *ValidationRule) HasUserAccesses() bool {
	if o != nil && !IsNil(o.UserAccesses) {
		return true
	}

	return false
}

// SetUserAccesses gets a reference to the given []LegacyUserAccess and assigns it to the UserAccesses field.
func (o *ValidationRule) SetUserAccesses(v []LegacyUserAccess) {
	o.UserAccesses = v
}

// GetUserGroupAccesses returns the UserGroupAccesses field value if set, zero value otherwise.
func (o *ValidationRule) GetUserGroupAccesses() []LegacyUserGroupAccess {
	if o == nil || IsNil(o.UserGroupAccesses) {
		var ret []LegacyUserGroupAccess
		return ret
	}
	return o.UserGroupAccesses
}

// GetUserGroupAccessesOk returns a tuple with the UserGroupAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetUserGroupAccessesOk() ([]LegacyUserGroupAccess, bool) {
	if o == nil || IsNil(o.UserGroupAccesses) {
		return nil, false
	}
	return o.UserGroupAccesses, true
}

// HasUserGroupAccesses returns a boolean if a field has been set.
func (o *ValidationRule) HasUserGroupAccesses() bool {
	if o != nil && !IsNil(o.UserGroupAccesses) {
		return true
	}

	return false
}

// SetUserGroupAccesses gets a reference to the given []LegacyUserGroupAccess and assigns it to the UserGroupAccesses field.
func (o *ValidationRule) SetUserGroupAccesses(v []LegacyUserGroupAccess) {
	o.UserGroupAccesses = v
}

// GetValidationRuleGroups returns the ValidationRuleGroups field value if set, zero value otherwise.
func (o *ValidationRule) GetValidationRuleGroups() []ValidationRuleValidationRuleGroupsInner {
	if o == nil || IsNil(o.ValidationRuleGroups) {
		var ret []ValidationRuleValidationRuleGroupsInner
		return ret
	}
	return o.ValidationRuleGroups
}

// GetValidationRuleGroupsOk returns a tuple with the ValidationRuleGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationRule) GetValidationRuleGroupsOk() ([]ValidationRuleValidationRuleGroupsInner, bool) {
	if o == nil || IsNil(o.ValidationRuleGroups) {
		return nil, false
	}
	return o.ValidationRuleGroups, true
}

// HasValidationRuleGroups returns a boolean if a field has been set.
func (o *ValidationRule) HasValidationRuleGroups() bool {
	if o != nil && !IsNil(o.ValidationRuleGroups) {
		return true
	}

	return false
}

// SetValidationRuleGroups gets a reference to the given []ValidationRuleValidationRuleGroupsInner and assigns it to the ValidationRuleGroups field.
func (o *ValidationRule) SetValidationRuleGroups(v []ValidationRuleValidationRuleGroupsInner) {
	o.ValidationRuleGroups = v
}

func (o ValidationRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.AggregateExportAttributeOptionCombo) {
		toSerialize["aggregateExportAttributeOptionCombo"] = o.AggregateExportAttributeOptionCombo
	}
	if !IsNil(o.AggregateExportCategoryOptionCombo) {
		toSerialize["aggregateExportCategoryOptionCombo"] = o.AggregateExportCategoryOptionCombo
	}
	toSerialize["aggregationType"] = o.AggregationType
	if !IsNil(o.AttributeValues) {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DimensionItem) {
		toSerialize["dimensionItem"] = o.DimensionItem
	}
	toSerialize["dimensionItemType"] = o.DimensionItemType
	if !IsNil(o.DisplayDescription) {
		toSerialize["displayDescription"] = o.DisplayDescription
	}
	if !IsNil(o.DisplayFormName) {
		toSerialize["displayFormName"] = o.DisplayFormName
	}
	if !IsNil(o.DisplayInstruction) {
		toSerialize["displayInstruction"] = o.DisplayInstruction
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DisplayShortName) {
		toSerialize["displayShortName"] = o.DisplayShortName
	}
	if !IsNil(o.ExternalAccess) {
		toSerialize["externalAccess"] = o.ExternalAccess
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Favorites) {
		toSerialize["favorites"] = o.Favorites
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["importance"] = o.Importance
	if !IsNil(o.Instruction) {
		toSerialize["instruction"] = o.Instruction
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.LeftSide) {
		toSerialize["leftSide"] = o.LeftSide
	}
	if !IsNil(o.LegendSet) {
		toSerialize["legendSet"] = o.LegendSet
	}
	if !IsNil(o.LegendSets) {
		toSerialize["legendSets"] = o.LegendSets
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NotificationTemplates) {
		toSerialize["notificationTemplates"] = o.NotificationTemplates
	}
	toSerialize["operator"] = o.Operator
	if !IsNil(o.OrganisationUnitLevels) {
		toSerialize["organisationUnitLevels"] = o.OrganisationUnitLevels
	}
	if !IsNil(o.PeriodType) {
		toSerialize["periodType"] = o.PeriodType
	}
	if !IsNil(o.PublicAccess) {
		toSerialize["publicAccess"] = o.PublicAccess
	}
	if !IsNil(o.QueryMods) {
		toSerialize["queryMods"] = o.QueryMods
	}
	if !IsNil(o.RightSide) {
		toSerialize["rightSide"] = o.RightSide
	}
	if !IsNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.SkipFormValidation) {
		toSerialize["skipFormValidation"] = o.SkipFormValidation
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserAccesses) {
		toSerialize["userAccesses"] = o.UserAccesses
	}
	if !IsNil(o.UserGroupAccesses) {
		toSerialize["userGroupAccesses"] = o.UserGroupAccesses
	}
	if !IsNil(o.ValidationRuleGroups) {
		toSerialize["validationRuleGroups"] = o.ValidationRuleGroups
	}
	return toSerialize, nil
}

func (o *ValidationRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregationType",
		"dimensionItemType",
		"importance",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidationRule := _ValidationRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValidationRule)

	if err != nil {
		return err
	}

	*o = ValidationRule(varValidationRule)

	return err
}

type NullableValidationRule struct {
	value *ValidationRule
	isSet bool
}

func (v NullableValidationRule) Get() *ValidationRule {
	return v.value
}

func (v *NullableValidationRule) Set(val *ValidationRule) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationRule) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationRule(val *ValidationRule) *NullableValidationRule {
	return &NullableValidationRule{value: val, isSet: true}
}

func (v NullableValidationRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
