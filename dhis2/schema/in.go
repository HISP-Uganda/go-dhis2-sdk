/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// In the model 'In'
type In string

// List of In
const (
	IN_QUERY  In = "query"
	IN_PATH   In = "path"
	IN_HEADER In = "header"
	IN_COOKIE In = "cookie"
)

// All allowed values of In enum
var AllowedInEnumValues = []In{
	"query",
	"path",
	"header",
	"cookie",
}

func (v *In) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := In(value)
	for _, existing := range AllowedInEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid In", value)
}

// NewInFromValue returns a pointer to a valid In
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInFromValue(v string) (*In, error) {
	ev := In(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for In: valid values are %v", v, AllowedInEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v In) IsValid() bool {
	for _, existing := range AllowedInEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to In value
func (v In) Ptr() *In {
	return &v
}

type NullableIn struct {
	value *In
	isSet bool
}

func (v NullableIn) Get() *In {
	return v.value
}

func (v *NullableIn) Set(val *In) {
	v.value = val
	v.isSet = true
}

func (v NullableIn) IsSet() bool {
	return v.isSet
}

func (v *NullableIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIn(val *In) *NullableIn {
	return &NullableIn{value: val, isSet: true}
}

func (v NullableIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
