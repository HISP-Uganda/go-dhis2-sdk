/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SchedulerEntryJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchedulerEntryJob{}

// SchedulerEntryJob struct for SchedulerEntryJob
type SchedulerEntryJob struct {
	CronExpression *string `json:"cronExpression,omitempty"`
	Delay          *int32  `json:"delay,omitempty"`
	// A UID for an JobConfiguration object   (Java name `org.hisp.dhis.scheduling.JobConfiguration`)
	Id                *string    `json:"id,omitempty"`
	Name              *string    `json:"name,omitempty"`
	NextExecutionTime *time.Time `json:"nextExecutionTime,omitempty"`
	Status            JobStatus  `json:"status"`
	Type              JobType    `json:"type"`
}

type _SchedulerEntryJob SchedulerEntryJob

// NewSchedulerEntryJob instantiates a new SchedulerEntryJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulerEntryJob(status JobStatus, type_ JobType) *SchedulerEntryJob {
	this := SchedulerEntryJob{}
	this.Status = status
	this.Type = type_
	return &this
}

// NewSchedulerEntryJobWithDefaults instantiates a new SchedulerEntryJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulerEntryJobWithDefaults() *SchedulerEntryJob {
	this := SchedulerEntryJob{}
	return &this
}

// GetCronExpression returns the CronExpression field value if set, zero value otherwise.
func (o *SchedulerEntryJob) GetCronExpression() string {
	if o == nil || IsNil(o.CronExpression) {
		var ret string
		return ret
	}
	return *o.CronExpression
}

// GetCronExpressionOk returns a tuple with the CronExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerEntryJob) GetCronExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.CronExpression) {
		return nil, false
	}
	return o.CronExpression, true
}

// HasCronExpression returns a boolean if a field has been set.
func (o *SchedulerEntryJob) HasCronExpression() bool {
	if o != nil && !IsNil(o.CronExpression) {
		return true
	}

	return false
}

// SetCronExpression gets a reference to the given string and assigns it to the CronExpression field.
func (o *SchedulerEntryJob) SetCronExpression(v string) {
	o.CronExpression = &v
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *SchedulerEntryJob) GetDelay() int32 {
	if o == nil || IsNil(o.Delay) {
		var ret int32
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerEntryJob) GetDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *SchedulerEntryJob) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given int32 and assigns it to the Delay field.
func (o *SchedulerEntryJob) SetDelay(v int32) {
	o.Delay = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchedulerEntryJob) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerEntryJob) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchedulerEntryJob) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchedulerEntryJob) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchedulerEntryJob) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerEntryJob) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchedulerEntryJob) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchedulerEntryJob) SetName(v string) {
	o.Name = &v
}

// GetNextExecutionTime returns the NextExecutionTime field value if set, zero value otherwise.
func (o *SchedulerEntryJob) GetNextExecutionTime() time.Time {
	if o == nil || IsNil(o.NextExecutionTime) {
		var ret time.Time
		return ret
	}
	return *o.NextExecutionTime
}

// GetNextExecutionTimeOk returns a tuple with the NextExecutionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerEntryJob) GetNextExecutionTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextExecutionTime) {
		return nil, false
	}
	return o.NextExecutionTime, true
}

// HasNextExecutionTime returns a boolean if a field has been set.
func (o *SchedulerEntryJob) HasNextExecutionTime() bool {
	if o != nil && !IsNil(o.NextExecutionTime) {
		return true
	}

	return false
}

// SetNextExecutionTime gets a reference to the given time.Time and assigns it to the NextExecutionTime field.
func (o *SchedulerEntryJob) SetNextExecutionTime(v time.Time) {
	o.NextExecutionTime = &v
}

// GetStatus returns the Status field value
func (o *SchedulerEntryJob) GetStatus() JobStatus {
	if o == nil {
		var ret JobStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SchedulerEntryJob) GetStatusOk() (*JobStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SchedulerEntryJob) SetStatus(v JobStatus) {
	o.Status = v
}

// GetType returns the Type field value
func (o *SchedulerEntryJob) GetType() JobType {
	if o == nil {
		var ret JobType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SchedulerEntryJob) GetTypeOk() (*JobType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SchedulerEntryJob) SetType(v JobType) {
	o.Type = v
}

func (o SchedulerEntryJob) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchedulerEntryJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CronExpression) {
		toSerialize["cronExpression"] = o.CronExpression
	}
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NextExecutionTime) {
		toSerialize["nextExecutionTime"] = o.NextExecutionTime
	}
	toSerialize["status"] = o.Status
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *SchedulerEntryJob) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchedulerEntryJob := _SchedulerEntryJob{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchedulerEntryJob)

	if err != nil {
		return err
	}

	*o = SchedulerEntryJob(varSchedulerEntryJob)

	return err
}

type NullableSchedulerEntryJob struct {
	value *SchedulerEntryJob
	isSet bool
}

func (v NullableSchedulerEntryJob) Get() *SchedulerEntryJob {
	return v.value
}

func (v *NullableSchedulerEntryJob) Set(val *SchedulerEntryJob) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulerEntryJob) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulerEntryJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulerEntryJob(val *SchedulerEntryJob) *NullableSchedulerEntryJob {
	return &NullableSchedulerEntryJob{value: val, isSet: true}
}

func (v NullableSchedulerEntryJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulerEntryJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
