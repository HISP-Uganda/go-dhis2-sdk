/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImportSummaries type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportSummaries{}

// ImportSummaries struct for ImportSummaries
type ImportSummaries struct {
	Deleted         int32           `json:"deleted"`
	Ignored         int32           `json:"ignored"`
	ImportOptions   *ImportOptions  `json:"importOptions,omitempty"`
	ImportSummaries []ImportSummary `json:"importSummaries,omitempty"`
	Imported        int32           `json:"imported"`
	ResponseType    *string         `json:"responseType,omitempty"`
	Status          ImportStatus    `json:"status"`
	Total           int32           `json:"total"`
	Updated         int32           `json:"updated"`
}

type _ImportSummaries ImportSummaries

// NewImportSummaries instantiates a new ImportSummaries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportSummaries(deleted int32, ignored int32, imported int32, status ImportStatus, total int32, updated int32) *ImportSummaries {
	this := ImportSummaries{}
	this.Deleted = deleted
	this.Ignored = ignored
	this.Imported = imported
	this.Status = status
	this.Total = total
	this.Updated = updated
	return &this
}

// NewImportSummariesWithDefaults instantiates a new ImportSummaries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportSummariesWithDefaults() *ImportSummaries {
	this := ImportSummaries{}
	return &this
}

// GetDeleted returns the Deleted field value
func (o *ImportSummaries) GetDeleted() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *ImportSummaries) GetDeletedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *ImportSummaries) SetDeleted(v int32) {
	o.Deleted = v
}

// GetIgnored returns the Ignored field value
func (o *ImportSummaries) GetIgnored() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ignored
}

// GetIgnoredOk returns a tuple with the Ignored field value
// and a boolean to check if the value has been set.
func (o *ImportSummaries) GetIgnoredOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ignored, true
}

// SetIgnored sets field value
func (o *ImportSummaries) SetIgnored(v int32) {
	o.Ignored = v
}

// GetImportOptions returns the ImportOptions field value if set, zero value otherwise.
func (o *ImportSummaries) GetImportOptions() ImportOptions {
	if o == nil || IsNil(o.ImportOptions) {
		var ret ImportOptions
		return ret
	}
	return *o.ImportOptions
}

// GetImportOptionsOk returns a tuple with the ImportOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportSummaries) GetImportOptionsOk() (*ImportOptions, bool) {
	if o == nil || IsNil(o.ImportOptions) {
		return nil, false
	}
	return o.ImportOptions, true
}

// HasImportOptions returns a boolean if a field has been set.
func (o *ImportSummaries) HasImportOptions() bool {
	if o != nil && !IsNil(o.ImportOptions) {
		return true
	}

	return false
}

// SetImportOptions gets a reference to the given ImportOptions and assigns it to the ImportOptions field.
func (o *ImportSummaries) SetImportOptions(v ImportOptions) {
	o.ImportOptions = &v
}

// GetImportSummaries returns the ImportSummaries field value if set, zero value otherwise.
func (o *ImportSummaries) GetImportSummaries() []ImportSummary {
	if o == nil || IsNil(o.ImportSummaries) {
		var ret []ImportSummary
		return ret
	}
	return o.ImportSummaries
}

// GetImportSummariesOk returns a tuple with the ImportSummaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportSummaries) GetImportSummariesOk() ([]ImportSummary, bool) {
	if o == nil || IsNil(o.ImportSummaries) {
		return nil, false
	}
	return o.ImportSummaries, true
}

// HasImportSummaries returns a boolean if a field has been set.
func (o *ImportSummaries) HasImportSummaries() bool {
	if o != nil && !IsNil(o.ImportSummaries) {
		return true
	}

	return false
}

// SetImportSummaries gets a reference to the given []ImportSummary and assigns it to the ImportSummaries field.
func (o *ImportSummaries) SetImportSummaries(v []ImportSummary) {
	o.ImportSummaries = v
}

// GetImported returns the Imported field value
func (o *ImportSummaries) GetImported() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Imported
}

// GetImportedOk returns a tuple with the Imported field value
// and a boolean to check if the value has been set.
func (o *ImportSummaries) GetImportedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Imported, true
}

// SetImported sets field value
func (o *ImportSummaries) SetImported(v int32) {
	o.Imported = v
}

// GetResponseType returns the ResponseType field value if set, zero value otherwise.
func (o *ImportSummaries) GetResponseType() string {
	if o == nil || IsNil(o.ResponseType) {
		var ret string
		return ret
	}
	return *o.ResponseType
}

// GetResponseTypeOk returns a tuple with the ResponseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportSummaries) GetResponseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseType) {
		return nil, false
	}
	return o.ResponseType, true
}

// HasResponseType returns a boolean if a field has been set.
func (o *ImportSummaries) HasResponseType() bool {
	if o != nil && !IsNil(o.ResponseType) {
		return true
	}

	return false
}

// SetResponseType gets a reference to the given string and assigns it to the ResponseType field.
func (o *ImportSummaries) SetResponseType(v string) {
	o.ResponseType = &v
}

// GetStatus returns the Status field value
func (o *ImportSummaries) GetStatus() ImportStatus {
	if o == nil {
		var ret ImportStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ImportSummaries) GetStatusOk() (*ImportStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ImportSummaries) SetStatus(v ImportStatus) {
	o.Status = v
}

// GetTotal returns the Total field value
func (o *ImportSummaries) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ImportSummaries) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ImportSummaries) SetTotal(v int32) {
	o.Total = v
}

// GetUpdated returns the Updated field value
func (o *ImportSummaries) GetUpdated() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *ImportSummaries) GetUpdatedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *ImportSummaries) SetUpdated(v int32) {
	o.Updated = v
}

func (o ImportSummaries) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportSummaries) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deleted"] = o.Deleted
	toSerialize["ignored"] = o.Ignored
	if !IsNil(o.ImportOptions) {
		toSerialize["importOptions"] = o.ImportOptions
	}
	if !IsNil(o.ImportSummaries) {
		toSerialize["importSummaries"] = o.ImportSummaries
	}
	toSerialize["imported"] = o.Imported
	if !IsNil(o.ResponseType) {
		toSerialize["responseType"] = o.ResponseType
	}
	toSerialize["status"] = o.Status
	toSerialize["total"] = o.Total
	toSerialize["updated"] = o.Updated
	return toSerialize, nil
}

func (o *ImportSummaries) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deleted",
		"ignored",
		"imported",
		"status",
		"total",
		"updated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportSummaries := _ImportSummaries{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportSummaries)

	if err != nil {
		return err
	}

	*o = ImportSummaries(varImportSummaries)

	return err
}

type NullableImportSummaries struct {
	value *ImportSummaries
	isSet bool
}

func (v NullableImportSummaries) Get() *ImportSummaries {
	return v.value
}

func (v *NullableImportSummaries) Set(val *ImportSummaries) {
	v.value = val
	v.isSet = true
}

func (v NullableImportSummaries) IsSet() bool {
	return v.isSet
}

func (v *NullableImportSummaries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportSummaries(val *ImportSummaries) *NullableImportSummaries {
	return &NullableImportSummaries{value: val, isSet: true}
}

func (v NullableImportSummaries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportSummaries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
