/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the BulkJsonPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkJsonPatch{}

// BulkJsonPatch struct for BulkJsonPatch
type BulkJsonPatch struct {
	Patch     *JsonPatch           `json:"patch,omitempty"`
	TargetIds *map[string][]string `json:"targetIds,omitempty"`
}

// NewBulkJsonPatch instantiates a new BulkJsonPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkJsonPatch() *BulkJsonPatch {
	this := BulkJsonPatch{}
	return &this
}

// NewBulkJsonPatchWithDefaults instantiates a new BulkJsonPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkJsonPatchWithDefaults() *BulkJsonPatch {
	this := BulkJsonPatch{}
	return &this
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *BulkJsonPatch) GetPatch() JsonPatch {
	if o == nil || IsNil(o.Patch) {
		var ret JsonPatch
		return ret
	}
	return *o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkJsonPatch) GetPatchOk() (*JsonPatch, bool) {
	if o == nil || IsNil(o.Patch) {
		return nil, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *BulkJsonPatch) HasPatch() bool {
	if o != nil && !IsNil(o.Patch) {
		return true
	}

	return false
}

// SetPatch gets a reference to the given JsonPatch and assigns it to the Patch field.
func (o *BulkJsonPatch) SetPatch(v JsonPatch) {
	o.Patch = &v
}

// GetTargetIds returns the TargetIds field value if set, zero value otherwise.
func (o *BulkJsonPatch) GetTargetIds() map[string][]string {
	if o == nil || IsNil(o.TargetIds) {
		var ret map[string][]string
		return ret
	}
	return *o.TargetIds
}

// GetTargetIdsOk returns a tuple with the TargetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkJsonPatch) GetTargetIdsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.TargetIds) {
		return nil, false
	}
	return o.TargetIds, true
}

// HasTargetIds returns a boolean if a field has been set.
func (o *BulkJsonPatch) HasTargetIds() bool {
	if o != nil && !IsNil(o.TargetIds) {
		return true
	}

	return false
}

// SetTargetIds gets a reference to the given map[string][]string and assigns it to the TargetIds field.
func (o *BulkJsonPatch) SetTargetIds(v map[string][]string) {
	o.TargetIds = &v
}

func (o BulkJsonPatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkJsonPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Patch) {
		toSerialize["patch"] = o.Patch
	}
	if !IsNil(o.TargetIds) {
		toSerialize["targetIds"] = o.TargetIds
	}
	return toSerialize, nil
}

type NullableBulkJsonPatch struct {
	value *BulkJsonPatch
	isSet bool
}

func (v NullableBulkJsonPatch) Get() *BulkJsonPatch {
	return v.value
}

func (v *NullableBulkJsonPatch) Set(val *BulkJsonPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkJsonPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkJsonPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkJsonPatch(val *BulkJsonPatch) *NullableBulkJsonPatch {
	return &NullableBulkJsonPatch{value: val, isSet: true}
}

func (v NullableBulkJsonPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkJsonPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
