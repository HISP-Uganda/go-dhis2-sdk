/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PropertyNamesProgramRule the model 'PropertyNamesProgramRule'
type PropertyNamesProgramRule string

// List of PropertyNames_ProgramRule
const (
	PROPERTYNAMESPROGRAMRULE_ACCESS               PropertyNamesProgramRule = "access"
	PROPERTYNAMESPROGRAMRULE_ATTRIBUTE_VALUES     PropertyNamesProgramRule = "attributeValues"
	PROPERTYNAMESPROGRAMRULE_CODE                 PropertyNamesProgramRule = "code"
	PROPERTYNAMESPROGRAMRULE_CONDITION            PropertyNamesProgramRule = "condition"
	PROPERTYNAMESPROGRAMRULE_CREATED              PropertyNamesProgramRule = "created"
	PROPERTYNAMESPROGRAMRULE_CREATED_BY           PropertyNamesProgramRule = "createdBy"
	PROPERTYNAMESPROGRAMRULE_DESCRIPTION          PropertyNamesProgramRule = "description"
	PROPERTYNAMESPROGRAMRULE_DISPLAY_NAME         PropertyNamesProgramRule = "displayName"
	PROPERTYNAMESPROGRAMRULE_EXTERNAL_ACCESS      PropertyNamesProgramRule = "externalAccess"
	PROPERTYNAMESPROGRAMRULE_FAVORITE             PropertyNamesProgramRule = "favorite"
	PROPERTYNAMESPROGRAMRULE_FAVORITES            PropertyNamesProgramRule = "favorites"
	PROPERTYNAMESPROGRAMRULE_HREF                 PropertyNamesProgramRule = "href"
	PROPERTYNAMESPROGRAMRULE_ID                   PropertyNamesProgramRule = "id"
	PROPERTYNAMESPROGRAMRULE_LAST_UPDATED         PropertyNamesProgramRule = "lastUpdated"
	PROPERTYNAMESPROGRAMRULE_LAST_UPDATED_BY      PropertyNamesProgramRule = "lastUpdatedBy"
	PROPERTYNAMESPROGRAMRULE_NAME                 PropertyNamesProgramRule = "name"
	PROPERTYNAMESPROGRAMRULE_PRIORITY             PropertyNamesProgramRule = "priority"
	PROPERTYNAMESPROGRAMRULE_PROGRAM              PropertyNamesProgramRule = "program"
	PROPERTYNAMESPROGRAMRULE_PROGRAM_RULE_ACTIONS PropertyNamesProgramRule = "programRuleActions"
	PROPERTYNAMESPROGRAMRULE_PROGRAM_STAGE        PropertyNamesProgramRule = "programStage"
	PROPERTYNAMESPROGRAMRULE_PUBLIC_ACCESS        PropertyNamesProgramRule = "publicAccess"
	PROPERTYNAMESPROGRAMRULE_SHARING              PropertyNamesProgramRule = "sharing"
	PROPERTYNAMESPROGRAMRULE_TRANSLATIONS         PropertyNamesProgramRule = "translations"
	PROPERTYNAMESPROGRAMRULE_USER                 PropertyNamesProgramRule = "user"
	PROPERTYNAMESPROGRAMRULE_USER_ACCESSES        PropertyNamesProgramRule = "userAccesses"
	PROPERTYNAMESPROGRAMRULE_USER_GROUP_ACCESSES  PropertyNamesProgramRule = "userGroupAccesses"
)

// All allowed values of PropertyNamesProgramRule enum
var AllowedPropertyNamesProgramRuleEnumValues = []PropertyNamesProgramRule{
	"access",
	"attributeValues",
	"code",
	"condition",
	"created",
	"createdBy",
	"description",
	"displayName",
	"externalAccess",
	"favorite",
	"favorites",
	"href",
	"id",
	"lastUpdated",
	"lastUpdatedBy",
	"name",
	"priority",
	"program",
	"programRuleActions",
	"programStage",
	"publicAccess",
	"sharing",
	"translations",
	"user",
	"userAccesses",
	"userGroupAccesses",
}

func (v *PropertyNamesProgramRule) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyNamesProgramRule(value)
	for _, existing := range AllowedPropertyNamesProgramRuleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyNamesProgramRule", value)
}

// NewPropertyNamesProgramRuleFromValue returns a pointer to a valid PropertyNamesProgramRule
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyNamesProgramRuleFromValue(v string) (*PropertyNamesProgramRule, error) {
	ev := PropertyNamesProgramRule(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyNamesProgramRule: valid values are %v", v, AllowedPropertyNamesProgramRuleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyNamesProgramRule) IsValid() bool {
	for _, existing := range AllowedPropertyNamesProgramRuleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyNames_ProgramRule value
func (v PropertyNamesProgramRule) Ptr() *PropertyNamesProgramRule {
	return &v
}

type NullablePropertyNamesProgramRule struct {
	value *PropertyNamesProgramRule
	isSet bool
}

func (v NullablePropertyNamesProgramRule) Get() *PropertyNamesProgramRule {
	return v.value
}

func (v *NullablePropertyNamesProgramRule) Set(val *PropertyNamesProgramRule) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyNamesProgramRule) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyNamesProgramRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyNamesProgramRule(val *PropertyNamesProgramRule) *NullablePropertyNamesProgramRule {
	return &NullablePropertyNamesProgramRule{value: val, isSet: true}
}

func (v NullablePropertyNamesProgramRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyNamesProgramRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
