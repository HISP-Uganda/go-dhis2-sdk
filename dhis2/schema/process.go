/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Process type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Process{}

// Process struct for Process
type Process struct {
	CancelledTime *time.Time `json:"cancelledTime,omitempty"`
	Complete      *bool      `json:"complete,omitempty"`
	CompletedTime *time.Time `json:"completedTime,omitempty"`
	Description   *string    `json:"description,omitempty"`
	Duration      int64      `json:"duration"`
	Error         *string    `json:"error,omitempty"`
	JobId         *string    `json:"jobId,omitempty"`
	Stages        []Stage    `json:"stages,omitempty"`
	Status        string     `json:"status"`
	Summary       *string    `json:"summary,omitempty"`
}

type _Process Process

// NewProcess instantiates a new Process object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcess(duration int64, status string) *Process {
	this := Process{}
	this.Duration = duration
	this.Status = status
	return &this
}

// NewProcessWithDefaults instantiates a new Process object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessWithDefaults() *Process {
	this := Process{}
	return &this
}

// GetCancelledTime returns the CancelledTime field value if set, zero value otherwise.
func (o *Process) GetCancelledTime() time.Time {
	if o == nil || IsNil(o.CancelledTime) {
		var ret time.Time
		return ret
	}
	return *o.CancelledTime
}

// GetCancelledTimeOk returns a tuple with the CancelledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Process) GetCancelledTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CancelledTime) {
		return nil, false
	}
	return o.CancelledTime, true
}

// HasCancelledTime returns a boolean if a field has been set.
func (o *Process) HasCancelledTime() bool {
	if o != nil && !IsNil(o.CancelledTime) {
		return true
	}

	return false
}

// SetCancelledTime gets a reference to the given time.Time and assigns it to the CancelledTime field.
func (o *Process) SetCancelledTime(v time.Time) {
	o.CancelledTime = &v
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *Process) GetComplete() bool {
	if o == nil || IsNil(o.Complete) {
		var ret bool
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Process) GetCompleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Complete) {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *Process) HasComplete() bool {
	if o != nil && !IsNil(o.Complete) {
		return true
	}

	return false
}

// SetComplete gets a reference to the given bool and assigns it to the Complete field.
func (o *Process) SetComplete(v bool) {
	o.Complete = &v
}

// GetCompletedTime returns the CompletedTime field value if set, zero value otherwise.
func (o *Process) GetCompletedTime() time.Time {
	if o == nil || IsNil(o.CompletedTime) {
		var ret time.Time
		return ret
	}
	return *o.CompletedTime
}

// GetCompletedTimeOk returns a tuple with the CompletedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Process) GetCompletedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedTime) {
		return nil, false
	}
	return o.CompletedTime, true
}

// HasCompletedTime returns a boolean if a field has been set.
func (o *Process) HasCompletedTime() bool {
	if o != nil && !IsNil(o.CompletedTime) {
		return true
	}

	return false
}

// SetCompletedTime gets a reference to the given time.Time and assigns it to the CompletedTime field.
func (o *Process) SetCompletedTime(v time.Time) {
	o.CompletedTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Process) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Process) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Process) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Process) SetDescription(v string) {
	o.Description = &v
}

// GetDuration returns the Duration field value
func (o *Process) GetDuration() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *Process) GetDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *Process) SetDuration(v int64) {
	o.Duration = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Process) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Process) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Process) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *Process) SetError(v string) {
	o.Error = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *Process) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Process) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *Process) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *Process) SetJobId(v string) {
	o.JobId = &v
}

// GetStages returns the Stages field value if set, zero value otherwise.
func (o *Process) GetStages() []Stage {
	if o == nil || IsNil(o.Stages) {
		var ret []Stage
		return ret
	}
	return o.Stages
}

// GetStagesOk returns a tuple with the Stages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Process) GetStagesOk() ([]Stage, bool) {
	if o == nil || IsNil(o.Stages) {
		return nil, false
	}
	return o.Stages, true
}

// HasStages returns a boolean if a field has been set.
func (o *Process) HasStages() bool {
	if o != nil && !IsNil(o.Stages) {
		return true
	}

	return false
}

// SetStages gets a reference to the given []Stage and assigns it to the Stages field.
func (o *Process) SetStages(v []Stage) {
	o.Stages = v
}

// GetStatus returns the Status field value
func (o *Process) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Process) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Process) SetStatus(v string) {
	o.Status = v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *Process) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Process) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *Process) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *Process) SetSummary(v string) {
	o.Summary = &v
}

func (o Process) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Process) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CancelledTime) {
		toSerialize["cancelledTime"] = o.CancelledTime
	}
	if !IsNil(o.Complete) {
		toSerialize["complete"] = o.Complete
	}
	if !IsNil(o.CompletedTime) {
		toSerialize["completedTime"] = o.CompletedTime
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["duration"] = o.Duration
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	if !IsNil(o.Stages) {
		toSerialize["stages"] = o.Stages
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	return toSerialize, nil
}

func (o *Process) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"duration",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProcess := _Process{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProcess)

	if err != nil {
		return err
	}

	*o = Process(varProcess)

	return err
}

type NullableProcess struct {
	value *Process
	isSet bool
}

func (v NullableProcess) Get() *Process {
	return v.value
}

func (v *NullableProcess) Set(val *Process) {
	v.value = val
	v.isSet = true
}

func (v NullableProcess) IsSet() bool {
	return v.isSet
}

func (v *NullableProcess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcess(val *Process) *NullableProcess {
	return &NullableProcess{value: val, isSet: true}
}

func (v NullableProcess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
