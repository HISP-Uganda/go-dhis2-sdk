/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AuditGetTrackedEnityInstanceAuditUserParameter - struct for AuditGetTrackedEnityInstanceAuditUserParameter
type AuditGetTrackedEnityInstanceAuditUserParameter struct {
	User          *User
	ArrayOfString *[]string
}

// UserAsAuditGetTrackedEnityInstanceAuditUserParameter is a convenience function that returns User wrapped in AuditGetTrackedEnityInstanceAuditUserParameter
func UserAsAuditGetTrackedEnityInstanceAuditUserParameter(v *User) AuditGetTrackedEnityInstanceAuditUserParameter {
	return AuditGetTrackedEnityInstanceAuditUserParameter{
		User: v,
	}
}

// []stringAsAuditGetTrackedEnityInstanceAuditUserParameter is a convenience function that returns []string wrapped in AuditGetTrackedEnityInstanceAuditUserParameter
func ArrayOfStringAsAuditGetTrackedEnityInstanceAuditUserParameter(v *[]string) AuditGetTrackedEnityInstanceAuditUserParameter {
	return AuditGetTrackedEnityInstanceAuditUserParameter{
		ArrayOfString: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuditGetTrackedEnityInstanceAuditUserParameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into User
	err = newStrictDecoder(data).Decode(&dst.User)
	if err == nil {
		jsonUser, _ := json.Marshal(dst.User)
		if string(jsonUser) == "{}" { // empty struct
			dst.User = nil
		} else {
			match++
		}
	} else {
		dst.User = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.User = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AuditGetTrackedEnityInstanceAuditUserParameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AuditGetTrackedEnityInstanceAuditUserParameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuditGetTrackedEnityInstanceAuditUserParameter) MarshalJSON() ([]byte, error) {
	if src.User != nil {
		return json.Marshal(&src.User)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuditGetTrackedEnityInstanceAuditUserParameter) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.User != nil {
		return obj.User
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableAuditGetTrackedEnityInstanceAuditUserParameter struct {
	value *AuditGetTrackedEnityInstanceAuditUserParameter
	isSet bool
}

func (v NullableAuditGetTrackedEnityInstanceAuditUserParameter) Get() *AuditGetTrackedEnityInstanceAuditUserParameter {
	return v.value
}

func (v *NullableAuditGetTrackedEnityInstanceAuditUserParameter) Set(val *AuditGetTrackedEnityInstanceAuditUserParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditGetTrackedEnityInstanceAuditUserParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditGetTrackedEnityInstanceAuditUserParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditGetTrackedEnityInstanceAuditUserParameter(val *AuditGetTrackedEnityInstanceAuditUserParameter) *NullableAuditGetTrackedEnityInstanceAuditUserParameter {
	return &NullableAuditGetTrackedEnityInstanceAuditUserParameter{value: val, isSet: true}
}

func (v NullableAuditGetTrackedEnityInstanceAuditUserParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditGetTrackedEnityInstanceAuditUserParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
