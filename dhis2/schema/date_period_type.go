/*
DHIS2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.42
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schema

import (
	"encoding/json"
	"fmt"
)

// DatePeriodType the model 'DatePeriodType'
type DatePeriodType string

// List of DatePeriodType
const (
	DATEPERIODTYPE_RELATIVE DatePeriodType = "RELATIVE"
	DATEPERIODTYPE_ABSOLUTE DatePeriodType = "ABSOLUTE"
)

// All allowed values of DatePeriodType enum
var AllowedDatePeriodTypeEnumValues = []DatePeriodType{
	"RELATIVE",
	"ABSOLUTE",
}

func (v *DatePeriodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatePeriodType(value)
	for _, existing := range AllowedDatePeriodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatePeriodType", value)
}

// NewDatePeriodTypeFromValue returns a pointer to a valid DatePeriodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatePeriodTypeFromValue(v string) (*DatePeriodType, error) {
	ev := DatePeriodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatePeriodType: valid values are %v", v, AllowedDatePeriodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatePeriodType) IsValid() bool {
	for _, existing := range AllowedDatePeriodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatePeriodType value
func (v DatePeriodType) Ptr() *DatePeriodType {
	return &v
}

type NullableDatePeriodType struct {
	value *DatePeriodType
	isSet bool
}

func (v NullableDatePeriodType) Get() *DatePeriodType {
	return v.value
}

func (v *NullableDatePeriodType) Set(val *DatePeriodType) {
	v.value = val
	v.isSet = true
}

func (v NullableDatePeriodType) IsSet() bool {
	return v.isSet
}

func (v *NullableDatePeriodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatePeriodType(val *DatePeriodType) *NullableDatePeriodType {
	return &NullableDatePeriodType{value: val, isSet: true}
}

func (v NullableDatePeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatePeriodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
